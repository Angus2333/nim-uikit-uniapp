if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue) {
  "use strict";
  function initRuntimeSocket(hosts, port, id) {
    if (hosts == "" || port == "" || id == "")
      return Promise.resolve(null);
    return hosts.split(",").reduce((promise, host) => {
      return promise.then((socket) => {
        if (socket != null)
          return Promise.resolve(socket);
        return tryConnectSocket(host, port, id);
      });
    }, Promise.resolve(null));
  }
  const SOCKET_TIMEOUT = 500;
  function tryConnectSocket(host, port, id) {
    return new Promise((resolve, reject) => {
      const socket = uni.connectSocket({
        url: `ws://${host}:${port}/${id}`,
        multiple: true,
        // 支付宝小程序 是否开启多实例
        fail() {
          resolve(null);
        }
      });
      const timer = setTimeout(() => {
        socket.close({
          code: 1006,
          reason: "connect timeout"
        });
        resolve(null);
      }, SOCKET_TIMEOUT);
      socket.onOpen((e2) => {
        clearTimeout(timer);
        resolve(socket);
      });
      socket.onClose((e2) => {
        clearTimeout(timer);
        resolve(null);
      });
      socket.onError((e2) => {
        clearTimeout(timer);
        resolve(null);
      });
    });
  }
  function formatMessage(type, args) {
    try {
      return {
        type,
        args: formatArgs(args)
      };
    } catch (e2) {
    }
    return {
      type,
      args: []
    };
  }
  function formatArgs(args) {
    return args.map((arg) => formatArg(arg));
  }
  function formatArg(arg, depth = 0) {
    if (depth >= 7) {
      return {
        type: "object",
        value: "[Maximum depth reached]"
      };
    }
    const type = typeof arg;
    switch (type) {
      case "string":
        return formatString(arg);
      case "number":
        return formatNumber(arg);
      case "boolean":
        return formatBoolean(arg);
      case "object":
        return formatObject(arg, depth);
      case "undefined":
        return formatUndefined();
      case "function":
        return formatFunction(arg);
      case "symbol": {
        return formatSymbol(arg);
      }
      case "bigint":
        return formatBigInt(arg);
    }
  }
  function formatFunction(value) {
    return {
      type: "function",
      value: `function ${value.name}() {}`
    };
  }
  function formatUndefined() {
    return {
      type: "undefined"
    };
  }
  function formatBoolean(value) {
    return {
      type: "boolean",
      value: String(value)
    };
  }
  function formatNumber(value) {
    return {
      type: "number",
      value: String(value)
    };
  }
  function formatBigInt(value) {
    return {
      type: "bigint",
      value: String(value)
    };
  }
  function formatString(value) {
    return {
      type: "string",
      value
    };
  }
  function formatSymbol(value) {
    return {
      type: "symbol",
      value: value.description
    };
  }
  function formatObject(value, depth) {
    if (value === null) {
      return {
        type: "null"
      };
    }
    {
      if (isComponentPublicInstance(value)) {
        return formatComponentPublicInstance(value, depth);
      }
      if (isComponentInternalInstance(value)) {
        return formatComponentInternalInstance(value, depth);
      }
      if (isUniElement(value)) {
        return formatUniElement(value, depth);
      }
      if (isCSSStyleDeclaration(value)) {
        return formatCSSStyleDeclaration(value, depth);
      }
    }
    if (Array.isArray(value)) {
      return {
        type: "object",
        subType: "array",
        value: {
          properties: value.map((v2, i2) => formatArrayElement(v2, i2, depth + 1))
        }
      };
    }
    if (value instanceof Set) {
      return {
        type: "object",
        subType: "set",
        className: "Set",
        description: `Set(${value.size})`,
        value: {
          entries: Array.from(value).map((v2) => formatSetEntry(v2, depth + 1))
        }
      };
    }
    if (value instanceof Map) {
      return {
        type: "object",
        subType: "map",
        className: "Map",
        description: `Map(${value.size})`,
        value: {
          entries: Array.from(value.entries()).map((v2) => formatMapEntry(v2, depth + 1))
        }
      };
    }
    if (value instanceof Promise) {
      return {
        type: "object",
        subType: "promise",
        value: {
          properties: []
        }
      };
    }
    if (value instanceof RegExp) {
      return {
        type: "object",
        subType: "regexp",
        value: String(value),
        className: "Regexp"
      };
    }
    if (value instanceof Date) {
      return {
        type: "object",
        subType: "date",
        value: String(value),
        className: "Date"
      };
    }
    if (value instanceof Error) {
      return {
        type: "object",
        subType: "error",
        value: value.message || String(value),
        className: value.name || "Error"
      };
    }
    let className = void 0;
    {
      const constructor = value.constructor;
      if (constructor) {
        if (constructor.get$UTSMetadata$) {
          className = constructor.get$UTSMetadata$().name;
        }
      }
    }
    return {
      type: "object",
      className,
      value: {
        properties: Object.entries(value).map((entry) => formatObjectProperty(entry[0], entry[1], depth + 1))
      }
    };
  }
  function isComponentPublicInstance(value) {
    return value.$ && isComponentInternalInstance(value.$);
  }
  function isComponentInternalInstance(value) {
    return value.type && value.uid != null && value.appContext;
  }
  function formatComponentPublicInstance(value, depth) {
    return {
      type: "object",
      className: "ComponentPublicInstance",
      value: {
        properties: Object.entries(value.$.type).map(([name2, value2]) => formatObjectProperty(name2, value2, depth + 1))
      }
    };
  }
  function formatComponentInternalInstance(value, depth) {
    return {
      type: "object",
      className: "ComponentInternalInstance",
      value: {
        properties: Object.entries(value.type).map(([name2, value2]) => formatObjectProperty(name2, value2, depth + 1))
      }
    };
  }
  function isUniElement(value) {
    return value.style && value.tagName != null && value.nodeName != null;
  }
  function formatUniElement(value, depth) {
    return {
      type: "object",
      // 非 x 没有 UniElement 的概念
      // className: 'UniElement',
      value: {
        properties: Object.entries(value).filter(([name2]) => [
          "id",
          "tagName",
          "nodeName",
          "dataset",
          "offsetTop",
          "offsetLeft",
          "style"
        ].includes(name2)).map(([name2, value2]) => formatObjectProperty(name2, value2, depth + 1))
      }
    };
  }
  function isCSSStyleDeclaration(value) {
    return typeof value.getPropertyValue === "function" && typeof value.setProperty === "function" && value.$styles;
  }
  function formatCSSStyleDeclaration(style, depth) {
    return {
      type: "object",
      value: {
        properties: Object.entries(style.$styles).map(([name2, value]) => formatObjectProperty(name2, value, depth + 1))
      }
    };
  }
  function formatObjectProperty(name2, value, depth) {
    const result = formatArg(value, depth);
    result.name = name2;
    return result;
  }
  function formatArrayElement(value, index, depth) {
    const result = formatArg(value, depth);
    result.name = `${index}`;
    return result;
  }
  function formatSetEntry(value, depth) {
    return {
      value: formatArg(value, depth)
    };
  }
  function formatMapEntry(value, depth) {
    return {
      key: formatArg(value[0], depth),
      value: formatArg(value[1], depth)
    };
  }
  const CONSOLE_TYPES = ["log", "warn", "error", "info", "debug"];
  let sendConsole = null;
  const messageQueue = [];
  const messageExtra = {};
  function sendConsoleMessages(messages) {
    if (sendConsole == null) {
      messageQueue.push(...messages);
      return;
    }
    sendConsole(JSON.stringify(Object.assign({
      type: "console",
      data: messages
    }, messageExtra)));
  }
  function setSendConsole(value, extra = {}) {
    sendConsole = value;
    Object.assign(messageExtra, extra);
    if (value != null && messageQueue.length > 0) {
      const messages = messageQueue.slice();
      messageQueue.length = 0;
      sendConsoleMessages(messages);
    }
  }
  const originalConsole = /* @__PURE__ */ CONSOLE_TYPES.reduce((methods, type) => {
    methods[type] = console[type].bind(console);
    return methods;
  }, {});
  function rewriteConsole() {
    function wrapConsole(type) {
      return function(...args) {
        [...args];
        sendConsoleMessages([formatMessage(type, args)]);
      };
    }
    if (isConsoleWritable()) {
      CONSOLE_TYPES.forEach((type) => {
        console[type] = wrapConsole(type);
      });
      return function restoreConsole() {
        CONSOLE_TYPES.forEach((type) => {
          console[type] = originalConsole[type];
        });
      };
    } else {
      {
        if (typeof uni !== "undefined" && uni.__f__) {
          const oldLog = uni.__f__;
          if (oldLog) {
            uni.__f__ = function(...args) {
              const [type, filename, ...rest] = args;
              oldLog(type, "", ...rest);
              sendConsoleMessages([formatMessage(type, [...rest, filename])]);
            };
            return function restoreConsole() {
              uni.__f__ = oldLog;
            };
          }
        }
      }
    }
    return function restoreConsole() {
    };
  }
  function isConsoleWritable() {
    const value = console.log;
    const sym = Symbol();
    try {
      console.log = sym;
    } catch (ex) {
      return false;
    }
    const isWritable = console.log === sym;
    console.log = value;
    return isWritable;
  }
  let sendError = null;
  const errorQueue = /* @__PURE__ */ new Set();
  const errorExtra = {};
  function sendErrorMessages(errors2) {
    if (sendError == null) {
      errors2.forEach((error) => {
        errorQueue.add(error);
      });
      return;
    }
    const data2 = errors2.map((err) => {
      const isPromiseRejection = err && "promise" in err && "reason" in err;
      const prefix = isPromiseRejection ? "UnhandledPromiseRejection: " : "";
      if (isPromiseRejection) {
        err = err.reason;
      }
      if (err instanceof Error && err.stack) {
        if (err.message && !err.stack.includes(err.message)) {
          return `${prefix}${err.message}
${err.stack}`;
        }
        return `${prefix}${err.stack}`;
      }
      if (typeof err === "object" && err !== null) {
        try {
          return prefix + JSON.stringify(err);
        } catch (err2) {
          return prefix + String(err2);
        }
      }
      return prefix + String(err);
    }).filter(Boolean);
    if (data2.length > 0) {
      sendError(JSON.stringify(Object.assign({
        type: "error",
        data: data2
      }, errorExtra)));
    }
  }
  function setSendError(value, extra = {}) {
    sendError = value;
    Object.assign(errorExtra, extra);
    if (value != null && errorQueue.size > 0) {
      const errors2 = Array.from(errorQueue);
      errorQueue.clear();
      sendErrorMessages(errors2);
    }
  }
  function initOnError() {
    function onError(error) {
      try {
        if (typeof PromiseRejectionEvent !== "undefined" && error instanceof PromiseRejectionEvent && error.reason instanceof Error && error.reason.message && error.reason.message.includes(`Cannot create property 'errMsg' on string 'taskId`)) {
          return;
        }
        if (false)
          ;
        sendErrorMessages([error]);
      } catch (err) {
        originalConsole.error(err);
      }
    }
    if (typeof uni.onError === "function") {
      uni.onError(onError);
    }
    if (typeof uni.onUnhandledRejection === "function") {
      uni.onUnhandledRejection(onError);
    }
    return function offError() {
      if (typeof uni.offError === "function") {
        uni.offError(onError);
      }
      if (typeof uni.offUnhandledRejection === "function") {
        uni.offUnhandledRejection(onError);
      }
    };
  }
  function initRuntimeSocketService() {
    const hosts = "127.0.0.1,10.242.0.162,169.254.177.54";
    const port = "8090";
    const id = "app-harmony_A-t-af";
    const lazy = typeof swan !== "undefined";
    let restoreError = lazy ? () => {
    } : initOnError();
    let restoreConsole = lazy ? () => {
    } : rewriteConsole();
    return Promise.resolve().then(() => {
      if (lazy) {
        restoreError = initOnError();
        restoreConsole = rewriteConsole();
      }
      return initRuntimeSocket(hosts, port, id).then((socket) => {
        if (!socket) {
          restoreError();
          restoreConsole();
          originalConsole.error(wrapError("开发模式下日志通道建立 socket 连接失败。"));
          originalConsole.error(wrapError("如果是小程序平台，请勾选不校验合法域名配置。"));
          originalConsole.error(wrapError("如果是运行到真机，请确认手机与电脑处于同一网络。"));
          return false;
        }
        initMiniProgramGlobalFlag();
        socket.onClose(() => {
          originalConsole.error(wrapError("开发模式下日志通道 socket 连接关闭，请在 HBuilderX 中重新运行。"));
          restoreError();
          restoreConsole();
        });
        setSendConsole((data2) => {
          socket.send({
            data: data2
          });
        });
        setSendError((data2) => {
          socket.send({
            data: data2
          });
        });
        return true;
      });
    });
  }
  const ERROR_CHAR = "‌";
  function wrapError(error) {
    return `${ERROR_CHAR}${error}${ERROR_CHAR}`;
  }
  function initMiniProgramGlobalFlag() {
    if (typeof wx !== "undefined") {
      wx.__uni_console__ = true;
    } else if (typeof my !== "undefined") {
      my.__uni_console__ = true;
    } else if (typeof tt !== "undefined") {
      tt.__uni_console__ = true;
    } else if (typeof swan !== "undefined") {
      swan.__uni_console__ = true;
    } else if (typeof qq !== "undefined") {
      qq.__uni_console__ = true;
    } else if (typeof ks !== "undefined") {
      ks.__uni_console__ = true;
    } else if (typeof jd !== "undefined") {
      jd.__uni_console__ = true;
    } else if (typeof xhs !== "undefined") {
      xhs.__uni_console__ = true;
    } else if (typeof has !== "undefined") {
      has.__uni_console__ = true;
    } else if (typeof qa !== "undefined") {
      qa.__uni_console__ = true;
    }
  }
  initRuntimeSocketService();
  const ON_SHOW = "onShow";
  const ON_HIDE = "onHide";
  const ON_LOAD = "onLoad";
  const ON_READY = "onReady";
  const ON_UNLOAD = "onUnload";
  const ON_RESIZE = "onResize";
  function requireNativePlugin(name2) {
    return weex.requireModule(name2);
  }
  function formatAppLog(type, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type, filename, ...args);
    } else {
      console[type].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component, easycom) {
    return typeof component === "string" ? easycom : component;
  }
  const createHook = (lifecycle) => (hook, target = vue.getCurrentInstance()) => {
    !vue.isInSSRComponentSetup && vue.injectHook(lifecycle, hook, target);
  };
  const onShow = /* @__PURE__ */ createHook(ON_SHOW);
  const onHide = /* @__PURE__ */ createHook(ON_HIDE);
  const onLoad = /* @__PURE__ */ createHook(ON_LOAD);
  const onReady = /* @__PURE__ */ createHook(ON_READY);
  const onUnload = /* @__PURE__ */ createHook(ON_UNLOAD);
  const onResize = /* @__PURE__ */ createHook(ON_RESIZE);
  let vueVersion;
  vueVersion = 3;
  formatAppLog("log", "at utils/transformVue.ts:11", `vue version is ${vueVersion}`);
  var niceErrors = {
    0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
    1: function _2(annotationType, key) {
      return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
    },
    /*
    2(prop) {
        return `invalid decorator for '${prop.toString()}'`
    },
    3(prop) {
        return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`
    },
    4(prop) {
        return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`
    },
    */
    5: "'keys()' can only be used on observable objects, arrays, sets and maps",
    6: "'values()' can only be used on observable objects, arrays, sets and maps",
    7: "'entries()' can only be used on observable objects, arrays and maps",
    8: "'set()' can only be used on observable objects, arrays and maps",
    9: "'remove()' can only be used on observable objects, arrays and maps",
    10: "'has()' can only be used on observable objects, arrays and maps",
    11: "'get()' can only be used on observable objects, arrays and maps",
    12: "Invalid annotation",
    13: "Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
    14: "Intercept handlers should return nothing or a change object",
    15: "Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
    16: "Modification exception: the internal structure of an observable array was changed.",
    17: function _2(index, length) {
      return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
    },
    18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
    19: function _3(other) {
      return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
    },
    20: function _4(other) {
      return "Cannot initialize map from " + other;
    },
    21: function _5(dataStructure) {
      return "Cannot convert to map from '" + dataStructure + "'";
    },
    22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
    23: "It is not possible to get index atoms from arrays",
    24: function _6(thing) {
      return "Cannot obtain administration from " + thing;
    },
    25: function _7(property, name2) {
      return "the entry '" + property + "' does not exist in the observable map '" + name2 + "'";
    },
    26: "please specify a property",
    27: function _8(property, name2) {
      return "no observable property '" + property.toString() + "' found on the observable object '" + name2 + "'";
    },
    28: function _9(thing) {
      return "Cannot obtain atom from " + thing;
    },
    29: "Expecting some object",
    30: "invalid action stack. did you forget to finish an action?",
    31: "missing option for computed: get",
    32: function _10(name2, derivation) {
      return "Cycle detected in computation " + name2 + ": " + derivation;
    },
    33: function _11(name2) {
      return "The setter of computed value '" + name2 + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
    },
    34: function _12(name2) {
      return "[ComputedValue '" + name2 + "'] It is not possible to assign a new value to a computed value.";
    },
    35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
    36: "isolateGlobalState should be called before MobX is running any reactions",
    37: function _13(method) {
      return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
    },
    38: "'ownKeys()' can only be used on observable objects",
    39: "'defineProperty()' can only be used on observable objects"
  };
  var errors = niceErrors;
  function die(error) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    {
      var e2 = typeof error === "string" ? error : errors[error];
      if (typeof e2 === "function")
        e2 = e2.apply(null, args);
      throw new Error("[MobX] " + e2);
    }
  }
  var mockGlobal = {};
  function getGlobal() {
    if (typeof globalThis !== "undefined") {
      return globalThis;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    if (typeof self !== "undefined") {
      return self;
    }
    return mockGlobal;
  }
  var assign = Object.assign;
  var getDescriptor = Object.getOwnPropertyDescriptor;
  var defineProperty = Object.defineProperty;
  var objectPrototype = Object.prototype;
  var EMPTY_ARRAY = [];
  Object.freeze(EMPTY_ARRAY);
  var EMPTY_OBJECT = {};
  Object.freeze(EMPTY_OBJECT);
  var hasProxy = typeof Proxy !== "undefined";
  var plainObjectString = /* @__PURE__ */ Object.toString();
  function assertProxies() {
    if (!hasProxy) {
      die("`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`");
    }
  }
  function warnAboutProxyRequirement(msg) {
    if (globalState.verifyProxies) {
      die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
    }
  }
  function getNextId() {
    return ++globalState.mobxGuid;
  }
  function once(func) {
    var invoked = false;
    return function() {
      if (invoked) {
        return;
      }
      invoked = true;
      return func.apply(this, arguments);
    };
  }
  var noop = function noop2() {
  };
  function isFunction$1(fn2) {
    return typeof fn2 === "function";
  }
  function isStringish(value) {
    var t2 = typeof value;
    switch (t2) {
      case "string":
      case "symbol":
      case "number":
        return true;
    }
    return false;
  }
  function isObject$1(value) {
    return value !== null && typeof value === "object";
  }
  function isPlainObject$2(value) {
    if (!isObject$1(value)) {
      return false;
    }
    var proto = Object.getPrototypeOf(value);
    if (proto == null) {
      return true;
    }
    var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
  }
  function isGenerator(obj) {
    var constructor = obj == null ? void 0 : obj.constructor;
    if (!constructor) {
      return false;
    }
    if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {
      return true;
    }
    return false;
  }
  function addHiddenProp(object2, propName, value) {
    defineProperty(object2, propName, {
      enumerable: false,
      writable: true,
      configurable: true,
      value
    });
  }
  function addHiddenFinalProp(object2, propName, value) {
    defineProperty(object2, propName, {
      enumerable: false,
      writable: false,
      configurable: true,
      value
    });
  }
  function createInstanceofPredicate(name2, theClass) {
    var propName = "isMobX" + name2;
    theClass.prototype[propName] = true;
    return function(x2) {
      return isObject$1(x2) && x2[propName] === true;
    };
  }
  function isES6Map(thing) {
    return thing != null && Object.prototype.toString.call(thing) === "[object Map]";
  }
  function isPlainES6Map(thing) {
    var mapProto = Object.getPrototypeOf(thing);
    var objectProto = Object.getPrototypeOf(mapProto);
    var nullProto = Object.getPrototypeOf(objectProto);
    return nullProto === null;
  }
  function isES6Set(thing) {
    return thing != null && Object.prototype.toString.call(thing) === "[object Set]";
  }
  var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
  function getPlainObjectKeys(object2) {
    var keys2 = Object.keys(object2);
    if (!hasGetOwnPropertySymbols) {
      return keys2;
    }
    var symbols = Object.getOwnPropertySymbols(object2);
    if (!symbols.length) {
      return keys2;
    }
    return [].concat(keys2, symbols.filter(function(s2) {
      return objectPrototype.propertyIsEnumerable.call(object2, s2);
    }));
  }
  var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function(obj) {
    return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
  } : (
    /* istanbul ignore next */
    Object.getOwnPropertyNames
  );
  function stringifyKey(key) {
    if (typeof key === "string") {
      return key;
    }
    if (typeof key === "symbol") {
      return key.toString();
    }
    return new String(key).toString();
  }
  function toPrimitive(value) {
    return value === null ? null : typeof value === "object" ? "" + value : value;
  }
  function hasProp(target, prop) {
    return objectPrototype.hasOwnProperty.call(target, prop);
  }
  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(target) {
    var res = {};
    ownKeys(target).forEach(function(key) {
      res[key] = getDescriptor(target, key);
    });
    return res;
  };
  function getFlag(flags, mask) {
    return !!(flags & mask);
  }
  function setFlag(flags, mask, newValue) {
    if (newValue) {
      flags |= mask;
    } else {
      flags &= ~mask;
    }
    return flags;
  }
  function _arrayLikeToArray(r2, a2) {
    (null == a2 || a2 > r2.length) && (a2 = r2.length);
    for (var e2 = 0, n2 = Array(a2); e2 < a2; e2++)
      n2[e2] = r2[e2];
    return n2;
  }
  function _defineProperties(e2, r2) {
    for (var t2 = 0; t2 < r2.length; t2++) {
      var o2 = r2[t2];
      o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, _toPropertyKey(o2.key), o2);
    }
  }
  function _createClass(e2, r2, t2) {
    return r2 && _defineProperties(e2.prototype, r2), t2 && _defineProperties(e2, t2), Object.defineProperty(e2, "prototype", {
      writable: false
    }), e2;
  }
  function _createForOfIteratorHelperLoose(r2, e2) {
    var t2 = "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
    if (t2)
      return (t2 = t2.call(r2)).next.bind(t2);
    if (Array.isArray(r2) || (t2 = _unsupportedIterableToArray(r2)) || e2 && r2 && "number" == typeof r2.length) {
      t2 && (r2 = t2);
      var o2 = 0;
      return function() {
        return o2 >= r2.length ? {
          done: true
        } : {
          done: false,
          value: r2[o2++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n2) {
      for (var e2 = 1; e2 < arguments.length; e2++) {
        var t2 = arguments[e2];
        for (var r2 in t2)
          ({}).hasOwnProperty.call(t2, r2) && (n2[r2] = t2[r2]);
      }
      return n2;
    }, _extends.apply(null, arguments);
  }
  function _inheritsLoose(t2, o2) {
    t2.prototype = Object.create(o2.prototype), t2.prototype.constructor = t2, _setPrototypeOf(t2, o2);
  }
  function _setPrototypeOf(t2, e2) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t22, e22) {
      return t22.__proto__ = e22, t22;
    }, _setPrototypeOf(t2, e2);
  }
  function _toPrimitive(t2, r2) {
    if ("object" != typeof t2 || !t2)
      return t2;
    var e2 = t2[Symbol.toPrimitive];
    if (void 0 !== e2) {
      var i2 = e2.call(t2, r2 || "default");
      if ("object" != typeof i2)
        return i2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t2);
  }
  function _toPropertyKey(t2) {
    var i2 = _toPrimitive(t2, "string");
    return "symbol" == typeof i2 ? i2 : i2 + "";
  }
  function _unsupportedIterableToArray(r2, a2) {
    if (r2) {
      if ("string" == typeof r2)
        return _arrayLikeToArray(r2, a2);
      var t2 = {}.toString.call(r2).slice(8, -1);
      return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray(r2, a2) : void 0;
    }
  }
  var storedAnnotationsSymbol = /* @__PURE__ */ Symbol("mobx-stored-annotations");
  function createDecoratorAnnotation(annotation) {
    function decorator(target, property) {
      if (is20223Decorator(property)) {
        return annotation.decorate_20223_(target, property);
      } else {
        storeAnnotation(target, property, annotation);
      }
    }
    return Object.assign(decorator, annotation);
  }
  function storeAnnotation(prototype2, key, annotation) {
    if (!hasProp(prototype2, storedAnnotationsSymbol)) {
      addHiddenProp(prototype2, storedAnnotationsSymbol, _extends({}, prototype2[storedAnnotationsSymbol]));
    }
    if (isOverride(annotation) && !hasProp(prototype2[storedAnnotationsSymbol], key)) {
      var fieldName = prototype2.constructor.name + ".prototype." + key.toString();
      die("'" + fieldName + "' is decorated with 'override', but no such decorated member was found on prototype.");
    }
    assertNotDecorated(prototype2, annotation, key);
    if (!isOverride(annotation)) {
      prototype2[storedAnnotationsSymbol][key] = annotation;
    }
  }
  function assertNotDecorated(prototype2, annotation, key) {
    if (!isOverride(annotation) && hasProp(prototype2[storedAnnotationsSymbol], key)) {
      var fieldName = prototype2.constructor.name + ".prototype." + key.toString();
      var currentAnnotationType = prototype2[storedAnnotationsSymbol][key].annotationType_;
      var requestedAnnotationType = annotation.annotationType_;
      die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed.\nUse '@override' decorator for methods overridden by subclass.");
    }
  }
  function is20223Decorator(context) {
    return typeof context == "object" && typeof context["kind"] == "string";
  }
  function assert20223DecoratorType(context, types2) {
    if (!types2.includes(context.kind)) {
      die("The decorator applied to '" + String(context.name) + "' cannot be used on a " + context.kind + " element");
    }
  }
  var $mobx = /* @__PURE__ */ Symbol("mobx administration");
  var Atom = /* @__PURE__ */ function() {
    function Atom2(name_) {
      if (name_ === void 0) {
        name_ = "Atom@" + getNextId();
      }
      this.name_ = void 0;
      this.flags_ = 0;
      this.observers_ = /* @__PURE__ */ new Set();
      this.lastAccessedBy_ = 0;
      this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
      this.onBOL = void 0;
      this.onBUOL = void 0;
      this.name_ = name_;
    }
    var _proto = Atom2.prototype;
    _proto.onBO = function onBO() {
      if (this.onBOL) {
        this.onBOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.onBUO = function onBUO() {
      if (this.onBUOL) {
        this.onBUOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.reportObserved = function reportObserved$1() {
      return reportObserved(this);
    };
    _proto.reportChanged = function reportChanged() {
      startBatch();
      propagateChanged(this);
      endBatch();
    };
    _proto.toString = function toString2() {
      return this.name_;
    };
    return _createClass(Atom2, [{
      key: "isBeingObserved",
      get: function get4() {
        return getFlag(this.flags_, Atom2.isBeingObservedMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Atom2.isBeingObservedMask_, newValue);
      }
    }, {
      key: "isPendingUnobservation",
      get: function get4() {
        return getFlag(this.flags_, Atom2.isPendingUnobservationMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Atom2.isPendingUnobservationMask_, newValue);
      }
    }, {
      key: "diffValue",
      get: function get4() {
        return getFlag(this.flags_, Atom2.diffValueMask_) ? 1 : 0;
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Atom2.diffValueMask_, newValue === 1 ? true : false);
      }
    }]);
  }();
  Atom.isBeingObservedMask_ = 1;
  Atom.isPendingUnobservationMask_ = 2;
  Atom.diffValueMask_ = 4;
  var isAtom = /* @__PURE__ */ createInstanceofPredicate("Atom", Atom);
  function createAtom(name2, onBecomeObservedHandler, onBecomeUnobservedHandler) {
    if (onBecomeObservedHandler === void 0) {
      onBecomeObservedHandler = noop;
    }
    if (onBecomeUnobservedHandler === void 0) {
      onBecomeUnobservedHandler = noop;
    }
    var atom = new Atom(name2);
    if (onBecomeObservedHandler !== noop) {
      onBecomeObserved(atom, onBecomeObservedHandler);
    }
    if (onBecomeUnobservedHandler !== noop) {
      onBecomeUnobserved(atom, onBecomeUnobservedHandler);
    }
    return atom;
  }
  function identityComparer(a2, b2) {
    return a2 === b2;
  }
  function structuralComparer(a2, b2) {
    return deepEqual(a2, b2);
  }
  function shallowComparer(a2, b2) {
    return deepEqual(a2, b2, 1);
  }
  function defaultComparer(a2, b2) {
    if (Object.is) {
      return Object.is(a2, b2);
    }
    return a2 === b2 ? a2 !== 0 || 1 / a2 === 1 / b2 : a2 !== a2 && b2 !== b2;
  }
  var comparer = {
    identity: identityComparer,
    structural: structuralComparer,
    "default": defaultComparer,
    shallow: shallowComparer
  };
  function deepEnhancer(v2, _14, name2) {
    if (isObservable(v2)) {
      return v2;
    }
    if (Array.isArray(v2)) {
      return observable.array(v2, {
        name: name2
      });
    }
    if (isPlainObject$2(v2)) {
      return observable.object(v2, void 0, {
        name: name2
      });
    }
    if (isES6Map(v2)) {
      return observable.map(v2, {
        name: name2
      });
    }
    if (isES6Set(v2)) {
      return observable.set(v2, {
        name: name2
      });
    }
    if (typeof v2 === "function" && !isAction(v2) && !isFlow(v2)) {
      if (isGenerator(v2)) {
        return flow(v2);
      } else {
        return autoAction(name2, v2);
      }
    }
    return v2;
  }
  function shallowEnhancer(v2, _14, name2) {
    if (v2 === void 0 || v2 === null) {
      return v2;
    }
    if (isObservableObject(v2) || isObservableArray(v2) || isObservableMap(v2) || isObservableSet(v2)) {
      return v2;
    }
    if (Array.isArray(v2)) {
      return observable.array(v2, {
        name: name2,
        deep: false
      });
    }
    if (isPlainObject$2(v2)) {
      return observable.object(v2, void 0, {
        name: name2,
        deep: false
      });
    }
    if (isES6Map(v2)) {
      return observable.map(v2, {
        name: name2,
        deep: false
      });
    }
    if (isES6Set(v2)) {
      return observable.set(v2, {
        name: name2,
        deep: false
      });
    }
    {
      die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
    }
  }
  function referenceEnhancer(newValue) {
    return newValue;
  }
  function refStructEnhancer(v2, oldValue) {
    if (isObservable(v2)) {
      die("observable.struct should not be used with observable values");
    }
    if (deepEqual(v2, oldValue)) {
      return oldValue;
    }
    return v2;
  }
  var OVERRIDE = "override";
  function isOverride(annotation) {
    return annotation.annotationType_ === OVERRIDE;
  }
  function createActionAnnotation(name2, options) {
    return {
      annotationType_: name2,
      options_: options,
      make_: make_$1,
      extend_: extend_$1,
      decorate_20223_: decorate_20223_$1
    };
  }
  function make_$1(adm, key, descriptor, source) {
    var _this$options_;
    if ((_this$options_ = this.options_) != null && _this$options_.bound) {
      return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
    }
    if (source === adm.target_) {
      return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
    }
    if (isAction(descriptor.value)) {
      return 1;
    }
    var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
    defineProperty(source, key, actionDescriptor);
    return 2;
  }
  function extend_$1(adm, key, descriptor, proxyTrap) {
    var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
    return adm.defineProperty_(key, actionDescriptor, proxyTrap);
  }
  function decorate_20223_$1(mthd, context) {
    {
      assert20223DecoratorType(context, ["method", "field"]);
    }
    var kind = context.kind, name2 = context.name, addInitializer = context.addInitializer;
    var ann = this;
    var _createAction = function _createAction2(m2) {
      var _ann$options_$name, _ann$options_, _ann$options_$autoAct, _ann$options_2;
      return createAction((_ann$options_$name = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.name) != null ? _ann$options_$name : name2.toString(), m2, (_ann$options_$autoAct = (_ann$options_2 = ann.options_) == null ? void 0 : _ann$options_2.autoAction) != null ? _ann$options_$autoAct : false);
    };
    if (kind == "field") {
      return function(initMthd) {
        var _ann$options_3;
        var mthd2 = initMthd;
        if (!isAction(mthd2)) {
          mthd2 = _createAction(mthd2);
        }
        if ((_ann$options_3 = ann.options_) != null && _ann$options_3.bound) {
          mthd2 = mthd2.bind(this);
          mthd2.isMobxAction = true;
        }
        return mthd2;
      };
    }
    if (kind == "method") {
      var _this$options_2;
      if (!isAction(mthd)) {
        mthd = _createAction(mthd);
      }
      if ((_this$options_2 = this.options_) != null && _this$options_2.bound) {
        addInitializer(function() {
          var self2 = this;
          var bound = self2[name2].bind(self2);
          bound.isMobxAction = true;
          self2[name2] = bound;
        });
      }
      return mthd;
    }
    die("Cannot apply '" + ann.annotationType_ + "' to '" + String(name2) + "' (kind: " + kind + "):" + ("\n'" + ann.annotationType_ + "' can only be used on properties with a function value."));
  }
  function assertActionDescriptor(adm, _ref, key, _ref2) {
    var annotationType_ = _ref.annotationType_;
    var value = _ref2.value;
    if (!isFunction$1(value)) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
    }
  }
  function createActionDescriptor(adm, annotation, key, descriptor, safeDescriptors) {
    var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;
    if (safeDescriptors === void 0) {
      safeDescriptors = globalState.safeDescriptors;
    }
    assertActionDescriptor(adm, annotation, key, descriptor);
    var value = descriptor.value;
    if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
      var _adm$proxy_;
      value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    }
    return {
      value: createAction(
        (_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(),
        value,
        (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false,
        // https://github.com/mobxjs/mobx/discussions/3140
        (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : void 0
      ),
      // Non-configurable for classes
      // prevents accidental field redefinition in subclass
      configurable: safeDescriptors ? adm.isPlainObject_ : true,
      // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
      enumerable: false,
      // Non-obsevable, therefore non-writable
      // Also prevents rewriting in subclass constructor
      writable: safeDescriptors ? false : true
    };
  }
  function createFlowAnnotation(name2, options) {
    return {
      annotationType_: name2,
      options_: options,
      make_: make_$2,
      extend_: extend_$2,
      decorate_20223_: decorate_20223_$2
    };
  }
  function make_$2(adm, key, descriptor, source) {
    var _this$options_;
    if (source === adm.target_) {
      return this.extend_(adm, key, descriptor, false) === null ? 0 : 2;
    }
    if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
      if (this.extend_(adm, key, descriptor, false) === null) {
        return 0;
      }
    }
    if (isFlow(descriptor.value)) {
      return 1;
    }
    var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
    defineProperty(source, key, flowDescriptor);
    return 2;
  }
  function extend_$2(adm, key, descriptor, proxyTrap) {
    var _this$options_2;
    var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
    return adm.defineProperty_(key, flowDescriptor, proxyTrap);
  }
  function decorate_20223_$2(mthd, context) {
    var _this$options_3;
    {
      assert20223DecoratorType(context, ["method"]);
    }
    var name2 = context.name, addInitializer = context.addInitializer;
    if (!isFlow(mthd)) {
      mthd = flow(mthd);
    }
    if ((_this$options_3 = this.options_) != null && _this$options_3.bound) {
      addInitializer(function() {
        var self2 = this;
        var bound = self2[name2].bind(self2);
        bound.isMobXFlow = true;
        self2[name2] = bound;
      });
    }
    return mthd;
  }
  function assertFlowDescriptor(adm, _ref, key, _ref2) {
    var annotationType_ = _ref.annotationType_;
    var value = _ref2.value;
    if (!isFunction$1(value)) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
    }
  }
  function createFlowDescriptor(adm, annotation, key, descriptor, bound, safeDescriptors) {
    if (safeDescriptors === void 0) {
      safeDescriptors = globalState.safeDescriptors;
    }
    assertFlowDescriptor(adm, annotation, key, descriptor);
    var value = descriptor.value;
    if (!isFlow(value)) {
      value = flow(value);
    }
    if (bound) {
      var _adm$proxy_;
      value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
      value.isMobXFlow = true;
    }
    return {
      value,
      // Non-configurable for classes
      // prevents accidental field redefinition in subclass
      configurable: safeDescriptors ? adm.isPlainObject_ : true,
      // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
      enumerable: false,
      // Non-obsevable, therefore non-writable
      // Also prevents rewriting in subclass constructor
      writable: safeDescriptors ? false : true
    };
  }
  function createComputedAnnotation(name2, options) {
    return {
      annotationType_: name2,
      options_: options,
      make_: make_$3,
      extend_: extend_$3,
      decorate_20223_: decorate_20223_$3
    };
  }
  function make_$3(adm, key, descriptor) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  function extend_$3(adm, key, descriptor, proxyTrap) {
    assertComputedDescriptor(adm, this, key, descriptor);
    return adm.defineComputedProperty_(key, _extends({}, this.options_, {
      get: descriptor.get,
      set: descriptor.set
    }), proxyTrap);
  }
  function decorate_20223_$3(get4, context) {
    {
      assert20223DecoratorType(context, ["getter"]);
    }
    var ann = this;
    var key = context.name, addInitializer = context.addInitializer;
    addInitializer(function() {
      var adm = asObservableObject(this)[$mobx];
      var options = _extends({}, ann.options_, {
        get: get4,
        context: this
      });
      options.name || (options.name = adm.name_ + "." + key.toString());
      adm.values_.set(key, new ComputedValue(options));
    });
    return function() {
      return this[$mobx].getObservablePropValue_(key);
    };
  }
  function assertComputedDescriptor(adm, _ref, key, _ref2) {
    var annotationType_ = _ref.annotationType_;
    var get4 = _ref2.get;
    if (!get4) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
    }
  }
  function createObservableAnnotation(name2, options) {
    return {
      annotationType_: name2,
      options_: options,
      make_: make_$4,
      extend_: extend_$4,
      decorate_20223_: decorate_20223_$4
    };
  }
  function make_$4(adm, key, descriptor) {
    return this.extend_(adm, key, descriptor, false) === null ? 0 : 1;
  }
  function extend_$4(adm, key, descriptor, proxyTrap) {
    var _this$options_$enhanc, _this$options_;
    assertObservableDescriptor(adm, this, key, descriptor);
    return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
  }
  function decorate_20223_$4(desc, context) {
    {
      if (context.kind === "field") {
        throw die("Please use `@observable accessor " + String(context.name) + "` instead of `@observable " + String(context.name) + "`");
      }
      assert20223DecoratorType(context, ["accessor"]);
    }
    var ann = this;
    var kind = context.kind, name2 = context.name;
    var initializedObjects = /* @__PURE__ */ new WeakSet();
    function initializeObservable(target, value) {
      var _ann$options_$enhance, _ann$options_;
      var adm = asObservableObject(target)[$mobx];
      var observable2 = new ObservableValue(value, (_ann$options_$enhance = (_ann$options_ = ann.options_) == null ? void 0 : _ann$options_.enhancer) != null ? _ann$options_$enhance : deepEnhancer, adm.name_ + "." + name2.toString(), false);
      adm.values_.set(name2, observable2);
      initializedObjects.add(target);
    }
    if (kind == "accessor") {
      return {
        get: function get4() {
          if (!initializedObjects.has(this)) {
            initializeObservable(this, desc.get.call(this));
          }
          return this[$mobx].getObservablePropValue_(name2);
        },
        set: function set5(value) {
          if (!initializedObjects.has(this)) {
            initializeObservable(this, value);
          }
          return this[$mobx].setObservablePropValue_(name2, value);
        },
        init: function init(value) {
          if (!initializedObjects.has(this)) {
            initializeObservable(this, value);
          }
          return value;
        }
      };
    }
    return;
  }
  function assertObservableDescriptor(adm, _ref, key, descriptor) {
    var annotationType_ = _ref.annotationType_;
    if (!("value" in descriptor)) {
      die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
    }
  }
  var AUTO = "true";
  var autoAnnotation = /* @__PURE__ */ createAutoAnnotation();
  function createAutoAnnotation(options) {
    return {
      annotationType_: AUTO,
      options_: options,
      make_: make_$5,
      extend_: extend_$5,
      decorate_20223_: decorate_20223_$5
    };
  }
  function make_$5(adm, key, descriptor, source) {
    var _this$options_3, _this$options_4;
    if (descriptor.get) {
      return computed.make_(adm, key, descriptor, source);
    }
    if (descriptor.set) {
      var set5 = createAction(key.toString(), descriptor.set);
      if (source === adm.target_) {
        return adm.defineProperty_(key, {
          configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
          set: set5
        }) === null ? 0 : 2;
      }
      defineProperty(source, key, {
        configurable: true,
        set: set5
      });
      return 2;
    }
    if (source !== adm.target_ && typeof descriptor.value === "function") {
      var _this$options_2;
      if (isGenerator(descriptor.value)) {
        var _this$options_;
        var flowAnnotation2 = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
        return flowAnnotation2.make_(adm, key, descriptor, source);
      }
      var actionAnnotation2 = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
      return actionAnnotation2.make_(adm, key, descriptor, source);
    }
    var observableAnnotation2 = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable;
    if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
      var _adm$proxy_;
      descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
    }
    return observableAnnotation2.make_(adm, key, descriptor, source);
  }
  function extend_$5(adm, key, descriptor, proxyTrap) {
    var _this$options_5, _this$options_6;
    if (descriptor.get) {
      return computed.extend_(adm, key, descriptor, proxyTrap);
    }
    if (descriptor.set) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: createAction(key.toString(), descriptor.set)
      }, proxyTrap);
    }
    if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
      var _adm$proxy_2;
      descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
    }
    var observableAnnotation2 = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
    return observableAnnotation2.extend_(adm, key, descriptor, proxyTrap);
  }
  function decorate_20223_$5(desc, context) {
    die("'" + this.annotationType_ + "' cannot be used as a decorator");
  }
  var OBSERVABLE = "observable";
  var OBSERVABLE_REF = "observable.ref";
  var OBSERVABLE_SHALLOW = "observable.shallow";
  var OBSERVABLE_STRUCT = "observable.struct";
  var defaultCreateObservableOptions = {
    deep: true,
    name: void 0,
    defaultDecorator: void 0,
    proxy: true
  };
  Object.freeze(defaultCreateObservableOptions);
  function asCreateObservableOptions(thing) {
    return thing || defaultCreateObservableOptions;
  }
  var observableAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE);
  var observableRefAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_REF, {
    enhancer: referenceEnhancer
  });
  var observableShallowAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_SHALLOW, {
    enhancer: shallowEnhancer
  });
  var observableStructAnnotation = /* @__PURE__ */ createObservableAnnotation(OBSERVABLE_STRUCT, {
    enhancer: refStructEnhancer
  });
  var observableDecoratorAnnotation = /* @__PURE__ */ createDecoratorAnnotation(observableAnnotation);
  function getEnhancerFromOptions(options) {
    return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
  }
  function getAnnotationFromOptions(options) {
    var _options$defaultDecor;
    return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : void 0;
  }
  function getEnhancerFromAnnotation(annotation) {
    var _annotation$options_$, _annotation$options_;
    return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
  }
  function createObservable(v2, arg2, arg3) {
    if (is20223Decorator(arg2)) {
      return observableAnnotation.decorate_20223_(v2, arg2);
    }
    if (isStringish(arg2)) {
      storeAnnotation(v2, arg2, observableAnnotation);
      return;
    }
    if (isObservable(v2)) {
      return v2;
    }
    if (isPlainObject$2(v2)) {
      return observable.object(v2, arg2, arg3);
    }
    if (Array.isArray(v2)) {
      return observable.array(v2, arg2);
    }
    if (isES6Map(v2)) {
      return observable.map(v2, arg2);
    }
    if (isES6Set(v2)) {
      return observable.set(v2, arg2);
    }
    if (typeof v2 === "object" && v2 !== null) {
      return v2;
    }
    return observable.box(v2, arg2);
  }
  assign(createObservable, observableDecoratorAnnotation);
  var observableFactories = {
    box: function box(value, options) {
      var o2 = asCreateObservableOptions(options);
      return new ObservableValue(value, getEnhancerFromOptions(o2), o2.name, true, o2.equals);
    },
    array: function array(initialValues, options) {
      var o2 = asCreateObservableOptions(options);
      return (globalState.useProxies === false || o2.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o2), o2.name);
    },
    map: function map(initialValues, options) {
      var o2 = asCreateObservableOptions(options);
      return new ObservableMap(initialValues, getEnhancerFromOptions(o2), o2.name);
    },
    set: function set(initialValues, options) {
      var o2 = asCreateObservableOptions(options);
      return new ObservableSet(initialValues, getEnhancerFromOptions(o2), o2.name);
    },
    object: function object(props, decorators, options) {
      return initObservable(function() {
        return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
      });
    },
    ref: /* @__PURE__ */ createDecoratorAnnotation(observableRefAnnotation),
    shallow: /* @__PURE__ */ createDecoratorAnnotation(observableShallowAnnotation),
    deep: observableDecoratorAnnotation,
    struct: /* @__PURE__ */ createDecoratorAnnotation(observableStructAnnotation)
  };
  var observable = /* @__PURE__ */ assign(createObservable, observableFactories);
  var COMPUTED = "computed";
  var COMPUTED_STRUCT = "computed.struct";
  var computedAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED);
  var computedStructAnnotation = /* @__PURE__ */ createComputedAnnotation(COMPUTED_STRUCT, {
    equals: comparer.structural
  });
  var computed = function computed2(arg1, arg2) {
    if (is20223Decorator(arg2)) {
      return computedAnnotation.decorate_20223_(arg1, arg2);
    }
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, computedAnnotation);
    }
    if (isPlainObject$2(arg1)) {
      return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
    }
    {
      if (!isFunction$1(arg1)) {
        die("First argument to `computed` should be an expression.");
      }
      if (isFunction$1(arg2)) {
        die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
      }
    }
    var opts = isPlainObject$2(arg2) ? arg2 : {};
    opts.get = arg1;
    opts.name || (opts.name = arg1.name || "");
    return new ComputedValue(opts);
  };
  Object.assign(computed, computedAnnotation);
  computed.struct = /* @__PURE__ */ createDecoratorAnnotation(computedStructAnnotation);
  var _getDescriptor$config, _getDescriptor;
  var currentActionId = 0;
  var nextActionId = 1;
  var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /* @__PURE__ */ getDescriptor(function() {
  }, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false;
  var tmpNameDescriptor = {
    value: "action",
    configurable: true,
    writable: false,
    enumerable: false
  };
  function createAction(actionName, fn2, autoAction2, ref) {
    if (autoAction2 === void 0) {
      autoAction2 = false;
    }
    {
      if (!isFunction$1(fn2)) {
        die("`action` can only be invoked on functions");
      }
      if (typeof actionName !== "string" || !actionName) {
        die("actions should have valid names, got: '" + actionName + "'");
      }
    }
    function res() {
      return executeAction(actionName, autoAction2, fn2, ref || this, arguments);
    }
    res.isMobxAction = true;
    res.toString = function() {
      return fn2.toString();
    };
    if (isFunctionNameConfigurable) {
      tmpNameDescriptor.value = actionName;
      defineProperty(res, "name", tmpNameDescriptor);
    }
    return res;
  }
  function executeAction(actionName, canRunAsDerivation, fn2, scope, args) {
    var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);
    try {
      return fn2.apply(scope, args);
    } catch (err) {
      runInfo.error_ = err;
      throw err;
    } finally {
      _endAction(runInfo);
    }
  }
  function _startAction(actionName, canRunAsDerivation, scope, args) {
    var notifySpy_ = isSpyEnabled() && !!actionName;
    var startTime_ = 0;
    if (notifySpy_) {
      startTime_ = Date.now();
      var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
      spyReportStart({
        type: ACTION,
        name: actionName,
        object: scope,
        arguments: flattenedArgs
      });
    }
    var prevDerivation_ = globalState.trackingDerivation;
    var runAsAction = !canRunAsDerivation || !prevDerivation_;
    startBatch();
    var prevAllowStateChanges_ = globalState.allowStateChanges;
    if (runAsAction) {
      untrackedStart();
      prevAllowStateChanges_ = allowStateChangesStart(true);
    }
    var prevAllowStateReads_ = allowStateReadsStart(true);
    var runInfo = {
      runAsAction_: runAsAction,
      prevDerivation_,
      prevAllowStateChanges_,
      prevAllowStateReads_,
      notifySpy_,
      startTime_,
      actionId_: nextActionId++,
      parentActionId_: currentActionId
    };
    currentActionId = runInfo.actionId_;
    return runInfo;
  }
  function _endAction(runInfo) {
    if (currentActionId !== runInfo.actionId_) {
      die(30);
    }
    currentActionId = runInfo.parentActionId_;
    if (runInfo.error_ !== void 0) {
      globalState.suppressReactionErrors = true;
    }
    allowStateChangesEnd(runInfo.prevAllowStateChanges_);
    allowStateReadsEnd(runInfo.prevAllowStateReads_);
    endBatch();
    if (runInfo.runAsAction_) {
      untrackedEnd(runInfo.prevDerivation_);
    }
    if (runInfo.notifySpy_) {
      spyReportEnd({
        time: Date.now() - runInfo.startTime_
      });
    }
    globalState.suppressReactionErrors = false;
  }
  function allowStateChangesStart(allowStateChanges2) {
    var prev = globalState.allowStateChanges;
    globalState.allowStateChanges = allowStateChanges2;
    return prev;
  }
  function allowStateChangesEnd(prev) {
    globalState.allowStateChanges = prev;
  }
  var CREATE = "create";
  var ObservableValue = /* @__PURE__ */ function(_Atom) {
    function ObservableValue2(value, enhancer, name_, notifySpy, equals) {
      var _this;
      if (name_ === void 0) {
        name_ = "ObservableValue@" + getNextId();
      }
      if (notifySpy === void 0) {
        notifySpy = true;
      }
      if (equals === void 0) {
        equals = comparer["default"];
      }
      _this = _Atom.call(this, name_) || this;
      _this.enhancer = void 0;
      _this.name_ = void 0;
      _this.equals = void 0;
      _this.hasUnreportedChange_ = false;
      _this.interceptors_ = void 0;
      _this.changeListeners_ = void 0;
      _this.value_ = void 0;
      _this.dehancer = void 0;
      _this.enhancer = enhancer;
      _this.name_ = name_;
      _this.equals = equals;
      _this.value_ = enhancer(value, void 0, name_);
      if (notifySpy && isSpyEnabled()) {
        spyReport({
          type: CREATE,
          object: _this,
          observableKind: "value",
          debugObjectName: _this.name_,
          newValue: "" + _this.value_
        });
      }
      return _this;
    }
    _inheritsLoose(ObservableValue2, _Atom);
    var _proto = ObservableValue2.prototype;
    _proto.dehanceValue = function dehanceValue(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.set = function set5(newValue) {
      var oldValue = this.value_;
      newValue = this.prepareNewValue_(newValue);
      if (newValue !== globalState.UNCHANGED) {
        var notifySpy = isSpyEnabled();
        if (notifySpy) {
          spyReportStart({
            type: UPDATE,
            object: this,
            observableKind: "value",
            debugObjectName: this.name_,
            newValue,
            oldValue
          });
        }
        this.setNewValue_(newValue);
        if (notifySpy) {
          spyReportEnd();
        }
      }
    };
    _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
      checkIfStateModificationsAreAllowed(this);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this,
          type: UPDATE,
          newValue
        });
        if (!change) {
          return globalState.UNCHANGED;
        }
        newValue = change.newValue;
      }
      newValue = this.enhancer(newValue, this.value_, this.name_);
      return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
    };
    _proto.setNewValue_ = function setNewValue_(newValue) {
      var oldValue = this.value_;
      this.value_ = newValue;
      this.reportChanged();
      if (hasListeners(this)) {
        notifyListeners(this, {
          type: UPDATE,
          object: this,
          newValue,
          oldValue
        });
      }
    };
    _proto.get = function get4() {
      this.reportObserved();
      return this.dehanceValue(this.value_);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately) {
        listener({
          observableKind: "value",
          debugObjectName: this.name_,
          object: this,
          type: UPDATE,
          newValue: this.value_,
          oldValue: void 0
        });
      }
      return registerListener(this, listener);
    };
    _proto.raw = function raw() {
      return this.value_;
    };
    _proto.toJSON = function toJSON2() {
      return this.get();
    };
    _proto.toString = function toString2() {
      return this.name_ + "[" + this.value_ + "]";
    };
    _proto.valueOf = function valueOf() {
      return toPrimitive(this.get());
    };
    _proto[Symbol.toPrimitive] = function() {
      return this.valueOf();
    };
    return ObservableValue2;
  }(Atom);
  var ComputedValue = /* @__PURE__ */ function() {
    function ComputedValue2(options) {
      this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
      this.observing_ = [];
      this.newObserving_ = null;
      this.observers_ = /* @__PURE__ */ new Set();
      this.runId_ = 0;
      this.lastAccessedBy_ = 0;
      this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
      this.unboundDepsCount_ = 0;
      this.value_ = new CaughtException(null);
      this.name_ = void 0;
      this.triggeredBy_ = void 0;
      this.flags_ = 0;
      this.derivation = void 0;
      this.setter_ = void 0;
      this.isTracing_ = TraceMode.NONE;
      this.scope_ = void 0;
      this.equals_ = void 0;
      this.requiresReaction_ = void 0;
      this.keepAlive_ = void 0;
      this.onBOL = void 0;
      this.onBUOL = void 0;
      if (!options.get) {
        die(31);
      }
      this.derivation = options.get;
      this.name_ = options.name || "ComputedValue@" + getNextId();
      if (options.set) {
        this.setter_ = createAction(this.name_ + "-setter", options.set);
      }
      this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
      this.scope_ = options.context;
      this.requiresReaction_ = options.requiresReaction;
      this.keepAlive_ = !!options.keepAlive;
    }
    var _proto = ComputedValue2.prototype;
    _proto.onBecomeStale_ = function onBecomeStale_() {
      propagateMaybeChanged(this);
    };
    _proto.onBO = function onBO() {
      if (this.onBOL) {
        this.onBOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.onBUO = function onBUO() {
      if (this.onBUOL) {
        this.onBUOL.forEach(function(listener) {
          return listener();
        });
      }
    };
    _proto.get = function get4() {
      if (this.isComputing) {
        die(32, this.name_, this.derivation);
      }
      if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&
      this.observers_.size === 0 && !this.keepAlive_) {
        if (shouldCompute(this)) {
          this.warnAboutUntrackedRead_();
          startBatch();
          this.value_ = this.computeValue_(false);
          endBatch();
        }
      } else {
        reportObserved(this);
        if (shouldCompute(this)) {
          var prevTrackingContext = globalState.trackingContext;
          if (this.keepAlive_ && !prevTrackingContext) {
            globalState.trackingContext = this;
          }
          if (this.trackAndCompute()) {
            propagateChangeConfirmed(this);
          }
          globalState.trackingContext = prevTrackingContext;
        }
      }
      var result = this.value_;
      if (isCaughtException(result)) {
        throw result.cause;
      }
      return result;
    };
    _proto.set = function set5(value) {
      if (this.setter_) {
        if (this.isRunningSetter) {
          die(33, this.name_);
        }
        this.isRunningSetter = true;
        try {
          this.setter_.call(this.scope_, value);
        } finally {
          this.isRunningSetter = false;
        }
      } else {
        die(34, this.name_);
      }
    };
    _proto.trackAndCompute = function trackAndCompute() {
      var oldValue = this.value_;
      var wasSuspended = (
        /* see #1208 */
        this.dependenciesState_ === IDerivationState_.NOT_TRACKING_
      );
      var newValue = this.computeValue_(true);
      var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);
      if (changed) {
        this.value_ = newValue;
        if (isSpyEnabled()) {
          spyReport({
            observableKind: "computed",
            debugObjectName: this.name_,
            object: this.scope_,
            type: "update",
            oldValue,
            newValue
          });
        }
      }
      return changed;
    };
    _proto.computeValue_ = function computeValue_(track) {
      this.isComputing = true;
      var prev = allowStateChangesStart(false);
      var res;
      if (track) {
        res = trackDerivedFunction(this, this.derivation, this.scope_);
      } else {
        if (globalState.disableErrorBoundaries === true) {
          res = this.derivation.call(this.scope_);
        } else {
          try {
            res = this.derivation.call(this.scope_);
          } catch (e2) {
            res = new CaughtException(e2);
          }
        }
      }
      allowStateChangesEnd(prev);
      this.isComputing = false;
      return res;
    };
    _proto.suspend_ = function suspend_() {
      if (!this.keepAlive_) {
        clearObserving(this);
        this.value_ = void 0;
        if (this.isTracing_ !== TraceMode.NONE) {
          formatAppLog("log", "at node_modules/mobx/dist/mobx.esm.js:1674", "[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
        }
      }
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      var _this = this;
      var firstTime = true;
      var prevValue = void 0;
      return autorun(function() {
        var newValue = _this.get();
        if (!firstTime || fireImmediately) {
          var prevU = untrackedStart();
          listener({
            observableKind: "computed",
            debugObjectName: _this.name_,
            type: UPDATE,
            object: _this,
            newValue,
            oldValue: prevValue
          });
          untrackedEnd(prevU);
        }
        firstTime = false;
        prevValue = newValue;
      });
    };
    _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
      if (this.isTracing_ !== TraceMode.NONE) {
        formatAppLog("log", "at node_modules/mobx/dist/mobx.esm.js:1706", "[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
      }
      if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
        formatAppLog("warn", "at node_modules/mobx/dist/mobx.esm.js:1709", "[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
      }
    };
    _proto.toString = function toString2() {
      return this.name_ + "[" + this.derivation.toString() + "]";
    };
    _proto.valueOf = function valueOf() {
      return toPrimitive(this.get());
    };
    _proto[Symbol.toPrimitive] = function() {
      return this.valueOf();
    };
    return _createClass(ComputedValue2, [{
      key: "isComputing",
      get: function get4() {
        return getFlag(this.flags_, ComputedValue2.isComputingMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, ComputedValue2.isComputingMask_, newValue);
      }
    }, {
      key: "isRunningSetter",
      get: function get4() {
        return getFlag(this.flags_, ComputedValue2.isRunningSetterMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, ComputedValue2.isRunningSetterMask_, newValue);
      }
    }, {
      key: "isBeingObserved",
      get: function get4() {
        return getFlag(this.flags_, ComputedValue2.isBeingObservedMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, ComputedValue2.isBeingObservedMask_, newValue);
      }
    }, {
      key: "isPendingUnobservation",
      get: function get4() {
        return getFlag(this.flags_, ComputedValue2.isPendingUnobservationMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, ComputedValue2.isPendingUnobservationMask_, newValue);
      }
    }, {
      key: "diffValue",
      get: function get4() {
        return getFlag(this.flags_, ComputedValue2.diffValueMask_) ? 1 : 0;
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, ComputedValue2.diffValueMask_, newValue === 1 ? true : false);
      }
    }]);
  }();
  ComputedValue.isComputingMask_ = 1;
  ComputedValue.isRunningSetterMask_ = 2;
  ComputedValue.isBeingObservedMask_ = 4;
  ComputedValue.isPendingUnobservationMask_ = 8;
  ComputedValue.diffValueMask_ = 16;
  var isComputedValue = /* @__PURE__ */ createInstanceofPredicate("ComputedValue", ComputedValue);
  var IDerivationState_;
  (function(IDerivationState_2) {
    IDerivationState_2[IDerivationState_2["NOT_TRACKING_"] = -1] = "NOT_TRACKING_";
    IDerivationState_2[IDerivationState_2["UP_TO_DATE_"] = 0] = "UP_TO_DATE_";
    IDerivationState_2[IDerivationState_2["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_";
    IDerivationState_2[IDerivationState_2["STALE_"] = 2] = "STALE_";
  })(IDerivationState_ || (IDerivationState_ = {}));
  var TraceMode;
  (function(TraceMode2) {
    TraceMode2[TraceMode2["NONE"] = 0] = "NONE";
    TraceMode2[TraceMode2["LOG"] = 1] = "LOG";
    TraceMode2[TraceMode2["BREAK"] = 2] = "BREAK";
  })(TraceMode || (TraceMode = {}));
  var CaughtException = function CaughtException2(cause) {
    this.cause = void 0;
    this.cause = cause;
  };
  function isCaughtException(e2) {
    return e2 instanceof CaughtException;
  }
  function shouldCompute(derivation) {
    switch (derivation.dependenciesState_) {
      case IDerivationState_.UP_TO_DATE_:
        return false;
      case IDerivationState_.NOT_TRACKING_:
      case IDerivationState_.STALE_:
        return true;
      case IDerivationState_.POSSIBLY_STALE_: {
        var prevAllowStateReads = allowStateReadsStart(true);
        var prevUntracked = untrackedStart();
        var obs = derivation.observing_, l2 = obs.length;
        for (var i2 = 0; i2 < l2; i2++) {
          var obj = obs[i2];
          if (isComputedValue(obj)) {
            if (globalState.disableErrorBoundaries) {
              obj.get();
            } else {
              try {
                obj.get();
              } catch (e2) {
                untrackedEnd(prevUntracked);
                allowStateReadsEnd(prevAllowStateReads);
                return true;
              }
            }
            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
        }
        changeDependenciesStateTo0(derivation);
        untrackedEnd(prevUntracked);
        allowStateReadsEnd(prevAllowStateReads);
        return false;
      }
    }
  }
  function checkIfStateModificationsAreAllowed(atom) {
    var hasObservers2 = atom.observers_.size > 0;
    if (!globalState.allowStateChanges && (hasObservers2 || globalState.enforceActions === "always")) {
      formatAppLog("warn", "at node_modules/mobx/dist/mobx.esm.js:1871", "[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
    }
  }
  function checkIfStateReadsAreAllowed(observable2) {
    if (!globalState.allowStateReads && globalState.observableRequiresReaction) {
      formatAppLog("warn", "at node_modules/mobx/dist/mobx.esm.js:1876", "[mobx] Observable '" + observable2.name_ + "' being read outside a reactive context.");
    }
  }
  function trackDerivedFunction(derivation, f2, context) {
    var prevAllowStateReads = allowStateReadsStart(true);
    changeDependenciesStateTo0(derivation);
    derivation.newObserving_ = new Array(
      // Reserve constant space for initial dependencies, dynamic space otherwise.
      // See https://github.com/mobxjs/mobx/pull/3833
      derivation.runId_ === 0 ? 100 : derivation.observing_.length
    );
    derivation.unboundDepsCount_ = 0;
    derivation.runId_ = ++globalState.runId;
    var prevTracking = globalState.trackingDerivation;
    globalState.trackingDerivation = derivation;
    globalState.inBatch++;
    var result;
    if (globalState.disableErrorBoundaries === true) {
      result = f2.call(context);
    } else {
      try {
        result = f2.call(context);
      } catch (e2) {
        result = new CaughtException(e2);
      }
    }
    globalState.inBatch--;
    globalState.trackingDerivation = prevTracking;
    bindDependencies(derivation);
    warnAboutDerivationWithoutDependencies(derivation);
    allowStateReadsEnd(prevAllowStateReads);
    return result;
  }
  function warnAboutDerivationWithoutDependencies(derivation) {
    if (derivation.observing_.length !== 0) {
      return;
    }
    if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {
      formatAppLog("warn", "at node_modules/mobx/dist/mobx.esm.js:1922", "[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
    }
  }
  function bindDependencies(derivation) {
    var prevObserving = derivation.observing_;
    var observing = derivation.observing_ = derivation.newObserving_;
    var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_;
    var i0 = 0, l2 = derivation.unboundDepsCount_;
    for (var i2 = 0; i2 < l2; i2++) {
      var dep = observing[i2];
      if (dep.diffValue === 0) {
        dep.diffValue = 1;
        if (i0 !== i2) {
          observing[i0] = dep;
        }
        i0++;
      }
      if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
        lowestNewObservingDerivationState = dep.dependenciesState_;
      }
    }
    observing.length = i0;
    derivation.newObserving_ = null;
    l2 = prevObserving.length;
    while (l2--) {
      var _dep = prevObserving[l2];
      if (_dep.diffValue === 0) {
        removeObserver(_dep, derivation);
      }
      _dep.diffValue = 0;
    }
    while (i0--) {
      var _dep2 = observing[i0];
      if (_dep2.diffValue === 1) {
        _dep2.diffValue = 0;
        addObserver(_dep2, derivation);
      }
    }
    if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
      derivation.dependenciesState_ = lowestNewObservingDerivationState;
      derivation.onBecomeStale_();
    }
  }
  function clearObserving(derivation) {
    var obs = derivation.observing_;
    derivation.observing_ = [];
    var i2 = obs.length;
    while (i2--) {
      removeObserver(obs[i2], derivation);
    }
    derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
  }
  function untracked(action2) {
    var prev = untrackedStart();
    try {
      return action2();
    } finally {
      untrackedEnd(prev);
    }
  }
  function untrackedStart() {
    var prev = globalState.trackingDerivation;
    globalState.trackingDerivation = null;
    return prev;
  }
  function untrackedEnd(prev) {
    globalState.trackingDerivation = prev;
  }
  function allowStateReadsStart(allowStateReads) {
    var prev = globalState.allowStateReads;
    globalState.allowStateReads = allowStateReads;
    return prev;
  }
  function allowStateReadsEnd(prev) {
    globalState.allowStateReads = prev;
  }
  function changeDependenciesStateTo0(derivation) {
    if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      return;
    }
    derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
    var obs = derivation.observing_;
    var i2 = obs.length;
    while (i2--) {
      obs[i2].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    }
  }
  var MobXGlobals = function MobXGlobals2() {
    this.version = 6;
    this.UNCHANGED = {};
    this.trackingDerivation = null;
    this.trackingContext = null;
    this.runId = 0;
    this.mobxGuid = 0;
    this.inBatch = 0;
    this.pendingUnobservations = [];
    this.pendingReactions = [];
    this.isRunningReactions = false;
    this.allowStateChanges = false;
    this.allowStateReads = true;
    this.enforceActions = true;
    this.spyListeners = [];
    this.globalReactionErrorHandlers = [];
    this.computedRequiresReaction = false;
    this.reactionRequiresObservable = false;
    this.observableRequiresReaction = false;
    this.disableErrorBoundaries = false;
    this.suppressReactionErrors = false;
    this.useProxies = true;
    this.verifyProxies = false;
    this.safeDescriptors = true;
  };
  var canMergeGlobalState = true;
  var globalState = /* @__PURE__ */ function() {
    var global2 = /* @__PURE__ */ getGlobal();
    if (global2.__mobxInstanceCount > 0 && !global2.__mobxGlobals) {
      canMergeGlobalState = false;
    }
    if (global2.__mobxGlobals && global2.__mobxGlobals.version !== new MobXGlobals().version) {
      canMergeGlobalState = false;
    }
    if (!canMergeGlobalState) {
      setTimeout(function() {
        {
          die(35);
        }
      }, 1);
      return new MobXGlobals();
    } else if (global2.__mobxGlobals) {
      global2.__mobxInstanceCount += 1;
      if (!global2.__mobxGlobals.UNCHANGED) {
        global2.__mobxGlobals.UNCHANGED = {};
      }
      return global2.__mobxGlobals;
    } else {
      global2.__mobxInstanceCount = 1;
      return global2.__mobxGlobals = /* @__PURE__ */ new MobXGlobals();
    }
  }();
  function addObserver(observable2, node) {
    observable2.observers_.add(node);
    if (observable2.lowestObserverState_ > node.dependenciesState_) {
      observable2.lowestObserverState_ = node.dependenciesState_;
    }
  }
  function removeObserver(observable2, node) {
    observable2.observers_["delete"](node);
    if (observable2.observers_.size === 0) {
      queueForUnobservation(observable2);
    }
  }
  function queueForUnobservation(observable2) {
    if (observable2.isPendingUnobservation === false) {
      observable2.isPendingUnobservation = true;
      globalState.pendingUnobservations.push(observable2);
    }
  }
  function startBatch() {
    globalState.inBatch++;
  }
  function endBatch() {
    if (--globalState.inBatch === 0) {
      runReactions();
      var list = globalState.pendingUnobservations;
      for (var i2 = 0; i2 < list.length; i2++) {
        var observable2 = list[i2];
        observable2.isPendingUnobservation = false;
        if (observable2.observers_.size === 0) {
          if (observable2.isBeingObserved) {
            observable2.isBeingObserved = false;
            observable2.onBUO();
          }
          if (observable2 instanceof ComputedValue) {
            observable2.suspend_();
          }
        }
      }
      globalState.pendingUnobservations = [];
    }
  }
  function reportObserved(observable2) {
    checkIfStateReadsAreAllowed(observable2);
    var derivation = globalState.trackingDerivation;
    if (derivation !== null) {
      if (derivation.runId_ !== observable2.lastAccessedBy_) {
        observable2.lastAccessedBy_ = derivation.runId_;
        derivation.newObserving_[derivation.unboundDepsCount_++] = observable2;
        if (!observable2.isBeingObserved && globalState.trackingContext) {
          observable2.isBeingObserved = true;
          observable2.onBO();
        }
      }
      return observable2.isBeingObserved;
    } else if (observable2.observers_.size === 0 && globalState.inBatch > 0) {
      queueForUnobservation(observable2);
    }
    return false;
  }
  function propagateChanged(observable2) {
    if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
      return;
    }
    observable2.lowestObserverState_ = IDerivationState_.STALE_;
    observable2.observers_.forEach(function(d2) {
      if (d2.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
        if (d2.isTracing_ !== TraceMode.NONE) {
          logTraceInfo(d2, observable2);
        }
        d2.onBecomeStale_();
      }
      d2.dependenciesState_ = IDerivationState_.STALE_;
    });
  }
  function propagateChangeConfirmed(observable2) {
    if (observable2.lowestObserverState_ === IDerivationState_.STALE_) {
      return;
    }
    observable2.lowestObserverState_ = IDerivationState_.STALE_;
    observable2.observers_.forEach(function(d2) {
      if (d2.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
        d2.dependenciesState_ = IDerivationState_.STALE_;
        if (d2.isTracing_ !== TraceMode.NONE) {
          logTraceInfo(d2, observable2);
        }
      } else if (d2.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
        observable2.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
      }
    });
  }
  function propagateMaybeChanged(observable2) {
    if (observable2.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
      return;
    }
    observable2.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
    observable2.observers_.forEach(function(d2) {
      if (d2.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
        d2.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
        d2.onBecomeStale_();
      }
    });
  }
  function logTraceInfo(derivation, observable2) {
    formatAppLog("log", "at node_modules/mobx/dist/mobx.esm.js:2393", "[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable2.name_ + "'");
    if (derivation.isTracing_ === TraceMode.BREAK) {
      var lines = [];
      printDepTree(getDependencyTree(derivation), lines, 1);
      new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable2.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
    }
  }
  function printDepTree(tree, lines, depth) {
    if (lines.length >= 1e3) {
      lines.push("(and many more)");
      return;
    }
    lines.push("" + "	".repeat(depth - 1) + tree.name);
    if (tree.dependencies) {
      tree.dependencies.forEach(function(child) {
        return printDepTree(child, lines, depth + 1);
      });
    }
  }
  var Reaction = /* @__PURE__ */ function() {
    function Reaction2(name_, onInvalidate_, errorHandler_, requiresObservable_) {
      if (name_ === void 0) {
        name_ = "Reaction@" + getNextId();
      }
      this.name_ = void 0;
      this.onInvalidate_ = void 0;
      this.errorHandler_ = void 0;
      this.requiresObservable_ = void 0;
      this.observing_ = [];
      this.newObserving_ = [];
      this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
      this.runId_ = 0;
      this.unboundDepsCount_ = 0;
      this.flags_ = 0;
      this.isTracing_ = TraceMode.NONE;
      this.name_ = name_;
      this.onInvalidate_ = onInvalidate_;
      this.errorHandler_ = errorHandler_;
      this.requiresObservable_ = requiresObservable_;
    }
    var _proto = Reaction2.prototype;
    _proto.onBecomeStale_ = function onBecomeStale_() {
      this.schedule_();
    };
    _proto.schedule_ = function schedule_() {
      if (!this.isScheduled) {
        this.isScheduled = true;
        globalState.pendingReactions.push(this);
        runReactions();
      }
    };
    _proto.runReaction_ = function runReaction_() {
      if (!this.isDisposed) {
        startBatch();
        this.isScheduled = false;
        var prev = globalState.trackingContext;
        globalState.trackingContext = this;
        if (shouldCompute(this)) {
          this.isTrackPending = true;
          try {
            this.onInvalidate_();
            if (this.isTrackPending && isSpyEnabled()) {
              spyReport({
                name: this.name_,
                type: "scheduled-reaction"
              });
            }
          } catch (e2) {
            this.reportExceptionInDerivation_(e2);
          }
        }
        globalState.trackingContext = prev;
        endBatch();
      }
    };
    _proto.track = function track(fn2) {
      if (this.isDisposed) {
        return;
      }
      startBatch();
      var notify = isSpyEnabled();
      var startTime;
      if (notify) {
        startTime = Date.now();
        spyReportStart({
          name: this.name_,
          type: "reaction"
        });
      }
      this.isRunning = true;
      var prevReaction = globalState.trackingContext;
      globalState.trackingContext = this;
      var result = trackDerivedFunction(this, fn2, void 0);
      globalState.trackingContext = prevReaction;
      this.isRunning = false;
      this.isTrackPending = false;
      if (this.isDisposed) {
        clearObserving(this);
      }
      if (isCaughtException(result)) {
        this.reportExceptionInDerivation_(result.cause);
      }
      if (notify) {
        spyReportEnd({
          time: Date.now() - startTime
        });
      }
      endBatch();
    };
    _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
      var _this = this;
      if (this.errorHandler_) {
        this.errorHandler_(error, this);
        return;
      }
      if (globalState.disableErrorBoundaries) {
        throw error;
      }
      var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
      if (!globalState.suppressReactionErrors) {
        formatAppLog("error", "at node_modules/mobx/dist/mobx.esm.js:2522", message, error);
      } else {
        formatAppLog("warn", "at node_modules/mobx/dist/mobx.esm.js:2525", "[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
      }
      if (isSpyEnabled()) {
        spyReport({
          type: "error",
          name: this.name_,
          message,
          error: "" + error
        });
      }
      globalState.globalReactionErrorHandlers.forEach(function(f2) {
        return f2(error, _this);
      });
    };
    _proto.dispose = function dispose() {
      if (!this.isDisposed) {
        this.isDisposed = true;
        if (!this.isRunning) {
          startBatch();
          clearObserving(this);
          endBatch();
        }
      }
    };
    _proto.getDisposer_ = function getDisposer_(abortSignal) {
      var _this2 = this;
      var dispose = function dispose2() {
        _this2.dispose();
        abortSignal == null || abortSignal.removeEventListener == null || abortSignal.removeEventListener("abort", dispose2);
      };
      abortSignal == null || abortSignal.addEventListener == null || abortSignal.addEventListener("abort", dispose);
      dispose[$mobx] = this;
      return dispose;
    };
    _proto.toString = function toString2() {
      return "Reaction[" + this.name_ + "]";
    };
    _proto.trace = function trace$1(enterBreakPoint) {
      if (enterBreakPoint === void 0) {
        enterBreakPoint = false;
      }
      trace(this, enterBreakPoint);
    };
    return _createClass(Reaction2, [{
      key: "isDisposed",
      get: function get4() {
        return getFlag(this.flags_, Reaction2.isDisposedMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Reaction2.isDisposedMask_, newValue);
      }
    }, {
      key: "isScheduled",
      get: function get4() {
        return getFlag(this.flags_, Reaction2.isScheduledMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Reaction2.isScheduledMask_, newValue);
      }
    }, {
      key: "isTrackPending",
      get: function get4() {
        return getFlag(this.flags_, Reaction2.isTrackPendingMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Reaction2.isTrackPendingMask_, newValue);
      }
    }, {
      key: "isRunning",
      get: function get4() {
        return getFlag(this.flags_, Reaction2.isRunningMask_);
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Reaction2.isRunningMask_, newValue);
      }
    }, {
      key: "diffValue",
      get: function get4() {
        return getFlag(this.flags_, Reaction2.diffValueMask_) ? 1 : 0;
      },
      set: function set5(newValue) {
        this.flags_ = setFlag(this.flags_, Reaction2.diffValueMask_, newValue === 1 ? true : false);
      }
    }]);
  }();
  Reaction.isDisposedMask_ = 1;
  Reaction.isScheduledMask_ = 2;
  Reaction.isTrackPendingMask_ = 4;
  Reaction.isRunningMask_ = 8;
  Reaction.diffValueMask_ = 16;
  var MAX_REACTION_ITERATIONS = 100;
  var reactionScheduler = function reactionScheduler2(f2) {
    return f2();
  };
  function runReactions() {
    if (globalState.inBatch > 0 || globalState.isRunningReactions) {
      return;
    }
    reactionScheduler(runReactionsHelper);
  }
  function runReactionsHelper() {
    globalState.isRunningReactions = true;
    var allReactions = globalState.pendingReactions;
    var iterations = 0;
    while (allReactions.length > 0) {
      if (++iterations === MAX_REACTION_ITERATIONS) {
        formatAppLog("error", "at node_modules/mobx/dist/mobx.esm.js:2650", "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]));
        allReactions.splice(0);
      }
      var remainingReactions = allReactions.splice(0);
      for (var i2 = 0, l2 = remainingReactions.length; i2 < l2; i2++) {
        remainingReactions[i2].runReaction_();
      }
    }
    globalState.isRunningReactions = false;
  }
  var isReaction = /* @__PURE__ */ createInstanceofPredicate("Reaction", Reaction);
  function isSpyEnabled() {
    return !!globalState.spyListeners.length;
  }
  function spyReport(event) {
    if (!globalState.spyListeners.length) {
      return;
    }
    var listeners = globalState.spyListeners;
    for (var i2 = 0, l2 = listeners.length; i2 < l2; i2++) {
      listeners[i2](event);
    }
  }
  function spyReportStart(event) {
    var change = _extends({}, event, {
      spyReportStart: true
    });
    spyReport(change);
  }
  var END_EVENT = {
    type: "report-end",
    spyReportEnd: true
  };
  function spyReportEnd(change) {
    if (change) {
      spyReport(_extends({}, change, {
        type: "report-end",
        spyReportEnd: true
      }));
    } else {
      spyReport(END_EVENT);
    }
  }
  function spy(listener) {
    {
      globalState.spyListeners.push(listener);
      return once(function() {
        globalState.spyListeners = globalState.spyListeners.filter(function(l2) {
          return l2 !== listener;
        });
      });
    }
  }
  var ACTION = "action";
  var ACTION_BOUND = "action.bound";
  var AUTOACTION = "autoAction";
  var AUTOACTION_BOUND = "autoAction.bound";
  var DEFAULT_ACTION_NAME = "<unnamed action>";
  var actionAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION);
  var actionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(ACTION_BOUND, {
    bound: true
  });
  var autoActionAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION, {
    autoAction: true
  });
  var autoActionBoundAnnotation = /* @__PURE__ */ createActionAnnotation(AUTOACTION_BOUND, {
    autoAction: true,
    bound: true
  });
  function createActionFactory(autoAction2) {
    var res = function action2(arg1, arg2) {
      if (isFunction$1(arg1)) {
        return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction2);
      }
      if (isFunction$1(arg2)) {
        return createAction(arg1, arg2, autoAction2);
      }
      if (is20223Decorator(arg2)) {
        return (autoAction2 ? autoActionAnnotation : actionAnnotation).decorate_20223_(arg1, arg2);
      }
      if (isStringish(arg2)) {
        return storeAnnotation(arg1, arg2, autoAction2 ? autoActionAnnotation : actionAnnotation);
      }
      if (isStringish(arg1)) {
        return createDecoratorAnnotation(createActionAnnotation(autoAction2 ? AUTOACTION : ACTION, {
          name: arg1,
          autoAction: autoAction2
        }));
      }
      {
        die("Invalid arguments for `action`");
      }
    };
    return res;
  }
  var action = /* @__PURE__ */ createActionFactory(false);
  Object.assign(action, actionAnnotation);
  var autoAction = /* @__PURE__ */ createActionFactory(true);
  Object.assign(autoAction, autoActionAnnotation);
  action.bound = /* @__PURE__ */ createDecoratorAnnotation(actionBoundAnnotation);
  autoAction.bound = /* @__PURE__ */ createDecoratorAnnotation(autoActionBoundAnnotation);
  function isAction(thing) {
    return isFunction$1(thing) && thing.isMobxAction === true;
  }
  function autorun(view, opts) {
    var _opts$name, _opts, _opts2, _opts3;
    if (opts === void 0) {
      opts = EMPTY_OBJECT;
    }
    {
      if (!isFunction$1(view)) {
        die("Autorun expects a function as first argument");
      }
      if (isAction(view)) {
        die("Autorun does not accept actions since actions are untrackable");
      }
    }
    var name2 = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name : view.name || "Autorun@" + getNextId();
    var runSync = !opts.scheduler && !opts.delay;
    var reaction2;
    if (runSync) {
      reaction2 = new Reaction(name2, function() {
        this.track(reactionRunner);
      }, opts.onError, opts.requiresObservable);
    } else {
      var scheduler = createSchedulerFromOptions(opts);
      var isScheduled = false;
      reaction2 = new Reaction(name2, function() {
        if (!isScheduled) {
          isScheduled = true;
          scheduler(function() {
            isScheduled = false;
            if (!reaction2.isDisposed) {
              reaction2.track(reactionRunner);
            }
          });
        }
      }, opts.onError, opts.requiresObservable);
    }
    function reactionRunner() {
      view(reaction2);
    }
    if (!((_opts2 = opts) != null && (_opts2 = _opts2.signal) != null && _opts2.aborted)) {
      reaction2.schedule_();
    }
    return reaction2.getDisposer_((_opts3 = opts) == null ? void 0 : _opts3.signal);
  }
  var run = function run2(f2) {
    return f2();
  };
  function createSchedulerFromOptions(opts) {
    return opts.scheduler ? opts.scheduler : opts.delay ? function(f2) {
      return setTimeout(f2, opts.delay);
    } : run;
  }
  var ON_BECOME_OBSERVED = "onBO";
  var ON_BECOME_UNOBSERVED = "onBUO";
  function onBecomeObserved(thing, arg2, arg3) {
    return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
  }
  function onBecomeUnobserved(thing, arg2, arg3) {
    return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
  }
  function interceptHook(hook, thing, arg2, arg3) {
    var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
    var cb = isFunction$1(arg3) ? arg3 : arg2;
    var listenersKey = hook + "L";
    if (atom[listenersKey]) {
      atom[listenersKey].add(cb);
    } else {
      atom[listenersKey] = /* @__PURE__ */ new Set([cb]);
    }
    return function() {
      var hookListeners = atom[listenersKey];
      if (hookListeners) {
        hookListeners["delete"](cb);
        if (hookListeners.size === 0) {
          delete atom[listenersKey];
        }
      }
    };
  }
  function extendObservable(target, properties, annotations, options) {
    {
      if (arguments.length > 4) {
        die("'extendObservable' expected 2-4 arguments");
      }
      if (typeof target !== "object") {
        die("'extendObservable' expects an object as first argument");
      }
      if (isObservableMap(target)) {
        die("'extendObservable' should not be used on maps, use map.merge instead");
      }
      if (!isPlainObject$2(properties)) {
        die("'extendObservable' only accepts plain objects as second argument");
      }
      if (isObservable(properties) || isObservable(annotations)) {
        die("Extending an object with another observable (object) is not supported");
      }
    }
    var descriptors2 = getOwnPropertyDescriptors(properties);
    initObservable(function() {
      var adm = asObservableObject(target, options)[$mobx];
      ownKeys(descriptors2).forEach(function(key) {
        adm.extend_(
          key,
          descriptors2[key],
          // must pass "undefined" for { key: undefined }
          !annotations ? true : key in annotations ? annotations[key] : true
        );
      });
    });
    return target;
  }
  function getDependencyTree(thing, property) {
    return nodeToDependencyTree(getAtom(thing, property));
  }
  function nodeToDependencyTree(node) {
    var result = {
      name: node.name_
    };
    if (node.observing_ && node.observing_.length > 0) {
      result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
    }
    return result;
  }
  function unique(list) {
    return Array.from(new Set(list));
  }
  var generatorId = 0;
  function FlowCancellationError() {
    this.message = "FLOW_CANCELLED";
  }
  FlowCancellationError.prototype = /* @__PURE__ */ Object.create(Error.prototype);
  var flowAnnotation = /* @__PURE__ */ createFlowAnnotation("flow");
  var flowBoundAnnotation = /* @__PURE__ */ createFlowAnnotation("flow.bound", {
    bound: true
  });
  var flow = /* @__PURE__ */ Object.assign(function flow2(arg1, arg2) {
    if (is20223Decorator(arg2)) {
      return flowAnnotation.decorate_20223_(arg1, arg2);
    }
    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, flowAnnotation);
    }
    if (arguments.length !== 1) {
      die("Flow expects single argument with generator function");
    }
    var generator = arg1;
    var name2 = generator.name || "<unnamed flow>";
    var res = function res2() {
      var ctx = this;
      var args = arguments;
      var runId = ++generatorId;
      var gen = action(name2 + " - runid: " + runId + " - init", generator).apply(ctx, args);
      var rejector;
      var pendingPromise = void 0;
      var promise = new Promise(function(resolve, reject) {
        var stepId = 0;
        rejector = reject;
        function onFulfilled(res3) {
          pendingPromise = void 0;
          var ret;
          try {
            ret = action(name2 + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res3);
          } catch (e2) {
            return reject(e2);
          }
          next(ret);
        }
        function onRejected(err) {
          pendingPromise = void 0;
          var ret;
          try {
            ret = action(name2 + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
          } catch (e2) {
            return reject(e2);
          }
          next(ret);
        }
        function next(ret) {
          if (isFunction$1(ret == null ? void 0 : ret.then)) {
            ret.then(next, reject);
            return;
          }
          if (ret.done) {
            return resolve(ret.value);
          }
          pendingPromise = Promise.resolve(ret.value);
          return pendingPromise.then(onFulfilled, onRejected);
        }
        onFulfilled(void 0);
      });
      promise.cancel = action(name2 + " - runid: " + runId + " - cancel", function() {
        try {
          if (pendingPromise) {
            cancelPromise(pendingPromise);
          }
          var _res = gen["return"](void 0);
          var yieldedPromise = Promise.resolve(_res.value);
          yieldedPromise.then(noop, noop);
          cancelPromise(yieldedPromise);
          rejector(new FlowCancellationError());
        } catch (e2) {
          rejector(e2);
        }
      });
      return promise;
    };
    res.isMobXFlow = true;
    return res;
  }, flowAnnotation);
  flow.bound = /* @__PURE__ */ createDecoratorAnnotation(flowBoundAnnotation);
  function cancelPromise(promise) {
    if (isFunction$1(promise.cancel)) {
      promise.cancel();
    }
  }
  function isFlow(fn2) {
    return (fn2 == null ? void 0 : fn2.isMobXFlow) === true;
  }
  function _isObservable(value, property) {
    if (!value) {
      return false;
    }
    if (property !== void 0) {
      if (isObservableMap(value) || isObservableArray(value)) {
        return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
      }
      if (isObservableObject(value)) {
        return value[$mobx].values_.has(property);
      }
      return false;
    }
    return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
  }
  function isObservable(value) {
    if (arguments.length !== 1) {
      die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
    }
    return _isObservable(value);
  }
  function trace() {
    var enterBreakPoint = false;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[args.length - 1] === "boolean") {
      enterBreakPoint = args.pop();
    }
    var derivation = getAtomFromArgs(args);
    if (!derivation) {
      return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
    }
    if (derivation.isTracing_ === TraceMode.NONE) {
      formatAppLog("log", "at node_modules/mobx/dist/mobx.esm.js:3460", "[mobx.trace] '" + derivation.name_ + "' tracing enabled");
    }
    derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
  }
  function getAtomFromArgs(args) {
    switch (args.length) {
      case 0:
        return globalState.trackingDerivation;
      case 1:
        return getAtom(args[0]);
      case 2:
        return getAtom(args[0], args[1]);
    }
  }
  function transaction(action2, thisArg) {
    if (thisArg === void 0) {
      thisArg = void 0;
    }
    startBatch();
    try {
      return action2.apply(thisArg);
    } finally {
      endBatch();
    }
  }
  function getAdm(target) {
    return target[$mobx];
  }
  var objectProxyTraps = {
    has: function has2(target, name2) {
      if (globalState.trackingDerivation) {
        warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
      }
      return getAdm(target).has_(name2);
    },
    get: function get2(target, name2) {
      return getAdm(target).get_(name2);
    },
    set: function set3(target, name2, value) {
      var _getAdm$set_;
      if (!isStringish(name2)) {
        return false;
      }
      if (!getAdm(target).values_.has(name2)) {
        warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
      }
      return (_getAdm$set_ = getAdm(target).set_(name2, value, true)) != null ? _getAdm$set_ : true;
    },
    deleteProperty: function deleteProperty(target, name2) {
      var _getAdm$delete_;
      {
        warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
      }
      if (!isStringish(name2)) {
        return false;
      }
      return (_getAdm$delete_ = getAdm(target).delete_(name2, true)) != null ? _getAdm$delete_ : true;
    },
    defineProperty: function defineProperty2(target, name2, descriptor) {
      var _getAdm$definePropert;
      {
        warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
      }
      return (_getAdm$definePropert = getAdm(target).defineProperty_(name2, descriptor)) != null ? _getAdm$definePropert : true;
    },
    ownKeys: function ownKeys2(target) {
      if (globalState.trackingDerivation) {
        warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
      }
      return getAdm(target).ownKeys_();
    },
    preventExtensions: function preventExtensions(target) {
      die(13);
    }
  };
  function asDynamicObservableObject(target, options) {
    var _target$$mobx, _target$$mobx$proxy_;
    assertProxies();
    target = asObservableObject(target, options);
    return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
  }
  function hasInterceptors(interceptable) {
    return interceptable.interceptors_ !== void 0 && interceptable.interceptors_.length > 0;
  }
  function registerInterceptor(interceptable, handler) {
    var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
    interceptors.push(handler);
    return once(function() {
      var idx = interceptors.indexOf(handler);
      if (idx !== -1) {
        interceptors.splice(idx, 1);
      }
    });
  }
  function interceptChange(interceptable, change) {
    var prevU = untrackedStart();
    try {
      var interceptors = [].concat(interceptable.interceptors_ || []);
      for (var i2 = 0, l2 = interceptors.length; i2 < l2; i2++) {
        change = interceptors[i2](change);
        if (change && !change.type) {
          die(14);
        }
        if (!change) {
          break;
        }
      }
      return change;
    } finally {
      untrackedEnd(prevU);
    }
  }
  function hasListeners(listenable) {
    return listenable.changeListeners_ !== void 0 && listenable.changeListeners_.length > 0;
  }
  function registerListener(listenable, handler) {
    var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
    listeners.push(handler);
    return once(function() {
      var idx = listeners.indexOf(handler);
      if (idx !== -1) {
        listeners.splice(idx, 1);
      }
    });
  }
  function notifyListeners(listenable, change) {
    var prevU = untrackedStart();
    var listeners = listenable.changeListeners_;
    if (!listeners) {
      return;
    }
    listeners = listeners.slice();
    for (var i2 = 0, l2 = listeners.length; i2 < l2; i2++) {
      listeners[i2](change);
    }
    untrackedEnd(prevU);
  }
  var keysSymbol = /* @__PURE__ */ Symbol("mobx-keys");
  function makeAutoObservable(target, overrides, options) {
    {
      if (!isPlainObject$2(target) && !isPlainObject$2(Object.getPrototypeOf(target))) {
        die("'makeAutoObservable' can only be used for classes that don't have a superclass");
      }
      if (isObservableObject(target)) {
        die("makeAutoObservable can only be used on objects not already made observable");
      }
    }
    if (isPlainObject$2(target)) {
      return extendObservable(target, target, overrides, options);
    }
    initObservable(function() {
      var adm = asObservableObject(target, options)[$mobx];
      if (!target[keysSymbol]) {
        var proto = Object.getPrototypeOf(target);
        var keys2 = new Set([].concat(ownKeys(target), ownKeys(proto)));
        keys2["delete"]("constructor");
        keys2["delete"]($mobx);
        addHiddenProp(proto, keysSymbol, keys2);
      }
      target[keysSymbol].forEach(function(key) {
        return adm.make_(
          key,
          // must pass "undefined" for { key: undefined }
          !overrides ? true : key in overrides ? overrides[key] : true
        );
      });
    });
    return target;
  }
  var SPLICE = "splice";
  var UPDATE = "update";
  var MAX_SPLICE_SIZE = 1e4;
  var arrayTraps = {
    get: function get3(target, name2) {
      var adm = target[$mobx];
      if (name2 === $mobx) {
        return adm;
      }
      if (name2 === "length") {
        return adm.getArrayLength_();
      }
      if (typeof name2 === "string" && !isNaN(name2)) {
        return adm.get_(parseInt(name2));
      }
      if (hasProp(arrayExtensions, name2)) {
        return arrayExtensions[name2];
      }
      return target[name2];
    },
    set: function set4(target, name2, value) {
      var adm = target[$mobx];
      if (name2 === "length") {
        adm.setArrayLength_(value);
      }
      if (typeof name2 === "symbol" || isNaN(name2)) {
        target[name2] = value;
      } else {
        adm.set_(parseInt(name2), value);
      }
      return true;
    },
    preventExtensions: function preventExtensions2() {
      die(15);
    }
  };
  var ObservableArrayAdministration = /* @__PURE__ */ function() {
    function ObservableArrayAdministration2(name2, enhancer, owned_, legacyMode_) {
      if (name2 === void 0) {
        name2 = "ObservableArray@" + getNextId();
      }
      this.owned_ = void 0;
      this.legacyMode_ = void 0;
      this.atom_ = void 0;
      this.values_ = [];
      this.interceptors_ = void 0;
      this.changeListeners_ = void 0;
      this.enhancer_ = void 0;
      this.dehancer = void 0;
      this.proxy_ = void 0;
      this.lastKnownLength_ = 0;
      this.owned_ = owned_;
      this.legacyMode_ = legacyMode_;
      this.atom_ = new Atom(name2);
      this.enhancer_ = function(newV, oldV) {
        return enhancer(newV, oldV, name2 + "[..]");
      };
    }
    var _proto = ObservableArrayAdministration2.prototype;
    _proto.dehanceValue_ = function dehanceValue_(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.dehanceValues_ = function dehanceValues_(values2) {
      if (this.dehancer !== void 0 && values2.length > 0) {
        return values2.map(this.dehancer);
      }
      return values2;
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately === void 0) {
        fireImmediately = false;
      }
      if (fireImmediately) {
        listener({
          observableKind: "array",
          object: this.proxy_,
          debugObjectName: this.atom_.name_,
          type: "splice",
          index: 0,
          added: this.values_.slice(),
          addedCount: this.values_.length,
          removed: [],
          removedCount: 0
        });
      }
      return registerListener(this, listener);
    };
    _proto.getArrayLength_ = function getArrayLength_() {
      this.atom_.reportObserved();
      return this.values_.length;
    };
    _proto.setArrayLength_ = function setArrayLength_(newLength) {
      if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {
        die("Out of range: " + newLength);
      }
      var currentLength = this.values_.length;
      if (newLength === currentLength) {
        return;
      } else if (newLength > currentLength) {
        var newItems = new Array(newLength - currentLength);
        for (var i2 = 0; i2 < newLength - currentLength; i2++) {
          newItems[i2] = void 0;
        }
        this.spliceWithArray_(currentLength, 0, newItems);
      } else {
        this.spliceWithArray_(newLength, currentLength - newLength);
      }
    };
    _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
      if (oldLength !== this.lastKnownLength_) {
        die(16);
      }
      this.lastKnownLength_ += delta;
      if (this.legacyMode_ && delta > 0) {
        reserveArrayBuffer(oldLength + delta + 1);
      }
    };
    _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
      var _this = this;
      checkIfStateModificationsAreAllowed(this.atom_);
      var length = this.values_.length;
      if (index === void 0) {
        index = 0;
      } else if (index > length) {
        index = length;
      } else if (index < 0) {
        index = Math.max(0, length + index);
      }
      if (arguments.length === 1) {
        deleteCount = length - index;
      } else if (deleteCount === void 0 || deleteCount === null) {
        deleteCount = 0;
      } else {
        deleteCount = Math.max(0, Math.min(deleteCount, length - index));
      }
      if (newItems === void 0) {
        newItems = EMPTY_ARRAY;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_,
          type: SPLICE,
          index,
          removedCount: deleteCount,
          added: newItems
        });
        if (!change) {
          return EMPTY_ARRAY;
        }
        deleteCount = change.removedCount;
        newItems = change.added;
      }
      newItems = newItems.length === 0 ? newItems : newItems.map(function(v2) {
        return _this.enhancer_(v2, void 0);
      });
      if (this.legacyMode_ || true) {
        var lengthDelta = newItems.length - deleteCount;
        this.updateArrayLength_(length, lengthDelta);
      }
      var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
      if (deleteCount !== 0 || newItems.length !== 0) {
        this.notifyArraySplice_(index, newItems, res);
      }
      return this.dehanceValues_(res);
    };
    _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
      if (newItems.length < MAX_SPLICE_SIZE) {
        var _this$values_;
        return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
      } else {
        var res = this.values_.slice(index, index + deleteCount);
        var oldItems = this.values_.slice(index + deleteCount);
        this.values_.length += newItems.length - deleteCount;
        for (var i2 = 0; i2 < newItems.length; i2++) {
          this.values_[index + i2] = newItems[i2];
        }
        for (var _i2 = 0; _i2 < oldItems.length; _i2++) {
          this.values_[index + newItems.length + _i2] = oldItems[_i2];
        }
        return res;
      }
    };
    _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
      var notifySpy = !this.owned_ && isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "array",
        object: this.proxy_,
        type: UPDATE,
        debugObjectName: this.atom_.name_,
        index,
        newValue,
        oldValue
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      this.atom_.reportChanged();
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    };
    _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
      var notifySpy = !this.owned_ && isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: SPLICE,
        index,
        removed,
        added,
        removedCount: removed.length,
        addedCount: added.length
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      this.atom_.reportChanged();
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    };
    _proto.get_ = function get_(index) {
      if (this.legacyMode_ && index >= this.values_.length) {
        formatAppLog("warn", "at node_modules/mobx/dist/mobx.esm.js:3986", "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
        return void 0;
      }
      this.atom_.reportObserved();
      return this.dehanceValue_(this.values_[index]);
    };
    _proto.set_ = function set_(index, newValue) {
      var values2 = this.values_;
      if (this.legacyMode_ && index > values2.length) {
        die(17, index, values2.length);
      }
      if (index < values2.length) {
        checkIfStateModificationsAreAllowed(this.atom_);
        var oldValue = values2[index];
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            type: UPDATE,
            object: this.proxy_,
            // since "this" is the real array we need to pass its proxy
            index,
            newValue
          });
          if (!change) {
            return;
          }
          newValue = change.newValue;
        }
        newValue = this.enhancer_(newValue, oldValue);
        var changed = newValue !== oldValue;
        if (changed) {
          values2[index] = newValue;
          this.notifyArrayChildUpdate_(index, newValue, oldValue);
        }
      } else {
        var newItems = new Array(index + 1 - values2.length);
        for (var i2 = 0; i2 < newItems.length - 1; i2++) {
          newItems[i2] = void 0;
        }
        newItems[newItems.length - 1] = newValue;
        this.spliceWithArray_(values2.length, 0, newItems);
      }
    };
    return ObservableArrayAdministration2;
  }();
  function createObservableArray(initialValues, enhancer, name2, owned) {
    if (name2 === void 0) {
      name2 = "ObservableArray@" + getNextId();
    }
    if (owned === void 0) {
      owned = false;
    }
    assertProxies();
    return initObservable(function() {
      var adm = new ObservableArrayAdministration(name2, enhancer, owned, false);
      addHiddenFinalProp(adm.values_, $mobx, adm);
      var proxy = new Proxy(adm.values_, arrayTraps);
      adm.proxy_ = proxy;
      if (initialValues && initialValues.length) {
        adm.spliceWithArray_(0, 0, initialValues);
      }
      return proxy;
    });
  }
  var arrayExtensions = {
    clear: function clear() {
      return this.splice(0);
    },
    replace: function replace(newItems) {
      var adm = this[$mobx];
      return adm.spliceWithArray_(0, adm.values_.length, newItems);
    },
    // Used by JSON.stringify
    toJSON: function toJSON() {
      return this.slice();
    },
    /*
     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
     * since these functions alter the inner structure of the array, the have side effects.
     * Because the have side effects, they should not be used in computed function,
     * and for that reason the do not call dependencyState.notifyObserved
     */
    splice: function splice(index, deleteCount) {
      for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        newItems[_key - 2] = arguments[_key];
      }
      var adm = this[$mobx];
      switch (arguments.length) {
        case 0:
          return [];
        case 1:
          return adm.spliceWithArray_(index);
        case 2:
          return adm.spliceWithArray_(index, deleteCount);
      }
      return adm.spliceWithArray_(index, deleteCount, newItems);
    },
    spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
      return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
    },
    push: function push() {
      var adm = this[$mobx];
      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        items[_key2] = arguments[_key2];
      }
      adm.spliceWithArray_(adm.values_.length, 0, items);
      return adm.values_.length;
    },
    pop: function pop() {
      return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
    },
    shift: function shift() {
      return this.splice(0, 1)[0];
    },
    unshift: function unshift() {
      var adm = this[$mobx];
      for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        items[_key3] = arguments[_key3];
      }
      adm.spliceWithArray_(0, 0, items);
      return adm.values_.length;
    },
    reverse: function reverse() {
      if (globalState.trackingDerivation) {
        die(37, "reverse");
      }
      this.replace(this.slice().reverse());
      return this;
    },
    sort: function sort() {
      if (globalState.trackingDerivation) {
        die(37, "sort");
      }
      var copy = this.slice();
      copy.sort.apply(copy, arguments);
      this.replace(copy);
      return this;
    },
    remove: function remove2(value) {
      var adm = this[$mobx];
      var idx = adm.dehanceValues_(adm.values_).indexOf(value);
      if (idx > -1) {
        this.splice(idx, 1);
        return true;
      }
      return false;
    }
  };
  addArrayExtension("at", simpleFunc);
  addArrayExtension("concat", simpleFunc);
  addArrayExtension("flat", simpleFunc);
  addArrayExtension("includes", simpleFunc);
  addArrayExtension("indexOf", simpleFunc);
  addArrayExtension("join", simpleFunc);
  addArrayExtension("lastIndexOf", simpleFunc);
  addArrayExtension("slice", simpleFunc);
  addArrayExtension("toString", simpleFunc);
  addArrayExtension("toLocaleString", simpleFunc);
  addArrayExtension("toSorted", simpleFunc);
  addArrayExtension("toSpliced", simpleFunc);
  addArrayExtension("with", simpleFunc);
  addArrayExtension("every", mapLikeFunc);
  addArrayExtension("filter", mapLikeFunc);
  addArrayExtension("find", mapLikeFunc);
  addArrayExtension("findIndex", mapLikeFunc);
  addArrayExtension("findLast", mapLikeFunc);
  addArrayExtension("findLastIndex", mapLikeFunc);
  addArrayExtension("flatMap", mapLikeFunc);
  addArrayExtension("forEach", mapLikeFunc);
  addArrayExtension("map", mapLikeFunc);
  addArrayExtension("some", mapLikeFunc);
  addArrayExtension("toReversed", mapLikeFunc);
  addArrayExtension("reduce", reduceLikeFunc);
  addArrayExtension("reduceRight", reduceLikeFunc);
  function addArrayExtension(funcName, funcFactory) {
    if (typeof Array.prototype[funcName] === "function") {
      arrayExtensions[funcName] = funcFactory(funcName);
    }
  }
  function simpleFunc(funcName) {
    return function() {
      var adm = this[$mobx];
      adm.atom_.reportObserved();
      var dehancedValues = adm.dehanceValues_(adm.values_);
      return dehancedValues[funcName].apply(dehancedValues, arguments);
    };
  }
  function mapLikeFunc(funcName) {
    return function(callback, thisArg) {
      var _this2 = this;
      var adm = this[$mobx];
      adm.atom_.reportObserved();
      var dehancedValues = adm.dehanceValues_(adm.values_);
      return dehancedValues[funcName](function(element, index) {
        return callback.call(thisArg, element, index, _this2);
      });
    };
  }
  function reduceLikeFunc(funcName) {
    return function() {
      var _this3 = this;
      var adm = this[$mobx];
      adm.atom_.reportObserved();
      var dehancedValues = adm.dehanceValues_(adm.values_);
      var callback = arguments[0];
      arguments[0] = function(accumulator, currentValue, index) {
        return callback(accumulator, currentValue, index, _this3);
      };
      return dehancedValues[funcName].apply(dehancedValues, arguments);
    };
  }
  var isObservableArrayAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
  function isObservableArray(thing) {
    return isObject$1(thing) && isObservableArrayAdministration(thing[$mobx]);
  }
  var ObservableMapMarker = {};
  var ADD = "add";
  var DELETE = "delete";
  var ObservableMap = /* @__PURE__ */ function() {
    function ObservableMap2(initialData, enhancer_, name_) {
      var _this = this;
      if (enhancer_ === void 0) {
        enhancer_ = deepEnhancer;
      }
      if (name_ === void 0) {
        name_ = "ObservableMap@" + getNextId();
      }
      this.enhancer_ = void 0;
      this.name_ = void 0;
      this[$mobx] = ObservableMapMarker;
      this.data_ = void 0;
      this.hasMap_ = void 0;
      this.keysAtom_ = void 0;
      this.interceptors_ = void 0;
      this.changeListeners_ = void 0;
      this.dehancer = void 0;
      this.enhancer_ = enhancer_;
      this.name_ = name_;
      if (!isFunction$1(Map)) {
        die(18);
      }
      initObservable(function() {
        _this.keysAtom_ = createAtom(true ? _this.name_ + ".keys()" : "ObservableMap.keys()");
        _this.data_ = /* @__PURE__ */ new Map();
        _this.hasMap_ = /* @__PURE__ */ new Map();
        if (initialData) {
          _this.merge(initialData);
        }
      });
    }
    var _proto = ObservableMap2.prototype;
    _proto.has_ = function has_(key) {
      return this.data_.has(key);
    };
    _proto.has = function has3(key) {
      var _this2 = this;
      if (!globalState.trackingDerivation) {
        return this.has_(key);
      }
      var entry = this.hasMap_.get(key);
      if (!entry) {
        var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer, this.name_ + "." + stringifyKey(key) + "?", false);
        this.hasMap_.set(key, newEntry);
        onBecomeUnobserved(newEntry, function() {
          return _this2.hasMap_["delete"](key);
        });
      }
      return entry.get();
    };
    _proto.set = function set5(key, value) {
      var hasKey = this.has_(key);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: hasKey ? UPDATE : ADD,
          object: this,
          newValue: value,
          name: key
        });
        if (!change) {
          return this;
        }
        value = change.newValue;
      }
      if (hasKey) {
        this.updateValue_(key, value);
      } else {
        this.addValue_(key, value);
      }
      return this;
    };
    _proto["delete"] = function _delete(key) {
      var _this3 = this;
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: DELETE,
          object: this,
          name: key
        });
        if (!change) {
          return false;
        }
      }
      if (this.has_(key)) {
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var _change = notify || notifySpy ? {
          observableKind: "map",
          debugObjectName: this.name_,
          type: DELETE,
          object: this,
          oldValue: this.data_.get(key).value_,
          name: key
        } : null;
        if (notifySpy) {
          spyReportStart(_change);
        }
        transaction(function() {
          var _this3$hasMap_$get;
          _this3.keysAtom_.reportChanged();
          (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null || _this3$hasMap_$get.setNewValue_(false);
          var observable2 = _this3.data_.get(key);
          observable2.setNewValue_(void 0);
          _this3.data_["delete"](key);
        });
        if (notify) {
          notifyListeners(this, _change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
        return true;
      }
      return false;
    };
    _proto.updateValue_ = function updateValue_(key, newValue) {
      var observable2 = this.data_.get(key);
      newValue = observable2.prepareNewValue_(newValue);
      if (newValue !== globalState.UNCHANGED) {
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var change = notify || notifySpy ? {
          observableKind: "map",
          debugObjectName: this.name_,
          type: UPDATE,
          object: this,
          oldValue: observable2.value_,
          name: key,
          newValue
        } : null;
        if (notifySpy) {
          spyReportStart(change);
        }
        observable2.setNewValue_(newValue);
        if (notify) {
          notifyListeners(this, change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
    };
    _proto.addValue_ = function addValue_(key, newValue) {
      var _this4 = this;
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      transaction(function() {
        var _this4$hasMap_$get;
        var observable2 = new ObservableValue(newValue, _this4.enhancer_, _this4.name_ + "." + stringifyKey(key), false);
        _this4.data_.set(key, observable2);
        newValue = observable2.value_;
        (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null || _this4$hasMap_$get.setNewValue_(true);
        _this4.keysAtom_.reportChanged();
      });
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        name: key,
        newValue
      } : null;
      if (notifySpy) {
        spyReportStart(change);
      }
      if (notify) {
        notifyListeners(this, change);
      }
      if (notifySpy) {
        spyReportEnd();
      }
    };
    _proto.get = function get4(key) {
      if (this.has(key)) {
        return this.dehanceValue_(this.data_.get(key).get());
      }
      return this.dehanceValue_(void 0);
    };
    _proto.dehanceValue_ = function dehanceValue_(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.keys = function keys2() {
      this.keysAtom_.reportObserved();
      return this.data_.keys();
    };
    _proto.values = function values2() {
      var self2 = this;
      var keys2 = this.keys();
      return makeIterableForMap({
        next: function next() {
          var _keys$next = keys2.next(), done = _keys$next.done, value = _keys$next.value;
          return {
            done,
            value: done ? void 0 : self2.get(value)
          };
        }
      });
    };
    _proto.entries = function entries2() {
      var self2 = this;
      var keys2 = this.keys();
      return makeIterableForMap({
        next: function next() {
          var _keys$next2 = keys2.next(), done = _keys$next2.done, value = _keys$next2.value;
          return {
            done,
            value: done ? void 0 : [value, self2.get(value)]
          };
        }
      });
    };
    _proto[Symbol.iterator] = function() {
      return this.entries();
    };
    _proto.forEach = function forEach2(callback, thisArg) {
      for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done; ) {
        var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
        callback.call(thisArg, value, key, this);
      }
    };
    _proto.merge = function merge2(other) {
      var _this5 = this;
      if (isObservableMap(other)) {
        other = new Map(other);
      }
      transaction(function() {
        if (isPlainObject$2(other)) {
          getPlainObjectKeys(other).forEach(function(key) {
            return _this5.set(key, other[key]);
          });
        } else if (Array.isArray(other)) {
          other.forEach(function(_ref) {
            var key = _ref[0], value = _ref[1];
            return _this5.set(key, value);
          });
        } else if (isES6Map(other)) {
          if (!isPlainES6Map(other)) {
            die(19, other);
          }
          other.forEach(function(value, key) {
            return _this5.set(key, value);
          });
        } else if (other !== null && other !== void 0) {
          die(20, other);
        }
      });
      return this;
    };
    _proto.clear = function clear2() {
      var _this6 = this;
      transaction(function() {
        untracked(function() {
          for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.keys()), _step2; !(_step2 = _iterator2()).done; ) {
            var key = _step2.value;
            _this6["delete"](key);
          }
        });
      });
    };
    _proto.replace = function replace2(values2) {
      var _this7 = this;
      transaction(function() {
        var replacementMap = convertToMap(values2);
        var orderedData = /* @__PURE__ */ new Map();
        var keysReportChangedCalled = false;
        for (var _iterator3 = _createForOfIteratorHelperLoose(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done; ) {
          var key = _step3.value;
          if (!replacementMap.has(key)) {
            var deleted = _this7["delete"](key);
            if (deleted) {
              keysReportChangedCalled = true;
            } else {
              var value = _this7.data_.get(key);
              orderedData.set(key, value);
            }
          }
        }
        for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done; ) {
          var _step4$value = _step4.value, _key = _step4$value[0], _value = _step4$value[1];
          var keyExisted = _this7.data_.has(_key);
          _this7.set(_key, _value);
          if (_this7.data_.has(_key)) {
            var _value2 = _this7.data_.get(_key);
            orderedData.set(_key, _value2);
            if (!keyExisted) {
              keysReportChangedCalled = true;
            }
          }
        }
        if (!keysReportChangedCalled) {
          if (_this7.data_.size !== orderedData.size) {
            _this7.keysAtom_.reportChanged();
          } else {
            var iter1 = _this7.data_.keys();
            var iter2 = orderedData.keys();
            var next1 = iter1.next();
            var next2 = iter2.next();
            while (!next1.done) {
              if (next1.value !== next2.value) {
                _this7.keysAtom_.reportChanged();
                break;
              }
              next1 = iter1.next();
              next2 = iter2.next();
            }
          }
        }
        _this7.data_ = orderedData;
      });
      return this;
    };
    _proto.toString = function toString2() {
      return "[object ObservableMap]";
    };
    _proto.toJSON = function toJSON2() {
      return Array.from(this);
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately === true) {
        die("`observe` doesn't support fireImmediately=true in combination with maps.");
      }
      return registerListener(this, listener);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    return _createClass(ObservableMap2, [{
      key: "size",
      get: function get4() {
        this.keysAtom_.reportObserved();
        return this.data_.size;
      }
    }, {
      key: Symbol.toStringTag,
      get: function get4() {
        return "Map";
      }
    }]);
  }();
  var isObservableMap = /* @__PURE__ */ createInstanceofPredicate("ObservableMap", ObservableMap);
  function makeIterableForMap(iterator) {
    iterator[Symbol.toStringTag] = "MapIterator";
    return makeIterable(iterator);
  }
  function convertToMap(dataStructure) {
    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
      return dataStructure;
    } else if (Array.isArray(dataStructure)) {
      return new Map(dataStructure);
    } else if (isPlainObject$2(dataStructure)) {
      var map2 = /* @__PURE__ */ new Map();
      for (var key in dataStructure) {
        map2.set(key, dataStructure[key]);
      }
      return map2;
    } else {
      return die(21, dataStructure);
    }
  }
  var ObservableSetMarker = {};
  var ObservableSet = /* @__PURE__ */ function() {
    function ObservableSet2(initialData, enhancer, name_) {
      var _this = this;
      if (enhancer === void 0) {
        enhancer = deepEnhancer;
      }
      if (name_ === void 0) {
        name_ = "ObservableSet@" + getNextId();
      }
      this.name_ = void 0;
      this[$mobx] = ObservableSetMarker;
      this.data_ = /* @__PURE__ */ new Set();
      this.atom_ = void 0;
      this.changeListeners_ = void 0;
      this.interceptors_ = void 0;
      this.dehancer = void 0;
      this.enhancer_ = void 0;
      this.name_ = name_;
      if (!isFunction$1(Set)) {
        die(22);
      }
      this.enhancer_ = function(newV, oldV) {
        return enhancer(newV, oldV, name_);
      };
      initObservable(function() {
        _this.atom_ = createAtom(_this.name_);
        if (initialData) {
          _this.replace(initialData);
        }
      });
    }
    var _proto = ObservableSet2.prototype;
    _proto.dehanceValue_ = function dehanceValue_(value) {
      if (this.dehancer !== void 0) {
        return this.dehancer(value);
      }
      return value;
    };
    _proto.clear = function clear2() {
      var _this2 = this;
      transaction(function() {
        untracked(function() {
          for (var _iterator = _createForOfIteratorHelperLoose(_this2.data_.values()), _step; !(_step = _iterator()).done; ) {
            var value = _step.value;
            _this2["delete"](value);
          }
        });
      });
    };
    _proto.forEach = function forEach2(callbackFn, thisArg) {
      for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done; ) {
        var value = _step2.value;
        callbackFn.call(thisArg, value, value, this);
      }
    };
    _proto.add = function add(value) {
      var _this3 = this;
      checkIfStateModificationsAreAllowed(this.atom_);
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: ADD,
          object: this,
          newValue: value
        });
        if (!change) {
          return this;
        }
      }
      if (!this.has(value)) {
        transaction(function() {
          _this3.data_.add(_this3.enhancer_(value, void 0));
          _this3.atom_.reportChanged();
        });
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var _change = notify || notifySpy ? {
          observableKind: "set",
          debugObjectName: this.name_,
          type: ADD,
          object: this,
          newValue: value
        } : null;
        if (notifySpy && true) {
          spyReportStart(_change);
        }
        if (notify) {
          notifyListeners(this, _change);
        }
        if (notifySpy && true) {
          spyReportEnd();
        }
      }
      return this;
    };
    _proto["delete"] = function _delete(value) {
      var _this4 = this;
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: DELETE,
          object: this,
          oldValue: value
        });
        if (!change) {
          return false;
        }
      }
      if (this.has(value)) {
        var notifySpy = isSpyEnabled();
        var notify = hasListeners(this);
        var _change2 = notify || notifySpy ? {
          observableKind: "set",
          debugObjectName: this.name_,
          type: DELETE,
          object: this,
          oldValue: value
        } : null;
        if (notifySpy && true) {
          spyReportStart(_change2);
        }
        transaction(function() {
          _this4.atom_.reportChanged();
          _this4.data_["delete"](value);
        });
        if (notify) {
          notifyListeners(this, _change2);
        }
        if (notifySpy && true) {
          spyReportEnd();
        }
        return true;
      }
      return false;
    };
    _proto.has = function has3(value) {
      this.atom_.reportObserved();
      return this.data_.has(this.dehanceValue_(value));
    };
    _proto.entries = function entries2() {
      var values2 = this.values();
      return makeIterableForSet({
        next: function next() {
          var _values$next = values2.next(), value = _values$next.value, done = _values$next.done;
          return !done ? {
            value: [value, value],
            done
          } : {
            value: void 0,
            done
          };
        }
      });
    };
    _proto.keys = function keys2() {
      return this.values();
    };
    _proto.values = function values2() {
      this.atom_.reportObserved();
      var self2 = this;
      var values3 = this.data_.values();
      return makeIterableForSet({
        next: function next() {
          var _values$next2 = values3.next(), value = _values$next2.value, done = _values$next2.done;
          return !done ? {
            value: self2.dehanceValue_(value),
            done
          } : {
            value: void 0,
            done
          };
        }
      });
    };
    _proto.intersection = function intersection(otherSet) {
      if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
        return otherSet.intersection(this);
      } else {
        var dehancedSet = new Set(this);
        return dehancedSet.intersection(otherSet);
      }
    };
    _proto.union = function union(otherSet) {
      if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
        return otherSet.union(this);
      } else {
        var dehancedSet = new Set(this);
        return dehancedSet.union(otherSet);
      }
    };
    _proto.difference = function difference(otherSet) {
      return new Set(this).difference(otherSet);
    };
    _proto.symmetricDifference = function symmetricDifference(otherSet) {
      if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
        return otherSet.symmetricDifference(this);
      } else {
        var dehancedSet = new Set(this);
        return dehancedSet.symmetricDifference(otherSet);
      }
    };
    _proto.isSubsetOf = function isSubsetOf(otherSet) {
      return new Set(this).isSubsetOf(otherSet);
    };
    _proto.isSupersetOf = function isSupersetOf(otherSet) {
      return new Set(this).isSupersetOf(otherSet);
    };
    _proto.isDisjointFrom = function isDisjointFrom(otherSet) {
      if (isES6Set(otherSet) && !isObservableSet(otherSet)) {
        return otherSet.isDisjointFrom(this);
      } else {
        var dehancedSet = new Set(this);
        return dehancedSet.isDisjointFrom(otherSet);
      }
    };
    _proto.replace = function replace2(other) {
      var _this5 = this;
      if (isObservableSet(other)) {
        other = new Set(other);
      }
      transaction(function() {
        if (Array.isArray(other)) {
          _this5.clear();
          other.forEach(function(value) {
            return _this5.add(value);
          });
        } else if (isES6Set(other)) {
          _this5.clear();
          other.forEach(function(value) {
            return _this5.add(value);
          });
        } else if (other !== null && other !== void 0) {
          die("Cannot initialize set from " + other);
        }
      });
      return this;
    };
    _proto.observe_ = function observe_(listener, fireImmediately) {
      if (fireImmediately === true) {
        die("`observe` doesn't support fireImmediately=true in combination with sets.");
      }
      return registerListener(this, listener);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.toJSON = function toJSON2() {
      return Array.from(this);
    };
    _proto.toString = function toString2() {
      return "[object ObservableSet]";
    };
    _proto[Symbol.iterator] = function() {
      return this.values();
    };
    return _createClass(ObservableSet2, [{
      key: "size",
      get: function get4() {
        this.atom_.reportObserved();
        return this.data_.size;
      }
    }, {
      key: Symbol.toStringTag,
      get: function get4() {
        return "Set";
      }
    }]);
  }();
  var isObservableSet = /* @__PURE__ */ createInstanceofPredicate("ObservableSet", ObservableSet);
  function makeIterableForSet(iterator) {
    iterator[Symbol.toStringTag] = "SetIterator";
    return makeIterable(iterator);
  }
  var descriptorCache = /* @__PURE__ */ Object.create(null);
  var REMOVE = "remove";
  var ObservableObjectAdministration = /* @__PURE__ */ function() {
    function ObservableObjectAdministration2(target_, values_, name_, defaultAnnotation_) {
      if (values_ === void 0) {
        values_ = /* @__PURE__ */ new Map();
      }
      if (defaultAnnotation_ === void 0) {
        defaultAnnotation_ = autoAnnotation;
      }
      this.target_ = void 0;
      this.values_ = void 0;
      this.name_ = void 0;
      this.defaultAnnotation_ = void 0;
      this.keysAtom_ = void 0;
      this.changeListeners_ = void 0;
      this.interceptors_ = void 0;
      this.proxy_ = void 0;
      this.isPlainObject_ = void 0;
      this.appliedAnnotations_ = void 0;
      this.pendingKeys_ = void 0;
      this.target_ = target_;
      this.values_ = values_;
      this.name_ = name_;
      this.defaultAnnotation_ = defaultAnnotation_;
      this.keysAtom_ = new Atom(this.name_ + ".keys");
      this.isPlainObject_ = isPlainObject$2(this.target_);
      if (!isAnnotation(this.defaultAnnotation_)) {
        die("defaultAnnotation must be valid annotation");
      }
      {
        this.appliedAnnotations_ = {};
      }
    }
    var _proto = ObservableObjectAdministration2.prototype;
    _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
      return this.values_.get(key).get();
    };
    _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
      var observable2 = this.values_.get(key);
      if (observable2 instanceof ComputedValue) {
        observable2.set(newValue);
        return true;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_ || this.target_,
          name: key,
          newValue
        });
        if (!change) {
          return null;
        }
        newValue = change.newValue;
      }
      newValue = observable2.prepareNewValue_(newValue);
      if (newValue !== globalState.UNCHANGED) {
        var notify = hasListeners(this);
        var notifySpy = isSpyEnabled();
        var _change = notify || notifySpy ? {
          type: UPDATE,
          observableKind: "object",
          debugObjectName: this.name_,
          object: this.proxy_ || this.target_,
          oldValue: observable2.value_,
          name: key,
          newValue
        } : null;
        if (notifySpy) {
          spyReportStart(_change);
        }
        observable2.setNewValue_(newValue);
        if (notify) {
          notifyListeners(this, _change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
      return true;
    };
    _proto.get_ = function get_(key) {
      if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
        this.has_(key);
      }
      return this.target_[key];
    };
    _proto.set_ = function set_(key, value, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      if (hasProp(this.target_, key)) {
        if (this.values_.has(key)) {
          return this.setObservablePropValue_(key, value);
        } else if (proxyTrap) {
          return Reflect.set(this.target_, key, value);
        } else {
          this.target_[key] = value;
          return true;
        }
      } else {
        return this.extend_(key, {
          value,
          enumerable: true,
          writable: true,
          configurable: true
        }, this.defaultAnnotation_, proxyTrap);
      }
    };
    _proto.has_ = function has_(key) {
      if (!globalState.trackingDerivation) {
        return key in this.target_;
      }
      this.pendingKeys_ || (this.pendingKeys_ = /* @__PURE__ */ new Map());
      var entry = this.pendingKeys_.get(key);
      if (!entry) {
        entry = new ObservableValue(key in this.target_, referenceEnhancer, this.name_ + "." + stringifyKey(key) + "?", false);
        this.pendingKeys_.set(key, entry);
      }
      return entry.get();
    };
    _proto.make_ = function make_2(key, annotation) {
      if (annotation === true) {
        annotation = this.defaultAnnotation_;
      }
      if (annotation === false) {
        return;
      }
      assertAnnotable(this, annotation, key);
      if (!(key in this.target_)) {
        var _this$target_$storedA;
        if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
          return;
        } else {
          die(1, annotation.annotationType_, this.name_ + "." + key.toString());
        }
      }
      var source = this.target_;
      while (source && source !== objectPrototype) {
        var descriptor = getDescriptor(source, key);
        if (descriptor) {
          var outcome = annotation.make_(this, key, descriptor, source);
          if (outcome === 0) {
            return;
          }
          if (outcome === 1) {
            break;
          }
        }
        source = Object.getPrototypeOf(source);
      }
      recordAnnotationApplied(this, annotation, key);
    };
    _proto.extend_ = function extend_2(key, descriptor, annotation, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      if (annotation === true) {
        annotation = this.defaultAnnotation_;
      }
      if (annotation === false) {
        return this.defineProperty_(key, descriptor, proxyTrap);
      }
      assertAnnotable(this, annotation, key);
      var outcome = annotation.extend_(this, key, descriptor, proxyTrap);
      if (outcome) {
        recordAnnotationApplied(this, annotation, key);
      }
      return outcome;
    };
    _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      try {
        startBatch();
        var deleteOutcome = this.delete_(key);
        if (!deleteOutcome) {
          return deleteOutcome;
        }
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            object: this.proxy_ || this.target_,
            name: key,
            type: ADD,
            newValue: descriptor.value
          });
          if (!change) {
            return null;
          }
          var newValue = change.newValue;
          if (descriptor.value !== newValue) {
            descriptor = _extends({}, descriptor, {
              value: newValue
            });
          }
        }
        if (proxyTrap) {
          if (!Reflect.defineProperty(this.target_, key, descriptor)) {
            return false;
          }
        } else {
          defineProperty(this.target_, key, descriptor);
        }
        this.notifyPropertyAddition_(key, descriptor.value);
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      try {
        startBatch();
        var deleteOutcome = this.delete_(key);
        if (!deleteOutcome) {
          return deleteOutcome;
        }
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            object: this.proxy_ || this.target_,
            name: key,
            type: ADD,
            newValue: value
          });
          if (!change) {
            return null;
          }
          value = change.newValue;
        }
        var cachedDescriptor = getCachedObservablePropDescriptor(key);
        var descriptor = {
          configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
          enumerable: true,
          get: cachedDescriptor.get,
          set: cachedDescriptor.set
        };
        if (proxyTrap) {
          if (!Reflect.defineProperty(this.target_, key, descriptor)) {
            return false;
          }
        } else {
          defineProperty(this.target_, key, descriptor);
        }
        var observable2 = new ObservableValue(value, enhancer, true ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
        this.values_.set(key, observable2);
        this.notifyPropertyAddition_(key, observable2.value_);
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      try {
        startBatch();
        var deleteOutcome = this.delete_(key);
        if (!deleteOutcome) {
          return deleteOutcome;
        }
        if (hasInterceptors(this)) {
          var change = interceptChange(this, {
            object: this.proxy_ || this.target_,
            name: key,
            type: ADD,
            newValue: void 0
          });
          if (!change) {
            return null;
          }
        }
        options.name || (options.name = true ? this.name_ + "." + key.toString() : "ObservableObject.key");
        options.context = this.proxy_ || this.target_;
        var cachedDescriptor = getCachedObservablePropDescriptor(key);
        var descriptor = {
          configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
          enumerable: false,
          get: cachedDescriptor.get,
          set: cachedDescriptor.set
        };
        if (proxyTrap) {
          if (!Reflect.defineProperty(this.target_, key, descriptor)) {
            return false;
          }
        } else {
          defineProperty(this.target_, key, descriptor);
        }
        this.values_.set(key, new ComputedValue(options));
        this.notifyPropertyAddition_(key, void 0);
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.delete_ = function delete_(key, proxyTrap) {
      if (proxyTrap === void 0) {
        proxyTrap = false;
      }
      checkIfStateModificationsAreAllowed(this.keysAtom_);
      if (!hasProp(this.target_, key)) {
        return true;
      }
      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: REMOVE
        });
        if (!change) {
          return null;
        }
      }
      try {
        var _this$pendingKeys_;
        startBatch();
        var notify = hasListeners(this);
        var notifySpy = isSpyEnabled();
        var observable2 = this.values_.get(key);
        var value = void 0;
        if (!observable2 && (notify || notifySpy)) {
          var _getDescriptor2;
          value = (_getDescriptor2 = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor2.value;
        }
        if (proxyTrap) {
          if (!Reflect.deleteProperty(this.target_, key)) {
            return false;
          }
        } else {
          delete this.target_[key];
        }
        if (true) {
          delete this.appliedAnnotations_[key];
        }
        if (observable2) {
          this.values_["delete"](key);
          if (observable2 instanceof ObservableValue) {
            value = observable2.value_;
          }
          propagateChanged(observable2);
        }
        this.keysAtom_.reportChanged();
        (_this$pendingKeys_ = this.pendingKeys_) == null || (_this$pendingKeys_ = _this$pendingKeys_.get(key)) == null || _this$pendingKeys_.set(key in this.target_);
        if (notify || notifySpy) {
          var _change2 = {
            type: REMOVE,
            observableKind: "object",
            object: this.proxy_ || this.target_,
            debugObjectName: this.name_,
            oldValue: value,
            name: key
          };
          if (notifySpy) {
            spyReportStart(_change2);
          }
          if (notify) {
            notifyListeners(this, _change2);
          }
          if (notifySpy) {
            spyReportEnd();
          }
        }
      } finally {
        endBatch();
      }
      return true;
    };
    _proto.observe_ = function observe_(callback, fireImmediately) {
      if (fireImmediately === true) {
        die("`observe` doesn't support the fire immediately property for observable objects.");
      }
      return registerListener(this, callback);
    };
    _proto.intercept_ = function intercept_(handler) {
      return registerInterceptor(this, handler);
    };
    _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
      var _this$pendingKeys_2;
      var notify = hasListeners(this);
      var notifySpy = isSpyEnabled();
      if (notify || notifySpy) {
        var change = notify || notifySpy ? {
          type: ADD,
          observableKind: "object",
          debugObjectName: this.name_,
          object: this.proxy_ || this.target_,
          name: key,
          newValue: value
        } : null;
        if (notifySpy) {
          spyReportStart(change);
        }
        if (notify) {
          notifyListeners(this, change);
        }
        if (notifySpy) {
          spyReportEnd();
        }
      }
      (_this$pendingKeys_2 = this.pendingKeys_) == null || (_this$pendingKeys_2 = _this$pendingKeys_2.get(key)) == null || _this$pendingKeys_2.set(true);
      this.keysAtom_.reportChanged();
    };
    _proto.ownKeys_ = function ownKeys_() {
      this.keysAtom_.reportObserved();
      return ownKeys(this.target_);
    };
    _proto.keys_ = function keys_() {
      this.keysAtom_.reportObserved();
      return Object.keys(this.target_);
    };
    return ObservableObjectAdministration2;
  }();
  function asObservableObject(target, options) {
    var _options$name;
    if (options && isObservableObject(target)) {
      die("Options can't be provided for already observable objects.");
    }
    if (hasProp(target, $mobx)) {
      if (!(getAdministration(target) instanceof ObservableObjectAdministration)) {
        die("Cannot convert '" + getDebugName(target) + "' into observable object:\nThe target is already observable of different type.\nExtending builtins is not supported.");
      }
      return target;
    }
    if (!Object.isExtensible(target)) {
      die("Cannot make the designated object observable; it is not extensible");
    }
    var name2 = (_options$name = options == null ? void 0 : options.name) != null ? _options$name : (isPlainObject$2(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId();
    var adm = new ObservableObjectAdministration(target, /* @__PURE__ */ new Map(), String(name2), getAnnotationFromOptions(options));
    addHiddenProp(target, $mobx, adm);
    return target;
  }
  var isObservableObjectAdministration = /* @__PURE__ */ createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
  function getCachedObservablePropDescriptor(key) {
    return descriptorCache[key] || (descriptorCache[key] = {
      get: function get4() {
        return this[$mobx].getObservablePropValue_(key);
      },
      set: function set5(value) {
        return this[$mobx].setObservablePropValue_(key, value);
      }
    });
  }
  function isObservableObject(thing) {
    if (isObject$1(thing)) {
      return isObservableObjectAdministration(thing[$mobx]);
    }
    return false;
  }
  function recordAnnotationApplied(adm, annotation, key) {
    var _adm$target_$storedAn;
    {
      adm.appliedAnnotations_[key] = annotation;
    }
    (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null || delete _adm$target_$storedAn[key];
  }
  function assertAnnotable(adm, annotation, key) {
    if (!isAnnotation(annotation)) {
      die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
    }
    if (!isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
      var fieldName = adm.name_ + "." + key.toString();
      var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
      var requestedAnnotationType = annotation.annotationType_;
      die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed.\nUse 'override' annotation for methods overridden by subclass.");
    }
  }
  var ENTRY_0 = /* @__PURE__ */ createArrayEntryDescriptor(0);
  var safariPrototypeSetterInheritanceBug = /* @__PURE__ */ function() {
    var v2 = false;
    var p2 = {};
    Object.defineProperty(p2, "0", {
      set: function set5() {
        v2 = true;
      }
    });
    Object.create(p2)["0"] = 1;
    return v2 === false;
  }();
  var OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
  var StubArray = function StubArray2() {
  };
  function inherit(ctor, proto) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(ctor.prototype, proto);
    } else if (ctor.prototype.__proto__ !== void 0) {
      ctor.prototype.__proto__ = proto;
    } else {
      ctor.prototype = proto;
    }
  }
  inherit(StubArray, Array.prototype);
  var LegacyObservableArray = /* @__PURE__ */ function(_StubArray) {
    function LegacyObservableArray2(initialValues, enhancer, name2, owned) {
      var _this;
      if (name2 === void 0) {
        name2 = "ObservableArray@" + getNextId();
      }
      if (owned === void 0) {
        owned = false;
      }
      _this = _StubArray.call(this) || this;
      initObservable(function() {
        var adm = new ObservableArrayAdministration(name2, enhancer, owned, true);
        adm.proxy_ = _this;
        addHiddenFinalProp(_this, $mobx, adm);
        if (initialValues && initialValues.length) {
          _this.spliceWithArray(0, 0, initialValues);
        }
        if (safariPrototypeSetterInheritanceBug) {
          Object.defineProperty(_this, "0", ENTRY_0);
        }
      });
      return _this;
    }
    _inheritsLoose(LegacyObservableArray2, _StubArray);
    var _proto = LegacyObservableArray2.prototype;
    _proto.concat = function concat() {
      this[$mobx].atom_.reportObserved();
      for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
        arrays[_key] = arguments[_key];
      }
      return Array.prototype.concat.apply(
        this.slice(),
        //@ts-ignore
        arrays.map(function(a2) {
          return isObservableArray(a2) ? a2.slice() : a2;
        })
      );
    };
    _proto[Symbol.iterator] = function() {
      var self2 = this;
      var nextIndex = 0;
      return makeIterable({
        next: function next() {
          return nextIndex < self2.length ? {
            value: self2[nextIndex++],
            done: false
          } : {
            done: true,
            value: void 0
          };
        }
      });
    };
    return _createClass(LegacyObservableArray2, [{
      key: "length",
      get: function get4() {
        return this[$mobx].getArrayLength_();
      },
      set: function set5(newLength) {
        this[$mobx].setArrayLength_(newLength);
      }
    }, {
      key: Symbol.toStringTag,
      get: function get4() {
        return "Array";
      }
    }]);
  }(StubArray);
  Object.entries(arrayExtensions).forEach(function(_ref) {
    var prop = _ref[0], fn2 = _ref[1];
    if (prop !== "concat") {
      addHiddenProp(LegacyObservableArray.prototype, prop, fn2);
    }
  });
  function createArrayEntryDescriptor(index) {
    return {
      enumerable: false,
      configurable: true,
      get: function get4() {
        return this[$mobx].get_(index);
      },
      set: function set5(value) {
        this[$mobx].set_(index, value);
      }
    };
  }
  function createArrayBufferItem(index) {
    defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
  }
  function reserveArrayBuffer(max2) {
    if (max2 > OBSERVABLE_ARRAY_BUFFER_SIZE) {
      for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max2 + 100; index++) {
        createArrayBufferItem(index);
      }
      OBSERVABLE_ARRAY_BUFFER_SIZE = max2;
    }
  }
  reserveArrayBuffer(1e3);
  function createLegacyArray(initialValues, enhancer, name2) {
    return new LegacyObservableArray(initialValues, enhancer, name2);
  }
  function getAtom(thing, property) {
    if (typeof thing === "object" && thing !== null) {
      if (isObservableArray(thing)) {
        if (property !== void 0) {
          die(23);
        }
        return thing[$mobx].atom_;
      }
      if (isObservableSet(thing)) {
        return thing.atom_;
      }
      if (isObservableMap(thing)) {
        if (property === void 0) {
          return thing.keysAtom_;
        }
        var observable2 = thing.data_.get(property) || thing.hasMap_.get(property);
        if (!observable2) {
          die(25, property, getDebugName(thing));
        }
        return observable2;
      }
      if (isObservableObject(thing)) {
        if (!property) {
          return die(26);
        }
        var _observable = thing[$mobx].values_.get(property);
        if (!_observable) {
          die(27, property, getDebugName(thing));
        }
        return _observable;
      }
      if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
        return thing;
      }
    } else if (isFunction$1(thing)) {
      if (isReaction(thing[$mobx])) {
        return thing[$mobx];
      }
    }
    die(28);
  }
  function getAdministration(thing, property) {
    if (!thing) {
      die(29);
    }
    if (property !== void 0) {
      return getAdministration(getAtom(thing, property));
    }
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
    if (isObservableMap(thing) || isObservableSet(thing)) {
      return thing;
    }
    if (thing[$mobx]) {
      return thing[$mobx];
    }
    die(24, thing);
  }
  function getDebugName(thing, property) {
    var named;
    if (property !== void 0) {
      named = getAtom(thing, property);
    } else if (isAction(thing)) {
      return thing.name;
    } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
      named = getAdministration(thing);
    } else {
      named = getAtom(thing);
    }
    return named.name_;
  }
  function initObservable(cb) {
    var derivation = untrackedStart();
    var allowStateChanges2 = allowStateChangesStart(true);
    startBatch();
    try {
      return cb();
    } finally {
      endBatch();
      allowStateChangesEnd(allowStateChanges2);
      untrackedEnd(derivation);
    }
  }
  var toString$1 = objectPrototype.toString;
  function deepEqual(a2, b2, depth) {
    if (depth === void 0) {
      depth = -1;
    }
    return eq(a2, b2, depth);
  }
  function eq(a2, b2, depth, aStack, bStack) {
    if (a2 === b2) {
      return a2 !== 0 || 1 / a2 === 1 / b2;
    }
    if (a2 == null || b2 == null) {
      return false;
    }
    if (a2 !== a2) {
      return b2 !== b2;
    }
    var type = typeof a2;
    if (type !== "function" && type !== "object" && typeof b2 != "object") {
      return false;
    }
    var className = toString$1.call(a2);
    if (className !== toString$1.call(b2)) {
      return false;
    }
    switch (className) {
      case "[object RegExp]":
      case "[object String]":
        return "" + a2 === "" + b2;
      case "[object Number]":
        if (+a2 !== +a2) {
          return +b2 !== +b2;
        }
        return +a2 === 0 ? 1 / +a2 === 1 / b2 : +a2 === +b2;
      case "[object Date]":
      case "[object Boolean]":
        return +a2 === +b2;
      case "[object Symbol]":
        return typeof Symbol !== "undefined" && Symbol.valueOf.call(a2) === Symbol.valueOf.call(b2);
      case "[object Map]":
      case "[object Set]":
        if (depth >= 0) {
          depth++;
        }
        break;
    }
    a2 = unwrap(a2);
    b2 = unwrap(b2);
    var areArrays = className === "[object Array]";
    if (!areArrays) {
      if (typeof a2 != "object" || typeof b2 != "object") {
        return false;
      }
      var aCtor = a2.constructor, bCtor = b2.constructor;
      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor && isFunction$1(bCtor) && bCtor instanceof bCtor) && "constructor" in a2 && "constructor" in b2) {
        return false;
      }
    }
    if (depth === 0) {
      return false;
    } else if (depth < 0) {
      depth = -1;
    }
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      if (aStack[length] === a2) {
        return bStack[length] === b2;
      }
    }
    aStack.push(a2);
    bStack.push(b2);
    if (areArrays) {
      length = a2.length;
      if (length !== b2.length) {
        return false;
      }
      while (length--) {
        if (!eq(a2[length], b2[length], depth - 1, aStack, bStack)) {
          return false;
        }
      }
    } else {
      var keys2 = Object.keys(a2);
      var key;
      length = keys2.length;
      if (Object.keys(b2).length !== length) {
        return false;
      }
      while (length--) {
        key = keys2[length];
        if (!(hasProp(b2, key) && eq(a2[key], b2[key], depth - 1, aStack, bStack))) {
          return false;
        }
      }
    }
    aStack.pop();
    bStack.pop();
    return true;
  }
  function unwrap(a2) {
    if (isObservableArray(a2)) {
      return a2.slice();
    }
    if (isES6Map(a2) || isObservableMap(a2)) {
      return Array.from(a2.entries());
    }
    if (isES6Set(a2) || isObservableSet(a2)) {
      return Array.from(a2.entries());
    }
    return a2;
  }
  var _getGlobal$Iterator;
  var maybeIteratorPrototype = ((_getGlobal$Iterator = getGlobal().Iterator) == null ? void 0 : _getGlobal$Iterator.prototype) || {};
  function makeIterable(iterator) {
    iterator[Symbol.iterator] = getSelf;
    return Object.assign(Object.create(maybeIteratorPrototype), iterator);
  }
  function getSelf() {
    return this;
  }
  function isAnnotation(thing) {
    return (
      // Can be function
      thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction$1(thing.make_) && isFunction$1(thing.extend_)
    );
  }
  ["Symbol", "Map", "Set"].forEach(function(m2) {
    var g2 = getGlobal();
    if (typeof g2[m2] === "undefined") {
      die("MobX requires global '" + m2 + "' to be available or polyfilled");
    }
  });
  if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
      spy,
      extras: {
        getDebugName
      },
      $mobx
    });
  }
  const _sfc_main$1h = /* @__PURE__ */ vue.defineComponent({
    __name: "Icon",
    props: {
      type: { type: String, required: true },
      size: { type: Number, required: false, default: 16 },
      width: { type: Number, required: false },
      height: { type: Number, required: false },
      iconClassName: { type: String, required: false },
      iconStyle: { type: null, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const urlMap2 = {
        "icon-a-1": "https://yx-web-nosdn.netease.im/common/7c2e2c6ff08f4ed60f3ca7d5ab6d38ac/icon-a-1.png",
        "icon-a-2": "https://yx-web-nosdn.netease.im/common/bb61c05013350e980b3acf77a00aa7b7/icon-a-2.png",
        "icon-a-3": "https://yx-web-nosdn.netease.im/common/bfe80222635ec3f07e41b2819d002a4c/icon-a-3.png",
        "icon-a-4": "https://yx-web-nosdn.netease.im/common/e6dd252af94a4716edc191f7d3812042/icon-a-4.png",
        "icon-a-5": "https://yx-web-nosdn.netease.im/common/4e01e93f3e795d8aeb140e924d8b1206/icon-a-5.png",
        "icon-a-6": "https://yx-web-nosdn.netease.im/common/a1fa1174a588a984845ba871b1f1e3b0/icon-a-6.png",
        "icon-a-7": "https://yx-web-nosdn.netease.im/common/e0e30470561cf90446ec31c6d5b206a5/icon-a-7.png",
        "icon-a-8": "https://yx-web-nosdn.netease.im/common/e44ceea2c764bfbe773e61483ae857eb/icon-a-8.png",
        "icon-a-9": "https://yx-web-nosdn.netease.im/common/f4e5b303cb77d9ce67a0baf4efaa1125/icon-a-9.png",
        "icon-a-10": "https://yx-web-nosdn.netease.im/common/28e46e6cc468c4ff6f44532bd6b7f464/icon-a-10.png",
        "icon-a-11": "https://yx-web-nosdn.netease.im/common/f265ea5a782cebabae08a079045caf2c/icon-a-11.png",
        "icon-a-12": "https://yx-web-nosdn.netease.im/common/20043e6f8d619ab7bca69f1a0d5a0e56/icon-a-12.png",
        "icon-a-13": "https://yx-web-nosdn.netease.im/common/c2b2d52a97eea83efb10c9bbc34dc104/icon-a-13.png",
        "icon-a-14": "https://yx-web-nosdn.netease.im/common/37486551a8bd31e3446ae862cddd3067/icon-a-14.png",
        "icon-a-15": "https://yx-web-nosdn.netease.im/common/e383cc57dcb7a903887031ed0d341fef/icon-a-15.png",
        "icon-a-16": "https://yx-web-nosdn.netease.im/common/73e2f9507f8aac7238896a3f1ee8305a/icon-a-16.png",
        "icon-a-17": "https://yx-web-nosdn.netease.im/common/51a80e8e81a8aa531d1c68e6f79f7d58/icon-a-17.png",
        "icon-a-18": "https://yx-web-nosdn.netease.im/common/20f8c6153ba0f51c038e04f2fbedf767/icon-a-18.png",
        "icon-a-19": "https://yx-web-nosdn.netease.im/common/47d420b5251ca7b9ddc564b42564eb01/icon-a-19.png",
        "icon-a-20": "https://yx-web-nosdn.netease.im/common/8fad6b9427b49f5bfd1a8ec0f8a77fac/icon-a-20.png",
        "icon-a-21": "https://yx-web-nosdn.netease.im/common/6fa17035135cebe4ca1512b454fa38c2/icon-a-21.png",
        "icon-a-22": "https://yx-web-nosdn.netease.im/common/12189563eea22258b847cf900dcbc4d4/icon-a-22.png",
        "icon-a-23": "https://yx-web-nosdn.netease.im/common/3b7dcfe14788bd7d8c2da8aad6c24baa/icon-a-23.png",
        "icon-a-24": "https://yx-web-nosdn.netease.im/common/6bb0879272c8a3c73524f3b728a93c10/icon-a-24.png",
        "icon-a-25": "https://yx-web-nosdn.netease.im/common/1f93dac2bdef1f91ca2f7302065954d5/icon-a-25.png",
        "icon-a-26": "https://yx-web-nosdn.netease.im/common/aa3c8e63ee6c6d605f4606a8094f2094/icon-a-26.png",
        "icon-a-27": "https://yx-web-nosdn.netease.im/common/000447b3172d70d1b739a170c377eae2/icon-a-27.png",
        "icon-a-28": "https://yx-web-nosdn.netease.im/common/27c3b8d1acb6f234a7591c2358b549bf/icon-a-28.png",
        "icon-a-29": "https://yx-web-nosdn.netease.im/common/fbae68926f43367022d0b0c95c15adcf/icon-a-29.png",
        "icon-a-30": "https://yx-web-nosdn.netease.im/common/61c0b6c12bc6ad2b7e0511d843b03265/icon-a-30.png",
        "icon-a-31": "https://yx-web-nosdn.netease.im/common/202e7abeaecf651f6da3f7f695ef8752/icon-a-31.png",
        "icon-a-32": "https://yx-web-nosdn.netease.im/common/6ef4958d39866165212c1b60bc7c6a55/icon-a-32.png",
        "icon-a-33": "https://yx-web-nosdn.netease.im/common/18f8b53d57a6b47c3876b6938f2f57b9/icon-a-33.png",
        "icon-a-34": "https://yx-web-nosdn.netease.im/common/84d7491e6d5a6d53848b6a3d12a739b2/icon-a-34.png",
        "icon-a-35": "https://yx-web-nosdn.netease.im/common/f03fe01986e9e25f3faf1a17c0ef78c8/icon-a-35.png",
        "icon-a-36": "https://yx-web-nosdn.netease.im/common/4617253245617bcd38ed7165bdb592d8/icon-a-36.png",
        "icon-a-37": "https://yx-web-nosdn.netease.im/common/9168b11333f59b0ff948003dedb24c84/icon-a-37.png",
        "icon-a-38": "https://yx-web-nosdn.netease.im/common/1a3cd5d62e92895dbab3d356112b5079/icon-a-38.png",
        "icon-a-39": "https://yx-web-nosdn.netease.im/common/b465db737c737ab4308c9272a00a1fdf/icon-a-39.png",
        "icon-a-40": "https://yx-web-nosdn.netease.im/common/6bca766a4904e10934ea2f2450c341b5/icon-a-40.png",
        "icon-a-41": "https://yx-web-nosdn.netease.im/common/12d5055618b619b568342f0619cacf0c/icon-a-41.png",
        "icon-a-42": "https://yx-web-nosdn.netease.im/common/8851ccd815375180bd7f8728ead1cdf1/icon-a-42.png",
        "icon-a-43": "https://yx-web-nosdn.netease.im/common/1ac7cacc9d0063d165f8e2bc3020bfff/icon-a-43.png",
        "icon-a-44": "https://yx-web-nosdn.netease.im/common/5735260c7e240beaabc360365e6d60c5/icon-a-44.png",
        "icon-a-45": "https://yx-web-nosdn.netease.im/common/07372c06915a7d0a977a4f042522e2a7/icon-a-45.png",
        "icon-a-46": "https://yx-web-nosdn.netease.im/common/40c5b2b5769166b51c968942f4abed95/icon-a-46.png",
        "icon-a-47": "https://yx-web-nosdn.netease.im/common/9334c3ec8c8d54a9a3271a3536ff7c62/icon-a-47.png",
        "icon-a-48": "https://yx-web-nosdn.netease.im/common/5630ab646533dd6de7e3c1accc3d2ca1/icon-a-48.png",
        "icon-a-49": "https://yx-web-nosdn.netease.im/common/f2412538fa0da38549c23fd44b25bdfb/icon-a-49.png",
        "icon-a-50": "https://yx-web-nosdn.netease.im/common/1f28ffd1413aa3fcce1c17aff3694d41/icon-a-50.png",
        "icon-a-51": "https://yx-web-nosdn.netease.im/common/a99b57b586a85c23cbd8ed65d1a16765/icon-a-51.png",
        "icon-a-52": "https://yx-web-nosdn.netease.im/common/ce6f64bbe45a42108fd1b1a7b1dae606/icon-a-52.png",
        "icon-a-53": "https://yx-web-nosdn.netease.im/common/ba5dc56bf8f550da8c2dc1c94e2ee7fb/icon-a-53.png",
        "icon-a-54": "https://yx-web-nosdn.netease.im/common/81f5b3b693d9133030c013f0f21462ab/icon-a-54.png",
        "icon-a-55": "https://yx-web-nosdn.netease.im/common/758ed38dea207d60855969689a5dd68b/icon-a-55.png",
        "icon-a-56": "https://yx-web-nosdn.netease.im/common/a20bee2372cbe399191af3d76a5aad31/icon-a-56.png",
        "icon-a-57": "https://yx-web-nosdn.netease.im/common/a17fbdbc64cf4b55be377f18ed81879a/icon-a-57.png",
        "icon-a-58": "https://yx-web-nosdn.netease.im/common/784b31cda55da76d8278a5bd53c2c7e4/icon-a-58.png",
        "icon-a-59": "https://yx-web-nosdn.netease.im/common/c716afbc25b8809dfb9ca80a09051f6f/icon-a-59.png",
        "icon-a-60": "https://yx-web-nosdn.netease.im/common/54de44be20c5d21ffad08176b24560a0/icon-a-60.png",
        "icon-a-61": "https://yx-web-nosdn.netease.im/common/0628fd4507e2a3455028f376d8d5d80a/icon-a-61.png",
        "icon-a-62": "https://yx-web-nosdn.netease.im/common/fa336dc373d5e395a1e9a541dc9953d2/icon-a-62.png",
        "icon-a-63": "https://yx-web-nosdn.netease.im/common/868ee8c664b32b34d554d02fc406ab70/icon-a-63.png",
        "icon-a-64": "https://yx-web-nosdn.netease.im/common/4e33aadf3ca3b918e73ef07e21eb96ac/icon-a-64.png",
        "icon-a-65": "https://yx-web-nosdn.netease.im/common/c6e5563811d94c82426036b9f96d6de5/icon-a-65.png",
        "icon-a-66": "https://yx-web-nosdn.netease.im/common/8baa1f43b4e523e524c54f3340ef21cb/icon-a-66.png",
        "icon-a-67": "https://yx-web-nosdn.netease.im/common/307c3426dccf1252b5967956bcdcf58a/icon-a-67.png",
        "icon-a-68": "https://yx-web-nosdn.netease.im/common/196f62aa8e8a38bbbcd818ad42729714/icon-a-68.png",
        "icon-a-70": "https://yx-web-nosdn.netease.im/common/fb54482390faf9d8d9d607d7e3ab691f/icon-a-70.png",
        "icon-a-Frame7": "https://yx-web-nosdn.netease.im/common/c5c3d0ee0a4000736827cedfd0610172/icon-a-Frame7.png",
        "icon-a-Frame8": "https://yx-web-nosdn.netease.im/common/9f77f834a99c29ed5c4b4b54b7ade468/icon-a-Frame8.png",
        "icon-addition": "https://yx-web-nosdn.netease.im/common/6302fcf17e9c4ac65b392553aaccf9b1/icon-addition.png",
        "icon-biaoqing": "https://yx-web-nosdn.netease.im/common/1a98df356ed629193e50bea570e02a53/icon-biaoqing.png",
        "icon-chehui": "https://yx-web-nosdn.netease.im/common/958cb6797f69bdfbf5441da25ed997c3/icon-chehui.png",
        "icon-chuangjianqunzu": "https://yx-web-nosdn.netease.im/common/7b00839704359b7c10f32af7cc8b5911/icon-chuangjianqunzu.png",
        "icon-computed": "https://yx-web-nosdn.netease.im/common/352cd94c93347f01936b50bb1487b5a4/icon-computed.png",
        "icon-erfenzhiyiyidu": "https://yx-web-nosdn.netease.im/common/aa6b529567ee6aeb801f34f228600b04/icon-erfenzhiyiyidu.png",
        "icon-Excel": "https://yx-web-nosdn.netease.im/common/a9793bbb8a7237e9e92f57ad1b469baf/icon-Excel.png",
        "icon-fasong": "https://yx-web-nosdn.netease.im/common/f8d855dde4840989b4c88e904e1c23bf/icon-fasong.png",
        "icon-fuzhi1": "https://yx-web-nosdn.netease.im/common/9e0ba675eb4548bffe19da823fb712e3/icon-fuzhi1.png",
        "icon-guanbi": "https://yx-web-nosdn.netease.im/common/2d07f146ecb4b616632f0fcfdd02b5be/icon-guanbi.png",
        "icon-guanyu": "https://yx-web-nosdn.netease.im/common/24d2344c49b551d5a605b3e5e3e6f6da/icon-guanyu.png",
        "icon-huifu": "https://yx-web-nosdn.netease.im/common/153c273cb7b075fc0c37487655c5cbfc/icon-huifu.png",
        "icon-im-xuanzhong": "https://yx-web-nosdn.netease.im/common/468aaecf148e23c84b821835021dfee1/icon-im-xuanzhong.png",
        "icon-jiantou": "https://yx-web-nosdn.netease.im/common/c9bb28670c41e208b1d9bcedd6de88a1/icon-jiantou.png",
        "icon-jiaruqunzu": "https://yx-web-nosdn.netease.im/common/a27ba47b93131b7c52d829b7012fa966/icon-jiaruqunzu.png",
        "icon-kefu": "https://yx-web-nosdn.netease.im/common/4ddc1b9557e6672b0b45fb8fb992c992/icon-kefu.png",
        "icon-lahei": "https://yx-web-nosdn.netease.im/common/e9054279ca62db944ef6e5a76687a93a/icon-lahei.png",
        "icon-lishixiaoxi": "https://yx-web-nosdn.netease.im/common/77888d982110f3c709a3ff4fd24d48dd/icon-lishixiaoxi.png",
        "icon-More": "https://yx-web-nosdn.netease.im/common/137ad07f3245dc220d5546433db63786/icon-More.png",
        "icon-PPT": "https://yx-web-nosdn.netease.im/common/1991f8d57d1d432fcd930e4049403958/icon-PPT.png",
        "icon-qita": "https://yx-web-nosdn.netease.im/common/c6f687c792ef029bef1e59ccce986922/icon-qita.png",
        "icon-quxiaoxiaoximiandarao": "https://yx-web-nosdn.netease.im/common/f6f54973789b69939c57ae94a38e8d25/icon-quxiaoxiaoximiandarao.png",
        "icon-quxiaozhiding": "https://yx-web-nosdn.netease.im/common/ad2d451e8f1ee36ec9cec6787d6074c0/icon-quxiaozhiding.png",
        "icon-RAR1": "https://yx-web-nosdn.netease.im/common/27a743e5696c1ca4416b75c5dde0252c/icon-RAR1.png",
        "icon-shanchu": "https://yx-web-nosdn.netease.im/common/d96f9c0113af4d86dd4e5ecf2e49711b/icon-shanchu.png",
        "icon-shandiao": "https://yx-web-nosdn.netease.im/common/14eea1edc7801449a30700a3c9d604c6/icon-shandiao.png",
        "icon-shezhi": "https://yx-web-nosdn.netease.im/common/698d483a7aacade68ea976f727184e1e/setting.png",
        "icon-shezhi1": "https://yx-web-nosdn.netease.im/common/eced271ac35864b7c716262f1a37217e/icon-shezhi1.png",
        "icon-shipin": "https://yx-web-nosdn.netease.im/common/455c333219318f3b96f748d6753eda4a/icon-shipin.png",
        "icon-shipin8": "https://yx-web-nosdn.netease.im/common/73fededbe5b97dec0246e438d33ae614/icon-shipin8.png",
        "icon-shipinyuyin": "https://yx-web-nosdn.netease.im/common/09b16fe9a2b824ded4162f25333e44e1/icon-shipinyuyin.png",
        "icon-sifenzhisanyidu": "https://yx-web-nosdn.netease.im/common/b1234a4255d3187fa9a767bfed8f4d96/icon-sifenzhisanyidu.png",
        "icon-sifenzhiyiyidu": "https://yx-web-nosdn.netease.im/common/11c7a7e79c57eda20c5ca9d98b0d7e8a/icon-sifenzhiyiyidu.png",
        "icon-sousuo": "https://yx-web-nosdn.netease.im/common/2ccfdfa640c72167f228e7d76068e5f5/icon-sousuo.png",
        "icon-team": "https://yx-web-nosdn.netease.im/common/140e8fbd1cc2df4c878acb17405471f7/icon-team.png",
        "icon-zuojiantou": "https://yx-web-nosdn.netease.im/common/9ab796030ac24a126dedc60fd60613ce/icon-zuojiantou.png",
        "icon-zhuanfa": "https://yx-web-nosdn.netease.im/common/163a3343b0262a76d72d00bbbb4f8ac9/icon-zhuanfa.png",
        "icon-zhongyingwen": "https://yx-web-nosdn.netease.im/common/80a7dbae8c0207f1896e63746ac1a18a/icon-zhongyingwen.png",
        "icon-zhankai": "https://yx-web-nosdn.netease.im/common/d4f655bff9e278ea732adb6a5317bbca/icon-zhankai.png",
        "icon-yinle": "https://yx-web-nosdn.netease.im/common/98a2a366c7e06ab1b1b6ddf9b0c01d73/icon-yinle.png",
        "icon-yidu": "https://yx-web-nosdn.netease.im/common/d17d4aa7866faca55a6a1180c1e15bf6/icon-yidu.png",
        "icon-yanzheng": "https://yx-web-nosdn.netease.im/common/5a0c2769626284ff646298a7ef1f66c2/icon-yanzheng.png",
        "icon-xiaoxizhiding": "https://yx-web-nosdn.netease.im/common/cef2e824e603dde3d333d128434f90c1/icon-xiaoxizhiding.png",
        "icon-xiaoximiandarao": "https://yx-web-nosdn.netease.im/common/1c92731bb3fa91fa3fc5ff45bf9e4dbe/icon-xiaoximiandarao.png",
        "icon-Word": "https://yx-web-nosdn.netease.im/common/af0e4fa22c4b30a263a7f534b0504c23/icon-Word.png",
        "icon-wenjian": "https://yx-web-nosdn.netease.im/common/d3b36fc953447f9d9630f3b73aaa6ef1/icon-wenjian.png",
        "icon-weizhiwenjian": "https://yx-web-nosdn.netease.im/common/d51b39a07b3b482ab3b50a4b068588c6/icon-weizhiwenjian.png",
        "icon-weidu": "https://yx-web-nosdn.netease.im/common/5d50477d2afa387a59a67e30fcdceabd/icon-weidu.png",
        "icon-tupian2": "https://yx-web-nosdn.netease.im/common/51eb954ad971eb6890d0934858f950aa/icon-tupian2.png",
        "icon-tupian1": "https://yx-web-nosdn.netease.im/common/0737f1e187aa250d5090f38925672485/icon-tupian1.png",
        "icon-tupian": "https://yx-web-nosdn.netease.im/common/aa93aa9ffd0197b9a961455506f75078/icon-tupian.png",
        "icon-tuigejian": "https://yx-web-nosdn.netease.im/common/7bca7dffd1f8c3cd66b8ede7f176e4a8/icon-tuigejian.png",
        "icon-tuichudenglu": "https://yx-web-nosdn.netease.im/common/ce42192020620522a46763c758951b76/icon-tuichudenglu.png",
        "icon-touxiang5": "https://yx-web-nosdn.netease.im/common/769a3ba0615b3157d6b493fa5d2352c4/icon-touxiang5.png",
        "icon-touxiang4": "https://yx-web-nosdn.netease.im/common/c6ea2b6557913d2fe8017b68eb688515/icon-touxiang4.png",
        "icon-touxiang3": "https://yx-web-nosdn.netease.im/common/89bbfa21ce6d43fda25a8c4121284db6/icon-touxiang3.png",
        "icon-touxiang2": "https://yx-web-nosdn.netease.im/common/e2e3fdafb9201a0b693b36514eb378ae/icon-touxiang2.png",
        "icon-touxiang1": "https://yx-web-nosdn.netease.im/common/4e639e380f246e804b2f0f115f84215f/icon-touxiang1.png",
        "icon-tongxunlu-xuanzhong": "https://yx-web-nosdn.netease.im/common/f49a558e193325d185223f55b65711bf/icon-tongxunlu-xuanzhong.png",
        "icon-tongxunlu-weixuanzhong": "https://yx-web-nosdn.netease.im/common/e33c24318c1faeb73c79fa1b0b1c9c53/icon-tongxunlu-weixuanzhong.png",
        "icon-tianjiahaoyou": "https://yx-web-nosdn.netease.im/common/c5f19ef12df64f466bba0a611cf224d5/icon-tianjiahaoyou.png",
        "icon-tianjiaanniu": "https://yx-web-nosdn.netease.im/common/181feb34fc6324198f4d9d887a8759e1/icon-tianjiaanniu.png",
        "icon-team2": "https://yx-web-nosdn.netease.im/common/f9d8ea13b9b5d769f75e7f01edcab1df/icon-team2.png",
        "icon-lahei2": "https://yx-web-nosdn.netease.im/common/1ee2a3bffb33b81727583189a2562658/icon-lahei2.png",
        "icon-yuyin1": "https://yx-web-nosdn.netease.im/common/2c785931baec5a9b00cd5f59f81f4482/语音1.png",
        "icon-yuyin2": "https://yx-web-nosdn.netease.im/common/20043a54056311986c867edf93f51f62/语音2.png",
        "icon-yuyin3": "https://yx-web-nosdn.netease.im/common/786476a9bd129f6a7b027621f9818883/语音3.png",
        "icon-yuyin8": "https://yx-web-nosdn.netease.im/common/40d631410c18983f6ee0ca880976c2e9/icon-yuyin8.png",
        "icon-audio": "https://yx-web-nosdn.netease.im/common/27c4c8b528fac12d3f79bb3154be87d4/audio1.png",
        "audio-btn": "https://yx-web-nosdn.netease.im/common/abfd3577b9d29bb6d3445979336a5770/Vector.png",
        "audio-btn-selected": "https://yx-web-nosdn.netease.im/common/7f17c648e9b63f40b91832664668ac7a/Frame.png",
        "send-more": "https://yx-web-nosdn.netease.im/common/270ebff9ad75056b857c21f40b55d72d/send-more.png",
        "icon-paishe": "https://yx-web-nosdn.netease.im/common/be9638b843a70f307ecb6803ffe5775c/paishe.png",
        "icon-shipin2": "https://yx-web-nosdn.netease.im/common/3865bf597f9f5ca03b2b222ca07344e1/icon-shipin2.png",
        "icon-audio-call": "https://yx-web-nosdn.netease.im/common/99438364d757b51e7e36c18d254e70e7/icon-audio-call.png",
        "icon-video-call": "https://yx-web-nosdn.netease.im/common/ed7c85a59de3e247d10ecfc684b05226/icon-video-call.png",
        "icon-read": "https://yx-web-nosdn.netease.im/common/271c53e493cfd6ea98c51650d8b39b79/read.png",
        "icon-file": "https://yx-web-nosdn.netease.im/common/90485f277f50fc081970ded8772ec7c5/file.png",
        "icon-pin": "https://yx-web-nosdn.netease.im/common/6eb4fafcca008d2e93e90311696d6b96/black-pin.png",
        "icon-green-pin": "https://yx-web-nosdn.netease.im/common/4a1f15eff2f53563c4f1cf6ecde82d2c/green-pin.png",
        "choose-picture": "https://yx-web-nosdn.netease.im/common/97b3ca79a589d5753cbc0e8e8ec09501/choose-picture.png",
        "icon-collection": "https://yx-web-nosdn.netease.im/common/aa1bad3410009dea83d34d513dcd20f3/add-collection.png",
        "blue-collection": "https://yx-web-nosdn.netease.im/common/fb3836a8731b57720fcfdd3b589b3d5f/collection.png"
      };
      const _url = vue.computed(() => {
        return urlMap2[props.type];
      });
      const className = `${props.iconClassName || ""} icon-wrapper`;
      const __returned__ = { props, urlMap: urlMap2, _url, className };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  function _sfc_render$1g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass($setup.className),
        style: vue.normalizeStyle($props.iconStyle)
      },
      [
        vue.createElementVNode("img", {
          src: $setup._url,
          style: vue.normalizeStyle({
            width: ($props.width || $props.size) + "px",
            height: ($props.height || $props.size) + "px"
          }),
          class: "icon"
        }, null, 12, ["src"])
      ],
      4
      /* STYLE */
    );
  }
  const Icon = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["render", _sfc_render$1g], ["__scopeId", "data-v-ca7f3f1d"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/Icon.vue"]]);
  const en$1 = {
    appText: "NIM",
    messageText: "Message",
    contactText: "Contacts",
    mineText: "Me",
    logoutText: "Log out",
    commsEaseText: "About NIM",
    logoutConfirmText: "Are you sure you want to log out?",
    avatarText: "Avatar",
    accountText: "Account",
    name: "Nickname",
    genderText: "Gender",
    remark: "remark",
    mobile: "Phone",
    email: "Email",
    sign: "Signature",
    man: "Male",
    woman: "Female",
    unknow: "Unknown",
    birthText: "Birthday",
    FriendPageText: "Friend Card",
    startConversationText: "Start Chat",
    addText: "Add",
    applyFriendSuccessText: "Request Sent",
    applyFriendFailText: "Request Failed",
    addFriendText: "Add Friend",
    addFriendFailText: "Add Friend Failed",
    deleteFriendText: "Delete Friend",
    deleteFriendConfirmText: "Are you sure you want to delete this friend?",
    deleteFriendSuccessText: "Delete Friend Success",
    deleteFriendFailText: "Delete Friend Failed",
    setBlackFailText: "Add to blacklist failed",
    removeBlackFailText: "Remove from blacklist failed",
    removeBlackSuccessText: "Remove from blacklist success",
    addPermissionText: "Please add relevant permissions in the system settings page",
    FailAvatarText: "Avatar upload failed",
    chooseDefaultImage: "Choose default image",
    chatButtonText: "Go to Chat",
    gotoChatFailText: "Go to chat failed",
    chatWithFriendText: "Chat",
    okText: "OK",
    updateText: "Update",
    cancelText: "Cancel",
    friendSelectText: "Select Friend",
    telErrorText: "Invalid phone number format",
    emailErrorText: "Invalid email format",
    createButtonText: "Create",
    createP2PText: "Start Chat",
    createTeamText: "Create Group",
    addTeamMemberText: "Add Group Member",
    addTeamMemberFailText: "Add Group Member Failed",
    teamTitlePlaceholder: "Enter Group Name",
    maxSelectedText: "You can only select up to 200 friends",
    createTeamSuccessText: "Create Group Success",
    createTeamFailedText: "Create Group Failed",
    PersonalPageText: "PersonalCard",
    deleteSessionText: "Delete",
    sessionMuteText: "Mute Notifications",
    sessionMuteFailText: "Mute Notifications Failed",
    sessionUnMuteFailText: "Unmute Notifications Failed",
    stickTopText: "Pin Chat",
    deleteStickTopText: "Unpin Chat",
    addStickTopText: "Pin",
    deleteSessionFailText: "Delete Conversation Failed",
    deleteStickTopFailText: "Unpin Chat Failed",
    addStickTopFailText: "Pin Message Failed",
    teamMemberText: "Group Members",
    saveText: "Save",
    setText: "Settings",
    failText: "Failed",
    saveSuccessText: "Save Success",
    saveFailedText: "Save Failed",
    searchTeamPlaceholder: "Enter Group Name",
    teamTitle: "Group Name",
    teamInfoText: "Group Infomation",
    teamIntro: "Group Introduction",
    teamAvatar: "Group Avatar",
    networkError: "Current network error",
    searchFailText: "Search Failed",
    offlineText: "Network is unavailable, please check network settings.",
    connectingText: "The current IM connection has been disconnected and is reconnecting…",
    teamMenuText: "My Groups",
    teamChooseText: "My Group Chats",
    chooseText: "Choose",
    friendSelect: "Please select a contact",
    getHistoryMsgFailedText: "Failed to get message history",
    deleteText: "Delete",
    recallText: "Recall",
    copyText: "Copy",
    forwardText: "Forward",
    forwardComment: "forward comment",
    replyText: "Reply",
    replyNotFindText: "Message has recalled or deleted",
    forwardToTeamText: "Forward to Group",
    forwardToFriendText: "Forward to Contact",
    sessionRecordText: "Conversation Record",
    chatInputPlaceHolder: "What would you like to say?",
    enableV2CloudConversationText: "Enable V2 Cloud Conversation",
    SwitchToEnglishText: "Switch to English",
    pinText: "Mark",
    pinFailedText: "Mark Failed",
    unpinText: "Unmark",
    unpinFailedText: "Unmark Failed",
    noPinListText: "No Mark",
    collectionText: "collection",
    deleteCollectionText: "Delete collection",
    addCollectionSuccessText: "Add collection success",
    addCollectionFailedText: "Add collection Failed",
    deleteCollectionFailedText: "Delete collection Failed",
    noCollectionsText: "No collection",
    teamBannedText: "Message Banned",
    you: "You",
    pinThisText: "Marked this message",
    delete: "Delete this message",
    recall: "Recalled a message",
    recall2: "This message has been recalled",
    recall3: "Recall this message",
    recallMsgFailText: "Recall Message Failed",
    reeditText: "Edit",
    loadingMoreText: "Loading…",
    noMoreText: "No more",
    deleteMsgSuccessText: "Delete Success",
    deleteMsgFailText: "Delete Failed",
    conversationEmptyText: "No conversation",
    teamOwner: "Group Owner",
    teamManager: "Group Manager",
    teamEmptyText: "NoGroup Chats",
    blacklistEmptyText: "No Blocked Contacts",
    blacklistSubTitle: "You will not get messages from anyone on the list.    ",
    validEmptyText: "No Verification Messages",
    dismissTeamText: "Dismiss Group",
    dismissTeamConfirmText: "Are you sure you want to dismiss this group?",
    leaveTeamTitle: "Leave Group",
    leaveTeamConfirmText: "Are you sure you want to leave this group?",
    leaveTeamSuccessText: "You have left this group",
    leaveTeamFailedText: "Failed to leave this group",
    dismissTeamSuccessText: "Dismiss Group Success",
    dismissTeamFailedText: "Dismiss Group Failed",
    updateTeamSuccessText: "Update Success",
    updateTeamFailedText: "Update Failed",
    teamTitleConfirmText: "Group name cannot be empty",
    teamIntroConfirmText: "Group introduction cannot be empty",
    aliasConfirmText: "Alias cannot be empty",
    sendImageFailedText: "Failed to send Image",
    sendVideoFailedText: "Failed to send Video",
    sendAudioFailedText: "Failed to send Audio",
    sendFileFailedText: "Failed to send File",
    sendMsgFailedText: "Failed to send Message",
    weekText: "Weeks ago",
    dayText: "Days ago",
    hourText: "Hours ago",
    minuteText: "Minutes ago",
    nowText: "Just now",
    sendText: "Send",
    sendToText: "Send to",
    textMsgText: "Text Message",
    audioMsgText: "Audio Message",
    videoMsgText: "Video Message",
    fileMsgText: "File Message",
    callMsgText: "Call Message",
    geoMsgText: "Location Message",
    imgMsgText: "Image Message",
    notiMsgText: "Notification Message",
    robotMsgText: "Robot Message",
    tipMsgText: "Tip Message",
    customMsgText: "Custom Message",
    unknowMsgText: "Unknown Message",
    noFriendText: "No Friends",
    onDismissTeamText: "This group has been dismissed",
    onRemoveTeamText: "You have left the group",
    selectSessionFailText: "Failed to select conversation",
    noExistUser: "This user does not exist",
    enterAccount: "Enter account",
    validMsgText: "Verification Message",
    blacklistText: "Blocked Contacts",
    applyTeamText: "Apply to Join Group",
    acceptResultText: "Accepted",
    rejectResultText: "Rejected",
    rejectTeamInviteText: "Rejected group invitation",
    beRejectResultText: "Rejected friend request",
    passResultText: "Accepted friend request",
    acceptedText: "This request has been accepted",
    acceptFailedText: "Failed to accept this request",
    rejectedText: "This request has been rejected",
    rejectFailedText: "Failed to reject this request",
    passFriendAskText: "I have accepted your friend request, let's start chatting!",
    applyFriendText: "Add you as a friend",
    rejectText: "Reject",
    acceptText: "Accept",
    inviteTeamText: "Invite to Group",
    addBlacklist: "Block",
    removeBlacklist: "Unblock",
    forwardSuccessText: "Forward Success",
    forwardFailText: "Forward Failed",
    getMessageFailed: "Fail to get message",
    getForwardMessageFailed: "Fail to get forward message",
    sendFailWithInBlackText: "The other party has blocked you, message sending failed",
    sendFailWithDeleteText: "The relationship between both parties has been terminated, please reapply for contact",
    friendVerificationText: "Friend Verification",
    teamAll: "all",
    chooseMentionText: "Choose Mention",
    someoneText: "someone",
    meText: "mention",
    teamMutePlaceholder: "The current group owner has set the group to mute",
    viewMoreText: "View More",
    resendMsgFailText: "Resend Failed",
    audioBtnText: "Press and hold to speak",
    audioRemindText: "Release to send",
    audioErrorText: "Recording failed",
    videoPlayText: "Video Play",
    voiceCallText: "Voice Call",
    videoCallText: "Video Call",
    callDurationText: "call duration",
    callCancelText: "canceled",
    callRejectedText: "rejected",
    callTimeoutText: "Missed call",
    callBusyText: "busy line",
    callFailedText: "call failed",
    wxAppFileCopyText: "Please paste the URL in the mobile browser.",
    shootText: "shoot",
    albumText: "album",
    msgReadPageTitleText: "Message Reading Status",
    readText: "Read",
    unreadText: "Unread",
    fileText: "file",
    allUnReadText: "All Unread",
    msgRecallTimeErrorText: "Message recall time exceeded",
    allReadText: "All Read",
    searchText: "Search",
    searchTitleText: "Search",
    friendText: "Friend",
    teamText: "Group",
    searchResultNullText: "User does not exist",
    conversationSendFailText: "[Send Failed]",
    conversationNotificationText: "[Notification]",
    fileMsgTitleText: "[File Message]",
    collectionFromText: "Collection from",
    copySuccessText: "Copy Success",
    openUrlText: "Copied. Open in browser.",
    teamManagerText: "Team Manager",
    teamManagerSettingText: "Team Manager Setting",
    updateTeamInfoText: "Who is allowed to edit group details",
    teamOwnerAndManagerText: "TeamOwnerAndManager",
    updateTeamInviteText: "Who is allowed to edit group members",
    updateTeamAtText: "Who is allowed to @",
    addMemberText: "Add Member",
    removeText: "remove",
    securityTipText: "For test only. Beware of money transfer, lottery winnings & strange call scams.",
    // emoji 不能随便填，要用固定 key
    Laugh: "[Laugh]",
    Happy: "[Happy]",
    Sexy: "[Sexy]",
    Cool: "[Cool]",
    Mischievous: "[Mischievous]",
    Kiss: "[Kiss]",
    Spit: "[Spit]",
    Squint: "[Squint]",
    Cute: "[Cute]",
    Grimace: "[Grimace]",
    Snicker: "[Snicker]",
    Joy: "[Joy]",
    Ecstasy: "[Ecstasy]",
    Surprise: "[Surprise]",
    Tears: "[Tears]",
    Sweat: "[Sweat]",
    Angle: "[Angle]",
    Funny: "[Funny]",
    Awkward: "[Awkward]",
    Thrill: "[Thrill]",
    Cry: "[Cry]",
    Fretting: "[Fretting]",
    Terrorist: "[Terrorist]",
    Halo: "[Halo]",
    Shame: "[Shame]",
    Sleep: "[Sleep]",
    Tired: "[Tired]",
    Mask: "[Mask]",
    ok: "[ok]",
    AllRight: "[All right]",
    Despise: "[Despise]",
    Uncomfortable: "[Uncomfortable]",
    Disdain: "[Disdain]",
    ill: "[ill]",
    Mad: "[Mad]",
    Ghost: "[Ghost]",
    Angry: "[Angry]",
    Unhappy: "[Unhappy]",
    Frown: "[Frown]",
    Broken: "[Broken]",
    Beckoning: "[Beckoning]",
    Ok: "[Ok]",
    Low: "[Low]",
    Nice: "[Nice]",
    Applause: "[Applause]",
    GoodJob: "[Good job]",
    Hit: "[Hit]",
    Please: "[Please]",
    Bye: "[Bye]",
    First: "[First]",
    Fist: "[Fist]",
    GiveMeFive: "[Give me five]",
    Knife: "[Knife]",
    Hi: "[Hi]",
    No: "[No]",
    Hold: "[Hold]",
    Think: "[Think]",
    Pig: "[Pig]",
    NoListen: "[No listen]",
    NoLook: "[No look]",
    NoWords: "[No words]",
    Monkey: "[Monkey]",
    Bomb: "[Bomb]",
    Cloud: "[Cloud]",
    Rocket: "[Rocket]",
    Ambulance: "[Ambulance]",
    Poop: "[Poop]",
    // 错误码及提示内容
    // 通用错误码
    190001: "internal error",
    190002: "illegal state",
    191001: "misuse",
    191002: "cancelled",
    191003: "callback failed",
    191004: "invalid parameter",
    191005: "timeout",
    191006: "resource not exist",
    191007: "resource already exist",
    // 连接相关
    192001: "connect failed",
    192002: "connect timeout",
    192003: "disconnected",
    192004: "protocol timeout",
    192005: "protocol send failed",
    192006: "request failed",
    // 消息相关
    107319: "PIN limit exceeded",
    107320: "PIN not exist",
    107322: "PIN already exist",
    107327: "PIN function disabled",
    189301: "collection limit exceeded",
    189302: "collection not exist",
    189449: "collection concurrent operation failed",
    // 群相关
    109432: "no permission"
  };
  const zh = {
    appText: "云信IM",
    messageText: "消息",
    contactText: "通讯录",
    mineText: "我的",
    logoutText: "退出登录",
    commsEaseText: "关于云信",
    logoutConfirmText: "确定退出登录吗?",
    avatarText: "头像",
    updateAvatarText: "修改头像",
    accountText: "账号",
    name: "昵称",
    genderText: "性别",
    remarkText: "备注名",
    mobile: "手机",
    email: "邮箱",
    sign: "签名",
    man: "男",
    woman: "女",
    unknow: "未知",
    birthText: "生日",
    FriendPageText: "好友名片",
    startConversationText: "发起单聊",
    addText: "添加",
    removeText: "移除",
    addTeamManagerSuccessText: "添加管理员成功",
    addTeamManagerFailText: "添加管理员失败",
    confirmRemoveText: "是否移除？",
    removeManagerExplain: "移除后该成员将无管理权限",
    removeMemberExplain: "将移除该成员",
    removeSuccessText: "移除成功",
    removeFailText: "移除失败",
    userNotInTeam: "该用户不在群里",
    noTeamManager: "暂无群管理员",
    noTeamMember: "暂无群成员",
    applyFriendSuccessText: "好友申请已发送",
    applyFriendFailText: "发送申请失败",
    addFriendText: "添加好友",
    addMemberText: "添加成员",
    addFriendFailText: "添加好友失败",
    deleteFriendText: "删除好友",
    deleteFriendConfirmText: "是否确认删除好友",
    deleteFriendSuccessText: "删除好友成功",
    deleteFriendFailText: "删除好友失败",
    setBlackFailText: "加入黑名单失败",
    removeBlackFailText: "解除黑名单失败",
    removeBlackSuccessText: "解除黑名单成功",
    addPermissionText: "请在系统设置页添加相关权限",
    FailAvatarText: "上传头像失败",
    chooseDefaultImage: "选择默认图标",
    chatButtonText: "去聊天",
    gotoChatFailText: "去聊天失败",
    chatWithFriendText: "聊天",
    okText: "确定",
    updateText: "修改",
    cancelText: "取消",
    friendSelectText: "选择好友",
    telErrorText: "手机格式不正确",
    emailErrorText: "邮箱格式不正确",
    createButtonText: "创建",
    createP2PText: "发起单聊",
    createTeamText: "创建群聊",
    addTeamMemberText: "添加群成员",
    addTeamMemberFailText: "添加群成员失败",
    teamTitlePlaceholder: "请输入群名称",
    maxSelectedText: "最多只能选择200位好友",
    createTeamSuccessText: "创建群组成功",
    createTeamFailedText: "创建群组失败",
    PersonalPageText: "个人名片",
    deleteSessionText: "删除会话",
    sessionMuteText: "开启消息提醒",
    sessionMuteFailText: "开启消息提醒失败",
    sessionUnMuteFailText: "关闭消息提醒失败",
    stickTopText: "聊天置顶",
    deleteStickTopText: "取消置顶",
    addStickTopText: "置顶消息",
    deleteSessionFailText: "删除会话失败",
    deleteStickTopFailText: "取消置顶失败",
    addStickTopFailText: "置顶消息失败",
    teamMemberText: "群成员",
    teamManagerText: "群管理",
    teamManagerSettingText: "管理管理员",
    updateTeamInfoText: "谁可以编辑群信息",
    updateTeamInviteText: "谁可以编辑群成员",
    updateTeamAtText: "谁可以@所有人",
    transformTeam: "转让群主",
    transformTeamContent: "确认转让群主给",
    doubt: "吗？",
    transformTeamSuccessText: "转让群主成功",
    transformTeamFailedText: "转让群主失败",
    transformTeamText: "选择转让成员",
    teamBannedText: "群禁言",
    saveText: "保存",
    setText: "设置",
    failText: "失败",
    saveSuccessText: "保存成功",
    saveFailedText: "保存失败",
    searchTeamPlaceholder: "请输入群名称",
    nickInTeamEmptyText: "请输入群昵称",
    teamTitle: "群名称",
    teamInfoText: "群信息",
    teamIntro: "群介绍",
    teamAvatar: "群头像",
    networkError: "当前网络错误",
    searchFailText: "查找失败",
    offlineText: "当前网络不可用，请检查你当前网络设置。",
    connectingText: "当前IM连接已断开，正在重连...",
    teamMenuText: "我的群组",
    teamChooseText: "我的群聊",
    chooseText: "选择",
    friendSelect: "请选择联系人",
    pleaseSelectMember: "请选择成员",
    teamMemebrSelect: "人员选择",
    getHistoryMsgFailedText: "获取失败",
    deleteText: "删除",
    recallText: "撤回",
    copyText: "复制",
    forwardText: "转发",
    forwardComment: "留言",
    forwardSuccessText: "转发成功",
    forwardFailedText: "转发失败",
    getMessageFailed: "获取消息失败",
    replyText: "回复",
    replyNotFindText: "该消息已撤回或删除",
    msgRecallTimeErrorText: "已超过时间无法撤回",
    enableV2CloudConversationText: "是否开启云端会话",
    SwitchToEnglish: "切换语言为英文",
    copySuccessText: "复制成功",
    forwardToTeamText: "转发到群组",
    forwardToFriendText: "转发到个人",
    sessionRecordText: "的会话记录",
    chatInputPlaceHolder: "说点什么呢~",
    pinText: "标记",
    pinFailedText: "标记失败",
    unpinText: "取消标记",
    unpinFailedText: "取消标记失败",
    noPinListText: "暂无标记消息",
    collectionText: "收藏",
    deleteCollectionText: "删除收藏",
    addCollectionSuccessText: "收藏成功",
    addCollectionFailedText: "添加收藏失败",
    deleteCollectionFailedText: "删除收藏失败",
    noCollectionsText: "暂无收藏",
    you: "你",
    pinThisText: "标记了这条消息",
    delete: "删除此消息",
    recall: "撤回了一条消息",
    recall2: "此消息已撤回",
    recall3: "撤回此消息",
    recallMsgFailText: "撤回消息失败",
    reeditText: "重新编辑",
    loadingMoreText: "加载更多……",
    noMoreText: "没有更多了",
    deleteMsgSuccessText: "删除成功",
    deleteMsgFailText: "删除失败",
    conversationEmptyText: "暂无会话",
    teamOwner: "群主",
    teamManager: "群管理员",
    manager: "管理员",
    teamEmptyText: "暂无群聊",
    blacklistEmptyText: "暂无黑名单",
    blacklistSubTitle: "你不会收到列表中任何联系人的消息",
    validEmptyText: "暂无验证消息",
    dismissTeamText: "解散群组",
    dismissTeamConfirmText: "是否确认解散该群组",
    leaveTeamTitle: "退出群聊",
    leaveTeamConfirmText: "是否确认退出该群组",
    leaveTeamSuccessText: "已成功退出此群",
    leaveTeamFailedText: "退出此群失败",
    dismissTeamSuccessText: "群解散成功",
    dismissTeamFailedText: "群解散失败",
    updateTeamSuccessText: "修改成功",
    updateTeamFailedText: "修改失败",
    teamTitleConfirmText: "群名称不能为空",
    teamIntroConfirmText: "群介绍不能为空",
    aliasConfirmText: "备注名不能为空",
    sendImageFailedText: "发送图片失败",
    sendVideoFailedText: "发送视频失败",
    sendAudioFailedText: "发送音频失败",
    sendFileFailedText: "发送文件失败",
    sendMsgFailedText: "发送消息失败",
    weekText: "周前",
    dayText: "天前",
    hourText: "小时前",
    minuteText: "分钟前",
    nowText: "刚刚",
    sendText: "发送",
    sendToText: "发送给",
    textMsgText: "文本消息",
    audioMsgText: "音频消息",
    videoMsgText: "视频消息",
    fileMsgText: "文件消息",
    callMsgText: "话单消息",
    geoMsgText: "地理位置消息",
    imgMsgText: "图片消息",
    notiMsgText: "通知消息",
    robotMsgText: "机器消息",
    tipMsgText: "提示消息",
    customMsgText: "自定义消息",
    unknowMsgText: "未知消息体",
    noFriendText: "暂无好友",
    onDismissTeamText: "该群聊已解散",
    onRemoveTeamText: "您已离开群组",
    selectSessionFailText: "选择会话失败",
    noExistUser: "该用户不存在",
    enterAccount: "请输入账号",
    validMsgText: "验证消息",
    blacklistText: "黑名单",
    applyTeamText: "申请入群",
    acceptResultText: "已同意",
    rejectResultText: "已拒绝",
    rejectTeamInviteText: "拒绝了群邀请",
    beRejectResultText: "拒绝了好友申请",
    passResultText: "通过了好友申请",
    acceptedText: "已同意该申请",
    acceptFailedText: "同意该申请失败",
    rejectedText: "已拒绝该申请",
    rejectFailedText: "拒绝该申请失败",
    passFriendAskText: "我已经同意了你的申请，现在开始聊天吧~",
    applyFriendText: "添加您为好友",
    rejectText: "拒绝",
    acceptText: "同意",
    inviteTeamText: "邀请入群",
    addBlacklist: "加入黑名单",
    removeBlacklist: "解除",
    teamAll: "所有人",
    sendFailWithInBlackText: "对方已将你拉黑，消息发送失败",
    sendFailWithDeleteText: "双方关系已解除，如需沟通，请申请",
    friendVerificationText: "好友验证",
    chooseMentionText: "选择提醒",
    someoneText: "有人",
    meText: "我",
    teamMutePlaceholder: "当前群主已经设置为群禁言",
    noPermission: "您暂无权限操作",
    muteAllTeamFailedText: "全员禁言失败",
    unmuteAllTeamFailedText: "解除全员禁言失败",
    nickInTeam: "我在群里的昵称",
    viewMoreText: "查看更多",
    resendMsgFailText: "重发失败",
    audioBtnText: "按住说话",
    audioRemindText: "松开发送",
    audioErrorText: "录音失败，请检查是否开启权限",
    videoPlayText: "视频播放",
    updateTeamAvatar: "更新了群头像",
    updateTeamName: "更新群名称为",
    updateTeamIntro: "更新了群介绍",
    updateTeamInviteMode: "更新了群权限“邀请他人权限”为",
    updateTeamUpdateTeamMode: "更新了群权限“群资料修改权限”为",
    updateAllowAt: "更新了“@所有人权限”为",
    updateTeamMute: "更新了“群禁言”为",
    onlyTeamOwner: "仅群主",
    teamOwnerAndManagerText: "群主和管理员",
    closeText: "关闭",
    openText: "开启",
    joinTeamText: "加入群组",
    leaveTeamText: "离开了群组",
    beRemoveTeamText: "被移出群组",
    beAddTeamManagersText: "被任命为管理员",
    beRemoveTeamManagersText: "被移除管理员",
    newGroupOwnerText: "成为新群主",
    callDurationText: "通话时长",
    callCancelText: "已取消",
    callRejectedText: "已拒绝",
    callTimeoutText: "超时未接听",
    callBusyText: "忙线未接听",
    callFailedText: "呼叫失败",
    wxAppFileCopyText: "已自动复制网址，请在手机浏览器里粘贴该网址",
    shootText: "拍摄",
    albumText: "相册",
    voiceCallText: "语音通话",
    videoCallText: "视频通话",
    msgReadPageTitleText: "消息阅读状态",
    readText: "已读",
    unreadText: "未读",
    fileText: "文件",
    allUnReadText: "全部成员未读",
    allReadText: "全部成员已读",
    searchText: "请输入你要搜索的关键字",
    searchTitleText: "搜索",
    friendText: "好友",
    teamText: "群组",
    searchResultNullText: "该用户不存在",
    conversationSendFailText: "[发送失败]",
    conversationNotificationText: "[通知消息]",
    getForwardMessageFailed: "该消息已撤回或删除",
    fileMsgTitleText: "[文件消息]",
    collectionFromText: "来自",
    openUrlText: "已复制链接，请在浏览器打开链接",
    SwitchToEnglishText: "是否切换为英文",
    securityTipText: "仅用于体验云信IM 产品功能，请勿轻信汇款、中奖等涉及钱款的信息，勿轻易拨打陌生电话，谨防上当受骗。",
    // emoji 不能随便填，要用固定 key
    Laugh: "[大笑]",
    Happy: "[开心]",
    Sexy: "[色]",
    Cool: "[酷]",
    Mischievous: "[奸笑]",
    Kiss: "[亲]",
    Spit: "[伸舌头]",
    Squint: "[眯眼]",
    Cute: "[可爱]",
    Grimace: "[鬼脸]",
    Snicker: "[偷笑]",
    Joy: "[喜悦]",
    Ecstasy: "[狂喜]",
    Surprise: "[惊讶]",
    Tears: "[流泪]",
    Sweat: "[流汗]",
    Angle: "[天使]",
    Funny: "[笑哭]",
    Awkward: "[尴尬]",
    Thrill: "[惊恐]",
    Cry: "[大哭]",
    Fretting: "[烦躁]",
    Terrorist: "[恐怖]",
    Halo: "[两眼冒星]",
    Shame: "[害羞]",
    Sleep: "[睡着]",
    Tired: "[冒星]",
    Mask: "[口罩]",
    ok: "[OK]",
    AllRight: "[好吧]",
    Despise: "[鄙视]",
    Uncomfortable: "[难受]",
    Disdain: "[不屑]",
    ill: "[不舒服]",
    Mad: "[愤怒]",
    Ghost: "[鬼怪]",
    Angry: "[发怒]",
    Unhappy: "[不高兴]",
    Frown: "[皱眉]",
    Broken: "[心碎]",
    Beckoning: "[心动]",
    Ok: "[好的]",
    Low: "[低级]",
    Nice: "[赞]",
    Applause: "[鼓掌]",
    GoodJob: "[给力]",
    Hit: "[打你]",
    Please: "[阿弥陀佛]",
    Bye: "[拜拜]",
    First: "[第一]",
    Fist: "[拳头]",
    GiveMeFive: "[手掌]",
    Knife: "[剪刀]",
    Hi: "[招手]",
    No: "[不要]",
    Hold: "[举着]",
    Think: "[思考]",
    Pig: "[猪头]",
    NoListen: "[不听]",
    NoLook: "[不看]",
    NoWords: "[不说]",
    Monkey: "[猴子]",
    Bomb: "[炸弹]",
    Cloud: "[筋斗云]",
    Rocket: "[火箭]",
    Ambulance: "[救护车]",
    Poop: "[便便]",
    // 错误码及提示内容
    // 通用错误码
    190001: "内部错误",
    190002: "非法状态",
    191001: "使用姿势错误",
    191002: "操作取消",
    191003: "回调失败",
    191004: "参数错误",
    191005: "请求超时",
    191006: "资源不存在",
    191007: "资源已存在",
    // 连接相关
    192001: "连接错误",
    192002: "连接超时",
    192003: "连接断开",
    192004: "协议超时",
    192005: "协议发送失败",
    192006: "请求失败",
    // 消息相关
    107319: "PIN 数量超限",
    107320: "PIN 消息不存在",
    107322: "重复 PIN",
    107327: "未开启 PIN 功能",
    189301: "收藏数量超限",
    189302: "收藏不存在",
    189449: "并发操作收藏失败",
    // 群相关
    109432: "没有权限"
  };
  const i18nData = {
    en: en$1,
    zh
  };
  let currentLanguage = "zh";
  function setLanguage(language) {
    currentLanguage = language;
  }
  const t$2 = (key) => {
    return i18nData[currentLanguage][key] || key;
  };
  var lookup = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    62,
    0,
    62,
    0,
    63,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    0,
    0,
    0,
    0,
    63,
    0,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
  ];
  function base64Decode(source, target) {
    var sourceLength = source.length;
    var paddingLength = source[sourceLength - 2] === "=" ? 2 : source[sourceLength - 1] === "=" ? 1 : 0;
    var tmp;
    var byteIndex = 0;
    var baseLength = sourceLength - paddingLength & 4294967292;
    for (var i2 = 0; i2 < baseLength; i2 += 4) {
      tmp = lookup[source.charCodeAt(i2)] << 18 | lookup[source.charCodeAt(i2 + 1)] << 12 | lookup[source.charCodeAt(i2 + 2)] << 6 | lookup[source.charCodeAt(i2 + 3)];
      target[byteIndex++] = tmp >> 16 & 255;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 1) {
      tmp = lookup[source.charCodeAt(i2)] << 10 | lookup[source.charCodeAt(i2 + 1)] << 4 | lookup[source.charCodeAt(i2 + 2)] >> 2;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 2) {
      tmp = lookup[source.charCodeAt(i2)] << 2 | lookup[source.charCodeAt(i2 + 1)] >> 4;
      target[byteIndex++] = tmp & 255;
    }
  }
  const $inject_global_crypto = {
    getRandomValues(arr) {
      if (!(arr instanceof Int8Array || arr instanceof Uint8Array || arr instanceof Int16Array || arr instanceof Uint16Array || arr instanceof Int32Array || arr instanceof Uint32Array || arr instanceof Uint8ClampedArray)) {
        throw new Error("Expected an integer array");
      }
      if (arr.byteLength > 65536) {
        throw new Error("Can only request a maximum of 65536 bytes");
      }
      var crypto = requireNativePlugin("DCloud-Crypto");
      base64Decode(crypto.getRandomValues(arr.byteLength), new Uint8Array(
        arr.buffer,
        arr.byteOffset,
        arr.byteLength
      ));
      return arr;
    }
  };
  /*! For license information please see esmNim.js.LICENSE.txt */
  var e = { d: (t2, i2) => {
    for (var r2 in i2)
      e.o(i2, r2) && !e.o(t2, r2) && Object.defineProperty(t2, r2, { enumerable: true, get: i2[r2] });
  } };
  e.g = function() {
    if ("object" == typeof globalThis)
      return globalThis;
    try {
      return this || new Function("return this")();
    } catch (e2) {
      if ("object" == typeof window)
        return window;
    }
  }(), e.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2);
  var t$1 = {};
  e.d(t$1, { p: () => Ia, K: () => se$1 });
  var i = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== e.g ? e.g : "undefined" != typeof self ? self : {};
  function r(e2) {
    var t2 = { exports: {} };
    return e2(t2, t2.exports), t2.exports;
  }
  var s, o$1, n, a$1, c, d, l, p, h$1, u$1, m$1, g$1, v, f, y, I$1, _$1, M$1, E$1, T$1, S$1, C$1, N$1, O$1, R$1, A$1, b$1, k$1, V$1, L$1, P$1, D$1, w$1, U$1, x$1, F, B$1, j$1, $$1, G$1, H$1, q$1, Y$1, K$1, W$1, J$1, z$1, X$1, Q$1 = r(function(e2) {
    var t2 = Object.prototype.hasOwnProperty, i2 = "~";
    function r2() {
    }
    function s2(e3, t3, i3) {
      this.fn = e3, this.context = t3, this.once = i3 || false;
    }
    function o2(e3, t3, r3, o3, n3) {
      if ("function" != typeof r3)
        throw new TypeError("The listener must be a function");
      var a3 = new s2(r3, o3 || e3, n3), c2 = i2 ? i2 + t3 : t3;
      return e3._events[c2] ? e3._events[c2].fn ? e3._events[c2] = [e3._events[c2], a3] : e3._events[c2].push(a3) : (e3._events[c2] = a3, e3._eventsCount++), e3;
    }
    function n2(e3, t3) {
      0 == --e3._eventsCount ? e3._events = new r2() : delete e3._events[t3];
    }
    function a2() {
      this._events = new r2(), this._eventsCount = 0;
    }
    Object.create && (r2.prototype = /* @__PURE__ */ Object.create(null), new r2().__proto__ || (i2 = false)), a2.prototype.eventNames = function() {
      var e3, r3, s3 = [];
      if (0 === this._eventsCount)
        return s3;
      for (r3 in e3 = this._events)
        t2.call(e3, r3) && s3.push(i2 ? r3.slice(1) : r3);
      return Object.getOwnPropertySymbols ? s3.concat(Object.getOwnPropertySymbols(e3)) : s3;
    }, a2.prototype.listeners = function(e3) {
      var t3 = i2 ? i2 + e3 : e3, r3 = this._events[t3];
      if (!r3)
        return [];
      if (r3.fn)
        return [r3.fn];
      for (var s3 = 0, o3 = r3.length, n3 = new Array(o3); s3 < o3; s3++)
        n3[s3] = r3[s3].fn;
      return n3;
    }, a2.prototype.listenerCount = function(e3) {
      var t3 = i2 ? i2 + e3 : e3, r3 = this._events[t3];
      return r3 ? r3.fn ? 1 : r3.length : 0;
    }, a2.prototype.emit = function(e3, t3, r3, s3, o3, n3) {
      var a3 = i2 ? i2 + e3 : e3;
      if (!this._events[a3])
        return false;
      var c2, d2, l2 = this._events[a3], p2 = arguments.length;
      if (l2.fn) {
        switch (l2.once && this.removeListener(e3, l2.fn, void 0, true), p2) {
          case 1:
            return l2.fn.call(l2.context), true;
          case 2:
            return l2.fn.call(l2.context, t3), true;
          case 3:
            return l2.fn.call(l2.context, t3, r3), true;
          case 4:
            return l2.fn.call(l2.context, t3, r3, s3), true;
          case 5:
            return l2.fn.call(l2.context, t3, r3, s3, o3), true;
          case 6:
            return l2.fn.call(l2.context, t3, r3, s3, o3, n3), true;
        }
        for (d2 = 1, c2 = new Array(p2 - 1); d2 < p2; d2++)
          c2[d2 - 1] = arguments[d2];
        l2.fn.apply(l2.context, c2);
      } else {
        var h2, u2 = l2.length;
        for (d2 = 0; d2 < u2; d2++)
          switch (l2[d2].once && this.removeListener(e3, l2[d2].fn, void 0, true), p2) {
            case 1:
              l2[d2].fn.call(l2[d2].context);
              break;
            case 2:
              l2[d2].fn.call(l2[d2].context, t3);
              break;
            case 3:
              l2[d2].fn.call(l2[d2].context, t3, r3);
              break;
            case 4:
              l2[d2].fn.call(l2[d2].context, t3, r3, s3);
              break;
            default:
              if (!c2)
                for (h2 = 1, c2 = new Array(p2 - 1); h2 < p2; h2++)
                  c2[h2 - 1] = arguments[h2];
              l2[d2].fn.apply(l2[d2].context, c2);
          }
      }
      return true;
    }, a2.prototype.on = function(e3, t3, i3) {
      return o2(this, e3, t3, i3, false);
    }, a2.prototype.once = function(e3, t3, i3) {
      return o2(this, e3, t3, i3, true);
    }, a2.prototype.removeListener = function(e3, t3, r3, s3) {
      var o3 = i2 ? i2 + e3 : e3;
      if (!this._events[o3])
        return this;
      if (!t3)
        return n2(this, o3), this;
      var a3 = this._events[o3];
      if (a3.fn)
        a3.fn !== t3 || s3 && !a3.once || r3 && a3.context !== r3 || n2(this, o3);
      else {
        for (var c2 = 0, d2 = [], l2 = a3.length; c2 < l2; c2++)
          (a3[c2].fn !== t3 || s3 && !a3[c2].once || r3 && a3[c2].context !== r3) && d2.push(a3[c2]);
        d2.length ? this._events[o3] = 1 === d2.length ? d2[0] : d2 : n2(this, o3);
      }
      return this;
    }, a2.prototype.removeAllListeners = function(e3) {
      var t3;
      return e3 ? (t3 = i2 ? i2 + e3 : e3, this._events[t3] && n2(this, t3)) : (this._events = new r2(), this._eventsCount = 0), this;
    }, a2.prototype.off = a2.prototype.removeListener, a2.prototype.addListener = a2.prototype.on, a2.prefixed = i2, a2.EventEmitter = a2, e2.exports = a2;
  }), Z$1 = r(function(e2, t2) {
    e2.exports = function() {
      function e3() {
        e3 = function() {
          return t4;
        };
        var t4 = {}, i3 = Object.prototype, r3 = i3.hasOwnProperty, s3 = "function" == typeof Symbol ? Symbol : {}, o3 = s3.iterator || "@@iterator", n2 = s3.asyncIterator || "@@asyncIterator", a2 = s3.toStringTag || "@@toStringTag";
        function c2(e4, t5, i4) {
          return Object.defineProperty(e4, t5, { value: i4, enumerable: true, configurable: true, writable: true }), e4[t5];
        }
        try {
          c2({}, "");
        } catch (t5) {
          c2 = function(e4, t6, i4) {
            return e4[t6] = i4;
          };
        }
        function d2(e4, t5, i4, r4) {
          var s4 = t5 && t5.prototype instanceof h2 ? t5 : h2, o4 = Object.create(s4.prototype), n3 = new S2(r4 || []);
          return o4._invoke = /* @__PURE__ */ function(e5, t6, i5) {
            var r5 = "suspendedStart";
            return function(s5, o5) {
              if ("executing" === r5)
                throw new Error("Generator is already running");
              if ("completed" === r5) {
                if ("throw" === s5)
                  throw o5;
                return { value: void 0, done: true };
              }
              for (i5.method = s5, i5.arg = o5; ; ) {
                var n4 = i5.delegate;
                if (n4) {
                  var a3 = M2(n4, i5);
                  if (a3) {
                    if (a3 === p2)
                      continue;
                    return a3;
                  }
                }
                if ("next" === i5.method)
                  i5.sent = i5._sent = i5.arg;
                else if ("throw" === i5.method) {
                  if ("suspendedStart" === r5)
                    throw r5 = "completed", i5.arg;
                  i5.dispatchException(i5.arg);
                } else
                  "return" === i5.method && i5.abrupt("return", i5.arg);
                r5 = "executing";
                var c3 = l2(e5, t6, i5);
                if ("normal" === c3.type) {
                  if (r5 = i5.done ? "completed" : "suspendedYield", c3.arg === p2)
                    continue;
                  return { value: c3.arg, done: i5.done };
                }
                "throw" === c3.type && (r5 = "completed", i5.method = "throw", i5.arg = c3.arg);
              }
            };
          }(e4, i4, n3), o4;
        }
        function l2(e4, t5, i4) {
          try {
            return { type: "normal", arg: e4.call(t5, i4) };
          } catch (e5) {
            return { type: "throw", arg: e5 };
          }
        }
        t4.wrap = d2;
        var p2 = {};
        function h2() {
        }
        function u2() {
        }
        function m2() {
        }
        var g2 = {};
        c2(g2, o3, function() {
          return this;
        });
        var v2 = Object.getPrototypeOf, f2 = v2 && v2(v2(C2([])));
        f2 && f2 !== i3 && r3.call(f2, o3) && (g2 = f2);
        var y2 = m2.prototype = h2.prototype = Object.create(g2);
        function I2(e4) {
          ["next", "throw", "return"].forEach(function(t5) {
            c2(e4, t5, function(e5) {
              return this._invoke(t5, e5);
            });
          });
        }
        function _2(e4, t5) {
          function i4(s5, o4, n3, a3) {
            var c3 = l2(e4[s5], e4, o4);
            if ("throw" !== c3.type) {
              var d3 = c3.arg, p3 = d3.value;
              return p3 && "object" == typeof p3 && r3.call(p3, "__await") ? t5.resolve(p3.__await).then(function(e5) {
                i4("next", e5, n3, a3);
              }, function(e5) {
                i4("throw", e5, n3, a3);
              }) : t5.resolve(p3).then(function(e5) {
                d3.value = e5, n3(d3);
              }, function(e5) {
                return i4("throw", e5, n3, a3);
              });
            }
            a3(c3.arg);
          }
          var s4;
          this._invoke = function(e5, r4) {
            function o4() {
              return new t5(function(t6, s5) {
                i4(e5, r4, t6, s5);
              });
            }
            return s4 = s4 ? s4.then(o4, o4) : o4();
          };
        }
        function M2(e4, t5) {
          var i4 = e4.iterator[t5.method];
          if (void 0 === i4) {
            if (t5.delegate = null, "throw" === t5.method) {
              if (e4.iterator.return && (t5.method = "return", t5.arg = void 0, M2(e4, t5), "throw" === t5.method))
                return p2;
              t5.method = "throw", t5.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return p2;
          }
          var r4 = l2(i4, e4.iterator, t5.arg);
          if ("throw" === r4.type)
            return t5.method = "throw", t5.arg = r4.arg, t5.delegate = null, p2;
          var s4 = r4.arg;
          return s4 ? s4.done ? (t5[e4.resultName] = s4.value, t5.next = e4.nextLoc, "return" !== t5.method && (t5.method = "next", t5.arg = void 0), t5.delegate = null, p2) : s4 : (t5.method = "throw", t5.arg = new TypeError("iterator result is not an object"), t5.delegate = null, p2);
        }
        function E2(e4) {
          var t5 = { tryLoc: e4[0] };
          1 in e4 && (t5.catchLoc = e4[1]), 2 in e4 && (t5.finallyLoc = e4[2], t5.afterLoc = e4[3]), this.tryEntries.push(t5);
        }
        function T2(e4) {
          var t5 = e4.completion || {};
          t5.type = "normal", delete t5.arg, e4.completion = t5;
        }
        function S2(e4) {
          this.tryEntries = [{ tryLoc: "root" }], e4.forEach(E2, this), this.reset(true);
        }
        function C2(e4) {
          if (e4) {
            var t5 = e4[o3];
            if (t5)
              return t5.call(e4);
            if ("function" == typeof e4.next)
              return e4;
            if (!isNaN(e4.length)) {
              var i4 = -1, s4 = function t6() {
                for (; ++i4 < e4.length; )
                  if (r3.call(e4, i4))
                    return t6.value = e4[i4], t6.done = false, t6;
                return t6.value = void 0, t6.done = true, t6;
              };
              return s4.next = s4;
            }
          }
          return { next: N2 };
        }
        function N2() {
          return { value: void 0, done: true };
        }
        return u2.prototype = m2, c2(y2, "constructor", m2), c2(m2, "constructor", u2), u2.displayName = c2(m2, a2, "GeneratorFunction"), t4.isGeneratorFunction = function(e4) {
          var t5 = "function" == typeof e4 && e4.constructor;
          return !!t5 && (t5 === u2 || "GeneratorFunction" === (t5.displayName || t5.name));
        }, t4.mark = function(e4) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(e4, m2) : (e4.__proto__ = m2, c2(e4, a2, "GeneratorFunction")), e4.prototype = Object.create(y2), e4;
        }, t4.awrap = function(e4) {
          return { __await: e4 };
        }, I2(_2.prototype), c2(_2.prototype, n2, function() {
          return this;
        }), t4.AsyncIterator = _2, t4.async = function(e4, i4, r4, s4, o4) {
          void 0 === o4 && (o4 = Promise);
          var n3 = new _2(d2(e4, i4, r4, s4), o4);
          return t4.isGeneratorFunction(i4) ? n3 : n3.next().then(function(e5) {
            return e5.done ? e5.value : n3.next();
          });
        }, I2(y2), c2(y2, a2, "Generator"), c2(y2, o3, function() {
          return this;
        }), c2(y2, "toString", function() {
          return "[object Generator]";
        }), t4.keys = function(e4) {
          var t5 = [];
          for (var i4 in e4)
            t5.push(i4);
          return t5.reverse(), function i5() {
            for (; t5.length; ) {
              var r4 = t5.pop();
              if (r4 in e4)
                return i5.value = r4, i5.done = false, i5;
            }
            return i5.done = true, i5;
          };
        }, t4.values = C2, S2.prototype = { constructor: S2, reset: function(e4) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(T2), !e4)
            for (var t5 in this)
              "t" === t5.charAt(0) && r3.call(this, t5) && !isNaN(+t5.slice(1)) && (this[t5] = void 0);
        }, stop: function() {
          this.done = true;
          var e4 = this.tryEntries[0].completion;
          if ("throw" === e4.type)
            throw e4.arg;
          return this.rval;
        }, dispatchException: function(e4) {
          if (this.done)
            throw e4;
          var t5 = this;
          function i4(i5, r4) {
            return n3.type = "throw", n3.arg = e4, t5.next = i5, r4 && (t5.method = "next", t5.arg = void 0), !!r4;
          }
          for (var s4 = this.tryEntries.length - 1; s4 >= 0; --s4) {
            var o4 = this.tryEntries[s4], n3 = o4.completion;
            if ("root" === o4.tryLoc)
              return i4("end");
            if (o4.tryLoc <= this.prev) {
              var a3 = r3.call(o4, "catchLoc"), c3 = r3.call(o4, "finallyLoc");
              if (a3 && c3) {
                if (this.prev < o4.catchLoc)
                  return i4(o4.catchLoc, true);
                if (this.prev < o4.finallyLoc)
                  return i4(o4.finallyLoc);
              } else if (a3) {
                if (this.prev < o4.catchLoc)
                  return i4(o4.catchLoc, true);
              } else {
                if (!c3)
                  throw new Error("try statement without catch or finally");
                if (this.prev < o4.finallyLoc)
                  return i4(o4.finallyLoc);
              }
            }
          }
        }, abrupt: function(e4, t5) {
          for (var i4 = this.tryEntries.length - 1; i4 >= 0; --i4) {
            var s4 = this.tryEntries[i4];
            if (s4.tryLoc <= this.prev && r3.call(s4, "finallyLoc") && this.prev < s4.finallyLoc) {
              var o4 = s4;
              break;
            }
          }
          o4 && ("break" === e4 || "continue" === e4) && o4.tryLoc <= t5 && t5 <= o4.finallyLoc && (o4 = null);
          var n3 = o4 ? o4.completion : {};
          return n3.type = e4, n3.arg = t5, o4 ? (this.method = "next", this.next = o4.finallyLoc, p2) : this.complete(n3);
        }, complete: function(e4, t5) {
          if ("throw" === e4.type)
            throw e4.arg;
          return "break" === e4.type || "continue" === e4.type ? this.next = e4.arg : "return" === e4.type ? (this.rval = this.arg = e4.arg, this.method = "return", this.next = "end") : "normal" === e4.type && t5 && (this.next = t5), p2;
        }, finish: function(e4) {
          for (var t5 = this.tryEntries.length - 1; t5 >= 0; --t5) {
            var i4 = this.tryEntries[t5];
            if (i4.finallyLoc === e4)
              return this.complete(i4.completion, i4.afterLoc), T2(i4), p2;
          }
        }, catch: function(e4) {
          for (var t5 = this.tryEntries.length - 1; t5 >= 0; --t5) {
            var i4 = this.tryEntries[t5];
            if (i4.tryLoc === e4) {
              var r4 = i4.completion;
              if ("throw" === r4.type) {
                var s4 = r4.arg;
                T2(i4);
              }
              return s4;
            }
          }
          throw new Error("illegal catch attempt");
        }, delegateYield: function(e4, t5, i4) {
          return this.delegate = { iterator: C2(e4), resultName: t5, nextLoc: i4 }, "next" === this.method && (this.arg = void 0), p2;
        } }, t4;
      }
      function t3(e4) {
        return t3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
          return typeof e5;
        } : function(e5) {
          return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
        }, t3(e4);
      }
      function i2(e4, t4) {
        for (var i3 = 0; i3 < t4.length; i3++) {
          var r3 = t4[i3];
          r3.enumerable = r3.enumerable || false, r3.configurable = true, "value" in r3 && (r3.writable = true), Object.defineProperty(e4, r3.key, r3);
        }
      }
      var r2 = { isDataReportEnable: true, maxSize: 100, msgListMaxSize: 1e3, cacheMaxSize: 1e3, maxDelay: 3e5, maxInterval: 3e4, minInterval: 1e4, timeout: 5e3, autoStart: true, loginFailIgnoreInterval: 72e5 }, s2 = function() {
      }, o2 = function() {
        function o3(e4) {
          (function(e5, t4) {
            if (!(e5 instanceof t4))
              throw new TypeError("Cannot call a class as a function");
          })(this, o3), this.isUploadEnable = true, this.serverAllowUpload = false, this.initConfigLoaded = false, this.loading = false, this.isDestroyed = false, this.reportConfig = r2, this.configPath = "dispatcher/req", this.dataReportPath = "statics/report/common/form", this.traceMsgCache = {}, this.reqRetryCount = 0, this.highPriorityMsgList = [], this.msgList = [], this.lowPriorityMsgList = [], this.cacheMsgList = [], this.lastReportTime = Date.now(), this.timer = null, this.endedAsyncMsgByModule = {}, this.lastFailLogin = {}, this.setConfig(e4), this.reportConfig.isDataReportEnable && this.reportConfig.autoStart && this.initUploadConfig();
        }
        return function(e4, t4) {
          t4 && i2(e4.prototype, t4), Object.defineProperty(e4, "prototype", { writable: false });
        }(o3, [{ key: "setConfig", value: function(e4) {
          var t4 = Object.assign({}, this.reportConfig.common, e4.common);
          this.reportConfig = Object.assign({}, this.reportConfig, e4), this.reportConfig.common = t4, this.reportConfig.common.sdk_type || (this.reportConfig.common.sdk_type = "im");
        } }, { key: "reportImmediately", value: function(e4, t4) {
          var i3 = this;
          this.reportConfig.isDataReportEnable && this.reportConfig.request(e4, Object.assign({ dataType: "json", method: "POST", timeout: this.reportConfig.timeout }, t4)).catch(function(e5) {
            var t5, r3;
            null === (r3 = null === (t5 = i3.reportConfig) || void 0 === t5 ? void 0 : t5.logger) || void 0 === r3 || r3.warn("Reporter immediately upload failed", e5);
          });
        } }, { key: "report", value: function(e4, t4) {
          var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if (i3.priority || (i3.priority = this.getEventPriority(e4, t4)), this.reportConfig.isDataReportEnable && e4) {
            if ("login" === e4 && false === t4.succeed && t4.process_id) {
              var s3 = this.lastFailLogin[t4.process_id] || 0;
              if (t4.start_time - s3 < r2.loginFailIgnoreInterval)
                return;
              this.lastFailLogin[t4.process_id] = t4.start_time;
            }
            var o4 = Date.now();
            "HIGH" === i3.priority ? this.highPriorityMsgList.push({ module: e4, msg: t4, createTime: o4 }) : "NORMAL" === i3.priority ? this.msgList.push({ module: e4, msg: t4, createTime: o4 }) : "LOW" === i3.priority && this.lowPriorityMsgList.push({ module: e4, msg: t4, createTime: o4 }), this.highPriorityMsgList.length > this.reportConfig.msgListMaxSize && this.highPriorityMsgList.shift(), this.msgList.length > this.reportConfig.msgListMaxSize && this.msgList.shift(), this.lowPriorityMsgList.length > this.reportConfig.msgListMaxSize && this.lowPriorityMsgList.shift(), this.doReport();
          }
        } }, { key: "reportTraceStart", value: function(e4, t4) {
          if (this.reportConfig.isDataReportEnable && e4 && !this.traceMsgCache[e4]) {
            var i3 = Object.assign(Object.assign({ start_time: Date.now() }, t4), { extension: [] });
            this.traceMsgCache[e4] = i3;
          }
        } }, { key: "reportTraceUpdate", value: function(e4) {
        } }, { key: "reportTraceUpdateV2", value: function(e4, t4, i3) {
          var r3, s3 = this;
          if (this.reportConfig.isDataReportEnable && this.traceMsgCache[e4]) {
            var o4 = this.traceMsgCache[e4].extension, n2 = o4.length, a2 = (/* @__PURE__ */ new Date()).getTime();
            0 === n2 ? t4.duration = a2 - this.traceMsgCache[e4].start_time : o4[n2 - 1].end_time ? t4.duration = a2 - o4[n2 - 1].end_time : t4.duration = a2 - this.traceMsgCache[e4].start_time, o4.push(Object.assign({ end_time: a2 }, t4));
            var c2 = o4.length - 1;
            (null == i3 ? void 0 : i3.asyncParams) && ((r3 = this.traceMsgCache[e4]).asyncPromiseArray || (r3.asyncPromiseArray = []), this.traceMsgCache[e4].asyncPromiseArray.push(i3.asyncParams.then(function(t5) {
              s3.traceMsgCache[e4] && s3.traceMsgCache[e4].extension[c2] && Object.assign(s3.traceMsgCache[e4].extension[c2], t5);
            })));
          }
        } }, { key: "reportTraceEnd", value: function(e4) {
          var t4, i3 = this, r3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this.reportConfig.isDataReportEnable && this.traceMsgCache[e4])
            if ("nos" !== e4 || false === r3) {
              "boolean" == typeof r3 ? this.traceMsgCache[e4].succeed = !!r3 : this.traceMsgCache[e4].state = r3, this.traceMsgCache[e4].duration = Date.now() - this.traceMsgCache[e4].start_time, this.traceMsgCache[e4].extension.forEach(function(e5) {
                delete e5.end_time;
              });
              var s3 = this.traceMsgCache[e4];
              if (this.traceMsgCache[e4] = null, s3.asyncPromiseArray) {
                (t4 = this.endedAsyncMsgByModule)[e4] || (t4[e4] = []), this.endedAsyncMsgByModule[e4].push(s3);
                var o4 = function() {
                  i3.endedAsyncMsgByModule[e4] && i3.endedAsyncMsgByModule[e4].includes(s3) && (delete s3.asyncPromiseArray, i3.report(e4, s3, { priority: i3.getEventPriority(e4, s3) }));
                };
                Promise.all(s3.asyncPromiseArray).then(o4).catch(o4);
              } else
                this.report(e4, s3, { priority: this.getEventPriority(e4, s3) });
            } else
              this.traceMsgCache[e4] = null;
        } }, { key: "getEventPriority", value: function(e4, t4) {
          if ("exceptions" === e4) {
            if (0 === t4.action)
              return "HIGH";
            if (2 === t4.action)
              return "HIGH";
            if (1 === t4.action && 0 !== t4.exception_service)
              return "HIGH";
          } else {
            if ("msgReceive" === e4)
              return "LOW";
            if ("nim_api_trace" === e4)
              return "LOW";
          }
          return "NORMAL";
        } }, { key: "reportTraceCancel", value: function(e4) {
          this.reportConfig.isDataReportEnable && (this.endedAsyncMsgByModule[e4] = [], this.traceMsgCache[e4] = null);
        } }, { key: "pause", value: function() {
          this.reportConfig.isDataReportEnable && (this.isUploadEnable = false);
        } }, { key: "restore", value: function() {
          this.reportConfig.isDataReportEnable && (this.isUploadEnable = true, this.initConfigLoaded || this.initUploadConfig());
        } }, { key: "destroy", value: function() {
          var e4 = this;
          this.reportConfig.isDataReportEnable && (Object.keys(this.traceMsgCache).forEach(function(t4) {
            e4.reportTraceEnd(t4, 1);
          }), null !== this.timer && clearTimeout(this.timer), this.setConfig = s2, this.report = s2, this.reportTraceStart = s2, this.reportTraceUpdate = s2, this.reportTraceEnd = s2, this.pause = s2, this.restore = s2, this.destroy = s2, this.reqRetryCount = 0, this.cacheMsgList = [], this.traceMsgCache = {}, this.lowPriorityMsgList = [], this.msgList = [], this.highPriorityMsgList = [], this.reportConfig = {}, this.isDestroyed = true);
        } }, { key: "initUploadConfig", value: function() {
          var i3, r3;
          return function(e4, t4, i4, r4) {
            function s3(e5) {
              return e5 instanceof i4 ? e5 : new i4(function(t5) {
                t5(e5);
              });
            }
            return new (i4 || (i4 = Promise))(function(t5, i5) {
              function o4(e5) {
                try {
                  a2(r4.next(e5));
                } catch (e6) {
                  i5(e6);
                }
              }
              function n2(e5) {
                try {
                  a2(r4.throw(e5));
                } catch (e6) {
                  i5(e6);
                }
              }
              function a2(e5) {
                e5.done ? t5(e5.value) : s3(e5.value).then(o4, n2);
              }
              a2((r4 = r4.apply(e4, [])).next());
            });
          }(this, 0, void 0, e3().mark(function s3() {
            var o4, n2, a2, c2, d2, l2 = this;
            return e3().wrap(function(s4) {
              for (; ; )
                switch (s4.prev = s4.next) {
                  case 0:
                    if (!this.loading) {
                      s4.next = 2;
                      break;
                    }
                    return s4.abrupt("return");
                  case 2:
                    this.loading = true, o4 = this.reportConfig.common || {}, n2 = this.reportConfig.compassDataEndpoint.split(",").map(function(e4) {
                      return "".concat(e4, "/").concat(l2.configPath);
                    }), a2 = e3().mark(function t4(s5) {
                      return e3().wrap(function(e4) {
                        for (; ; )
                          switch (e4.prev = e4.next) {
                            case 0:
                              if (!l2.initConfigLoaded && !l2.isDestroyed) {
                                e4.next = 2;
                                break;
                              }
                              return e4.abrupt("return", "break");
                            case 2:
                              return e4.prev = 2, e4.next = 5, l2.reportConfig.request(n2[s5], { method: "GET", dataType: "json", params: { deviceId: o4.dev_id, sdkVer: o4.sdk_ver, platform: o4.platform, appkey: o4.app_key }, timeout: l2.reportConfig.timeout }).then(function(e5) {
                                var t5, i4;
                                if (!l2.isDestroyed) {
                                  if (200 === e5.status && e5.data && 200 === e5.data.code) {
                                    l2.initConfigLoaded = true;
                                    var r4 = e5.data.data || {};
                                    l2.reportConfig.maxSize = r4.maxSize > 1e3 ? 1e3 : r4.maxSize, l2.reportConfig.maxInterval = r4.maxInterval > 1e4 ? 1e4 : r4.maxInterval, l2.reportConfig.maxInterval = r4.maxInterval < 10 ? 10 : r4.maxInterval, l2.reportConfig.minInterval = r4.minInterval < 2 ? 2 : r4.minInterval, l2.reportConfig.maxDelay = r4.maxDelay || 300, l2.reportConfig.maxInterval = 1e3 * l2.reportConfig.maxInterval, l2.reportConfig.minInterval = 1e3 * l2.reportConfig.minInterval, l2.reportConfig.maxDelay = 1e3 * l2.reportConfig.maxDelay, r4.endpoint ? l2.dataReportEndpoint = r4.endpoint : l2.dataReportEndpoint = n2[s5], l2.serverAllowUpload = true, l2.loading = false, l2.reportHeartBeat();
                                  } else
                                    200 === e5.status && (l2.initConfigLoaded = true);
                                  null === (i4 = null === (t5 = l2.reportConfig) || void 0 === t5 ? void 0 : t5.logger) || void 0 === i4 || i4.log("Get reporter upload config success");
                                }
                              }).catch(function(e5) {
                                var t5, i4;
                                l2.isDestroyed || (l2.loading = false, null === (i4 = null === (t5 = l2.reportConfig) || void 0 === t5 ? void 0 : t5.logger) || void 0 === i4 || i4.error("Get reporter upload config failed", e5), l2.reqRetryCount < 12 && (l2.reqRetryCount++, setTimeout(function() {
                                  l2.isDestroyed || l2.initUploadConfig();
                                }, 8e3)));
                              });
                            case 5:
                              e4.next = 14;
                              break;
                            case 7:
                              if (e4.prev = 7, e4.t0 = e4.catch(2), !l2.isDestroyed) {
                                e4.next = 11;
                                break;
                              }
                              return e4.abrupt("return", { v: void 0 });
                            case 11:
                              l2.loading = false, null === (r3 = null === (i3 = l2.reportConfig) || void 0 === i3 ? void 0 : i3.logger) || void 0 === r3 || r3.error("Exec reporter request failed", e4.t0), l2.reqRetryCount < 12 && (l2.reqRetryCount++, setTimeout(function() {
                                l2.isDestroyed || l2.initUploadConfig();
                              }, 8e3));
                            case 14:
                            case "end":
                              return e4.stop();
                          }
                      }, t4, null, [[2, 7]]);
                    }), c2 = 0;
                  case 7:
                    if (!(c2 < n2.length)) {
                      s4.next = 17;
                      break;
                    }
                    return s4.delegateYield(a2(c2), "t0", 9);
                  case 9:
                    if ("break" !== (d2 = s4.t0)) {
                      s4.next = 12;
                      break;
                    }
                    return s4.abrupt("break", 17);
                  case 12:
                    if ("object" !== t3(d2)) {
                      s4.next = 14;
                      break;
                    }
                    return s4.abrupt("return", d2.v);
                  case 14:
                    c2++, s4.next = 7;
                    break;
                  case 17:
                  case "end":
                    return s4.stop();
                }
            }, s3, this);
          }));
        } }, { key: "reportHeartBeat", value: function() {
          var e4 = this;
          this.isDestroyed || (this.timer = setTimeout(function() {
            e4.reportHeartBeat();
          }, this.reportConfig.minInterval), this.doReport());
        } }, { key: "doReport", value: function() {
          if (!this.isDestroyed) {
            var e4 = this.highPriorityMsgList.length + this.msgList.length + this.lowPriorityMsgList.length + this.cacheMsgList.length > 2 * this.reportConfig.maxSize ? this.reportConfig.minInterval : this.reportConfig.maxInterval;
            Date.now() - this.lastReportTime >= e4 && this.upload();
          }
        } }, { key: "getUploadMsg", value: function() {
          var e4 = this, t4 = {}, i3 = Date.now();
          this.highPriorityMsgList = this.highPriorityMsgList.filter(function(t5) {
            return i3 - t5.createTime < e4.reportConfig.maxDelay;
          }), this.msgList = this.msgList.filter(function(t5) {
            return i3 - t5.createTime < e4.reportConfig.maxDelay;
          }), this.lowPriorityMsgList = this.lowPriorityMsgList.filter(function(t5) {
            return i3 - t5.createTime < e4.reportConfig.maxDelay;
          }), this.cacheMsgList = this.cacheMsgList.filter(function(t5) {
            return i3 - t5.createTime < e4.reportConfig.maxDelay;
          });
          var r3 = this.highPriorityMsgList.slice(0, this.reportConfig.maxSize);
          if (this.highPriorityMsgList = this.highPriorityMsgList.slice(r3.length), r3.length < this.reportConfig.maxSize) {
            var s3 = this.reportConfig.maxSize - r3.length;
            r3 = r3.concat(this.msgList.slice(0, s3)), this.msgList = this.msgList.slice(s3);
          }
          if (r3.length < this.reportConfig.maxSize) {
            var o4 = this.reportConfig.maxSize - r3.length;
            r3 = r3.concat(this.lowPriorityMsgList.slice(0, o4)), this.lowPriorityMsgList = this.lowPriorityMsgList.slice(o4);
          }
          if (r3.length < this.reportConfig.maxSize) {
            var n2 = this.reportConfig.maxSize - r3.length;
            r3 = r3.concat(this.cacheMsgList.slice(0, n2)), this.cacheMsgList = this.cacheMsgList.slice(n2);
          }
          return r3.forEach(function(e5) {
            t4[e5.module] ? t4[e5.module].push(e5.msg) : t4[e5.module] = [e5.msg];
          }), { uploadMsgArr: r3, uploadMsg: t4 };
        } }, { key: "upload", value: function() {
          var e4, t4, i3 = this;
          if (this.isUploadEnable && this.serverAllowUpload && !(this.lastReportTime && Date.now() - this.lastReportTime < this.reportConfig.minInterval)) {
            var r3 = this.getUploadMsg(), s3 = r3.uploadMsgArr, o4 = r3.uploadMsg;
            if (s3.length) {
              this.lastReportTime = Date.now();
              try {
                var n2 = "".concat(this.dataReportEndpoint, "/").concat(this.dataReportPath);
                this.reportConfig.request(n2, { dataType: "json", method: "POST", data: { common: this.reportConfig.common, event: o4 }, headers: { sdktype: "im" }, timeout: this.reportConfig.timeout }).catch(function(e5) {
                  var t5, r4;
                  i3.cacheMsgList = i3.cacheMsgList.concat(s3).slice(0, i3.reportConfig.cacheMaxSize), null === (r4 = null === (t5 = i3.reportConfig) || void 0 === t5 ? void 0 : t5.logger) || void 0 === r4 || r4.warn("Reporter upload failed", e5);
                });
              } catch (i4) {
                null === (t4 = null === (e4 = this.reportConfig) || void 0 === e4 ? void 0 : e4.logger) || void 0 === t4 || t4.warn("Exec reporter request failed", i4);
              }
              clearTimeout(this.timer), this.reportHeartBeat();
            }
          }
        } }]), o3;
      }();
      return o2;
    }();
  });
  !function(e2) {
    e2[e2.V2NIM_DATA_SYNC_TYPE_LEVEL_FULL = 0] = "V2NIM_DATA_SYNC_TYPE_LEVEL_FULL", e2[e2.V2NIM_DATA_SYNC_TYPE_LEVEL_BASIC = 1] = "V2NIM_DATA_SYNC_TYPE_LEVEL_BASIC";
  }(s || (s = {})), function(e2) {
    e2[e2.V2NIM_DATA_SYNC_TYPE_MAIN = 1] = "V2NIM_DATA_SYNC_TYPE_MAIN", e2[e2.V2NIM_DATA_SYNC_TYPE_TEAM_MEMBER = 2] = "V2NIM_DATA_SYNC_TYPE_TEAM_MEMBER", e2[e2.V2NIM_DATA_SYNC_TYPE_SUPER_TEAM_MEMBER = 3] = "V2NIM_DATA_SYNC_TYPE_SUPER_TEAM_MEMBER";
  }(o$1 || (o$1 = {})), function(e2) {
    e2[e2.V2NIM_DATA_SYNC_STATE_WAITING = 1] = "V2NIM_DATA_SYNC_STATE_WAITING", e2[e2.V2NIM_DATA_SYNC_STATE_SYNCING = 2] = "V2NIM_DATA_SYNC_STATE_SYNCING", e2[e2.V2NIM_DATA_SYNC_STATE_COMPLETED = 3] = "V2NIM_DATA_SYNC_STATE_COMPLETED";
  }(n || (n = {})), function(e2) {
    e2[e2.V2NIM_CONVERSATION_TYPE_UNKNOWN = 0] = "V2NIM_CONVERSATION_TYPE_UNKNOWN", e2[e2.V2NIM_CONVERSATION_TYPE_P2P = 1] = "V2NIM_CONVERSATION_TYPE_P2P", e2[e2.V2NIM_CONVERSATION_TYPE_TEAM = 2] = "V2NIM_CONVERSATION_TYPE_TEAM", e2[e2.V2NIM_CONVERSATION_TYPE_SUPER_TEAM = 3] = "V2NIM_CONVERSATION_TYPE_SUPER_TEAM";
  }(a$1 || (a$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_STATUS_DEFAULT = 0] = "V2NIM_MESSAGE_STATUS_DEFAULT", e2[e2.V2NIM_MESSAGE_STATUS_REVOKE = 1] = "V2NIM_MESSAGE_STATUS_REVOKE", e2[e2.V2NIM_MESSAGE_STATUS_BACKFILL = 2] = "V2NIM_MESSAGE_STATUS_BACKFILL";
  }(c || (c = {})), function(e2) {
    e2[e2.V2NIM_FRIEND_MODE_TYPE_ADD = 1] = "V2NIM_FRIEND_MODE_TYPE_ADD", e2[e2.V2NIM_FRIEND_MODE_TYPE_APPLY = 2] = "V2NIM_FRIEND_MODE_TYPE_APPLY";
  }(d || (d = {})), function(e2) {
    e2[e2.V2NIM_FRIEND_ADD_APPLICATION_TYPE_RECEIVED = 1] = "V2NIM_FRIEND_ADD_APPLICATION_TYPE_RECEIVED", e2[e2.V2NIM_FRIEND_ADD_APPLICATION_TYPE_REJECTED = 2] = "V2NIM_FRIEND_ADD_APPLICATION_TYPE_REJECTED";
  }(l || (l = {})), function(e2) {
    e2[e2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT = 0] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT", e2[e2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED = 1] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED", e2[e2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED = 2] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED", e2[e2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED = 3] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED", e2[e2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD = 4] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD";
  }(p || (p = {})), function(e2) {
    e2[e2.V2NIM_FRIEND_DELETION_TYPE_BY_SELF = 1] = "V2NIM_FRIEND_DELETION_TYPE_BY_SELF", e2[e2.V2NIM_FRIEND_DELETION_TYPE_BY_PEER = 2] = "V2NIM_FRIEND_DELETION_TYPE_BY_PEER";
  }(h$1 || (h$1 = {})), function(e2) {
    e2[e2.V2NIM_FRIEND_VERIFY_TYPE_ADD = 1] = "V2NIM_FRIEND_VERIFY_TYPE_ADD", e2[e2.V2NIM_FRIEND_VERIFY_TYPE_APPLY = 2] = "V2NIM_FRIEND_VERIFY_TYPE_APPLY", e2[e2.V2NIM_FRIEND_VERIFY_TYPE_ACCEPT = 3] = "V2NIM_FRIEND_VERIFY_TYPE_ACCEPT", e2[e2.V2NIM_FRIEND_VERIFY_TYPE_REJECT = 4] = "V2NIM_FRIEND_VERIFY_TYPE_REJECT";
  }(u$1 || (u$1 = {})), function(e2) {
    e2[e2.V2NIM_LOGIN_AUTH_TYPE_DEFAULT = 0] = "V2NIM_LOGIN_AUTH_TYPE_DEFAULT", e2[e2.V2NIM_LOGIN_AUTH_TYPE_DYNAMIC_TOKEN = 1] = "V2NIM_LOGIN_AUTH_TYPE_DYNAMIC_TOKEN", e2[e2.V2NIM_LOGIN_AUTH_TYPE_THIRD_PARTY = 2] = "V2NIM_LOGIN_AUTH_TYPE_THIRD_PARTY";
  }(m$1 || (m$1 = {})), function(e2) {
    e2[e2.V2NIM_LOGIN_STATUS_LOGOUT = 0] = "V2NIM_LOGIN_STATUS_LOGOUT", e2[e2.V2NIM_LOGIN_STATUS_LOGINED = 1] = "V2NIM_LOGIN_STATUS_LOGINED", e2[e2.V2NIM_LOGIN_STATUS_LOGINING = 2] = "V2NIM_LOGIN_STATUS_LOGINING", e2[e2.V2NIM_LOGIN_STATUS_UNLOGIN = 3] = "V2NIM_LOGIN_STATUS_UNLOGIN";
  }(g$1 || (g$1 = {})), function(e2) {
    e2[e2.V2NIM_LOGIN_CLIENT_TYPE_UNKNOWN = 0] = "V2NIM_LOGIN_CLIENT_TYPE_UNKNOWN", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_ANDROID = 1] = "V2NIM_LOGIN_CLIENT_TYPE_ANDROID", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_IOS = 2] = "V2NIM_LOGIN_CLIENT_TYPE_IOS", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_PC = 4] = "V2NIM_LOGIN_CLIENT_TYPE_PC", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_WP = 8] = "V2NIM_LOGIN_CLIENT_TYPE_WP", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_WEB = 16] = "V2NIM_LOGIN_CLIENT_TYPE_WEB", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_RESTFUL = 32] = "V2NIM_LOGIN_CLIENT_TYPE_RESTFUL", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_MAC_OS = 64] = "V2NIM_LOGIN_CLIENT_TYPE_MAC_OS", e2[e2.V2NIM_LOGIN_CLIENT_TYPE_HARMONY_OS = 65] = "V2NIM_LOGIN_CLIENT_TYPE_HARMONY_OS";
  }(v || (v = {})), function(e2) {
    e2[e2.V2NIM_KICKED_OFFLINE_REASON_CLIENT_EXCLUSIVE = 1] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT_EXCLUSIVE", e2[e2.V2NIM_KICKED_OFFLINE_REASON_SERVER = 2] = "V2NIM_KICKED_OFFLINE_REASON_SERVER", e2[e2.V2NIM_KICKED_OFFLINE_REASON_CLIENT = 3] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT", e2[e2.V2NIM_KICKED_OFFLINE_REASON_CLIENT_QUIETLY = 4] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT_QUIETLY";
  }(f || (f = {})), function(e2) {
    e2[e2.V2NIM_LOGIN_CLIENT_CHANGE_LIST = 1] = "V2NIM_LOGIN_CLIENT_CHANGE_LIST", e2[e2.V2NIM_LOGIN_CLIENT_CHANGE_LOGIN = 2] = "V2NIM_LOGIN_CLIENT_CHANGE_LOGIN", e2[e2.V2NIM_LOGIN_CLIENT_CHANGE_LOGOUT = 3] = "V2NIM_LOGIN_CLIENT_CHANGE_LOGOUT";
  }(y || (y = {})), function(e2) {
    e2[e2.V2NIM_CONNECT_STATUS_DISCONNECTED = 0] = "V2NIM_CONNECT_STATUS_DISCONNECTED", e2[e2.V2NIM_CONNECT_STATUS_CONNECTED = 1] = "V2NIM_CONNECT_STATUS_CONNECTED", e2[e2.V2NIM_CONNECT_STATUS_CONNECTING = 2] = "V2NIM_CONNECT_STATUS_CONNECTING", e2[e2.V2NIM_CONNECT_STATUS_WAITING = 3] = "V2NIM_CONNECT_STATUS_WAITING";
  }(I$1 || (I$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_AI_STATUS_UNKNOW = 0] = "V2NIM_MESSAGE_AI_STATUS_UNKNOW", e2[e2.V2NIM_MESSAGE_AI_STATUS_AT = 1] = "V2NIM_MESSAGE_AI_STATUS_AT", e2[e2.V2NIM_MESSAGE_AI_STATUS_RESPONSE = 2] = "V2NIM_MESSAGE_AI_STATUS_RESPONSE";
  }(_$1 || (_$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_TYPE_INVALID = -1] = "V2NIM_MESSAGE_TYPE_INVALID", e2[e2.V2NIM_MESSAGE_TYPE_TEXT = 0] = "V2NIM_MESSAGE_TYPE_TEXT", e2[e2.V2NIM_MESSAGE_TYPE_IMAGE = 1] = "V2NIM_MESSAGE_TYPE_IMAGE", e2[e2.V2NIM_MESSAGE_TYPE_AUDIO = 2] = "V2NIM_MESSAGE_TYPE_AUDIO", e2[e2.V2NIM_MESSAGE_TYPE_VIDEO = 3] = "V2NIM_MESSAGE_TYPE_VIDEO", e2[e2.V2NIM_MESSAGE_TYPE_LOCATION = 4] = "V2NIM_MESSAGE_TYPE_LOCATION", e2[e2.V2NIM_MESSAGE_TYPE_NOTIFICATION = 5] = "V2NIM_MESSAGE_TYPE_NOTIFICATION", e2[e2.V2NIM_MESSAGE_TYPE_FILE = 6] = "V2NIM_MESSAGE_TYPE_FILE", e2[e2.V2NIM_MESSAGE_TYPE_AVCHAT = 7] = "V2NIM_MESSAGE_TYPE_AVCHAT", e2[e2.V2NIM_MESSAGE_TYPE_TIPS = 10] = "V2NIM_MESSAGE_TYPE_TIPS", e2[e2.V2NIM_MESSAGE_TYPE_ROBOT = 11] = "V2NIM_MESSAGE_TYPE_ROBOT", e2[e2.V2NIM_MESSAGE_TYPE_CALL = 12] = "V2NIM_MESSAGE_TYPE_CALL", e2[e2.V2NIM_MESSAGE_TYPE_CUSTOM = 100] = "V2NIM_MESSAGE_TYPE_CUSTOM";
  }(M$1 || (M$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_UNDEFINED = -1] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_UNDEFINED", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE = 0] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK = 1] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE = 2] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO = 3] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_DISMISS = 4] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_DISMISS", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS = 5] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER = 6] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER = 7] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER = 8] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT = 9] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_BANNED_TEAM_MEMBER = 10] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_BANNED_TEAM_MEMBER", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE = 401] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_KICK = 402] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_KICK", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_LEAVE = 403] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_LEAVE", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_UPDATE_TINFO = 404] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_UPDATE_TINFO", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_DISMISS = 405] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_DISMISS", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_APPLY_PASS = 410] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_APPLY_PASS", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_OWNER_TRANSFER = 406] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_OWNER_TRANSFER", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_ADD_MANAGER = 407] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_ADD_MANAGER", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_REMOVE_MANAGER = 408] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_REMOVE_MANAGER", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE_ACCEPT = 411] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE_ACCEPT", e2[e2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_BANNED_TEAM_MEMBER = 409] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_BANNED_TEAM_MEMBER";
  }(E$1 || (E$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UNKNOWN = 0] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UNKNOWN", e2[e2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS = 1] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS", e2[e2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_FAILED = 2] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_FAILED", e2[e2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UPLOADING = 3] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UPLOADING";
  }(T$1 || (T$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_SENDING_STATE_UNKNOWN = 0] = "V2NIM_MESSAGE_SENDING_STATE_UNKNOWN", e2[e2.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED = 1] = "V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED", e2[e2.V2NIM_MESSAGE_SENDING_STATE_FAILED = 2] = "V2NIM_MESSAGE_SENDING_STATE_FAILED", e2[e2.V2NIM_MESSAGE_SENDING_STATE_SENDING = 3] = "V2NIM_MESSAGE_SENDING_STATE_SENDING";
  }(S$1 || (S$1 = {})), function(e2) {
    e2[e2.V2NIM_QUERY_DIRECTION_DESC = 0] = "V2NIM_QUERY_DIRECTION_DESC", e2[e2.V2NIM_QUERY_DIRECTION_ASC = 1] = "V2NIM_QUERY_DIRECTION_ASC";
  }(C$1 || (C$1 = {})), function(e2) {
    e2[e2.V2NIM_CLEAR_HISTORY_MODE_ALL = 0] = "V2NIM_CLEAR_HISTORY_MODE_ALL", e2[e2.V2NIM_CLEAR_HISTORY_MODE_LOCAL = 1] = "V2NIM_CLEAR_HISTORY_MODE_LOCAL";
  }(N$1 || (N$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_REVOKE_TYPE_UNDEFINED = 0] = "V2NIM_MESSAGE_REVOKE_TYPE_UNDEFINED", e2[e2.V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY = 1] = "V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY", e2[e2.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY = 2] = "V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY", e2[e2.V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY = 3] = "V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY", e2[e2.V2NIM_MESSAGE_REVOKE_TYPE_P2P_ONEWAY = 4] = "V2NIM_MESSAGE_REVOKE_TYPE_P2P_ONEWAY", e2[e2.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_ONEWAY = 5] = "V2NIM_MESSAGE_REVOKE_TYPE_TEAM_ONEWAY";
  }(O$1 || (O$1 = {})), function(e2) {
    e2[e2.V2NIM_MESSAGE_PIN_STATE_NOT_PINNED = 0] = "V2NIM_MESSAGE_PIN_STATE_NOT_PINNED", e2[e2.V2NIM_MESSAGE_PIN_STATE_PINNED = 1] = "V2NIM_MESSAGE_PIN_STATE_PINNED", e2[e2.V2NIM_MESSAGE_PIN_STATE_UPDATED = 2] = "V2NIM_MESSAGE_PIN_STATE_UPDATED";
  }(R$1 || (R$1 = {})), function(e2) {
    e2[e2.V2NIM_QUICK_COMMENT_STATE_ADD = 1] = "V2NIM_QUICK_COMMENT_STATE_ADD", e2[e2.V2NIM_QUICK_COMMENT_STATE_REMOVE = 2] = "V2NIM_QUICK_COMMENT_STATE_REMOVE";
  }(A$1 || (A$1 = {})), function(e2) {
    e2[e2.V2NIM_CLIENT_ANTISPAM_OPERATE_NONE = 0] = "V2NIM_CLIENT_ANTISPAM_OPERATE_NONE", e2[e2.V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE = 1] = "V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE", e2[e2.V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD = 2] = "V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD", e2[e2.V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD = 3] = "V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD";
  }(b$1 || (b$1 = {})), function(e2) {
    e2[e2.V2NIM_SORT_ORDER_DESC = 0] = "V2NIM_SORT_ORDER_DESC", e2[e2.V2NIM_SORT_ORDER_ASC = 1] = "V2NIM_SORT_ORDER_ASC";
  }(k$1 || (k$1 = {})), function(e2) {
    e2[e2.P2P_DELETE_MSG = 7] = "P2P_DELETE_MSG", e2[e2.TEAM_DELETE_MSG = 8] = "TEAM_DELETE_MSG", e2[e2.SUPERTEAM_DELETE_MSG = 12] = "SUPERTEAM_DELETE_MSG", e2[e2.P2P_ONE_WAY_DELETE_MSG = 13] = "P2P_ONE_WAY_DELETE_MSG", e2[e2.TEAM_ONE_WAY_DELETE_MSG = 14] = "TEAM_ONE_WAY_DELETE_MSG", e2[e2.CUSTOM_P2P_MSG = 100] = "CUSTOM_P2P_MSG", e2[e2.CUSTOM_TEAM_MSG = 101] = "CUSTOM_TEAM_MSG", e2[e2.CUSTOM_SUPERTEAM_MSG = 103] = "CUSTOM_SUPERTEAM_MSG";
  }(V$1 || (V$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF = 0] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF", e2[e2.V2NIM_TEAM_MESSAGE_MUTE_MODE_ON = 1] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_ON", e2[e2.V2NIM_TEAM_MESSAGE_MUTE_MODE_NORMAL_ON = 2] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_NORMAL_ON";
  }(L$1 || (L$1 = {})), function(e2) {
    e2[e2.V2NIM_P2P_MESSAGE_MUTE_MODE_OFF = 0] = "V2NIM_P2P_MESSAGE_MUTE_MODE_OFF", e2[e2.V2NIM_P2P_MESSAGE_MUTE_MODE_ON = 1] = "V2NIM_P2P_MESSAGE_MUTE_MODE_ON";
  }(P$1 || (P$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL = 0] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL", e2[e2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_NORMAL = 1] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_NORMAL", e2[e2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_MANAGER = 2] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_MANAGER";
  }(D$1 || (D$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_TYPE_INVALID = 0] = "V2NIM_TEAM_TYPE_INVALID", e2[e2.V2NIM_TEAM_TYPE_ADVANCED = 1] = "V2NIM_TEAM_TYPE_ADVANCED", e2[e2.V2NIM_TEAM_TYPE_SUPER = 2] = "V2NIM_TEAM_TYPE_SUPER";
  }(w$1 || (w$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_JOIN_MODE_FREE = 0] = "V2NIM_TEAM_JOIN_MODE_FREE", e2[e2.V2NIM_TEAM_JOIN_MODE_APPLY = 1] = "V2NIM_TEAM_JOIN_MODE_APPLY", e2[e2.V2NIM_TEAM_JOIN_MODE_INVITE = 2] = "V2NIM_TEAM_JOIN_MODE_INVITE";
  }(U$1 || (U$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_AGREE_MODE_AUTH = 0] = "V2NIM_TEAM_AGREE_MODE_AUTH", e2[e2.V2NIM_TEAM_AGREE_MODE_NO_AUTH = 1] = "V2NIM_TEAM_AGREE_MODE_NO_AUTH";
  }(x$1 || (x$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_INVITE_MODE_MANAGER = 0] = "V2NIM_TEAM_INVITE_MODE_MANAGER", e2[e2.V2NIM_TEAM_INVITE_MODE_ALL = 1] = "V2NIM_TEAM_INVITE_MODE_ALL";
  }(F || (F = {})), function(e2) {
    e2[e2.V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER = 0] = "V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER", e2[e2.V2NIM_TEAM_UPDATE_INFO_MODE_ALL = 1] = "V2NIM_TEAM_UPDATE_INFO_MODE_ALL";
  }(B$1 || (B$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN = 0] = "V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN", e2[e2.V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_NORMAL = 1] = "V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_NORMAL", e2[e2.V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_ALL = 3] = "V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_ALL";
  }(j$1 || (j$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_UPDATE_EXTENSION_MODE_MANAGER = 0] = "V2NIM_TEAM_UPDATE_EXTENSION_MODE_MANAGER", e2[e2.V2NIM_TEAM_UPDATE_EXTENSION_MODE_ALL = 1] = "V2NIM_TEAM_UPDATE_EXTENSION_MODE_ALL";
  }($$1 || ($$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_MEMBER_ROLE_NORMAL = 0] = "V2NIM_TEAM_MEMBER_ROLE_NORMAL", e2[e2.V2NIM_TEAM_MEMBER_ROLE_OWNER = 1] = "V2NIM_TEAM_MEMBER_ROLE_OWNER", e2[e2.V2NIM_TEAM_MEMBER_ROLE_MANAGER = 2] = "V2NIM_TEAM_MEMBER_ROLE_MANAGER";
  }(G$1 || (G$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_JOIN_ACTION_TYPE_APPLICATION = 0] = "V2NIM_TEAM_JOIN_ACTION_TYPE_APPLICATION", e2[e2.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_APPLICATION = 1] = "V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_APPLICATION", e2[e2.V2NIM_TEAM_JOIN_ACTION_TYPE_INVITATION = 2] = "V2NIM_TEAM_JOIN_ACTION_TYPE_INVITATION", e2[e2.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_INVITATION = 3] = "V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_INVITATION";
  }(H$1 || (H$1 = {})), function(e2) {
    e2[e2.V2NIM_TEAM_JOIN_ACTION_STATUS_INIT = 0] = "V2NIM_TEAM_JOIN_ACTION_STATUS_INIT", e2[e2.V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED = 1] = "V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED", e2[e2.V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED = 2] = "V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED", e2[e2.V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED = 3] = "V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED";
  }(q$1 || (q$1 = {})), function(e2) {
    e2[e2.teamApply = 0] = "teamApply", e2[e2.teamApplyReject = 1] = "teamApplyReject", e2[e2.teamInvite = 2] = "teamInvite", e2[e2.teamInviteReject = 3] = "teamInviteReject", e2[e2.tlistUpdate = 4] = "tlistUpdate", e2[e2.superTeamApply = 15] = "superTeamApply", e2[e2.superTeamApplyReject = 16] = "superTeamApplyReject", e2[e2.superTeamInvite = 17] = "superTeamInvite", e2[e2.superTeamInviteReject = 18] = "superTeamInviteReject";
  }(Y$1 || (Y$1 = {})), function(e2) {
    e2[e2.V2NIM_AI_MODEL_TYPE_UNKNOW = 0] = "V2NIM_AI_MODEL_TYPE_UNKNOW", e2[e2.V2NIM_AI_MODEL_TYPE_QWEN = 1] = "V2NIM_AI_MODEL_TYPE_QWEN", e2[e2.V2NIM_AI_MODEL_TYPE_AZURE = 2] = "V2NIM_AI_MODEL_TYPE_AZURE", e2[e2.V2NIM_AI_MODEL_TYPE_PRIVATE = 3] = "V2NIM_AI_MODEL_TYPE_PRIVATE";
  }(K$1 || (K$1 = {})), function(e2) {
    e2.V2NIM_AI_MODEL_ROLE_TYPE_SYSTEM = "system", e2.V2NIM_AI_MODEL_ROLE_TYPE_USER = "user", e2.V2NIM_AI_MODEL_ROLE_TYPE_ASSISTANT = "assistant";
  }(W$1 || (W$1 = {})), function(e2) {
    e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_UNKNOWN = 0] = "V2NIM_SIGNALLING_EVENT_TYPE_UNKNOWN", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_CLOSE = 1] = "V2NIM_SIGNALLING_EVENT_TYPE_CLOSE", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_JOIN = 2] = "V2NIM_SIGNALLING_EVENT_TYPE_JOIN", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_INVITE = 3] = "V2NIM_SIGNALLING_EVENT_TYPE_INVITE", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_CANCEL_INVITE = 4] = "V2NIM_SIGNALLING_EVENT_TYPE_CANCEL_INVITE", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_REJECT = 5] = "V2NIM_SIGNALLING_EVENT_TYPE_REJECT", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_ACCEPT = 6] = "V2NIM_SIGNALLING_EVENT_TYPE_ACCEPT", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_LEAVE = 7] = "V2NIM_SIGNALLING_EVENT_TYPE_LEAVE", e2[e2.V2NIM_SIGNALLING_EVENT_TYPE_CONTROL = 8] = "V2NIM_SIGNALLING_EVENT_TYPE_CONTROL";
  }(J$1 || (J$1 = {})), function(e2) {
    e2[e2.V2NIM_SIGNALLING_CHANNEL_TYPE_AUDIO = 1] = "V2NIM_SIGNALLING_CHANNEL_TYPE_AUDIO", e2[e2.V2NIM_SIGNALLING_CHANNEL_TYPE_VIDEO = 2] = "V2NIM_SIGNALLING_CHANNEL_TYPE_VIDEO", e2[e2.V2NIM_SIGNALLING_CHANNEL_TYPE_CUSTOM = 3] = "V2NIM_SIGNALLING_CHANNEL_TYPE_CUSTOM";
  }(z$1 || (z$1 = {})), function(e2) {
    e2[e2.V2NIM_USER_STATUS_TYPE_UNKNOWN = 0] = "V2NIM_USER_STATUS_TYPE_UNKNOWN", e2[e2.V2NIM_USER_STATUS_TYPE_LOGIN = 1] = "V2NIM_USER_STATUS_TYPE_LOGIN", e2[e2.V2NIM_USER_STATUS_TYPE_LOGOUT = 2] = "V2NIM_USER_STATUS_TYPE_LOGOUT", e2[e2.V2NIM_USER_STATUS_TYPE_DISCONNECT = 3] = "V2NIM_USER_STATUS_TYPE_DISCONNECT";
  }(X$1 || (X$1 = {}));
  var ee$1 = { V2NIM_ERROR_CODE_UNKNOWN: { code: 0, message: "unknown error" }, V2NIM_ERROR_CODE_SUCCESS: { code: 200, message: "success" }, V2NIM_ERROR_CODE_HANDSHAKE: { code: 201, message: "handshake error" }, V2NIM_ERROR_CODE_REQUEST_TEMPERARY_FORBIDDEN: { code: 398, message: "request temprary forbidden" }, V2NIM_ERROR_CODE_SERVER_UNIT_ERROR: { code: 399, message: "server unit error" }, V2NIM_ERROR_CODE_FORBIDDEN: { code: 403, message: "forbidden" }, V2NIM_ERROR_CODE_NOT_FOUND: { code: 404, message: "not found" }, V2NIM_ERROR_CODE_PARAMETER_ERROR: { code: 414, message: "parameter error" }, V2NIM_ERROR_CODE_RATE_LIMIT_REACHED: { code: 416, message: "rate limit reached" }, V2NIM_ERROR_CODE_MULTI_LOGIN_FORBIDDEN: { code: 417, message: "multi login forbidden" }, V2NIM_ERROR_CODE_SERVER_INTERNAL_ERROR: { code: 500, message: "server internal error" }, V2NIM_ERROR_CODE_SERVER_BUSY: { code: 503, message: "server busy" }, V2NIM_ERROR_CODE_APP_UNREACHABLE: { code: 511, message: "app server unreachable" }, V2NIM_ERROR_CODE_SERVICE_UNAVAILABLE: { code: 514, message: "service unavailable" }, V2NIM_ERROR_CODE_PROTOCOL_BLACKHOLE_FILTERED: { code: 599, message: "protocol filtered by blackhole rule" }, V2NIM_ERROR_CODE_NO_PERMISSION: { code: 997, message: "appid has no permission to call the protocol" }, V2NIM_ERROR_CODE_UNPACK_ERROR: { code: 998, message: "unpack error" }, V2NIM_ERROR_CODE_PACK_ERROR: { code: 999, message: "pack error" }, V2NIM_ERROR_CODE_IM_DISABLED: { code: 101301, message: "IM disabled" }, V2NIM_ERROR_CODE_SERVICE_ADDRESS_INVALID: { code: 101302, message: "service address invalid" }, V2NIM_ERROR_CODE_APPKEY_NOT_EXIST: { code: 101303, message: "appkey not exist" }, V2NIM_ERROR_CODE_BUNDLEID_CHECK_FAILED: { code: 101304, message: "bundleid check failed" }, V2NIM_ERROR_CODE_APPKEY_BLOCKED: { code: 101403, message: "appkey blocked" }, V2NIM_ERROR_CODE_INVALID_TOKEN: { code: 102302, message: "invalid token" }, V2NIM_ERROR_CODE_ROBOT_NOT_ALLOWED: { code: 102303, message: "robot not allowed" }, V2NIM_ERROR_CODE_ACCOUNT_NOT_EXIST: { code: 102404, message: "account not exist" }, V2NIM_ERROR_CODE_ACCOUNT_CHAT_BANNED: { code: 102421, message: "account chat banned" }, V2NIM_ERROR_CODE_ACCOUNT_BANNED: { code: 102422, message: "account banned" }, V2NIM_ERROR_CODE_ACCOUNT_IN_BLOCK_LIST: { code: 102426, message: "account in block list" }, V2NIM_ERROR_CODE_USER_PROFILE_NOT_EXIST: { code: 103404, message: "user profile not exist" }, V2NIM_ERROR_CODE_USER_PROFILE_HIT_ANTISPAM: { code: 103451, message: "user profile hit antispam" }, V2NIM_ERROR_CODE_PEER_FRIEND_LIMIT: { code: 104301, message: "peer friend limit" }, V2NIM_ERROR_CODE_FRIEND_APPLICATION_NOT_EXIST: { code: 104302, message: "friend application not exist" }, V2NIM_ERROR_CODE_FRIEND_NOT_EXIST: { code: 104404, message: "friend not exist" }, V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST: { code: 104405, message: "friend already exist" }, V2NIM_ERROR_CODE_SELF_FRIEND_OPERATION_NOT_ALLOWED: { code: 104429, message: "self friend operation not allowed" }, V2NIM_ERROR_CODE_FRIEND_LIMIT: { code: 104435, message: "friend limit" }, V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT: { code: 104449, message: "friend operation rate limit" }, V2NIM_ERROR_CODE_FRIEND_HIT_ANTISPAM: { code: 104451, message: "friend hit antispam" }, V2NIM_ERROR_CODE_SELF_MUTE_OPERATION_NOT_ALLOWED: { code: 105429, message: "self mute operation not allowed" }, V2NIM_ERROR_CODE_MUTE_LIST_LIMIT: { code: 105435, message: "mute list limit" }, V2NIM_ERROR_CODE_SELF_BLOCK_LIST_OPERATION_NOT_ALLOWED: { code: 106429, message: "self block list operation not allowed" }, V2NIM_ERROR_CODE_BLOCK_LIST_LIMIT: { code: 106435, message: "block list limit" }, V2NIM_ERROR_CODE_REVOKE_THIRD_PARTY_MESSAGE_NOT_ALLOWED: { code: 107301, message: "revoke third party message not allowed" }, V2NIM_ERROR_CODE_SHORT_TO_LONG_URL_FAILED: { code: 107307, message: "short to long URL failed" }, V2NIM_ERROR_CODE_URL_INVALID: { code: 107308, message: "URL invalid" }, V2NIM_ERROR_CODE_DURATION_OUT_OF_RANGE: { code: 107309, message: "duration out of range" }, V2NIM_ERROR_CODE_GET_FILE_META_INFO_FAILED: { code: 107310, message: "get file meta info failed" }, V2NIM_ERROR_CODE_AUDIO_FILE_SIZE_LIMIT: { code: 107311, message: "audio file size limit" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_TIMEOUT: { code: 107312, message: "voice to text timeout" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_FAILED: { code: 107313, message: "voice to text failed" }, V2NIM_ERROR_CODE_REVOKE_EXCEED_TIME_LIMIT: { code: 107314, message: "revoke message exceed time limit" }, V2NIM_ERROR_CODE_REVOKE_MESSAGE_NOT_ALLOWED: { code: 107315, message: "revoke specific message not allowed" }, V2NIM_ERROR_CODE_FORCE_PUSH_LIST_LIMIT: { code: 107316, message: "force push list limit" }, V2NIM_ERROR_CODE_TEAM_MESSAGE_RECEIPT_RATE_LIMIT: { code: 107317, message: "team message receipt rate limit" }, V2NIM_ERROR_CODE_SNAPSHOT_NOT_EXIST: { code: 107318, message: "snapshot not exist" }, V2NIM_ERROR_CODE_PIN_LIMIT: { code: 107319, message: "pin limit" }, V2NIM_ERROR_CODE_PIN_NOT_EXIST: { code: 107320, message: "pin not exist" }, V2NIM_ERROR_CODE_QUICK_COMMENT_LIMIT: { code: 107321, message: "quick comment limit" }, V2NIM_ERROR_CODE_PIN_ALREADY_EXIST: { code: 107322, message: "pin already exist" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_FUNCTION_DISABLED: { code: 107333, message: "voice to text function disabled" }, V2NIM_ERROR_CODE_CLOUD_SEARCH_FUNCTION_DISABLED: { code: 107334, message: "cloud search function disabled" }, V2NIM_ERROR_CODE_ONE_WAY_DELETE_FUNCTION_DISABLED: { code: 107335, message: "one-way delete function disabled" }, V2NIM_ERRPR_CODE_ONEWAY_DELETION_NOT_ALLOW_FOR_TARGET_MESSAGES: { code: 107338, message: "one-way deletion is not allowed for target messages" }, V2NIM_ERRPR_CODE_SENDER_CANNOT_INCLUDED_IN_TARGET_LIST: { code: 107339, message: "The message sender cannot be included in the target list" }, V2NIM_ERROR_CODE_ROBOT_CANNOT_SEND_TARGET_MESSAGE: { code: 107340, message: "Robot can not send target message" }, V2NIM_ERROR_CODE_PIN_TARGET_MESSAGE_NOT_ALLOWED: { code: 107345, message: "Pin target message is not allowed" }, V2NIM_ERROR_CODE_TARGET_MESSAGE_NOT_ALLOWED_REPLY: { code: 107346, message: "Target message not allowed reply" }, V2NIM_ERROR_CODE_TARGET_MESSAGE_NOT_ALLOWED_QUICK_COMMENT: { code: 107347, message: "Target message not allowed quick comment" }, V2NIM_ERROR_CODE_REVOKE_MESSAGE_TO_SELF_NOT_ALLOWED: { code: 107429, message: "revoke message to self not allowed" }, V2NIM_ERROR_CODE_APP_CHAT_BANNED: { code: 107410, message: "app chat banned" }, V2NIM_ERROR_CODE_QUICK_COMMENT_FUNCTION_DISABLED: { code: 107326, message: "quick comment function disabled" }, V2NIM_ERROR_CODE_PIN_FUNCTION_DISABLED: { code: 107327, message: "PIN function disabled" }, V2NIM_ERROR_CODE_TEAM_READ_RECEIPT_FUNCTION_DISABLED: { code: 107324, message: "read receipt for team messages function disabled" }, V2NIM_ERROR_CODE_P2P_READ_RECEIPT_FUNCTION_DISABLED: { code: 107325, message: "read receipt for p2p messages function disabled" }, V2NIM_ERROR_CODE_RATE_LIMIT_FOR_MESSAGING_REACHED: { code: 107323, message: "rate limit for messaging reached" }, V2NIM_ERROR_CODE_MESSAGE_HIT_ANTISPAM: { code: 107451, message: "message hit antispam" }, V2NIM_ERROR_CODE_MESSAGE_NOT_EXIST: { code: 107404, message: "message not exist" }, V2NIM_ERROR_CODE_UNSENDING_MESSAGE_EXPIRED: { code: 107406, message: "unsending message expired" }, V2NIM_ERROR_CODE_TEAM_MARK_READ_FAILED: { code: 107302, message: "sending message failed for marking message read failed for too many team members" }, V2NIM_ERROR_CODE_SENDER_OR_MANAGER_PERMISSION_ONLY_REVOKE: { code: 107303, message: "only sender or manager can revoke message" }, V2NIM_ERROR_CODE_DELETE_SELF_MESSAGE_NOT_ALLOWED: { code: 107328, message: "delete self message not allowed" }, V2NIM_ERROR_CODE_NOT_CHATBOT_ACCOUNT: { code: 107329, message: "is not chatbot account" }, V2NIM_ERROR_CODE_MESSAGE_SENSE_REQUIRED: { code: 107330, message: "sender or receiver must sense message" }, V2NIM_ERROR_CODE_HIGH_PRIORITY_MESSAGE_RATE_LIMIT: { code: 107304, message: "rate limit of high-priority messages exceeded" }, ACK_MESSAGE_BE_HIGH_PRIORITY: { code: 107305, message: "ack message should be high-priority" }, V2NIM_ERROR_CODE_DUPLICATE_CLIENT_MESSAGE_ID: { code: 107306, message: "duplicate client message ID" }, V2NIM_ERROR_CODE_INVALID_TIME_RANGE: { code: 107439, message: "invalid time range" }, V2NIM_ERROR_CODE_NOT_ADVANCED_TEAM: { code: 108302, message: "not advanced team" }, V2NIM_ERROR_CODE_TEAM_MANAGER_LIMIT: { code: 108303, message: "team manager limit" }, V2NIM_ERROR_CODE_JOINED_TEAM_LIMIT: { code: 108305, message: "joined team limit" }, V2NIM_ERROR_CODE_TEAM_NORMAL_MEMBER_CHAT_BANNED: { code: 108306, message: "team normal member chat banned" }, V2NIM_ERROR_CODE_INVITED_ACCOUNT_NOT_FRIEND: { code: 108307, message: "invited account not friend" }, V2NIM_ERROR_CODE_REJECT_ALL_TEAM_APPLICATIONS: { code: 108308, message: "reject all team applications" }, V2NIM_ERROR_CODE_TARGETING_MESSAGE_FOR_TEAM_DISABLED: { code: 108318, message: "Targeting messages for group chat is disabled" }, V2NIM_ERROR_CODE_INCLUSIVE_AS_FALSE_NOT_ALLOWED_FOR_SUPER_TEAM: { code: 108319, message: 'Setting "inclusive" to false for super teams is not allowed' }, V2NIM_ERROR_CODE_CANNOT_MAKE_SUPER_TEAM_MESSAGE_VISIBLE_TO_NEW_MEMBERS: { code: 108320, message: "Cannot make super team targeted messages visible to new members" }, V2NIM_ERROR_CODE_CANNOT_ALLOW_TARGETED_MESSAGES_INCLUSIVE_TO_NEW_MEMBERS: { code: 108321, message: "Cannot allow targeted messages inclusive to new members" }, V2NIM_ERROR_CODE_TEAM_NOT_EXIST: { code: 108404, message: "team not exist" }, V2NIM_ERROR_CODE_TEAM_ALREADY_CHAT_BANNED: { code: 108420, message: "team already chat banned" }, V2NIM_ERROR_CODE_ALL_TEAM_MEMBER_CHAT_BANNED: { code: 108423, message: "all team member chat banned" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_LIMIT: { code: 108434, message: "extended super team limit" }, V2NIM_ERROR_CODE_CREATED_TEAM_LIMIT: { code: 108435, message: "created team limit" }, V2NIM_ERROR_CODE_TEAM_INVITATION_LIMIT: { code: 108437, message: "team invitation limit" }, V2NIM_ERROR_CODE_TEAM_HIT_ANTISPAM: { code: 108451, message: "team hit antispam" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_LIMIT_NOT_CONFIGURED: { code: 108304, message: "extended super team limit not configured" }, V2NIM_ERROR_CODE_SUPER_TEAM_SERVICE_DISABLED: { code: 108311, message: "super team service disabled" }, V2NIM_ERROR_CODE_TEAM_READ_RECEIPT_RECORD_NOT_FOUND: { code: 108301, message: "read receipt record for the team message not found" }, V2NIM_ERROR_CODE_NOT_MANAGER: { code: 108430, message: "unable to assign owner manager" }, V2NIM_ERROR_CODE_ONLINE_MEMBER_COUNT_DISABLED: { code: 108406, message: "number of online users service disabled" }, V2NIM_ERROR_CODE_TRANSFER_DISABLED: { code: 108310, message: "unable to transfer the ownership to owner" }, V2NIM_ERROR_CODE_CREATE_TEAM_DISABLED: { code: 108309, message: "unable to create team with more than %s people" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_CREATE_FAILED: { code: 108313, message: "/ extended super team creation failed，use open api to create the team" }, V2NIM_ERROR_CODE_TEAM_MESSAGE_READ_RECEIPT_DISABLED: { code: 108312, message: "read receipt for team messages function disabled" }, V2NIM_ERROR_CODE_RETRY: { code: 108449, message: "an error occurred, try again" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_NOT_TEAM_MEMBER: { code: 109301, message: "list of chat banned users contains non team members" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_OPERATOR: { code: 109303, message: "list of chat banned users contains the operator" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_TEAM_OWNER: { code: 109304, message: "list of chat banned users contains the team owner" }, V2NIM_ERROR_CODE_OPERATION_ON_TEAM_MANAGER_NOT_ALLOWED: { code: 109305, message: "operation on team manager not allowed" }, V2NIM_ERROR_CODE_NO_TEAM_INVITE_PERMISSION: { code: 109306, message: "no team invite permission" }, V2NIM_ERROR_CODE_TEAM_OWNER_QUIT_NOT_ALLOWED: { code: 109307, message: "team owner quit not allowed" }, V2NIM_ERROR_CODE_TEAM_OWNER_IN_KICK_LIST: { code: 109308, message: "list of kicked user contains the team owner" }, V2NIM_ERROR_CODE_INVITE_ROBOT_ACCOUNT_NOT_ALLOWED: { code: 109309, message: "invite robot account not allowed" }, V2NIM_ERROR_CODE_KICK_OPERATOR_NOT_ALLOWED: { code: 109310, message: "kick operator not allowed" }, V2NIM_ERROR_CODE_TEAM_MEMBER_ALREADY_EXIST: { code: 109311, message: "team member already exist" }, V2NIM_ERROR_CODE_TEAM_INVITATION_OR_APPLICATION_NOT_EXIST: { code: 109313, message: "team invitation or application not exist" }, V2NIM_ERROR_CODE_OPERATION_ON_TEAM_OWNER_NOT_ALLOWED: { code: 109314, message: "operation on team owner not allowed" }, V2NIM_ERROR_CODE_FORCED_PUSH_LIST_INCLUDES_NON_TARGETED_ACCOUNTS: { code: 109318, message: "The forced push list includes non-targeted accounts" }, V2NIM_ERROR_CODE_TEAM_MEMBER_NOT_EXIST: { code: 109404, message: "team member not exist" }, V2NIM_ERROR_CODE_TEAM_MEMBER_CHAT_BANNED: { code: 109424, message: "team member chat banned" }, V2NIM_ERROR_CODE_TEAM_OWNER_OPERATION_PERMISSION_REQUIRED: { code: 109427, message: "team owner operation permission required" }, V2NIM_ERROR_CODE_TEAM_OWNER_OR_MANAGER_OPERATION_PERMISSION_REQUIRED: { code: 109432, message: "team owner or manager operation permission required" }, V2NIM_ERROR_CODE_TEAM_MEMBER_CONCURRENT_OPERATION_FAILED: { code: 109449, message: "team member concurrent operation failed" }, V2NIM_ERROR_CODE_TEAM_MEMBER_HIT_ANTISPAM: { code: 109451, message: "team member hit antispam" }, V2NIM_ERROR_CODE_CONVERSATION_AND_ACCOUNT_MISMATCH: { code: 110302, message: "conversation and account mismatch" }, V2NIM_ERROR_CODE_CONVERSATION_STICK_TOP_LIMIT: { code: 110303, message: "conversation stick top limit" }, V2NIM_ERROR_CODE_CONVERSATION_BELONGED_GROUP_LIMIT: { code: 110304, message: "conversation belonged group limit" }, V2NIM_ERROR_CODE_CONVERSATION_IS_NOT_STICK_TOP: { code: 110305, message: "conversation is not stick top" }, V2NIM_ERROR_CODE_STICK_TOP_DISABLED: { code: 110306, message: "conversation stick top disabled" }, V2NIM_ERROR_CODE_CONVERSATION_NOT_EXIST: { code: 110404, message: "conversation not exist" }, V2NIM_ERROR_CODE_CHATROOM_LINK_UNAVAILABLE: { code: 113304, message: "chatroom link unavailable" }, V2NIM_ERROR_CODE_IM_CONNECTION_ABNORMAL: { code: 113305, message: "IM connection abnormal" }, V2NIM_ERROR_CODE_CHATROOM_NOT_EXIST: { code: 113404, message: "chatroom not exist" }, V2NIM_ERROR_CODE_CHATROOM_CLOSED: { code: 113406, message: "chatroom closed" }, V2NIM_ERROR_CODE_CHATROOM_REPEATED_OPERATION: { code: 113409, message: "chatroom repeated operation" }, V2NIM_ERROR_CODE_CHATROOM_DISABLED: { code: 113410, message: "chatroom disabled" }, V2NIM_ERROR_CODE_ALL_CHATROOM_MEMBER_CHAT_BANNED: { code: 113423, message: "all chatroom member chat banned" }, V2NIM_ERROR_CODE_CHATROOM_HIT_ANTISPAM: { code: 113451, message: "chatroom hit antispam" }, V2NIM_ERROR_CODE_ANONYMOUS_MEMBER_FORBIDDEN: { code: 114303, message: "anonymous member forbidden" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_NOT_EXIST: { code: 114404, message: "chatroom member not exist" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_REPEATED_OPERATION: { code: 114405, message: "chatroom member repeated operation" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_CHAT_BANNED: { code: 114421, message: "chatroom member chat banned" }, V2NIM_ERROR_CODE_ACCOUNT_IN_CHATROOM_BLOCK_LIST: { code: 114426, message: "account in chatroom block list" }, V2NIM_ERROR_CODE_CHATROOM_OWNER_OPERATION_PERMISSION_REQUIRED: { code: 114427, message: "chatroom owner operation permission required" }, V2NIM_ERROR_CODE_SELF_IN_CHATROOM_MEMBER_OPERATION_LIST: { code: 114429, message: "self in chatroom member operation list" }, V2NIM_ERROR_CODE_CHATROOM_OWNER_OR_MANAGER_OPERATION_PERMISSION_REQUIRED: { code: 114432, message: "chatroom owner or manager operation permission required" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_LIMIT: { code: 114437, message: "chatroom member limit" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_CONCURRENT_OPERATION_FAILED: { code: 114449, message: "chatroom member concurrent operation failed" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_HIT_ANTISPAM: { code: 114451, message: "chatroom member hit antispam" }, V2NIM_ERROR_CODE_CONVERSATION_GROUP_NOT_EXIST: { code: 116404, message: "conversation group not exist" }, V2NIM_ERROR_CODE_CONVERSATION_GROUP_LIMIT: { code: 116435, message: "conversation group limit" }, V2NIM_ERROR_CODE_CONVERSATIONS_IN_GROUP_LIMIT: { code: 116437, message: "conversations in group limit" }, V2NIM_ERROR_CODE_COLLECTION_LIMIT: { code: 189301, message: "collection limit" }, V2NIM_ERROR_CODE_COLLECTION_NOT_EXIST: { code: 189302, message: "collection not exist" }, V2NIM_ERROR_CODE_COLLECTION_CONCURRENT_OPERATION_FAILED: { code: 189449, message: "collection concurrent operation failed" }, V2NIM_ERROR_CODE_INTERNAL: { code: 190001, message: "internal error" }, V2NIM_ERROR_CODE_ILLEGAL_STATE: { code: 190002, message: "illegal state" }, V2NIM_ERROR_CODE_MISUSE: { code: 191001, message: "misuse" }, V2NIM_ERROR_CODE_CANCELLED: { code: 191002, message: "operation cancelled" }, V2NIM_ERROR_CODE_CALLBACK_FAILED: { code: 191003, message: "callback failed" }, V2NIM_ERROR_CODE_INVALID_PARAMETER: { code: 191004, message: "invalid parameter" }, V2NIM_ERROR_CODE_TIMEOUT: { code: 191005, message: "timeout" }, V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST: { code: 191006, message: "resource not exist" }, V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST: { code: 191007, message: "resource already exist" }, V2NIM_ERROR_CODE_CONNECT_FAILED: { code: 192001, message: "connect failed" }, V2NIM_ERROR_CODE_CONNECT_TIMEOUT: { code: 192002, message: "connect timeout" }, V2NIM_ERROR_CODE_DISCONNECT: { code: 192003, message: "disconnect" }, V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT: { code: 192004, message: "protocol timeout" }, V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED: { code: 192005, message: "protocol send failed" }, V2NIM_ERROR_CODE_REQUEST_FAILED: { code: 192006, message: "request failed" }, V2NIM_ERROR_CODE_FILE_NOT_FOUND: { code: 194001, message: "file not found" }, V2NIM_ERROR_CODE_FILE_CREATE_FAILED: { code: 194002, message: "file create failed" }, V2NIM_ERROR_CODE_FILE_OPEN_FAILED: { code: 194003, message: "file open failed" }, V2NIM_ERROR_CODE_FILE_WRITE_FAILED: { code: 194004, message: "file write failed" }, V2NIM_ERROR_CODE_FILE_READ_FAILED: { code: 194005, message: "file read failed" }, V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED: { code: 194006, message: "file upload failed" }, V2NIM_ERROR_CODE_FILE_DOWNLOAD_FAILED: { code: 194007, message: "file download failed" }, V2NIM_ERROR_CODE_CLIENT_ANTISPAM: { code: 195001, message: "client anti-spam" }, V2NIM_ERROR_CODE_SERVER_ANTISPAM: { code: 195002, message: "server anti-spam" } }, te$1 = Object.keys(ee$1), ie$1 = te$1.reduce(function(e2, t2) {
    var i2 = ee$1[t2];
    return e2[t2] = i2.code, e2;
  }, {}), re$1 = te$1.reduce(function(e2, t2) {
    var i2 = ee$1[t2];
    return e2[i2.code] = i2.message, e2;
  }, {}), se$1 = Object.freeze({ __proto__: null, V2NIMErrorCode: ie$1, V2NIMErrorDesc: re$1, get V2NIMDataSyncLevel() {
    return s;
  }, get V2NIMDataSyncType() {
    return o$1;
  }, get V2NIMDataSyncState() {
    return n;
  }, get V2NIMConversationType() {
    return a$1;
  }, get V2NIMLastMessageState() {
    return c;
  }, get V2NIMFriendAddMode() {
    return d;
  }, get V2NIMFriendAddApplicationType() {
    return l;
  }, get V2NIMFriendAddApplicationStatus() {
    return p;
  }, get V2NIMFriendDeletionType() {
    return h$1;
  }, get V2NIMFriendVerifyType() {
    return u$1;
  }, get V2NIMLoginAuthType() {
    return m$1;
  }, get V2NIMLoginStatus() {
    return g$1;
  }, get V2NIMLoginClientType() {
    return v;
  }, get V2NIMKickedOfflineReason() {
    return f;
  }, get V2NIMLoginClientChange() {
    return y;
  }, get V2NIMConnectStatus() {
    return I$1;
  }, get V2NIMMessageType() {
    return M$1;
  }, get V2NIMMessageNotificationType() {
    return E$1;
  }, get V2NIMMessageAttachmentUploadState() {
    return T$1;
  }, get V2NIMMessageSendingState() {
    return S$1;
  }, get V2NIMQueryDirection() {
    return C$1;
  }, get V2NIMMessageRevokeType() {
    return O$1;
  }, get V2NIMMessagePinState() {
    return R$1;
  }, get V2NIMMessageQuickCommentType() {
    return A$1;
  }, get V2NIMClientAntispamOperateType() {
    return b$1;
  }, get V2NIMSortOrder() {
    return k$1;
  }, get V2NIMSystemMessageType() {
    return V$1;
  }, get V2NIMTeamMessageMuteMode() {
    return L$1;
  }, get V2NIMP2PMessageMuteMode() {
    return P$1;
  }, get V2NIMTeamMemberRoleQueryType() {
    return D$1;
  }, get V2NIMTeamType() {
    return w$1;
  }, get V2NIMTeamJoinMode() {
    return U$1;
  }, get V2NIMTeamAgreeMode() {
    return x$1;
  }, get V2NIMTeamInviteMode() {
    return F;
  }, get V2NIMTeamUpdateInfoMode() {
    return B$1;
  }, get V2NIMTeamChatBannedMode() {
    return j$1;
  }, get V2NIMTeamUpdateExtensionMode() {
    return $$1;
  }, get V2NIMTeamJoinActionType() {
    return H$1;
  }, get V2NIMTeamJoinActionStatus() {
    return q$1;
  }, get V2NIMTeamNotificationType() {
    return Y$1;
  }, get V2NIMTeamMemberRole() {
    return G$1;
  }, get V2NIMAIModelRoleType() {
    return W$1;
  }, get V2NIMAIModelType() {
    return K$1;
  }, get V2NIMSignallingChannelType() {
    return z$1;
  }, get V2NIMSignallingEventType() {
    return J$1;
  }, get V2NIMUserStatusType() {
    return X$1;
  } });
  let oe$1 = class oe extends Error {
    constructor(e2) {
      super(e2.desc), this.name = "V2NIMError", this.code = e2.code || 0, this.desc = e2.desc || re$1[this.code] || de$1[this.code] || "", this.message = this.desc, this.detail = e2.detail || {};
    }
    toString() {
      var e2, t2 = `${this.name}
 code: ${this.code}
 message: "${this.message}"
 detail: ${this.detail ? JSON.stringify(this.detail) : ""}`;
      return (null === (e2 = null == this ? void 0 : this.detail) || void 0 === e2 ? void 0 : e2.rawError) && (t2 += `
 rawError: ${this.detail.rawError.message}`), t2;
    }
  };
  let ne$1 = class ne extends oe$1 {
    constructor(e2, t2 = {}, i2) {
      super({ code: ie$1.V2NIM_ERROR_CODE_PARAMETER_ERROR, detail: { reason: e2, rules: i2, data: t2 } }), this.name = "validateError", this.message = this.message + "\n" + JSON.stringify(this.detail, null, 2), this.data = t2, this.rules = i2;
    }
  };
  let ae$1 = class ae extends oe$1 {
    constructor(e2) {
      var t2, i2, r2;
      super({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: null === (t2 = e2.detail) || void 0 === t2 ? void 0 : t2.reason, rules: null === (i2 = e2.detail) || void 0 === i2 ? void 0 : i2.rules, data: null === (r2 = e2.detail) || void 0 === r2 ? void 0 : r2.data } }), this.name = "ValidateErrorV2";
    }
  };
  let ce$1 = class ce extends oe$1 {
    constructor(e2) {
      super(Object.assign({ code: 400 }, e2)), this.desc = this.desc || "upload file error", this.message = this.desc, this.name = "uploadError";
    }
  };
  var de$1 = { 200: null, 406: null, 808: null, 810: null, 302: "The user name or password is incorrect.", 405: "Parameter length too long", 408: "Client request timed out", 415: "Client network unavailable", 422: "Account disabled", 508: "Expiration date", 509: "Invalid", 7101: "Be pulled black", 700: "Partial failure of batch operation", 801: "The number of people in the team has reached the upper limit", 802: "No permission", 803: "The team does not exist or has not changed", 804: "The user is not in the team", 805: "Team type mismatch", 806: "The number of teams created has reached the limit", 807: "Team member not valid", 809: "Already in the team", 811: "The number of accounts in the forced push list exceeds the limit", 812: "The team is muted", 813: "Due to the limited number of team, some pull people successfully", 814: "Disable team message read service", 815: "Maximum number of team administrators", 816: "Batch operation partial failure", 9102: "Channel failure", 9103: "This call has been answered / rejected at another end", 10201: "Signaling: target NIM client is offline", 10202: "Signaling: push is unreachable", 10404: "Signaling: channel not exists", 10405: "Signaling: channel already exists", 10406: "Signaling: member of channel not exists", 10407: "Signaling: member of channel already exists", 10408: "Signaling: the invitation request does not exist or has expired", 10409: "Signaling: the invitation request has been rejected", 10410: "Signaling: the invitation request has been accepted", 10414: "Signaling: request parameter error", 10417: "Signaling: uid conflict", 10419: "Signaling: the number of members of channel exceed the limit", 10420: "Signaling: member is already in the channel on other client", 10700: "Signaling: phased success", 13002: "Abnormal chatroom status", 13003: "In the blacklist", 13004: "In the mute list", 13006: "All members are muted, and only the administrator can speak" };
  function le$1(e2, t2) {
    return t2 instanceof RegExp ? "__REGEXP " + t2.toString() : t2;
  }
  function pe$1(e2, t2 = {}, i2, r2 = false) {
    var s2 = {};
    return Object.keys(e2).forEach((o2) => {
      var n2 = e2[o2].type, a2 = i2 ? `In ${i2}, ` : "";
      if (null == t2) {
        var c2 = `${a2}param is null or undefined`;
        throw r2 ? new ae$1({ detail: { reason: c2, data: { key: o2 }, rules: "required" } }) : new ne$1(c2, { key: o2 }, "required");
      }
      if (void 0 === t2[o2]) {
        if (false === e2[o2].required)
          return void (s2[o2] = t2[o2]);
        var d2 = `${a2}param '${o2}' is required`;
        throw r2 ? new ae$1({ detail: { reason: d2, data: { key: o2 }, rules: "required" } }) : new ne$1(d2, { key: o2 }, "required");
      }
      var l2 = he$1[n2];
      if (l2 && !l2(t2, o2, e2[o2], r2)) {
        var p2 = `${a2}param '${o2}' unexpected`, h2 = { key: o2, value: t2[o2] };
        throw r2 ? new ae$1({ detail: { reason: p2, data: h2, rules: JSON.stringify(e2[o2], le$1) } }) : new ne$1(p2, h2, JSON.stringify(e2[o2], le$1));
      }
      s2[o2] = t2[o2];
    }), s2;
  }
  var he$1 = { string: function(e2, t2, i2) {
    var { allowEmpty: r2, max: s2, min: o2, regExp: n2 } = i2, a2 = e2[t2];
    return !("string" != typeof a2 || false === r2 && "" === a2 || "number" == typeof s2 && a2.length > s2 || "number" == typeof o2 && a2.length < o2 || function(e3) {
      return "[object RegExp]" === Object.prototype.toString.call(e3);
    }(n2) && !n2.test(a2));
  }, number: function(e2, t2, i2) {
    var { min: r2, max: s2 } = i2, o2 = e2[t2];
    return !("number" != typeof o2 || "number" == typeof r2 && o2 < r2 || "number" == typeof s2 && o2 > s2);
  }, boolean: function(e2, t2) {
    return "boolean" == typeof e2[t2];
  }, file: function(e2, t2) {
    return true;
  }, enum: function(e2, t2, i2) {
    var { values: r2 } = i2, s2 = e2[t2];
    return !r2 || r2.indexOf(s2) > -1;
  }, jsonstr: function(e2, t2) {
    try {
      var i2 = JSON.parse(e2[t2]);
      return "object" == typeof i2 && null !== i2;
    } catch (e3) {
      return false;
    }
  }, func: function(e2, t2) {
    return "function" == typeof e2[t2];
  }, array: function(e2, t2, i2, r2 = false) {
    var { itemType: s2, itemRules: o2, rules: n2, min: a2, max: c2, values: d2 } = i2, l2 = e2[t2];
    if (!Array.isArray(l2))
      return false;
    if ("number" == typeof c2 && l2.length > c2)
      return false;
    if ("number" == typeof a2 && l2.length < a2)
      return false;
    if (o2)
      l2.forEach((e3, i3) => {
        pe$1({ [i3]: o2 }, { [i3]: e3 }, `${t2}[${i3}]`, r2);
      });
    else if (n2)
      l2.forEach((e3, i3) => pe$1(n2, e3, `${t2}[${i3}]`, r2));
    else if ("enum" === s2) {
      if (d2 && function(e3, t3) {
        return t3 = t3 || [], (e3 = e3 || []).filter((e4) => -1 === t3.indexOf(e4));
      }(l2, d2).length)
        return false;
    } else if (s2 && !l2.every((e3) => typeof e3 === s2))
      return false;
    return true;
  }, object: function(e2, t2, i2, r2 = false) {
    var { rules: s2, allowEmpty: o2 } = i2, n2 = e2[t2];
    if ("object" != typeof n2 || null === n2)
      return false;
    if (s2) {
      var a2 = Object.keys(s2), c2 = Object.keys(n2).filter((e3) => a2.indexOf(e3) > -1);
      if (false === o2 && 0 === c2.length)
        return false;
      pe$1(s2, n2, t2, r2);
    }
    return true;
  } };
  function ue$1(e2, t2) {
    if (!e2)
      throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE });
    pe$1({ conversationId: { type: "string", allowEmpty: false, regExp: new RegExp(`^${e2}\\|[1-3]\\|`) } }, { conversationId: t2 }, "", true);
  }
  let me$1 = class me {
    constructor() {
      this.timerList = [], this.id = 1, this.timer = null, this.timeout = 0;
    }
    addTimer(e2, t2 = 0, i2 = 1) {
      var r2 = (/* @__PURE__ */ new Date()).getTime(), s2 = this.id;
      return this.timerList.push({ id: s2, loop: i2, count: 0, timeout: r2 + t2, interval: t2, callback: e2 }), this.id++, this.checkTimer(r2), s2;
    }
    checkTimer(e2 = (/* @__PURE__ */ new Date()).getTime()) {
      if (this.removeFinished(), 0 !== this.timerList.length || null == this.timer) {
        var t2 = 0;
        for (var i2 of this.timerList)
          (0 === t2 || t2 > i2.timeout) && (t2 = i2.timeout);
        0 !== this.timerList.length && (null === this.timer || t2 < this.timeout || this.timeout < e2) && (this.timer = setTimeout(this.nowTime.bind(this), t2 - e2), this.timeout = t2);
      }
    }
    nowTime() {
      var e2 = (/* @__PURE__ */ new Date()).getTime();
      for (var t2 of this.timerList)
        e2 >= t2.timeout && (t2.callback(), t2.count++, t2.timeout = e2 + t2.interval);
      this.clerTime(), this.checkTimer(e2);
    }
    clerTime() {
      null !== this.timer && (clearTimeout(this.timer), this.timer = null);
    }
    deleteTimer(e2) {
      for (var t2 = this.timerList.length - 1; t2 >= 0; t2--)
        this.timerList[t2].id === e2 && this.timerList.splice(t2, 1);
    }
    removeFinished() {
      for (var e2 = this.timerList.length - 1; e2 >= 0; e2--) {
        var t2 = this.timerList[e2];
        t2.loop >= 0 && t2.count >= t2.loop && this.timerList.splice(e2, 1);
      }
    }
    destroy() {
      this.clerTime(), this.timerList = [], this.id = 1, this.timer = null;
    }
  };
  function ge$1(e2, t2) {
    var i2 = {};
    for (var r2 in e2)
      Object.prototype.hasOwnProperty.call(e2, r2) && t2.indexOf(r2) < 0 && (i2[r2] = e2[r2]);
    if (null != e2 && "function" == typeof Object.getOwnPropertySymbols) {
      var s2 = 0;
      for (r2 = Object.getOwnPropertySymbols(e2); s2 < r2.length; s2++)
        t2.indexOf(r2[s2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, r2[s2]) && (i2[r2[s2]] = e2[r2[s2]]);
    }
    return i2;
  }
  function ve$1(e2, t2, i2, r2) {
    return new (i2 || (i2 = Promise))(function(s2, o2) {
      function n2(e3) {
        try {
          c2(r2.next(e3));
        } catch (e4) {
          o2(e4);
        }
      }
      function a2(e3) {
        try {
          c2(r2.throw(e3));
        } catch (e4) {
          o2(e4);
        }
      }
      function c2(e3) {
        e3.done ? s2(e3.value) : function(e4) {
          return e4 instanceof i2 ? e4 : new i2(function(t3) {
            t3(e4);
          });
        }(e3.value).then(n2, a2);
      }
      c2((r2 = r2.apply(e2, t2 || [])).next());
    });
  }
  function fe$1(e2) {
    return null != e2 && "object" == typeof e2 && Object.getPrototypeOf(e2) == Object.prototype;
  }
  function ye$1(e2, t2) {
    var i2 = fe$1(e2) || Array.isArray(e2), r2 = fe$1(t2) || Array.isArray(t2);
    if (i2 && r2) {
      for (var s2 in t2) {
        var o2 = ye$1(e2[s2], t2[s2]);
        void 0 !== o2 && (e2[s2] = o2);
      }
      return e2;
    }
    return t2;
  }
  var Ie$1 = { getNetworkStatus: () => Promise.resolve({ net_type: 0, net_connect: true }), onNetworkStatusChange(e2) {
  }, offNetworkStatusChange() {
  } }, _e$1 = { setLogger: function(e2) {
    throw new Error("setLogger not implemented.");
  }, platform: "", WebSocket: class {
    constructor(e2, t2) {
      throw this.CONNECTING = 0, this.OPEN = 1, this.CLOSING = 2, this.CLOSED = 3, this.binaryType = "", new Error("Method not implemented.");
    }
    close(e2, t2) {
      throw new Error("Method not implemented.");
    }
    send(e2) {
      throw new Error("Method not implemented.");
    }
    onclose(e2) {
      throw new Error("Method not implemented.");
    }
    onerror(e2) {
      throw new Error("Method not implemented.");
    }
    onmessage(e2) {
      throw new Error("Method not implemented.");
    }
    onopen(e2) {
      throw new Error("Method not implemented.");
    }
  }, localStorage: {}, request: function(e2, t2) {
    throw new Error("request not implemented.");
  }, uploadFile: function(e2) {
    throw new Error("uploadFile not implemented.");
  }, getSystemInfo: function() {
    throw new Error("getSystemInfo not implemented.");
  }, getFileUploadInformation(e2) {
    throw new Error("getFileUploadInformation not implemented.");
  }, envPayload: {}, net: Ie$1, logStorage: class {
    constructor(e2) {
    }
    open() {
      return Promise.resolve();
    }
    close() {
    }
    addLogs(e2) {
      return Promise.resolve();
    }
    extractLogs() {
      return Promise.resolve();
    }
  } }, Me$1 = ["error", "warn", "log", "debug"], Ee$1 = function() {
  }, Te$1 = ["off", "error", "warn", "log", "debug"];
  let Se$1 = class Se {
    constructor(e2, t2 = {}) {
      this.storageArr = [], this.debugLevel = "off", this.timer = 0, this.strategies = { debug: { name: "debg", func: console.log }, log: { name: "info", func: console.log }, warn: { name: "warn", func: console.warn }, error: { name: "erro", func: console.error } }, this.debug = Ee$1, this.log = Ee$1, this.warn = Ee$1, this.error = Ee$1, this.iid = Math.round(1e3 * Math.random()), this.debugLevel = Te$1.includes(e2) ? e2 : "off", t2.debugLevel && (this.debugLevel = Te$1.includes(t2.debugLevel) ? t2.debugLevel : this.debugLevel), this.logStorage = false === t2.storageEnable ? null : new _e$1.logStorage(null == t2 ? void 0 : t2.storageName), this.setOptions(t2), this.setLogFunc(this.debugLevel), this.setTimer(), this.open();
    }
    getDebugMode() {
      return "debug" === this.debugLevel;
    }
    open(e2) {
      this.logStorage && this.logStorage.open(e2).then(() => {
        this.log("Logger::open success");
      }).catch((e3) => {
        this.warn("Logger::open failed", e3);
      });
    }
    setOptions(e2) {
      if (e2 && e2.logFunc) {
        var t2 = e2.logFunc;
        for (var i2 in t2) {
          var r2 = i2, s2 = t2[r2];
          s2 && (this.strategies[r2].func = s2);
        }
      }
    }
    setLogFunc(e2, t2 = "log") {
      var i2 = Me$1.findIndex((t3) => t3 === e2), r2 = Me$1.findIndex((e3) => e3 === t2);
      Me$1.forEach((e3, t3) => {
        this[e3] = function() {
          if (!(t3 > i2 && t3 > r2)) {
            var s2 = Array.prototype.slice.call(arguments), o2 = this.strategies[e3], n2 = this.formatArgs(s2, o2.name);
            t3 <= r2 && this.logStorage && this.prepareSaveLog(n2, e3), t3 <= i2 && o2.func(n2);
          }
        };
      });
    }
    extractLogs() {
      var e2;
      return this.logStorage ? null === (e2 = this.logStorage) || void 0 === e2 ? void 0 : e2.extractLogs() : Promise.resolve("");
    }
    prepareSaveLog(e2, t2) {
      this.storageArr.push({ text: e2, level: t2, time: Date.now(), iid: this.iid }), this.timer || this.setTimer(), this.storageArr.length >= 100 && (this.triggerTimer(), this.storageArr = []);
    }
    saveLogs() {
      return ve$1(this, void 0, void 0, function* () {
        if (this.logStorage) {
          var e2 = this.storageArr;
          this.storageArr = [];
          try {
            yield this.logStorage.addLogs(e2);
          } catch (e3) {
          }
        }
      });
    }
    clearTimer() {
      this.timer && clearTimeout(this.timer), this.timer = 0;
    }
    setTimer() {
      this.clearTimer(), this.timer = setTimeout(this.triggerTimer.bind(this), 5e3);
    }
    triggerTimer() {
      this.clearTimer(), this.saveLogs();
    }
    formatArgs(e2, t2) {
      var i2 = /* @__PURE__ */ new Date();
      return `[NIM ${this.iid} ${t2} ${i2.getMonth() + 1}-${i2.getDate()} ${i2.getHours()}:${i2.getMinutes()}:${i2.getSeconds()}:${i2.getMilliseconds()}] ` + e2.map((e3) => e3 instanceof oe$1 ? e3.toString() : e3 instanceof Error ? e3 && e3.message ? e3.message : e3 : "object" == typeof e3 ? JSON.stringify(e3) : e3).join(" ");
    }
    destroy() {
      this.debug = Ee$1, this.log = Ee$1, this.warn = Ee$1, this.error = Ee$1, this.saveLogs(), this.clearTimer(), this.storageArr = [], this.logStorage && this.logStorage.close();
    }
  };
  var Ce$1, Ne$1 = (Ce$1 = function() {
    return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
  }, function() {
    return Ce$1() + Ce$1() + Ce$1() + Ce$1() + Ce$1() + Ce$1() + Ce$1() + Ce$1();
  });
  function Oe$1() {
    return "undefined" != typeof tt && tt.getSystemInfo ? "TT" : "undefined" != typeof swan && swan.getSystemInfo ? "BAIDU" : "undefined" != typeof my && my.getSystemInfo ? "ALI" : "undefined" != typeof wx && wx.getSystemInfo ? "WX" : "unknow environment";
  }
  function Re$1(e2, t2) {
    return function(e3, t3, i2, r2) {
      for (var s2 in e3 = e3 || {}, i2 = i2 || {}, r2 = r2 || (() => {
      }), t3 = t3 || {}) {
        var o2 = r2(e3[s2], t3[s2]);
        e3[s2] = void 0 === o2 ? t3[s2] : o2;
      }
      for (var n2 in i2) {
        var a2 = r2(e3[n2], i2[n2]);
        e3[n2] = void 0 === a2 ? i2[n2] : a2;
      }
      return e3;
    }({}, e2, t2, function(e3, t3) {
      return void 0 === t3 ? e3 : t3;
    });
  }
  function Ae$1() {
    return Promise.resolve();
  }
  function be$1() {
  }
  function ke$1(e2) {
    var t2 = e2.lastIndexOf("."), i2 = t2 > -1 ? e2.slice(t2 + 1) : "";
    return /^\d+$/.test(i2.trim()) && (i2 = ""), i2;
  }
  function Ve$1(e2, t2, i2) {
    return 0 === e2.length || e2[0][t2] <= i2 ? 0 : e2[e2.length - 1][t2] > i2 ? e2.length : e2.findIndex((r2, s2) => {
      if (e2[s2 - 1] && e2[s2 - 1][t2] > i2 && i2 >= r2[t2])
        return true;
    });
  }
  let Le$1 = class Le {
    constructor(e2) {
      this.lastSuccUploadHost = "", this.core = e2;
    }
    getFileUploadInformation(e2) {
      return _e$1.getFileUploadInformation(e2);
    }
    request(e2, t2, i2) {
      var r2 = (/* @__PURE__ */ new Date()).getTime(), s2 = (null == i2 ? void 0 : i2.exception_service) || 0;
      return _e$1.request(e2, t2).catch((i3) => {
        var o2, n2, a2, c2, d2 = i3;
        throw this.core.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account || (null === (n2 = null === (o2 = this.core) || void 0 === o2 ? void 0 : o2.auth) || void 0 === n2 ? void 0 : n2.account), trace_id: null === (c2 = null === (a2 = this.core.clientSocket) || void 0 === a2 ? void 0 : a2.socket) || void 0 === c2 ? void 0 : c2.sessionId, start_time: r2, action: 1, exception_service: s2 }), this.core.reporter.reportTraceUpdateV2("exceptions", { code: "number" == typeof d2.code ? d2.code : 0, description: d2.message || `${d2.code}`, operation_type: 0, target: e2, context: t2 ? JSON.stringify(t2) : "" }, { asyncParams: _e$1.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1), i3;
      });
    }
    uploadFile(e2) {
      var t2, i2, r2, s2;
      return ve$1(this, void 0, void 0, function* () {
        for (var o2 = "BROWSER" === _e$1.platform, n2 = o2 ? e2.chunkUploadHostBackupList : e2.commonUploadHostBackupList, a2 = o2 ? e2.chunkUploadHost : e2.commonUploadHost, c2 = n2.indexOf(a2), d2 = -1 === c2 ? [a2, ...n2] : [a2, ...n2.slice(0, c2), ...n2.slice(c2 + 1)], l2 = Math.max(d2.indexOf(this.lastSuccUploadHost), 0), p2 = null, h2 = 0; h2 < d2.length; h2++) {
          var u2 = (/* @__PURE__ */ new Date()).getTime(), m2 = d2[(h2 + l2) % d2.length];
          try {
            var g2 = yield _e$1.uploadFile(Object.assign(Object.assign({}, e2), o2 ? { chunkUploadHost: m2 } : { commonUploadHost: m2 }));
            return this.lastSuccUploadHost = m2, g2;
          } catch (e3) {
            this.core.cloudStorage.nos.nosErrorCount--, p2 = e3;
            var v2 = e3;
            if (this.core.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account || (null === (i2 = null === (t2 = this.core) || void 0 === t2 ? void 0 : t2.auth) || void 0 === i2 ? void 0 : i2.account), trace_id: null === (s2 = null === (r2 = this.core.clientSocket) || void 0 === r2 ? void 0 : r2.socket) || void 0 === s2 ? void 0 : s2.sessionId, start_time: u2, action: 1, exception_service: 3 }), this.core.reporter.reportTraceUpdateV2("exceptions", { code: "number" == typeof v2.code ? v2.code : 0, description: v2.message || `${v2.code}`, operation_type: 1, target: m2 }, { asyncParams: _e$1.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1), e3 && (e3.code === ie$1.V2NIM_ERROR_CODE_CANCELLED || 10499 === e3.errCode))
              throw e3;
          }
        }
        throw p2;
      });
    }
  };
  var Pe$1 = "https://abt-online.netease.im/v1/api/abt/client/getExperimentInfo";
  let De$1 = class De {
    constructor(e2, t2) {
      this.abtInfo = {}, this.core = e2, this.config = Re$1({ isAbtestEnable: true, abtestUrl: Pe$1, abtestProjectKey: "imElite_sdk_abtest_web" }, t2);
    }
    setOptions(e2) {
      this.config = Re$1(this.config, e2);
    }
    abtRequest() {
      var e2, t2;
      return ve$1(this, void 0, void 0, function* () {
        if (this.config.isAbtestEnable && !this.abtInfo.experiments && this.config.abtestUrl) {
          var i2;
          try {
            i2 = yield this.core.adapters.request(this.config.abtestUrl, { method: "POST", dataType: "json", headers: { sdktype: "ABTest" }, data: { clientInfo: { projectKey: this.config.abtestProjectKey, appKey: this.core.options.appkey, osType: "Web", sdkVersion: "10.8.25", deviceId: this.core.config.deviceId }, useLocalCache: true } }, { exception_service: 7 });
          } catch (e3) {
            this.core.logger.warn("ABTest request failed");
          }
          this.abtInfo = (null === (t2 = null === (e2 = null == i2 ? void 0 : i2.data) || void 0 === e2 ? void 0 : e2.data) || void 0 === t2 ? void 0 : t2.abtInfo) || {};
        }
      });
    }
  };
  let we$1 = class we {
    constructor() {
      this.abortFns = [];
    }
    add(e2) {
      var t2 = function(e3) {
        var t3 = {}, i2 = new Promise(function(e4, i3) {
          t3.abort = i3;
        });
        return t3.promise = Promise.race([e3, i2]), t3;
      }(e2);
      return this.abortFns.push(t2.abort), t2.promise;
    }
    clear(e2) {
      this.abortFns.forEach((t2) => t2(e2 || new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: "Aborted" } }))), this.abortFns = [];
    }
    destroy() {
      this.clear();
    }
  };
  function Ue$1(e2, t2) {
    if ("object" != typeof e2 || null === e2)
      return e2;
    for (var i2 = (t2 = t2 || "").split("."), r2 = 0; r2 < i2.length; r2++) {
      var s2 = i2[r2], o2 = e2[s2], n2 = s2.indexOf("["), a2 = s2.indexOf("]");
      if (-1 !== n2 && -1 !== a2 && n2 < a2) {
        var c2 = s2.slice(0, n2), d2 = parseInt(s2.slice(n2 + 1, a2));
        o2 = e2[c2], o2 = Array.isArray(o2) ? o2[d2] : void 0;
      }
      if (null == o2)
        return o2;
      e2 = o2;
    }
    return e2;
  }
  var xe$1 = { tolerantRTT: 3e3, bestRTT: 100, maxChances: 5, enable: true }, Fe$1 = { timestamp: 0, rtt: 0, baseClock: 0, baseTime: 0 };
  let Be$1 = class Be2 {
    constructor(e2, t2, i2 = "getServerTime") {
      this.serverOrigin = Fe$1, this.config = xe$1, this.isSettingNTP = false, this.currentChance = 0, this.failedDelay = 2e3, this.successDelay = 3e5, this.timer = 0, this.cmdName = "getServerTime", this.core = e2, this.logger = e2.logger, this.promiseManager = new we$1(), this.cmdName = i2, t2 && this.setOptions(t2);
    }
    setOptions(e2) {
      this.config = Object.assign({}, xe$1, this.config, e2);
    }
    reset() {
      this.timer && clearTimeout(this.timer), this.promiseManager.clear(), this.serverOrigin = Fe$1, this.currentChance = 0;
    }
    setOriginTimetick() {
      return ve$1(this, void 0, void 0, function* () {
        if (this.config.enable && !(this.isSettingNTP || this.currentChance >= this.config.maxChances)) {
          var e2 = Ue$1(this.core, "auth.status"), t2 = Ue$1(this.core, "status"), i2 = Ue$1(this.core, "V2NIMLoginService.lifeCycle.loginStatus");
          if ("logined" === e2 || "logined" === t2 || 1 === i2) {
            this.isSettingNTP = true, this.currentChance++, this.timer && clearTimeout(this.timer), this.timer = 0;
            var r2, s2 = "TimeOrigin::setOriginTimetick:", o2 = Date.now();
            this.core.logger.debug(`${s2} getServerTime start, times ${this.currentChance}`);
            try {
              r2 = Ue$1(yield this.promiseManager.add(this.core.sendCmd(this.cmdName)), "content.time"), this.isSettingNTP = false;
            } catch (e3) {
              var n2 = e3;
              return this.isSettingNTP = false, this.logger.warn(`${s2} Calculate Delay time, getServerTime error`, n2), void (n2.code !== ie$1.V2NIM_ERROR_CODE_CANCELLED && (clearTimeout(this.timer), this.timer = setTimeout(this.setOriginTimetick.bind(this), this.failedDelay)));
            }
            if (!r2)
              return this.core.logger.warn(`${s2} Calculate Delay time incorrect format`), void (this.config.enable = false);
            var a2 = Date.now() - o2;
            this.doSet(r2, a2);
          }
        }
      });
    }
    doSet(e2, t2) {
      var i2 = "TimeOrigin::setOriginTimetick:";
      t2 > this.config.tolerantRTT ? (this.logger.warn(`${i2} denied RTT:${t2}`), clearTimeout(this.timer), this.timer = setTimeout(this.setOriginTimetick.bind(this), this.failedDelay)) : t2 > this.config.bestRTT ? (this.serverOrigin.rtt && t2 >= this.serverOrigin.rtt ? this.logger.warn(`${i2} ignore RTT:${t2}`) : (this.setServerOrigin(t2, e2), this.logger.log(`${i2} accept reluctantly RTT:${t2}`)), clearTimeout(this.timer), this.timer = setTimeout(this.setOriginTimetick.bind(this), this.failedDelay)) : (this.setServerOrigin(t2, e2), this.logger.debug(`${i2} accept best RTT:${t2}`), this.currentChance = 0, clearTimeout(this.timer), this.timer = setTimeout(this.setOriginTimetick.bind(this), this.successDelay));
    }
    getNTPTime(e2) {
      if (void 0 === e2 && (e2 = this.getTimeNode()), this.checkNodeReliable(e2)) {
        var t2 = Math.floor(e2.time - this.serverOrigin.baseTime);
        return this.serverOrigin.timestamp + t2;
      }
      return Date.now();
    }
    checkNodeReliable(e2) {
      if (void 0 === e2 && (e2 = this.getTimeNode()), this.serverOrigin.timestamp) {
        if (0 === this.serverOrigin.baseClock)
          return true;
        var t2 = e2.clock - this.serverOrigin.baseClock, i2 = e2.time - this.serverOrigin.baseTime;
        return Math.abs(i2 - t2) < 500;
      }
      return false;
    }
    checkPerformance() {
      return "BROWSER" === _e$1.platform && !("undefined" == typeof performance || !performance.now);
    }
    static checkPerformance() {
      return "BROWSER" === _e$1.platform && !("undefined" == typeof performance || !performance.now);
    }
    getTimeNode() {
      return { clock: this.checkPerformance() ? performance.now() : 0, time: Date.now() };
    }
    static getTimeNode() {
      return { clock: Be2.checkPerformance() ? performance.now() : 0, time: Date.now() };
    }
    setServerOrigin(e2, t2) {
      this.serverOrigin = { timestamp: t2 + Math.floor(e2 / 2), rtt: e2, baseClock: this.checkPerformance() ? performance.now() : 0, baseTime: Date.now() };
    }
  };
  var je$1 = { user_id: "", trace_id: "", action: 7, exception_service: 6, duration: 0, start_time: 0, state: 1, extension: [] };
  let $e$1 = class $e {
    constructor(e2, t2) {
      this.traceData = je$1, this.core = e2, this.traceData = Object.assign({}, je$1, t2), this.traceData.extension = [];
    }
    reset() {
      this.traceData = Object.assign({}, je$1), this.traceData.extension = [];
    }
    start() {
      var e2, t2;
      this.reset(), this.traceData.user_id = this.core.account, this.traceData.trace_id = (null === (t2 = null === (e2 = this.core.clientSocket) || void 0 === e2 ? void 0 : e2.socket) || void 0 === t2 ? void 0 : t2.sessionId) || "", this.traceData.start_time = (/* @__PURE__ */ new Date()).getTime();
    }
    update(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var { net_type: t2, net_connect: i2 } = yield _e$1.net.getNetworkStatus();
        this.traceData.extension.push(Object.assign({ code: 0, foreground: true, foreg_backg_switch: false, net_type: t2, net_connect: i2 }, e2));
      });
    }
    end(e2) {
      var t2 = this.traceData.extension[0], i2 = this.traceData.extension[1];
      if (t2 && 0 === t2.operation_type && i2 && 1 === i2.operation_type) {
        var r2 = t2.net_type !== i2.net_type || t2.net_connect !== i2.net_connect;
        if (e2 || !r2)
          return this.traceData.duration = (/* @__PURE__ */ new Date()).getTime() - this.traceData.start_time, this.core.reporter.report("exceptions", this.traceData), void this.reset();
        this.reset();
      } else
        this.reset();
    }
  };
  var Ge$1 = { user_id: "", trace_id: "", net_connect: true, net_type: 0, duration: 0, start_time: 0, history: [], succeed: false };
  let He$1 = class He {
    constructor(e2) {
      this.traceData = Ge$1, this.core = e2, this.reset();
    }
    reset() {
      this.traceData = Object.assign({}, Ge$1), this.traceData.history = [];
    }
    start(e2) {
      this.reset(), this.traceData.user_id = e2, this.traceData.start_time = Date.now();
    }
    updateBegin(e2) {
      this.traceData.history.push(Object.assign({ head: "", body: "", start_time: Date.now(), httpdns: false, index: 0 }, e2));
    }
    updateComplete(e2) {
      this.traceData.history.forEach((t2) => {
        t2.target === e2.target && (Object.assign(t2, e2), t2.duration = Date.now() - t2.start_time);
      });
    }
    end(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.traceData.succeed = e2, this.traceData.history = this.traceData.history.filter((e3) => void 0 !== e3.code), 0 !== this.traceData.history.length) {
          this.traceData.duration = Date.now() - this.traceData.start_time;
          var { net_type: t2, net_connect: i2 } = yield _e$1.net.getNetworkStatus();
          this.traceData.net_type = t2, this.traceData.net_connect = i2, this.core.reporter.report("nim_sdk_lbs_records", this.traceData), this.reset();
        } else
          this.reset();
      });
    }
  };
  function qe$1(e2) {
    var t2, i2, r2 = true;
    return "boolean" == typeof (null === (t2 = null == e2 ? void 0 : e2.reporterConfig) || void 0 === t2 ? void 0 : t2.enableCompass) ? r2 = e2.reporterConfig.enableCompass : "boolean" == typeof (null === (i2 = null == e2 ? void 0 : e2.reporterConfig) || void 0 === i2 ? void 0 : i2.isDataReportEnable) && (r2 = e2.reporterConfig.isDataReportEnable), r2;
  }
  var Ye$1 = { user_id: "", trace_id: "", action: 0, state: 0, duration: 0, start_time: 0, offset: 0, full_size: 0, transferred_size: 0, operation_type: 0, remote_addr: "" }, Ke$1 = "ReporterHook::setMonitorForResources:";
  let We$1 = class We {
    constructor(e2, t2) {
      this.traceData = Ye$1, this.core = e2, this.traceData = Object.assign({}, Ye$1, t2);
    }
    reset() {
      this.traceData = Object.assign({}, Ye$1);
    }
    start() {
      var e2, t2;
      this.reset(), this.traceData.user_id = this.core.account, this.traceData.trace_id = (null === (t2 = null === (e2 = this.core.clientSocket) || void 0 === e2 ? void 0 : e2.socket) || void 0 === t2 ? void 0 : t2.sessionId) || "", this.traceData.start_time = "timeOrigin" in this.core ? this.core.timeOrigin.getNTPTime() : Date.now();
    }
    update(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.traceData.user_id && (this.core.logger.log(`${Ke$1} upload update`, e2), Object.assign(this.traceData, e2));
      });
    }
    end(e2) {
      this.traceData.user_id && (this.core.logger.log(`${Ke$1} upload end cause of ${e2}`), this.traceData.state = e2, this.traceData.duration = ("timeOrigin" in this.core ? this.core.timeOrigin.getNTPTime() : Date.now()) - this.traceData.start_time, this.core.reporter.report("nim_sdk_resources", this.traceData), this.traceData = Ye$1);
    }
  };
  var Je$1 = {}, ze$1 = {}, Xe$1 = {}, Qe$1 = { apiVersion: "v1", debugLevel: "off", needReconnect: true, reconnectionAttempts: Number.MAX_SAFE_INTEGER, lbsUrls: ["https://lbs.netease.im/lbs/webconf.jsp"], linkUrl: "weblink.netease.im:443", abtestUrl: Pe$1, isAbtestEnable: true };
  let Ze$1 = class Ze2 extends Q$1 {
    constructor(e2, t2 = {}) {
      if (super(), this.instanceName = "NIM", this.pluginMap = {}, this.eventBus = new Q$1(), this.options = {}, this.V2NIMConversationIdUtil = {}, this.V2NIMMessageCreator = {}, this.V2NIMMessageAttachmentCreator = {}, this.V2NIMClientAntispamUtil = {}, this.DataStructureConverter = {}, this.V2NIMMessageConverter = {}, this.V2NIMMessageLogUtil = {}, this.V2NIMMessageExtendUtil = {}, this.V2NIMStorageUtil = {}, this.V2NIMNotificationService = {}, this.V2NIMStorageService = {}, this.auth = {}, this.V1NIMLoginService = {}, this.V2NIMLoginService = {}, this.clientSocket = {}, this.V2NIMSyncService = {}, this.V2NIMLocalConversationService = {}, this.V2NIMConversationService = {}, this.V2NIMConversationGroupService = {}, this.V2NIMMessageService = {}, this.V2NIMTeamService = {}, this.V2NIMUserService = {}, this.V2NIMFriendService = {}, this.V2NIMSettingService = {}, this.V2NIMAIService = {}, this.V2NIMSignallingService = {}, this.V2NIMSubscriptionService = {}, this.V2NIMPassthroughService = {}, this.YSFService = {}, this.offlinePush = {}, this.sync = {}, this.msg = {}, this.msgLog = {}, this.session = {}, this.cloudSession = {}, this.misc = {}, this.user = {}, this.friend = {}, this.systemMessage = {}, this.team = {}, this.event = {}, this.msgExtend = {}, this.cloudStorage = {}, this.passThrough = {}, this.superTeam = {}, this.plugin = {}, this.signaling = {}, this.qchatChannel = {}, this.qchatMedia = {}, this.qchatMsg = {}, this.qchatRole = {}, this.qchatServer = {}, this.pluginMap = Xe$1, this.logger = new Se$1(e2.debugLevel, t2.loggerConfig), t2.privateConf) {
        var { authConfig: i2, cloudStorageConfig: r2, reporterConfig: s2 } = this.getConfigFromPrivate(t2.privateConf);
        Object.assign(e2, i2), this.setInitOptions(e2), this.otherOptions = Object.assign(Object.assign({}, t2), { cloudStorageConfig: Object.assign(Object.assign({ storageKeyPrefix: "NIM" }, t2.cloudStorageConfig), r2), reporterConfig: Object.assign(Object.assign({}, t2.reporterConfig), s2), V1NIMLoginServiceConfig: Object.assign(Object.assign(Object.assign({}, e2), t2.V1NIMLoginServiceConfig), i2), V2NIMLoginServiceConfig: Object.assign(Object.assign({}, t2.V2NIMLoginServiceConfig), i2) });
      } else
        this.setInitOptions(e2), this.otherOptions = Object.assign(Object.assign({}, t2), { V1NIMLoginServiceConfig: Object.assign(Object.assign({}, e2), t2.V1NIMLoginServiceConfig), cloudStorageConfig: Object.assign({ storageKeyPrefix: "NIM" }, t2.cloudStorageConfig) });
      this.timerManager = new me$1(), this.timeOrigin = new Be$1(this), this.adapters = new Le$1(this), this.abtest = new De$1(this, Object.assign(Object.assign({ isAbtestEnable: this.options.isAbtestEnable, abtestUrl: this.options.abtestUrl }, this.otherOptions.abtestConfig), { abtestProjectKey: "imElite_sdk_abtest_web" }));
      var o2 = _e$1.getSystemInfo(), n2 = function(e3, t3) {
        var i3, r3, s3 = null === (i3 = null == t3 ? void 0 : t3.reporterConfig) || void 0 === i3 ? void 0 : i3.compassDataEndpoint, o3 = null === (r3 = null == t3 ? void 0 : t3.reporterConfig) || void 0 === r3 ? void 0 : r3.reportConfigUrl;
        if (s3)
          return s3;
        if (o3) {
          var n3 = o3.match(/^https:\/\/([^/]+)\/*/);
          return Array.isArray(n3) && n3.length >= 1 ? `https://${n3[1]}` : (e3.error(`Invalid reportConfigUrl: ${o3}`), "https://statistic.live.126.net,https://statistic-overseas.yunxinfw.com");
        }
        return "https://statistic.live.126.net,https://statistic-overseas.yunxinfw.com";
      }(this.logger, this.otherOptions);
      this.reporter = new Z$1(Object.assign(Object.assign({}, n2 ? { compassDataEndpoint: n2 } : {}), { isDataReportEnable: qe$1(this.otherOptions), common: { app_key: e2.appkey, dev_id: "", platform: "Web", sdk_ver: "10.8.25", env: "online", os_name: o2.os, os_ver: o2.osVer, lib_env: o2.libEnv, host_env: o2.hostEnv, host_env_ver: o2.hostEnvVer, manufactor: o2.manufactor, model: o2.model, v2: "v1" !== this.options.apiVersion }, request: _e$1.request, logger: this.logger, autoStart: true })), this.reporterHookLinkKeep = new $e$1(this), this.reporterHookCloudStorage = new We$1(this), this.reporterHookLBS = new He$1(this), _e$1.setLogger(this.logger), this.getServiceKeys(Object.keys(Je$1)).forEach((e3) => {
        if (!this[e3] || !this[e3].name) {
          var t3 = Je$1[e3];
          this[e3] = new t3(this);
        }
      }), Object.keys(Je$1).forEach((e3) => {
        this.callSetOptions(e3);
      }), Object.keys(ze$1).forEach((e3) => {
        var t3 = ze$1[e3];
        void 0 !== t3 && (this[e3] = new t3(this));
      }), Ze2.instance = this, this.logger.log(`NIM init, version:10.8.25-alpha.3, sdk version:100825, appkey:${e2.appkey}`);
    }
    getServiceKeys(e2) {
      var t2 = e2.findIndex((e3) => "V1NIMLoginService" === e3);
      if (t2 > -1) {
        var i2 = e2[t2];
        e2.splice(t2, 1), "v1" === this.options.apiVersion && e2.unshift(i2);
      }
      var r2 = e2.findIndex((e3) => "V2NIMLoginService" === e3);
      if (r2 > -1) {
        var s2 = e2[r2];
        e2.splice(r2, 1), "v2" === this.options.apiVersion && e2.unshift(s2);
      }
      var o2 = e2.findIndex((e3) => "sync" === e3);
      if (o2 > -1) {
        var n2 = e2[o2];
        e2.splice(o2, 1), "v1" === this.options.apiVersion && e2.push(n2);
      }
      var a2 = e2.findIndex((e3) => "V2NIMSyncService" === e3);
      if (a2 > -1) {
        var c2 = e2[a2];
        e2.splice(a2, 1), "v2" === this.options.apiVersion && e2.push(c2);
      }
      return e2;
    }
    static getInstance(e2, t2) {
      if (!Ze2.instance) {
        if (e2)
          return new Ze2(e2, t2);
        throw new Error("Instance not exist, please input options");
      }
      if (e2) {
        if (Ze2.instance.options.account === e2.account && Ze2.instance.options.appkey === e2.appkey)
          return Ze2.instance.setOptions(e2), Ze2.instance;
        throw new Error("Unexpected login");
      }
      return Ze2.instance;
    }
    setInitOptions(e2) {
      pe$1({ appkey: { type: "string" }, apiVersion: { type: "enum", values: ["v1", "v2"], required: false }, binaryWebsocket: { type: "boolean", required: false }, needReconnect: { type: "boolean", required: false }, reconnectionAttempts: { type: "number", required: false }, customClientType: { type: "number", min: 1, required: false }, authType: { type: "number", min: 0, max: 2, required: false }, lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, e2), this.options = Object.assign(Object.assign({}, Qe$1), e2);
    }
    getConfigFromPrivate(e2) {
      var t2;
      return e2 ? { authConfig: JSON.parse(JSON.stringify({ appkey: e2.appkey || void 0, lbsUrls: e2.weblbsUrl ? [e2.weblbsUrl] : void 0, linkUrl: e2.link_web || void 0, linkSSL: null !== (t2 = e2.websdkSsl) && void 0 !== t2 ? t2 : void 0 })), cloudStorageConfig: JSON.parse(JSON.stringify({ chunkUploadHost: e2.nos_uploader || void 0, commonUploadHost: e2.nos_uploader || void 0, commonUploadHostBackupList: e2.nos_uploader ? [e2.nos_uploader] : void 0, chunkUploadHostBackupList: e2.nos_uploader ? [e2.nos_uploader] : void 0, uploadReplaceFormat: e2.nos_downloader_v2 ? `${e2.nosSsl ? "https://" : "http://"}${e2.nos_downloader_v2}` : void 0, downloadUrl: void 0 !== e2.nos_accelerate ? e2.nos_accelerate : void 0, downloadHostList: "" === e2.nos_accelerate_host ? [] : "string" == typeof e2.nos_accelerate_host ? [e2.nos_accelerate_host] : Array.isArray(e2.nos_accelerate_host) ? e2.nos_accelerate_host : void 0 })), reporterConfig: JSON.parse(JSON.stringify({ enableCompass: "boolean" == typeof e2.enableCompass ? e2.enableCompass : void 0, compassDataEndpoint: e2.compassDataEndpoint || void 0 })) } : { authConfig: {}, cloudStorageConfig: {}, reporterConfig: {} };
    }
    connect(e2 = {}) {
      return this.V1NIMLoginService.login(e2);
    }
    setOptions(e2) {
      if ("object" == typeof e2 && null !== e2) {
        if (Object.prototype.hasOwnProperty.call(e2, "account") && e2.account !== this.options.account || Object.prototype.hasOwnProperty.call(e2, "appkey") && e2.appkey !== this.options.appkey)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions account and appkey is not allowed to reset" } });
        if (Object.prototype.hasOwnProperty.call(e2, "apiVersion") && e2.apiVersion !== this.options.apiVersion)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions apiVersion is not allowed to reset" } });
        if (Object.prototype.hasOwnProperty.call(e2, "binaryWebsocket") && e2.binaryWebsocket !== this.options.binaryWebsocket)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions binaryWebsocket is not allowed to reset" } });
        pe$1({ token: { type: "string", required: false }, needReconnect: { type: "boolean", required: false }, reconnectionAttempts: { type: "number", required: false }, customClientType: { type: "number", min: 1, required: false }, authType: { type: "number", min: 0, max: 2, required: false }, lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, e2), this.logger.log("NIM::setOptions options is", e2), this.options = Object.assign(Object.assign({}, this.options), e2), this.V1NIMLoginService.setOptions && this.V1NIMLoginService.setOptions(this.options);
      }
    }
    getOptions() {
      return this.options;
    }
    disconnect() {
      return this.V1NIMLoginService.logout();
    }
    _disconnect() {
      return "v1" === this.options.apiVersion ? this.V1NIMLoginService.logout() : "v2" === this.options.apiVersion ? 0 === Ue$1(this.V2NIMLoginService, "lifeCycle.connectStatus") && 0 === Ue$1(this.V2NIMLoginService, "lifeCycle.loginStatus") ? Promise.resolve() : this.V2NIMLoginService.logout() : Promise.resolve();
    }
    destroy() {
      return Ze2.instance = void 0, this._disconnect().then(() => {
        this.status = "destroyed", this.removeAllListeners(), this.eventBus.removeAllListeners(), this.logger.destroy(), this.reporter.destroy(), this.timerManager.destroy(), this._clearModuleData("destroy"), this._removeAllModuleListeners(), this.connect = Ae$1, this.disconnect = Ae$1, this._disconnect = Ae$1, this.destroy = Ae$1;
      });
    }
    _clearModuleData(e2 = "logout") {
      Object.values(this).forEach((t2) => {
        t2 && "function" == typeof t2.reset && t2.reset(e2);
      });
    }
    _removeAllModuleListeners() {
      Object.values(this).forEach((e2) => {
        e2 && "function" == typeof e2.removeAllListeners && e2.removeAllListeners();
      });
    }
    kick(e2) {
      return this.V1NIMLoginService.kick(e2);
    }
    sendCmd(e2, t2, i2) {
      return this.clientSocket.sendCmd(e2, t2, i2);
    }
    emit(e2, ...t2) {
      try {
        var i2 = Date.now(), r2 = super.emit(e2, ...t2), s2 = Date.now() - i2;
        return s2 >= 10 && this.logger.warn(`Core::emit event: ${e2} process takes: ${s2}ms`), r2;
      } catch (t3) {
        return this.logger.error(`Core::emit event: ${e2}. Error: ${t3}`), setTimeout(() => {
          throw this.logger.error(`Core::emit throw error in setTimeout. event: ${e2}. Error: ${t3}`), t3;
        }, 0), false;
      }
    }
    get account() {
      return this.auth.account;
    }
    get status() {
      return this.V1NIMLoginService.status;
    }
    set status(e2) {
      this.V1NIMLoginService.status = e2;
    }
    get config() {
      return { timeout: 8e3, deviceId: this.auth.deviceId };
    }
    _registerDep(e2, t2) {
      this[t2] && this[t2].name || (this[t2] = new e2(this), this.callSetOptions(t2));
    }
    callSetOptions(e2) {
      var t2 = `${e2}Config`, i2 = `${e2}Options`, r2 = this.otherOptions[t2] || this.otherOptions[i2] || {}, s2 = Ue$1(this, `${e2}.setOptions`);
      "function" == typeof s2 && ("cloudStorage" === e2 && (r2 = this.otherOptions[t2] || this.otherOptions.serverConfig || {}), s2.call(this[e2], r2));
    }
    static registerService(e2, t2) {
      Je$1[t2] = e2;
    }
    static registerPrivateService(e2, t2) {
      ze$1[t2] = e2;
    }
    static registerPlugin(e2, t2) {
      Xe$1[t2] = e2;
    }
  };
  Ze$1.sdkVersion = 100825, Ze$1.sdkVersionFormat = "10.8.25";
  var et$1 = {}, it$1 = {};
  function rt$1(e2, t2, i2, r2) {
    var s2 = et$1[e2];
    if (!s2)
      return i2.error("createCmd:: can not find cmd config: ", e2), null;
    var o2 = { SER: t2, SID: s2.sid, CID: s2.cid, Q: [] };
    return s2.params && r2 && s2.params.forEach(function(e3) {
      var t3 = r2[e3.name];
      if (null != t3) {
        var i3 = e3.type, { reflectMapper: s3, select: n2 } = e3;
        switch (e3.type) {
          case "PropertyArray":
            i3 = "ArrayMable", t3 = t3.map((e4) => ({ t: "Property", v: s3 ? nt$1(e4, s3, n2) : e4 }));
            break;
          case "Property":
            t3 = s3 ? nt$1(t3, s3, n2) : t3;
            break;
          case "Bool":
            t3 = t3 ? "true" : "false";
        }
        o2.Q.push({ t: i3, v: t3 });
      }
    }), { packet: o2, hasPacketResponse: "boolean" != typeof s2.hasPacketResponse || s2.hasPacketResponse, hasPacketTimer: "boolean" != typeof s2.hasPacketTimer || s2.hasPacketTimer };
  }
  function st(e2, t2) {
    var i2;
    try {
      i2 = JSON.parse(e2);
    } catch (i3) {
      return void t2.error(`Parse command error:"${e2}"`);
    }
    var r2 = i2.sid + "_" + i2.cid, s2 = i2.r;
    if (["4_1", "4_2", "4_10", "4_11"].includes(r2)) {
      var o2 = i2.r[1].headerPacket;
      r2 = `${o2.sid}_${o2.cid}`, i2.sid = o2.sid, i2.cid = o2.cid, s2 = i2.r[1].body;
    }
    var n2 = it$1[r2], a2 = [];
    if (n2) {
      for (var c2 of n2)
        a2.push(ot$1(i2, c2.config, c2.cmd, s2, t2));
      return a2;
    }
    t2.error("parseCmd:: mapper not exist", r2, i2.code);
  }
  function ot$1(e2, t2, i2, r2, s2) {
    var o2, n2 = { cmd: i2, raw: e2, error: null, service: null == t2 ? void 0 : t2.service, content: {}, __receiveTimeNode: Be$1.getTimeNode() };
    if (!i2 || !t2)
      return n2.notFound = true, n2;
    (18 === t2.sid || t2.sid >= 26 && t2.sid < 100) && (e2.code = function(e3) {
      if ("number" != typeof e3 || e3 != e3)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "Read code failed", rawData: `${e3}` } });
      if (e3 < 0 || e3 >= 0 && e3 < 1e3 || e3 >= 2e4 && e3 <= 20099)
        return e3;
      var t3 = (65535 & e3) >> 9;
      return 1e5 + 1e3 * (t3 -= t3 <= 38 ? 1 : 2) + (511 & e3);
    }(e2.code));
    var a2 = function(e3, t3) {
      var i3 = re$1[e3], r3 = de$1[e3];
      return null === r3 ? null : new oe$1({ code: e3, desc: i3 || r3 || e3, detail: { cmd: t3, timetag: Date.now() } });
    }(e2.code, i2);
    if (n2.error = a2, n2.error) {
      if (n2.error.detail.cmd = i2, !(null === (o2 = null == t2 ? void 0 : t2.ignoreErrCodes) || void 0 === o2 ? void 0 : o2.includes(e2.code)))
        return n2;
      s2.warn("parseCmd:: ignore error ", n2.error), n2.error.detail.ignore = true;
    }
    return t2.response && t2.response.forEach((e3, t3) => {
      var i3 = r2[t3], s3 = e3.type, o3 = e3.name, a3 = e3.reflectMapper;
      if (void 0 !== i3)
        switch (s3) {
          case "Property":
            n2.content[o3] = a3 ? at(i3, a3) : i3;
            break;
          case "PropertyArray":
            n2.content[o3] = i3.map((e4) => a3 ? at(e4, a3) : e4);
            break;
          case "Int":
          case "Long":
          case "Byte":
            n2.content[o3] = +i3;
            break;
          case "Bool":
            n2.content[o3] = "true" === i3 || true === i3 || 1 === i3;
            break;
          default:
            n2.content[o3] = i3;
        }
    }), n2;
  }
  function nt$1(e2, t2, i2) {
    var r2 = {};
    for (var s2 in e2 = function(e3, t3) {
      var i3 = {};
      for (var r3 in t3) {
        var s3 = t3[r3], o3 = "number" == typeof s3 ? r3 : s3.access ? s3.access : r3, n3 = o3.split("."), a3 = e3;
        for (var c2 of n3) {
          if (void 0 === a3[c2] || null === a3[c2]) {
            a3 = void 0;
            break;
          }
          a3 = a3[c2];
        }
        void 0 !== a3 && (i3[o3] = a3);
      }
      return i3;
    }(e2, t2), t2) {
      var o2 = t2[s2], n2 = "number" == typeof o2 ? s2 : o2.access ? o2.access : s2;
      if (!i2 || i2.includes(s2))
        if (n2 in e2) {
          if ("number" == typeof o2)
            r2[o2] = e2[n2];
          else if ("object" == typeof o2)
            if (o2.converter) {
              var a2 = o2.converter(e2[n2], e2);
              void 0 !== a2 && (r2[o2.id] = a2);
            } else
              r2[o2.id] = e2[n2];
        } else
          "object" == typeof o2 && o2.def && ("function" == typeof o2.def ? r2[o2.id] = o2.def(e2) : r2[o2.id] = o2.def);
    }
    return r2;
  }
  function at(e2, t2) {
    var i2 = {};
    for (var r2 in e2) {
      var s2 = t2[r2];
      if ("string" == typeof s2)
        i2[s2] = e2[r2];
      else if ("object" == typeof s2 && "prop" in s2) {
        var o2 = s2.access ? s2.access : s2.prop;
        if (s2.converter) {
          var n2 = s2.converter(e2[r2], e2);
          void 0 !== n2 && (i2[o2] = n2);
        } else
          s2.type && "number" === s2.type ? i2[o2] = +e2[r2] : s2.type && "boolean" === s2.type ? i2[o2] = !("0" === e2[r2] || !e2[r2]) : i2[o2] = e2[r2];
      }
    }
    for (var a2 in t2) {
      var c2 = t2[a2];
      if (c2 && void 0 !== c2.def) {
        var d2 = c2.access ? c2.access : c2.prop;
        d2 in i2 || ("function" == typeof c2.def ? i2[d2] = c2.def(e2) : i2[d2] = c2.def);
      }
    }
    return i2 = function(e3) {
      var t3 = {}, i3 = function(i4) {
        var r4 = i4.split(".");
        r4.reduce(function(t4, s3, o3) {
          return t4[s3] || (t4[s3] = isNaN(Number(r4[o3 + 1])) ? r4.length - 1 == o3 ? e3[i4] : {} : []);
        }, t3);
      };
      for (var r3 in e3)
        i3(r3);
      return t3;
    }(i2), i2;
  }
  function ct(e2) {
    for (var t2 in Object.assign(et$1, e2.cmdConfig), e2.cmdMap) {
      var i2 = e2.cmdMap[t2], r2 = e2.cmdConfig[i2];
      if (r2)
        if (Array.isArray(it$1[t2])) {
          var s2 = false;
          for (var o2 of it$1[t2])
            if (o2.cmd === i2 && o2.config.service === r2.service) {
              s2 = true;
              break;
            }
          s2 || it$1[t2].push({ config: r2, cmd: i2 });
        } else
          it$1[t2] = [{ config: r2, cmd: i2 }];
    }
  }
  function dt(e2) {
    var t2 = {};
    for (var i2 in e2) {
      var r2 = e2[i2];
      "number" == typeof r2 ? t2[r2] = i2 : "object" == typeof r2 && (t2[r2.id] = { prop: i2, type: r2.retType, access: r2.retAccess ? r2.retAccess : r2.access ? r2.access : i2, def: r2.retDef, converter: r2.retConverter });
    }
    return t2;
  }
  function lt(e2) {
    return e2 ? 1 : 0;
  }
  function pt(e2) {
    if (e2 && "object" == typeof e2)
      try {
        return JSON.stringify(e2);
      } catch (e3) {
        return;
      }
  }
  function ht(e2) {
    if (e2 && "string" == typeof e2)
      try {
        return JSON.parse(e2);
      } catch (e3) {
        return;
      }
  }
  function ut(e2, t2) {
    if (!fe$1(t2))
      return {};
    var i2 = JSON.parse(JSON.stringify(t2)), r2 = mt(e2, i2);
    return JSON.parse(JSON.stringify(Object.assign(Object.assign({}, i2), r2)));
  }
  function mt(e2, t2) {
    if (!fe$1(t2))
      return {};
    var i2 = {};
    return Object.keys(e2).forEach((r2) => {
      var s2 = e2[r2].type;
      if ("string" != typeof s2) {
        var o2 = mt(e2[r2], t2);
        Object.keys(o2).length > 0 && (i2[r2] = o2);
      } else {
        var n2 = e2[r2], a2 = n2.rawKey || r2, c2 = gt[s2](t2, a2, n2);
        void 0 !== c2 && (t2[a2] = void 0, i2[r2] = c2);
      }
    }), i2;
  }
  var gt = { number: function(e2, t2) {
    if (void 0 !== e2[t2])
      return +e2[t2];
  }, string: function(e2, t2) {
    if (void 0 !== e2[t2])
      return e2[t2];
  }, boolean: function(e2, t2) {
    return +e2[t2] > 0 || 0 != +e2[t2] && void 0;
  }, enum: function(e2, t2, i2) {
    return i2.values[e2[t2]];
  }, object: function(e2, t2) {
    if (void 0 !== e2[t2])
      try {
        return JSON.parse(e2[t2]);
      } catch (e3) {
        return {};
      }
  } };
  function vt(e2) {
    return ut({ type: { type: "number" }, port: { type: "number" }, customClientType: { type: "number" }, timestamp: { type: "number" }, loginType: { type: "number" } }, e2);
  }
  function ft(e2) {
    e2 = e2 || {};
    var t2 = {};
    for (var i2 in e2)
      t2[e2[i2]] = i2;
    return t2;
  }
  var yt = { "26_3": "v2Login", "26_5": "v2Logout", "26_8": "v2KickOffline", "26_9": "v2BeKicked", "26_10": "v2LoginClientChange", "36_1": "v2GetChatroomLinkAddress" }, It = { "1_2": "heartbeat", "2_7": "nimLoginClientChange", "24_8": "qchatLoginClientChange" }, _t$1 = { webLoginReqTag: { clientType: 3, os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, pushTokenName: 10, pushToken: 11, clientId: 13, appkey: 18, account: 19, browser: 24, clientSession: 26, deviceInfo: 32, isReactNative: 112, customTag: 38, customClientType: 39, sdkHumanVersion: 40, hostEnv: 41, userAgent: 42, libEnv: 44, authType: 115, thirdPartyExtension: 116, token: 1e3 }, mixAuthRepTag: { clientId: 1, consid: 2, clientIP: 3, port: 4, type: 5, customClientType: 6, timestamp: 7, customTag: 8, os: 9, pushType: 10, hasTokenPreviously: 11, loginType: 12 }, nimAuthRepTag: { type: 3, os: 4, mac: 5, clientId: 13, account: 19, deviceInfo: 32, customTag: 38, customClientType: 39, consid: 102, clientIP: 103, port: 104, timestamp: 109, pushType: 110, hasTokenPreviously: 111 }, qchatAuthRepTag: { clientId: 8, consid: 102, clientIP: 103, port: 104, type: 6, customClientType: 13, timestamp: 105, os: 30, pushType: 100, hasTokenPreviously: 101 } }, Mt = { v2Login: { sid: 26, cid: 3, service: "auth", params: [{ type: "Property", name: "tag", reflectMapper: _t$1.webLoginReqTag }], response: [{ type: "Property", name: "data", reflectMapper: ft(_t$1.mixAuthRepTag) }, { type: "PropertyArray", name: "loginClients", reflectMapper: ft(_t$1.mixAuthRepTag) }] }, v2Logout: { sid: 26, cid: 5, service: "auth" }, v2KickOffline: { sid: 26, cid: 8, service: "auth", params: [{ type: "StrArray", name: "clientIds" }], response: [{ type: "StrArray", name: "clientIds" }] }, v2BeKicked: { sid: 26, cid: 9, service: "auth", response: [{ type: "Int", name: "clientType" }, { type: "Int", name: "reason" }, { type: "String", name: "reasonDesc" }, { type: "Int", name: "customClientType" }] }, v2LoginClientChange: { sid: 26, cid: 10, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "PropertyArray", name: "datas", reflectMapper: ft(_t$1.mixAuthRepTag) }] }, v2GetChatroomLinkAddress: { sid: 36, cid: 1, service: "auth", params: [{ type: "Long", name: "roomId" }, { type: "Bool", name: "miniProgram" }], response: [{ type: "StrArray", name: "linkAddress" }] } }, Et = { heartbeat: { sid: 1, cid: 2, service: "auth" }, nimLoginClientChange: { sid: 2, cid: 7, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "PropertyArray", name: "datas", reflectMapper: ft(_t$1.nimAuthRepTag) }] }, qchatLoginClientChange: { sid: 24, cid: 8, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "Property", name: "data", reflectMapper: ft(_t$1.qchatAuthRepTag) }] } }, Tt = St;
  function St(e2) {
    e2 = e2 || {}, this.ms = e2.min || 100, this.max = e2.max || 1e4, this.factor = e2.factor || 2, this.jitter = e2.jitter > 0 && e2.jitter <= 1 ? e2.jitter : 0, this.attempts = 0;
  }
  St.prototype.duration = function() {
    var e2 = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var t2 = Math.random(), i2 = Math.floor(t2 * this.jitter * e2);
      e2 = 1 & Math.floor(10 * t2) ? e2 + i2 : e2 - i2;
    }
    return 0 | Math.min(e2, this.max);
  }, St.prototype.reset = function() {
    this.attempts = 0;
  }, St.prototype.setMin = function(e2) {
    this.ms = e2;
  }, St.prototype.setMax = function(e2) {
    this.max = e2;
  }, St.prototype.setJitter = function(e2) {
    this.jitter = e2;
  };
  var Ct = function(e2) {
    var t2;
    if (void 0 !== e2)
      return (t2 = At(e2)).sign = 1, t2;
  }, Nt = function(e2) {
    return "[object Array]" === Object.prototype.toString.call(e2);
  }, Ot = function(e2) {
    return ["number" == typeof e2, "string" == typeof e2 && e2.length > 0, Nt(e2) && e2.length > 0, e2 instanceof At].some(function(e3) {
      return true === e3;
    });
  }, Rt = "Invalid Number";
  function At(e2) {
    var t2;
    if (!(this instanceof At))
      return new At(e2);
    if (this.number = [], this.sign = 1, this.rest = 0, Ot(e2)) {
      if (Nt(e2)) {
        for ((e2.length && "-" === e2[0] || "+" === e2[0]) && (this.sign = "+" === e2[0] ? 1 : -1, e2.shift(0)), t2 = e2.length - 1; t2 >= 0; t2--)
          if (!this.addDigit(e2[t2]))
            return;
      } else
        for ("-" !== (e2 = e2.toString()).charAt(0) && "+" !== e2.charAt(0) || (this.sign = "+" === e2.charAt(0) ? 1 : -1, e2 = e2.substring(1)), t2 = e2.length - 1; t2 >= 0; t2--)
          if (!this.addDigit(parseInt(e2.charAt(t2), 10)))
            return;
    } else
      this.number = Rt;
  }
  At.prototype.addDigit = function(e2) {
    return function(e3) {
      return /^\d$/.test(e3);
    }(e2) ? (this.number.push(e2), this) : (this.number = Rt, false);
  }, At.prototype._compare = function(e2) {
    var t2, i2;
    if (!Ot(e2))
      return null;
    if (t2 = At(e2), this.sign !== t2.sign)
      return this.sign;
    if (this.number.length > t2.number.length)
      return this.sign;
    if (this.number.length < t2.number.length)
      return -1 * this.sign;
    for (i2 = this.number.length - 1; i2 >= 0; i2--) {
      if (this.number[i2] > t2.number[i2])
        return this.sign;
      if (this.number[i2] < t2.number[i2])
        return -1 * this.sign;
    }
    return 0;
  }, At.prototype.gt = function(e2) {
    return this._compare(e2) > 0;
  }, At.prototype.gte = function(e2) {
    return this._compare(e2) >= 0;
  }, At.prototype.equals = function(e2) {
    return 0 === this._compare(e2);
  }, At.prototype.lte = function(e2) {
    return this._compare(e2) <= 0;
  }, At.prototype.lt = function(e2) {
    return this._compare(e2) < 0;
  }, At.prototype.subtract = function(e2) {
    var t2;
    return void 0 === e2 ? this : (t2 = At(e2), this.sign !== t2.sign ? (this.number = At._add(this, t2), this) : (this.sign = this.lt(t2) ? -1 : 1, this.number = Ct(this).lt(Ct(t2)) ? At._subtract(t2, this) : At._subtract(this, t2), this));
  }, At._add = function(e2, t2) {
    var i2, r2 = 0, s2 = Math.max(e2.number.length, t2.number.length);
    for (i2 = 0; i2 < s2 || r2 > 0; i2++)
      e2.number[i2] = (r2 += (e2.number[i2] || 0) + (t2.number[i2] || 0)) % 10, r2 = Math.floor(r2 / 10);
    return e2.number;
  }, At._subtract = function(e2, t2) {
    var i2, r2 = 0, s2 = e2.number.length;
    for (i2 = 0; i2 < s2; i2++)
      e2.number[i2] -= (t2.number[i2] || 0) + r2, e2.number[i2] += 10 * (r2 = e2.number[i2] < 0 ? 1 : 0);
    for (i2 = 0, s2 = e2.number.length - 1; 0 === e2.number[s2 - i2] && s2 - i2 > 0; )
      i2++;
    return i2 > 0 && e2.number.splice(-i2), e2.number;
  }, At.prototype.multiply = function(e2) {
    if (void 0 === e2)
      return this;
    var t2, i2, r2 = At(e2), s2 = 0, o2 = [];
    if (this.isZero() || r2.isZero())
      return At(0);
    for (this.sign *= r2.sign, t2 = 0; t2 < this.number.length; t2++)
      for (s2 = 0, i2 = 0; i2 < r2.number.length || s2 > 0; i2++)
        o2[t2 + i2] = (s2 += (o2[t2 + i2] || 0) + this.number[t2] * (r2.number[i2] || 0)) % 10, s2 = Math.floor(s2 / 10);
    return this.number = o2, this;
  }, At.prototype.divide = function(e2) {
    if (void 0 === e2)
      return this;
    var t2, i2, r2 = At(e2), s2 = [], o2 = At(0);
    if (r2.isZero())
      return this.number = "Invalid Number - Division By Zero", this;
    if (this.isZero())
      return this.rest = At(0), this;
    if (this.sign *= r2.sign, r2.sign = 1, 1 === r2.number.length && 1 === r2.number[0])
      return this.rest = At(0), this;
    for (t2 = this.number.length - 1; t2 >= 0; t2--)
      for (o2.multiply(10), o2.number[0] = this.number[t2], s2[t2] = 0; r2.lte(o2); )
        s2[t2]++, o2.subtract(r2);
    for (t2 = 0, i2 = s2.length - 1; 0 === s2[i2 - t2] && i2 - t2 > 0; )
      t2++;
    return t2 > 0 && s2.splice(-t2), this.rest = o2, this.number = s2, this;
  }, At.prototype.mod = function(e2) {
    return this.divide(e2).rest;
  }, At.prototype.isZero = function() {
    var e2;
    for (e2 = 0; e2 < this.number.length; e2++)
      if (0 !== this.number[e2])
        return false;
    return true;
  }, At.prototype.toString = function() {
    var e2, t2 = "";
    if ("string" == typeof this.number)
      return this.number;
    for (e2 = this.number.length - 1; e2 >= 0; e2--)
      t2 += this.number[e2];
    return this.sign > 0 ? t2 : "-" + t2;
  };
  var bt, kt = Math.pow(2, 32);
  function Vt(e2) {
    for (var t2 = new Uint8Array(5), i2 = new DataView(t2.buffer), r2 = 0; 4294967168 & e2; )
      i2.setUint8(r2++, 127 & e2 | 128), e2 >>>= 7;
    return i2.setUint8(r2++, 127 & e2), t2.slice(0, r2);
  }
  class Lt {
    constructor(e2) {
      this.offset = 0, this.buffer = new Uint8Array(e2), this.view = new DataView(e2);
    }
    checkBufferBoundaryAccess() {
      return this.offset >= this.buffer.byteLength;
    }
    length() {
      var e2;
      return (null === (e2 = this.view) || void 0 === e2 ? void 0 : e2.byteLength) || 0;
    }
    getBuffer() {
      return this.view.buffer;
    }
    getOffset() {
      return this.offset;
    }
    popRaw(e2) {
      try {
        var t2 = this.buffer.slice(this.offset, this.offset + e2);
        return this.offset += e2, t2;
      } catch (e3) {
        throw new Error(`UnpackException raw ${e3 && e3.message}`);
      }
    }
    popByte() {
      try {
        var e2 = this.view.getUint8(this.offset);
        return this.offset += 1, e2;
      } catch (e3) {
        throw new Error(`UnpackException byte ${e3 && e3.message}`);
      }
    }
    popVarbin() {
      return this.popRaw(this.popVarInt());
    }
    popString() {
      try {
        return function(e2) {
          return "function" == typeof TextDecoder ? new TextDecoder("utf-8").decode(e2) : function(e3) {
            for (var t2 = "", i2 = 0; i2 < e3.length; ) {
              var r2 = e3[i2], s2 = 0, o2 = 0;
              if (r2 <= 127 ? (s2 = 0, o2 = 255 & r2) : r2 <= 223 ? (s2 = 1, o2 = 31 & r2) : r2 <= 239 ? (s2 = 2, o2 = 15 & r2) : r2 <= 244 && (s2 = 3, o2 = 7 & r2), e3.length - i2 - s2 > 0)
                for (var n2 = 0; n2 < s2; )
                  o2 = o2 << 6 | 63 & (r2 = e3[i2 + n2 + 1]), n2 += 1;
              else
                o2 = 65533, s2 = e3.length - i2;
              t2 += String.fromCodePoint(o2), i2 += s2 + 1;
            }
            return t2;
          }(e2);
        }(this.popVarbin());
      } catch (e2) {
        throw new Error(`UnpackException string ${e2 && e2.message}`);
      }
    }
    popInt() {
      try {
        var e2 = this.view.getUint32(this.offset, true);
        return this.offset += 4, e2;
      } catch (e3) {
        throw new Error(`UnpackException int ${e3 && e3.message}`);
      }
    }
    popVarInt() {
      var e2 = 1, t2 = 0, i2 = 0, r2 = 0;
      do {
        if (t2 += (127 & (i2 = this.popByte())) * e2, e2 *= 128, (r2 += 1) > 5)
          throw new Error("Variable length quantity is too long");
      } while (128 & i2);
      return t2;
    }
    popLong() {
      try {
        var e2 = function(e3, t2 = false) {
          var i2 = new DataView(e3.buffer), [r2, s2] = t2 ? [4, 0] : [0, 4], o2 = i2.getUint32(r2, t2), n2 = i2.getUint32(s2, t2);
          return o2 > 0 ? o2 * kt + n2 : n2;
        }(this.buffer.slice(this.offset, this.offset + 8), true);
        return this.offset += 8, Number(e2);
      } catch (e3) {
        throw new Error(`UnpackException long ${e3 && e3.message}`);
      }
    }
    popShort() {
      try {
        var e2 = this.view.getUint16(this.offset, true);
        return this.offset += 2, e2;
      } catch (e3) {
        throw new Error(`UnpackException short ${e3 && e3.message}`);
      }
    }
    popBoolean() {
      return this.popByte() > 0;
    }
    toString() {
      return Array.from(new Uint8Array(this.buffer)).toString();
    }
    reset() {
      this.offset = 0, this.buffer = null, this.view = null;
    }
  }
  class Pt {
    constructor(e2) {
      this.packetLength = 0, this.serviceId = 0, this.commandId = 0, this.serialId = 0, this.tag = 0, this.resCode = 200, this.innerHeader = null, this.msgId = 0, this.bodyArr = [], this.unpack = new Lt(e2);
    }
    reset() {
      this.innerHeader = null, this.bodyArr = [], this.unpack.reset();
    }
    getBodyDetail() {
      return this.bodyArr.join("");
    }
    unmarshalHeader() {
      var e2 = this._unmarshalHeader();
      this.packetLength = e2.packetLength, this.serviceId = e2.serviceId, this.commandId = e2.commandId, this.serialId = e2.serialId, this.tag = e2.tag, this.resCode = e2.resCode, 4 === e2.serviceId && [1, 2, 10, 11].includes(e2.commandId) && (this.msgId = this.unmarshalLong(), this.innerHeader = this._unmarshalHeader());
    }
    _unmarshalHeader() {
      var e2 = this.unpack.popVarInt(), t2 = this.unpack.popByte(), i2 = this.unpack.popByte(), r2 = this.unpack.popShort(), s2 = this.unpack.popByte(), o2 = 200;
      return this.hasRescode(s2) && (o2 = this.unpack.popShort()), { packetLength: e2, serviceId: t2, commandId: i2, serialId: r2, tag: s2, resCode: o2 };
    }
    hasRescode(e2) {
      return !!((e2 = e2 || this.tag) & Pt.RES_CODE);
    }
    getHeader() {
      return { packetLength: this.packetLength, sid: this.serviceId, cid: this.commandId, ser: this.serialId, code: this.resCode };
    }
    getInnerHeader() {
      return this.innerHeader ? { sid: this.innerHeader.serviceId, cid: this.innerHeader.commandId } : null;
    }
    unmarshalProperty() {
      var e2 = this.unpack.popVarInt(), t2 = {};
      this.bodyArr.push(`
Property(${e2}) {`);
      for (var i2 = 0; i2 < e2; i2++) {
        var r2 = this.unpack.popVarInt();
        this.bodyArr.push(`${r2}:`);
        var s2 = this.unpack.popString();
        this.bodyArr.push(`"${s2.length} ${this.unpack.getOffset()}",`), t2[r2] = s2;
      }
      return this.bodyArr.push("},"), t2;
    }
    unmarshalPropertyArray() {
      var e2 = this.unpack.popVarInt(), t2 = [];
      this.bodyArr.push(`
PropertyArray(${e2}) [`);
      for (var i2 = 0; i2 < e2; i2++)
        t2.push(this.unmarshalProperty());
      return this.bodyArr.push("],"), t2;
    }
    unmarshalLong() {
      var e2 = this.unpack.popLong();
      return this.bodyArr.push(`
Long:${e2}`), e2;
    }
    unmarshalLongArray() {
      var e2 = this.unpack.popVarInt(), t2 = [];
      this.bodyArr.push(`
LongArray ${e2}:`);
      for (var i2 = 0; i2 < e2; i2++) {
        var r2 = this.unpack.popLong();
        this.bodyArr.push(`${r2},`), t2.push(r2);
      }
      return t2;
    }
    unmarshalStrArray() {
      var e2 = this.unpack.popVarInt(), t2 = [];
      this.bodyArr.push(`
StrArray ${e2}:`);
      for (var i2 = 0; i2 < e2; i2++) {
        var r2 = this.unpack.popString();
        this.bodyArr.push(`${r2},`), t2.push(r2);
      }
      return t2;
    }
    unmarshalStrLongMap() {
      var e2 = this.unpack.popVarInt(), t2 = {};
      this.bodyArr.push(`
StrLongMap ${e2}:`);
      for (var i2 = 0; i2 < e2; i2++) {
        var r2 = this.unpack.popString();
        this.bodyArr.push(`${r2},`);
        var s2 = this.unpack.popLong();
        this.bodyArr.push(`${s2};`), t2[r2] = s2;
      }
      return t2;
    }
    unmarshalStrStrMap() {
      var e2 = this.unpack.popVarInt(), t2 = {};
      this.bodyArr.push(`
StrStrMap ${e2}:`);
      for (var i2 = 0; i2 < e2; i2++) {
        var r2 = this.unpack.popString();
        this.bodyArr.push(`${r2},`);
        var s2 = this.unpack.popString();
        this.bodyArr.push(`${s2};`), t2[r2] = s2;
      }
      return t2;
    }
    unmarshalLongLongMap() {
      var e2 = this.unpack.popVarInt(), t2 = {};
      this.bodyArr.push(`
StrLongLongMap ${e2}:`);
      for (var i2 = 0; i2 < e2; i2++) {
        var r2 = this.unpack.popLong();
        this.bodyArr.push(`${r2},`);
        var s2 = this.unpack.popLong();
        this.bodyArr.push(`${s2};`), t2[r2] = s2;
      }
      return { m_map: t2 };
    }
    unmarshalKVArray() {
      var e2 = this.unpack.popVarInt(), t2 = [];
      this.bodyArr.push(`
KVArray ${e2}:`);
      for (var i2 = 0; i2 < e2; i2++)
        t2.push(this.unmarshalStrStrMap());
      return t2;
    }
    unmarshal(e2) {
      var t2 = Object.assign(Object.assign({}, this.getHeader()), { r: [] });
      if (this.innerHeader && (t2.r[0] = this.msgId, t2.r[1] = { body: [], headerPacket: this.getInnerHeader() }), ![200, 406, 808, 810, 7101].includes(t2.code))
        return JSON.stringify(t2);
      if (this.packetLength > 0 && this.packetLength > this.unpack.length())
        throw new Error(`UnpackException packetLength(${this.packetLength}) greater than bufferLength(${this.unpack.length()})`);
      var i2 = [];
      return e2 && e2.forEach((e3) => {
        if (!this.unpack.checkBufferBoundaryAccess())
          switch (e3.type) {
            case "PropertyArray":
              i2.push(this.unmarshalPropertyArray());
              break;
            case "Property":
              i2.push(this.unmarshalProperty());
              break;
            case "Byte":
              i2.push(this.unpack.popByte());
              break;
            case "Int":
              i2.push(this.unpack.popInt());
              break;
            case "Bool":
              i2.push(this.unpack.popBoolean());
              break;
            case "Long":
              i2.push(this.unmarshalLong());
              break;
            case "LongArray":
              i2.push(this.unmarshalLongArray());
              break;
            case "String":
              i2.push(this.unpack.popString());
              break;
            case "StrArray":
              i2.push(this.unmarshalStrArray());
              break;
            case "StrStrMap":
              i2.push(this.unmarshalStrStrMap());
              break;
            case "StrLongMap":
              i2.push(this.unmarshalStrLongMap());
              break;
            case "LongLongMap":
              i2.push(this.unmarshalLongLongMap());
              break;
            case "KVArray":
              i2.push(this.unmarshalKVArray());
          }
      }), this.innerHeader ? t2.r[1].body = i2 : t2.r = i2, JSON.stringify(t2);
    }
  }
  Pt.RES_CODE = 2;
  class Dt {
    constructor() {
      this.offset = 0, this.pageSize = 1024, this.capacity = 1048576, this.buffer = new Uint8Array(this.pageSize), this.view = new DataView(this.buffer.buffer);
    }
    reset() {
      this.offset = 0, this.buffer = null, this.view = null;
    }
    size() {
      return this.offset;
    }
    getBuffer() {
      return this.buffer.slice(0, this.offset).buffer;
    }
    ensureCapacity(e2) {
      var t2 = this.offset + e2;
      if (t2 > this.capacity)
        throw new Error("PackException over limit");
      if (t2 > this.buffer.byteLength) {
        var i2 = Math.ceil(t2 / this.pageSize) * this.pageSize, r2 = new Uint8Array(i2);
        r2.set(this.buffer), this.buffer = r2, this.view = new DataView(this.buffer.buffer);
      }
    }
    putRaw(e2) {
      this.ensureCapacity(e2.length);
      try {
        this.buffer.set(e2, this.offset), this.offset += e2.length;
      } catch (e3) {
        throw new Error("PackException raw");
      }
    }
    putByte(e2) {
      this.ensureCapacity(1);
      try {
        this.view.setUint8(this.offset++, e2);
      } catch (e3) {
        throw new Error("PackException byte");
      }
    }
    putString(e2) {
      try {
        var t2 = function(e3) {
          if ("function" == typeof TextEncoder)
            return new TextEncoder().encode(e3);
          var t3 = function(e4) {
            for (var t4 = [], i2 = e4.length, r2 = 0; r2 < i2; ) {
              var s2 = e4.codePointAt(r2), o2 = 0, n2 = 0;
              for (s2 <= 127 ? (o2 = 0, n2 = 0) : s2 <= 2047 ? (o2 = 6, n2 = 192) : s2 <= 65535 ? (o2 = 12, n2 = 224) : s2 <= 2097151 && (o2 = 18, n2 = 240), t4.push(n2 | s2 >> o2), o2 -= 6; o2 >= 0; )
                t4.push(128 | s2 >> o2 & 63), o2 -= 6;
              r2 += s2 >= 65536 ? 2 : 1;
            }
            return t4;
          }(e3);
          return new Uint8Array(t3);
        }(e2);
        this.putVarbin(t2);
      } catch (e3) {
        throw new Error("PackException string");
      }
    }
    putInt(e2) {
      this.ensureCapacity(4);
      try {
        this.view.setInt32(this.offset, e2, true), this.offset += 4;
      } catch (e3) {
        throw new Error("PackException int");
      }
    }
    putVarInt(e2) {
      var t2 = Vt(e2);
      this.putRaw(t2);
    }
    putBoolean(e2) {
      this.ensureCapacity(1);
      try {
        this.view.setUint8(this.offset++, e2 ? 1 : 0);
      } catch (e3) {
        throw new Error("PackException boolean");
      }
    }
    putLong(e2) {
      this.ensureCapacity(8);
      try {
        var t2 = function(e3, t3 = false) {
          var i2 = new Uint8Array(8), r2 = new DataView(i2.buffer), s2 = Number(e3 > kt - 1 ? e3 / kt : 0), o2 = Number(4294967295 & e3), [n2, a2] = t3 ? [4, 0] : [0, 4];
          return r2.setUint32(n2, s2, t3), r2.setUint32(a2, o2, t3), i2;
        }(e2, true);
        this.buffer.set(t2, this.offset), this.offset += 8;
      } catch (e3) {
        throw new Error("PackException long");
      }
    }
    putStringAsLong(e2) {
      this.ensureCapacity(8);
      try {
        var t2 = function(e3, t3 = false) {
          var i2 = new Uint8Array(8), r2 = new DataView(i2.buffer), s2 = At(e3).divide(kt).number.reverse().join(""), o2 = At(e3).mod(kt).number.reverse().join(""), n2 = Number(s2), a2 = Number(o2), [c2, d2] = t3 ? [4, 0] : [0, 4];
          return r2.setUint32(c2, n2, t3), r2.setUint32(d2, a2, t3), i2;
        }(e2, true);
        this.buffer.set(t2, this.offset), this.offset += 8;
      } catch (e3) {
        throw new Error("PackException stringAsLong");
      }
    }
    putShort(e2) {
      this.ensureCapacity(2);
      try {
        this.view.setInt16(this.offset, e2, true), this.offset += 2;
      } catch (e3) {
        throw new Error("PackException short");
      }
    }
    putVarbin(e2) {
      if (!e2)
        return this.ensureCapacity(1), this.putVarInt(0);
      if (e2.byteLength > Math.pow(2, 31) - 2)
        throw new Error("PackException varbin. too long");
      var t2 = Vt(e2.length);
      this.ensureCapacity(t2.length + e2.length);
      try {
        this.buffer.set(t2, this.offset), this.offset += t2.length, this.buffer.set(e2, this.offset), this.offset += e2.length;
      } catch (e3) {
        throw new Error("PackException varbin");
      }
    }
  }
  function wt(e2) {
    if ("number" != typeof e2) {
      if (null == e2)
        return false;
      e2 = Number(e2);
    }
    if (isNaN(e2))
      throw new Error("Number type conversion error");
    return true;
  }
  function Ut(e2) {
    return null == e2;
  }
  class xt {
    constructor(e2, t2, i2) {
      this.pack = new Dt(), this.packetLength = 0, this.serviceId = 0, this.commandId = 0, this.serialId = 0, this.tag = 0, this.serviceId = e2, this.commandId = t2, this.serialId = i2;
    }
    marshalHeader() {
      this.pack.putVarInt(this.packetLength), this.pack.putByte(this.serviceId), this.pack.putByte(this.commandId), this.pack.putShort(this.serialId), this.pack.putByte(this.tag);
    }
    marshalProperty(e2) {
      var t2 = Object.keys(e2).filter((e3) => !Ut(e3));
      this.pack.putVarInt(t2.length), t2.forEach((t3) => {
        this.pack.putVarInt(Number(t3)), Array.isArray(e2[t3]) || "[object Object]" === Object.prototype.toString.call(e2[t3]) ? this.pack.putString(JSON.stringify(e2[t3])) : this.pack.putString(String(e2[t3]));
      });
    }
    marshalPropertyArray(e2) {
      var t2 = e2.length;
      this.pack.putVarInt(t2), e2.forEach((e3) => {
        this.marshalProperty(null == e3 ? void 0 : e3.v);
      });
    }
    marshalStrArray(e2) {
      var t2 = e2.filter((e3) => !Ut(e3)), i2 = t2.length;
      this.pack.putVarInt(i2), t2.forEach((e3) => {
        this.pack.putString(String(e3));
      });
    }
    marshalLongArray(e2) {
      var t2 = e2.filter((e3) => wt(e3)), i2 = t2.length;
      this.pack.putVarInt(i2), t2.forEach((e3) => {
        this.putLong(e3);
      });
    }
    marshalStrStrMap(e2) {
      var t2 = Object.keys(e2).filter((t3) => !Ut(e2[t3]) && !Ut(t3));
      this.pack.putVarInt(t2.length), t2.forEach((t3) => {
        this.pack.putString(String(t3)), this.pack.putString(String(e2[t3]));
      });
    }
    marshalStrLongMap(e2) {
      var t2 = Object.keys(e2).filter((t3) => wt(e2[t3]) && !Ut(t3));
      this.pack.putVarInt(t2.length), t2.forEach((t3) => {
        this.pack.putString(String(t3)), this.putLong(e2[t3]);
      });
    }
    marshalLongLongMap(e2) {
      var t2 = Object.keys(e2).filter((t3) => {
        var i2 = Number(t3);
        return wt(i2) && wt(e2[i2]);
      });
      this.pack.putVarInt(t2.length), t2.forEach((t3) => {
        var i2 = Number(t3);
        this.putLong(i2), this.putLong(e2[i2]);
      });
    }
    marshalKVArray(e2) {
      var t2 = e2.length;
      this.pack.putVarInt(t2), e2.forEach((e3) => {
        this.marshalStrStrMap(e3);
      });
    }
    putLong(e2) {
      "string" == typeof e2 && e2.length > 15 ? this.pack.putStringAsLong(e2) : this.pack.putLong(Number(e2));
    }
    marshal(e2, t2) {
      return this.marshalHeader(), t2 && t2.forEach((t3, i2) => {
        var r2, s2 = t3.type, o2 = null === (r2 = e2[i2]) || void 0 === r2 ? void 0 : r2.v;
        if (!Ut(o2))
          switch (s2) {
            case "PropertyArray":
              this.marshalPropertyArray(o2);
              break;
            case "Property":
              this.marshalProperty(o2);
              break;
            case "Byte":
              if (!wt(o2))
                return;
              this.pack.putByte(Number(o2));
              break;
            case "Int":
              if (!wt(o2))
                return;
              this.pack.putInt(Number(o2));
              break;
            case "Bool":
              "false" === o2 ? o2 = false : "true" === o2 && (o2 = true), this.pack.putBoolean(o2);
              break;
            case "Long":
              if (!wt(o2))
                return;
              this.putLong(o2);
              break;
            case "LongArray":
              this.marshalLongArray(o2);
              break;
            case "String":
              this.pack.putString(String(o2));
              break;
            case "StrArray":
              this.marshalStrArray(o2);
              break;
            case "StrStrMap":
              this.marshalStrStrMap(o2);
              break;
            case "StrLongMap":
              this.marshalStrLongMap(o2);
              break;
            case "LongLongMap":
              this.marshalLongLongMap(o2);
              break;
            case "KVArray":
              this.marshalKVArray(o2);
          }
      }), this.pack.getBuffer();
    }
    reset() {
      this.pack.reset();
    }
  }
  class Ft extends Q$1 {
    constructor(e2, t2, i2) {
      super(), this.websocket = null, this.socketConnectTimer = 0, this.linkSSL = true, this.url = "", this.core = e2, this.url = t2, this.linkSSL = i2, this.status = "disconnected", this.logger = e2.logger, this.connect();
    }
    connect() {
      "connecting" !== this.status && "connected" !== this.status ? (this.status = "connecting", this._createWebsocket(`${this.linkSSL ? "wss" : "ws"}://${this.url}/websocket`)) : this.logger.warn("imsocket::socket is connecting or connected", this.status);
    }
    close() {
      if (this.status = "disconnected", this.websocket) {
        this.logger.log("imsocket:: close websocket");
        try {
          this.websocket.close();
        } catch (e2) {
          this.logger.warn("imsocket::attempt to close websocket error", e2);
        }
        this.clean(), this.emit("disconnect");
      }
    }
    clean() {
      this.status = "disconnected", clearTimeout(this.socketConnectTimer), this.websocket && (this.socketUrl = void 0, this.websocket.onmessage = null, this.websocket.onopen = null, this.websocket.onerror = null, this.websocket.onclose = null, this.websocket = null);
    }
    onConnect() {
      this.status = "connected", this.emit("connect"), clearTimeout(this.socketConnectTimer);
    }
    _createWebsocket(e2) {
      this.socketConnectTimer = setTimeout(() => {
        this.logger.error("imsocket::Websocket connect timeout. url: ", e2), this.emit("connectFailed", new oe$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : 415, detail: { reason: `imsocket::Websocket connect timeout. url: ${e2}` } }));
      }, this.core.options.socketConnectTimeout || 8e3), this.socketUrl = e2, this.websocket = new _e$1.WebSocket(e2), this.websocket.binaryType = "arraybuffer", this.websocket.onmessage = this.onMessage.bind(this), this.websocket.onclose = (e3) => {
        e3 = e3 || {}, this.logger.log(`imsocket::Websocket onclose done ${e3.wasClean}/${e3.code}/${e3.reason}`), "connected" === this.status ? (this.clean(), this.emit("disconnect")) : (this.clean(), this.emit("connectFailed", new oe$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_CONNECT_FAILED : 414, detail: { reason: "imsocket::Websocket onclose done" } })));
      }, this.websocket.onerror = (e3) => {
        this.logger.error("imsocket::Websocket onerror", e3), "connected" === this.status ? (this.clean(), this.emit("disconnect")) : (this.clean(), this.emit("connectFailed", new oe$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_CONNECT_FAILED : 414, detail: { reason: "imsocket::Websocket onerror." } })));
      }, this.websocket.onopen = () => {
        this.onConnect();
      };
    }
    onMessage(e2) {
      if (e2.data) {
        var t2 = new Pt(e2.data), i2 = { sid: -1, cid: -1, ser: -1, packetLength: -1 }, r2 = null;
        try {
          t2.unmarshalHeader(), i2 = t2.getHeader(), r2 = t2.getInnerHeader();
        } catch (t3) {
          this.reportBinaryError({ err: t3, sid: r2 ? r2.sid : null == i2 ? void 0 : i2.sid, cid: r2 ? r2.cid : null == i2 ? void 0 : i2.cid, rawBuf: e2.data, type: "decode" });
        }
        var s2 = r2 ? r2.sid : i2.sid, o2 = r2 ? r2.cid : i2.cid, n2 = `${s2}_${o2}`, a2 = it$1[n2];
        if (a2 && a2.length > 0) {
          var c2, d2 = a2[0].config;
          try {
            c2 = t2.unmarshal(d2.response);
          } catch (r3) {
            var l2 = t2.getBodyDetail();
            this.reportBinaryError({ err: r3, rawBuf: e2.data, sid: s2, cid: o2, parseDetail: l2, type: "decode" }), t2.reset();
            var p2 = Object.assign(Object.assign({}, i2), { sid: s2, cid: o2, code: ie$1.V2NIM_ERROR_CODE_UNPACK_ERROR });
            return this.logger.error(`imsocket::onMessage "${p2.sid}_${p2.cid}", ser ${p2.ser}, packetLength ${p2.packetLength} unmarshal error. ${l2} 
`, r3), void this.emit("message", JSON.stringify(p2));
          }
          this.emit("message", c2);
        } else
          this.core.logger.warn("imsocket::onMessage cmd not found", n2);
        t2.reset();
      }
    }
    send(e2, t2, i2, r2, s2) {
      var o2, n2, a2 = new xt(e2, t2, i2), c2 = et$1[r2], d2 = "";
      try {
        d2 = JSON.stringify(s2), n2 = a2.marshal(JSON.parse(d2), c2.params);
      } catch (r3) {
        throw this.reportBinaryError({ err: r3, sid: e2, cid: t2, rawStr: d2, type: "encode" }), a2.reset(), new oe$1({ code: ie$1.V2NIM_ERROR_CODE_PACK_ERROR, detail: { reason: `${e2}-${t2}, ser ${i2} marshal error`, rawError: r3 } });
      }
      null === (o2 = this.websocket) || void 0 === o2 || o2.send(n2), a2.reset();
    }
    reportBinaryError(e2) {
      var t2, i2, r2, { err: s2, rawStr: o2, sid: n2, cid: a2, type: c2, parseDetail: d2 } = e2, l2 = e2.rawBuf;
      if (l2) {
        try {
          r2 = function(e3) {
            if ("function" != typeof btoa)
              return "";
            for (var t3 = "", i3 = new Uint8Array(e3), r3 = i3.byteLength, s3 = 0; s3 < r3; s3++)
              t3 += String.fromCharCode(i3[s3]);
            return i3 = null, btoa(t3);
          }(l2);
        } catch (e3) {
          r2 = `reportBinaryError::arrayBufferToBase64 parsing failed, error: ${null == e3 ? void 0 : e3.message}, sid: ${n2}, cid: ${a2}`, this.core.logger.error(r2);
        }
        l2 = null;
      }
      this.core.reporter.reportTraceStart("exceptions", { user_id: null === (t2 = this.core.auth) || void 0 === t2 ? void 0 : t2.account, trace_id: null === (i2 = this.core.clientSocket.socket) || void 0 === i2 ? void 0 : i2.sessionId, start_time: Date.now(), action: 2, exception_service: 9 });
      var p2 = s2 ? (`${s2.message};;;` || `${s2.code};;;`) + (d2 ? `parseDetail: ${d2};;;` : "") + (o2 ? ` rawStr: ${o2}` : "") + (r2 ? ` rawBuf: ${r2}` : "") : "";
      this.core.reporter.reportTraceUpdateV2("exceptions", { code: "encode" === c2 ? ie$1.V2NIM_ERROR_CODE_PACK_ERROR : ie$1.V2NIM_ERROR_CODE_UNPACK_ERROR, description: p2, operation_type: "encode" === c2 ? 3 : 4, target: `${n2}-${a2}` }, { asyncParams: _e$1.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1);
    }
  }
  !function(e2) {
    e2[e2.ACTIVE = 1] = "ACTIVE", e2[e2.KICKED = 2] = "KICKED", e2[e2.OFFLINE = 3] = "OFFLINE";
  }(bt || (bt = {}));
  class Bt {
    constructor(e2) {
      this.isReconnect = false, this.packetTimeout = 8e3, this.linkSSL = true, this.packetSer = 1, this.backoff = new Tt({ max: 8e3, min: 1600, jitter: 0.01 }), this.sendingCmdMap = /* @__PURE__ */ new Map(), this.pingTimer = 0, this.hasNetworkListener = false, this.core = e2, this.auth = e2.auth, this.logger = e2.logger, this.reporter = e2.reporter, this.timerManager = e2.timerManager, this.eventBus = e2.eventBus, this.setListener();
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.isReconnect = true;
      });
    }
    setSessionId(e2) {
      this.socket && (this.socket.sessionId = e2);
    }
    setLinkSSL(e2) {
      this.linkSSL = e2;
    }
    connect(e2, t2 = false) {
      var i2, r2;
      return ve$1(this, void 0, void 0, function* () {
        this.isReconnect = t2;
        var s2 = this.core.auth.getConnectStatus();
        if (1 === s2) {
          var o2 = `clientSocket::connect status is ${s2}, and would not repeat connect`, n2 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: o2 } });
          return this.logger.warn(o2), Promise.reject(n2);
        }
        this.auth.lifeCycle.processEvent("connect");
        try {
          yield this.auth.doLoginStepsManager.add(this.doConnect(e2)), this.logger.log(`clientSocketV2:: connect success with link url: ${e2}, isReconnect: ${t2}`), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: e2, code: 200, mixlink: true, succeed: true }, { asyncParams: _e$1.net.getNetworkStatus() }), this.auth.lifeCycle.processEvent("connectSucc");
        } catch (t3) {
          var a2 = t3;
          if (this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: e2, code: a2.code || 0, description: `connectFailed:${a2.message}`, mixlink: true, succeed: false }, { asyncParams: _e$1.net.getNetworkStatus() }), a2.code === ie$1.V2NIM_ERROR_CODE_CANCELLED || a2.code === ie$1.V2NIM_ERROR_CODE_TIMEOUT)
            throw null === (i2 = this.socket) || void 0 === i2 || i2.close(), null === (r2 = this.socket) || void 0 === r2 || r2.removeAllListeners(), this.socket = void 0, t3;
          throw this.logger.warn(`clientSocketV2::connect failed with link url: ${e2}`, a2), this.auth.lifeCycle.processEvent("connectFail", a2), t3;
        }
      });
    }
    doConnect(e2) {
      var t2 = false;
      return new Promise((i2, r2) => {
        this.socket = new Ft(this.core, e2, this.linkSSL), this.socket.on("connect", () => {
          this.logger.log("clientSocketV2::socket on connect", e2), this.core.reporterHookLinkKeep.start(), this.core.reporterHookLinkKeep.update({ code: 0, description: "connection begin", operation_type: 0, target: e2 }), t2 = true, i2();
        }), this.socket.on("message", this.onMessage.bind(this)), this.socket.on("disconnect", (i3) => ve$1(this, void 0, void 0, function* () {
          t2 = true, this.logger.log(`clientSocketV2::socket on disconnect ${e2}`, i3), yield this.core.reporterHookLinkKeep.update({ code: (null == i3 ? void 0 : i3.code) || 0, description: (null == i3 ? void 0 : i3.reason) || "socket on disconnect", operation_type: 1, target: e2 }), this.core.reporterHookLinkKeep.end(false), this.doDisconnect(bt.OFFLINE, "SocketOnDisconnect");
        })), this.socket.on("connectFailed", (i3) => {
          t2 ? this.ping() : (this.logger.error(`clientSocketV2::connectFailed:${e2}, reason:${i3 && i3.message}`), this.cleanSocket()), t2 = true, r2(i3);
        });
      });
    }
    cleanSocket() {
      this.socket && ("function" == typeof this.socket.removeAllListeners && this.socket.removeAllListeners(), "function" == typeof this.socket.close && this.socket.close(), this.socket = void 0);
    }
    resetSocketConfig() {
      this.backoff.reset(), this.initOnlineListener();
    }
    doDisconnect(e2, t2) {
      if (this.logger.log(`clientSocketV2::doDisconnect: type ${e2}, reason `, t2), 0 !== this.core.auth.getConnectStatus()) {
        var i2 = { 1: "close", 2: "kicked", 3: "broken" }[e2] || "";
        this.markAllCmdInvaild(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "Packet timeout due to instance disconnect", disconnect_reason: i2 } })), this.timerManager.destroy(), clearTimeout(this.pingTimer), this.cleanSocket(), e2 === bt.ACTIVE || e2 === bt.KICKED ? this.destroyOnlineListener() : e2 === bt.OFFLINE && (this.auth.lifeCycle.processEvent("connectionBroken", new oe$1({ code: ie$1.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "connection broken due to internal reasons" } })), this.logger.log(`clientSocketV2::doDisconnect: pending reconnect ${this.isReconnect}`), this.isReconnect && this.auth.lifeCycle.processEvent("waiting"));
      } else
        this.logger.warn("clientSocketV2::doDisconnect: already disconnected");
    }
    sendCmd(e2, t2, i2) {
      var r2 = this.core.auth.getLoginStatus(), s2 = { cmd: e2 };
      if (1 !== r2 && !["v2Login", "login", "chatroomLogin", "v2ChatroomLogin"].includes(e2))
        return this.logger.warn(`clientSocketV2::NIM login status is ${r2}, so can not sendCmd ${e2}`), Promise.reject(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: Object.assign({ reason: "Can not sendCmd due to no logined" }, s2) }));
      var o2 = "heartbeat" !== e2, n2 = o2 ? this.packetSer++ : 0, a2 = rt$1(e2, n2, this.logger, t2);
      if (!a2) {
        var c2 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: Object.assign(Object.assign({}, s2), { reason: `SendCmd::createCmd error: ${n2} ${e2}` }) });
        return this.logger.error(c2), Promise.reject(c2);
      }
      var { packet: d2, hasPacketResponse: l2, hasPacketTimer: p2 } = a2, h2 = JSON.stringify(d2);
      o2 && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::sendCmd: ${d2.SID}_${d2.CID},${e2},ser:${n2}`, h2) : this.logger.log(`clientSocketV2::sendCmd: ${d2.SID}_${d2.CID},${e2},ser:${n2}`));
      var u2 = (/* @__PURE__ */ new Date()).getTime();
      return new Promise((r3, o3) => {
        l2 && this.sendingCmdMap.set(n2, { cmd: e2, params: t2, callback: [r3, o3], timer: p2 ? setTimeout(() => {
          var t3 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, detail: Object.assign({ ser: n2, reason: `Packet Timeout: ser ${n2} cmd ${e2}`, timetag: (/* @__PURE__ */ new Date()).getTime() }, s2) });
          this.markCmdInvalid(n2, t3, e2);
        }, i2 && i2.timeout ? i2.timeout : this.packetTimeout) : null });
        try {
          this.socket.send(d2.SID, d2.CID, n2, e2, d2.Q), l2 || r3(d2);
        } catch (t3) {
          var a3 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED, detail: Object.assign({ ser: n2, reason: "Unable to send packet" + (t3 && t3.message ? ": " + t3.message : ""), timetag: (/* @__PURE__ */ new Date()).getTime(), rawError: t3 }, s2) });
          this.markCmdInvalid(n2, a3, e2), o3(a3);
        }
      }).catch((e3) => ve$1(this, void 0, void 0, function* () {
        var t3 = e3;
        return [ie$1.V2NIM_ERROR_CODE_DISCONNECT, ie$1.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, ie$1.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED].includes(t3.code) ? (this.reportSendCmdFailed(t3, { sid: d2.SID, cid: d2.CID, ser: n2 }, u2), Promise.reject(t3)) : Promise.reject(t3);
      }));
    }
    reportSendCmdFailed(e2, t2, i2) {
      var r2;
      this.reporter.reportTraceStart("exceptions", { user_id: this.core.auth.getLoginUser(), trace_id: null === (r2 = this.socket) || void 0 === r2 ? void 0 : r2.sessionId, start_time: i2, action: 2, exception_service: 6 });
      var s2 = Ue$1(e2, "detail.disconnect_reason") || "", o2 = e2.code === ie$1.V2NIM_ERROR_CODE_DISCONNECT ? JSON.stringify({ disconnect_reason: s2 }) : e2.detail.reason;
      this.reporter.reportTraceUpdateV2("exceptions", { code: e2.code, description: o2, operation_type: 1, target: `${t2.sid}-${t2.cid}`, context: `${t2.ser}` }, { asyncParams: _e$1.net.getNetworkStatus() }), this.reporter.reportTraceEnd("exceptions", 1);
    }
    onMessage(e2) {
      var t2 = st(e2, this.logger);
      if (t2) {
        var i2 = t2[0], r2 = i2.raw.ser;
        for (var s2 of ("heartbeat" !== i2.cmd && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::recvCmd ${i2.raw.sid}_${i2.raw.cid},${i2.cmd},ser:${r2}`, e2) : this.logger.log(`clientSocketV2::recvCmd ${i2.raw.sid}_${i2.raw.cid},${i2.cmd},ser:${r2},code:${i2.raw.code}`)), t2)) {
          if (s2.error && this.logger.error("clientSocketV2::onMessage packet error", `${s2.raw.sid}_${s2.raw.cid}, ser:${r2},`, s2.error), s2.notFound)
            return void this.logger.warn("clientSocketV2::onMessage packet not found", `${s2.raw.sid}_${s2.raw.cid}, ser:${r2}`);
          this.packetHandler(s2);
        }
      }
    }
    packetHandler(e2) {
      var t2, i2, r2, s2;
      if (e2) {
        var o2 = e2.raw.ser, n2 = this.sendingCmdMap.get(o2);
        if (n2 && n2.cmd === e2.cmd) {
          var { callback: a2, timer: c2, params: d2 } = n2;
          if (clearTimeout(c2), e2.params = d2, this.sendingCmdMap.delete(o2), "heartbeat" === e2.cmd)
            return void a2[0]();
          var l2 = null === (i2 = null === (t2 = this.core[e2.service]) || void 0 === t2 ? void 0 : t2.process) || void 0 === i2 ? void 0 : i2.call(t2, e2);
          l2 && "function" == typeof l2.then ? l2.then((e3) => {
            a2[0](e3);
          }).catch((e3) => {
            a2[1](e3);
          }) : (this.logger.log("clientSocketV2::handlerFn without promise", e2.service, e2.cmd), a2[0](e2));
        } else {
          var p2 = null === (s2 = null === (r2 = this.core[e2.service]) || void 0 === r2 ? void 0 : r2.process) || void 0 === s2 ? void 0 : s2.call(r2, e2);
          p2 && "function" == typeof p2.then && p2.catch((e3) => {
            this.logger.error("clientSocketV2::no obj cache, no process handler", e3);
          });
        }
      }
    }
    markCmdInvalid(e2, t2, i2) {
      var r2 = this.sendingCmdMap.get(e2);
      if (r2) {
        var { callback: s2, timer: o2 } = r2;
        o2 && clearTimeout(o2), this.sendingCmdMap.delete(e2), this.logger.warn(`clientSocketV2::packet ${e2}, ${i2} is invalid:`, t2), s2[1](t2);
      }
    }
    markAllCmdInvaild(e2) {
      this.logger.log("markAllCmdInvaild", e2), this.sendingCmdMap.forEach((t2) => {
        var { callback: i2, timer: r2, cmd: s2 } = t2;
        this.logger.log(`clientSocketV2::markAllCmdInvaild:cmd ${s2}`), r2 && clearTimeout(r2), i2[1](e2);
      }), this.sendingCmdMap.clear();
    }
    ping() {
      var e2;
      return ve$1(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        try {
          yield this.sendCmd("heartbeat");
        } catch (t2) {
          if (t2.code === ie$1.V2NIM_ERROR_CODE_DISCONNECT)
            return;
          if (yield this.testHeartBeat5Timeout())
            return yield this.core.reporterHookLinkKeep.update({ code: 0, description: "Heartbeat-discovered link failure", operation_type: 1, target: null === (e2 = this.socket) || void 0 === e2 ? void 0 : e2.url }), this.core.reporterHookLinkKeep.end(true), void this.doDisconnect(bt.OFFLINE, "PingError");
        }
        this.pingTimer = setTimeout(() => {
          this.ping();
        }, 3e4);
      });
    }
    testHeartBeat5Timeout() {
      return ve$1(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        for (var e2 = 0; e2 < 5; e2++)
          try {
            return yield this.sendCmd("heartbeat", {}, { timeout: 3e3 }), false;
          } catch (t2) {
            this.logger.log(`clientSocketV2::test heartbeat ${e2} Timeout`);
          }
        return true;
      });
    }
    initOnlineListener() {
      this.hasNetworkListener || (this.logger.log("clientSocketV2::onlineListener:init"), this.hasNetworkListener = true, _e$1.net.onNetworkStatusChange((e2) => {
        this.logger.log("clientSocketV2::onlineListener:network change", e2);
        var t2 = this.auth.getConnectStatus(), i2 = this.auth.getLoginStatus();
        e2.isConnected && 1 === i2 ? this.ping() : e2.isConnected && 3 === t2 ? (this.logger.log("clientSocketV2::onlineListener:online and connectStatus is waiting, do reLogin"), this.auth.reconnect.clearReconnectTimer(), this.auth.reconnect.doReLogin()) : e2.isConnected || this.doDisconnect(bt.OFFLINE, "OfflineListener");
      }));
    }
    destroyOnlineListener() {
      this.logger.log("clientSocketV2::onlineListener:destroy"), _e$1.net.offNetworkStatusChange(), this.hasNetworkListener = false;
    }
  }
  var jt, $t = ["disconnect", "connect", "heartbeat", "message", "json", "event", "ack", "error", "noop"], Gt = ["transport not supported", "client not handshaken", "unauthorized"], Ht = ["reconnect"];
  class qt extends Q$1 {
    constructor(e2, t2, i2) {
      super(), this.websocket = null, this.socketConnectTimer = 0, this.url = "", this.linkSSL = true, this.core = e2, this.url = t2, this.linkSSL = i2, this.status = "disconnected", this.logger = e2.logger, this.connect();
    }
    connect() {
      "connecting" !== this.status && "connected" !== this.status ? (this.status = "connecting", this.core.adapters.request(`${this.linkSSL ? "https" : "http"}://${this.url}/socket.io/1/?t=${Date.now()}`, { method: "GET", dataType: "text", timeout: this.core.options.xhrConnectTimeout || 8e3 }, { exception_service: 6 }).then((e2) => {
        if ("connecting" === this.status) {
          var [t2, i2] = e2.data.split(":");
          return this.sessionId = t2, this.logger.log(`imsocket::XHR success. status ${this.status}, ${"connecting" === this.status ? "continue websocket connection" : "stop websocket connection"}`), this._createWebsocket(`${this.linkSSL ? "wss" : "ws"}://${this.url}/socket.io/1/websocket/${t2}`);
        }
      }).catch((e2) => {
        if ("connecting" === this.status) {
          var t2 = `imsocket::XHR fail. raw message: "${(e2 = e2 || {}).message}", code: "${e2.code}"`, i2 = e2.code;
          i2 = "v2" === Ue$1(this.core, "options.apiVersion") ? e2.code === ie$1.V2NIM_ERROR_CODE_CONNECT_TIMEOUT ? ie$1.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : ie$1.V2NIM_ERROR_CODE_CONNECT_FAILED : 408 === e2.code ? 408 : 415;
          var r2 = new oe$1({ code: i2, detail: { reason: t2, rawError: e2 } });
          this.logger.error(t2), this.status = "disconnected", this.emit("handshakeFailed", r2);
        }
      })) : this.logger.warn("imsocket::socket is connecting or connected", this.status);
    }
    close() {
      if (this.status = "disconnected", this.websocket) {
        this.logger.log("imsocket:: close websocket");
        try {
          this.websocket.send(this.encodePacket({ type: "disconnect" }));
        } catch (e2) {
          this.logger.warn("imsocket::attempt to send encodePacket error", e2);
        }
        try {
          this.websocket.close();
        } catch (e2) {
          this.logger.warn("imsocket::attempt to close websocket error", e2);
        }
        this.clean(), this.emit("disconnect", { code: 0, reason: "Active close websocket" });
      }
    }
    clean() {
      this.status = "disconnected", clearTimeout(this.socketConnectTimer), this.websocket && (this.socketUrl = void 0, this.websocket.onmessage = null, this.websocket.onopen = null, this.websocket.onerror = null, this.websocket.onclose = null, this.websocket = null);
    }
    onConnect() {
      this.status = "connected", this.emit("connect"), clearTimeout(this.socketConnectTimer);
    }
    _createWebsocket(e2) {
      this.socketConnectTimer = setTimeout(() => {
        this.logger.error("imsocket::Websocket connect timeout. url: ", this.socketUrl), this.emit("handshakeFailed", new oe$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : 415, detail: { reason: `imsocket::Websocket connect timeout. url: ${this.socketUrl}` } }));
      }, this.core.options.socketConnectTimeout || 8e3), this.socketUrl = e2, this.websocket = new _e$1.WebSocket(e2), this.websocket.onmessage = this.onMessage.bind(this), this.websocket.onclose = (e3) => {
        e3 = e3 || {}, this.logger.log(`imsocket::Websocket onclose done ${e3.wasClean}/${e3.code}/${e3.reason}`), this.clean(), this.emit("disconnect", { code: e3.code || 0, reason: e3.reason });
      }, this.websocket.onerror = (e3) => {
        this.logger.error("imsocket::Websocket onerror", e3), "logined" === this.core.status && this.core.clientSocket.ping();
      };
    }
    onMessage(e2) {
      var t2, i2 = this.decodePacket(e2.data);
      if (i2)
        switch (i2.type) {
          case "connect":
            this.onConnect();
            break;
          case "disconnect":
            this.close(), this.emit("disconnect", { code: 0, reason: "MessageEvent type disconnect" });
            break;
          case "message":
          case "json":
            this.emit("message", i2.data);
            break;
          case "event":
            i2.name && this.emit(i2.name, i2.args);
            break;
          case "error":
            "unauthorized" === i2.reason ? this.emit("connect_failed", i2.reason) : this.emit("error", i2.reason), this.logger.error("imsocket::Websocket connect failed, onmessage type error. url: ", this.socketUrl), clearTimeout(this.socketConnectTimer), this.emit("handshakeFailed", new oe$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_CONNECT_FAILED : 408, detail: { reason: `imsocket::Websocket connect failed, onMessage socket error. url: ${this.socketUrl}` } }));
            break;
          case "heartbeat":
            null === (t2 = this.websocket) || void 0 === t2 || t2.send(this.encodePacket({ type: "heartbeat" }));
            break;
          default:
            this.logger.warn("imsocket::Websocket no handler type", i2.type);
        }
    }
    encodePacket(e2) {
      var t2, i2, { type: r2, id: s2 = "", endpoint: o2 = "", ack: n2 } = e2, a2 = null;
      if (!r2)
        return "";
      switch (r2) {
        case "error":
          t2 = e2.reason ? Gt.indexOf(e2.reason) : "", i2 = e2.advice ? Ht.indexOf(e2.advice) : "", "" === t2 && "" === i2 || (a2 = t2 + ("" !== i2 ? "+" + i2 : ""));
          break;
        case "message":
          "" !== e2.data && (a2 = e2.data);
          break;
        case "event":
          t2 = { name: e2.name }, t2 = e2.args && e2.args.length ? { name: e2.name, args: e2.args } : { name: e2.name }, a2 = JSON.stringify(t2);
          break;
        case "json":
          a2 = JSON.stringify(e2.data);
          break;
        case "connect":
          e2.qs && (a2 = e2.qs);
          break;
        case "ack":
          a2 = e2.ackId + (e2.args && e2.args.length ? "+" + JSON.stringify(e2.args) : "");
      }
      var c2 = [$t.indexOf(r2), s2 + ("data" === n2 ? "+" : ""), o2];
      return null != a2 && c2.push(a2), c2.join(":");
    }
    decodePacket(e2) {
      if (e2)
        if ("�" != e2.charAt(0)) {
          var t2 = e2.match(/([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/);
          if (t2) {
            var i2, [, r2, s2, o2, n2, a2] = t2, c2 = { type: $t[+r2], endpoint: n2 };
            switch (s2 && (c2.id = s2, c2.ack = !o2 || "data"), c2.type) {
              case "error":
                i2 = a2.split("+"), c2.reason = Gt[+i2[0]] || "";
                break;
              case "message":
                c2.data = a2 || "";
                break;
              case "connect":
                c2.qs = a2 || "";
                break;
              case "event":
                try {
                  var d2 = JSON.parse(a2);
                  c2.name = d2.name, c2.args = d2.args;
                } catch (e3) {
                  this.logger.error("imsocket::parseData::type::event error", e3);
                }
                c2.args = c2.args || [];
                break;
              case "json":
                try {
                  c2.data = JSON.parse(a2);
                } catch (e3) {
                  this.logger.error("imsocket::parseData::type::json error", e3);
                }
                break;
              case "ack":
                if ((i2 = a2.match(/^([0-9]+)(\+)?(.*)/)) && (c2.ackId = i2[1], c2.args = [], i2[3]))
                  try {
                    c2.args = i2[3] ? JSON.parse(i2[3]) : [];
                  } catch (e3) {
                    this.logger.error("imsocket::parseData::type::ack error", e3);
                  }
            }
            return c2;
          }
        } else
          this.logger.error("imsocket::unrecognize dataStr", e2.slice(0, 20));
    }
    send(e2) {
      var t2, i2 = { data: e2, type: "message", endpoint: "" };
      null === (t2 = this.websocket) || void 0 === t2 || t2.send(this.encodePacket(i2));
    }
  }
  !function(e2) {
    e2[e2.ACTIVE = 1] = "ACTIVE", e2[e2.KICKED = 2] = "KICKED", e2[e2.OFFLINE = 3] = "OFFLINE";
  }(jt || (jt = {}));
  class Yt {
    constructor(e2) {
      this.isReconnect = false, this.packetTimeout = 8e3, this.linkSSL = true, this.packetSer = 1, this.backoff = new Tt({ max: 8e3, min: 1600, jitter: 0.01 }), this.sendingCmdMap = /* @__PURE__ */ new Map(), this.pingTimer = 0, this.hasNetworkListener = false, this.core = e2, this.auth = e2.auth, this.logger = e2.logger, this.reporter = e2.reporter, this.timerManager = e2.timerManager, this.eventBus = e2.eventBus, this.setListener();
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.isReconnect = true;
      });
    }
    setSessionId(e2) {
      this.socket && (this.socket.sessionId = e2);
    }
    setLinkSSL(e2) {
      this.linkSSL = e2;
    }
    connect(e2, t2 = false) {
      var i2, r2;
      return ve$1(this, void 0, void 0, function* () {
        this.isReconnect = t2;
        var s2 = this.core.auth.getConnectStatus();
        if (1 === s2) {
          var o2 = `clientSocket::connect status is ${s2}, and would not repeat connect`, n2 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: o2 } });
          return this.logger.warn(o2), Promise.reject(n2);
        }
        this.auth.lifeCycle.processEvent("connect");
        try {
          yield this.auth.doLoginStepsManager.add(this.doConnect(e2)), this.logger.log(`clientSocketV2:: connect success with link url: ${e2}, isReconnect: ${t2}`), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: e2, code: 200, mixlink: true, succeed: true }, { asyncParams: _e$1.net.getNetworkStatus() }), this.auth.lifeCycle.processEvent("connectSucc");
        } catch (t3) {
          var a2 = t3;
          if (this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: e2, code: a2.code || 0, description: `connectFailed:${a2.message}`, mixlink: true, succeed: false }, { asyncParams: _e$1.net.getNetworkStatus() }), a2.code === ie$1.V2NIM_ERROR_CODE_CANCELLED || a2.code === ie$1.V2NIM_ERROR_CODE_TIMEOUT)
            throw null === (i2 = this.socket) || void 0 === i2 || i2.close(), null === (r2 = this.socket) || void 0 === r2 || r2.removeAllListeners(), this.socket = void 0, t3;
          throw this.logger.warn(`clientSocketV2::connect failed with link url: ${e2}`, a2), this.auth.lifeCycle.processEvent("connectFail", a2), t3;
        }
      });
    }
    doConnect(e2) {
      var t2 = false;
      return new Promise((i2, r2) => {
        this.socket = new qt(this.core, e2, this.linkSSL), this.socket.on("connect", () => {
          this.logger.log("clientSocketV2::socket on connect", e2), this.core.reporterHookLinkKeep.start(), this.core.reporterHookLinkKeep.update({ code: 0, description: "connection begin", operation_type: 0, target: e2 }), t2 = true, i2();
        }), this.socket.on("message", this.onMessage.bind(this)), this.socket.on("disconnect", (i3) => ve$1(this, void 0, void 0, function* () {
          t2 = true, this.logger.log("clientSocketV2::socket on disconnect", i3), yield this.core.reporterHookLinkKeep.update({ code: (null == i3 ? void 0 : i3.code) || 0, description: (null == i3 ? void 0 : i3.reason) || "socket on disconnect", operation_type: 1, target: e2 }), this.core.reporterHookLinkKeep.end(false), this.doDisconnect(jt.OFFLINE, "SocketOnDisconnect");
        })), this.socket.on("handshakeFailed", (e3) => {
          t2 ? this.ping() : (this.logger.error(`clientSocketV2::handshake failed: "${e3 && e3.message}"`), this.cleanSocket()), t2 = true, r2(e3);
        });
      });
    }
    cleanSocket() {
      this.socket && ("function" == typeof this.socket.removeAllListeners && this.socket.removeAllListeners(), "function" == typeof this.socket.close && this.socket.close(), this.socket = void 0);
    }
    resetSocketConfig() {
      this.backoff.reset(), this.initOnlineListener();
    }
    doDisconnect(e2, t2) {
      if (this.logger.log(`clientSocketV2::doDisconnect: type ${e2}, reason `, t2), 0 !== this.core.auth.getConnectStatus()) {
        var i2 = { 1: "close", 2: "kicked", 3: "broken" }[e2] || "";
        this.markAllCmdInvaild(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "Packet timeout due to instance disconnect", disconnect_reason: i2 } })), this.timerManager.destroy(), clearTimeout(this.pingTimer), this.cleanSocket(), e2 === jt.ACTIVE || e2 === jt.KICKED ? this.destroyOnlineListener() : e2 === jt.OFFLINE && (this.auth.lifeCycle.processEvent("connectionBroken", new oe$1({ code: ie$1.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "connection broken due to internal reasons" } })), this.logger.log(`clientSocketV2::doDisconnect: pending reconnect ${this.isReconnect}`), this.isReconnect && this.auth.lifeCycle.processEvent("waiting"));
      } else
        this.logger.warn("clientSocketV2::doDisconnect: already disconnected");
    }
    sendCmd(e2, t2, i2) {
      var r2 = this.core.auth.getLoginStatus(), s2 = { cmd: e2 };
      if (1 !== r2 && !["v2Login", "login", "chatroomLogin", "v2ChatroomLogin"].includes(e2))
        return this.logger.warn(`clientSocketV2::NIM login status is ${r2}, so can not sendCmd ${e2}`), Promise.reject(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: Object.assign({ reason: "Can not sendCmd due to no logined" }, s2) }));
      var o2 = "heartbeat" !== e2, n2 = o2 ? this.packetSer++ : 0, a2 = rt$1(e2, n2, this.logger, t2);
      if (!a2) {
        var c2 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: Object.assign(Object.assign({}, s2), { reason: `SendCmd::createCmd error: ${n2} ${e2}` }) });
        return this.logger.error(c2), Promise.reject(c2);
      }
      var { packet: d2, hasPacketResponse: l2, hasPacketTimer: p2 } = a2, h2 = JSON.stringify(d2);
      o2 && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::sendCmd: ${d2.SID}_${d2.CID},${e2},ser:${n2}`, h2) : this.logger.log(`clientSocketV2::sendCmd: ${d2.SID}_${d2.CID},${e2},ser:${n2}`));
      var u2 = (/* @__PURE__ */ new Date()).getTime();
      return new Promise((r3, o3) => {
        l2 && this.sendingCmdMap.set(n2, { cmd: e2, params: t2, callback: [r3, o3], timer: p2 ? setTimeout(() => {
          var t3 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, detail: Object.assign({ ser: n2, reason: `Packet Timeout: ser ${n2} cmd ${e2}`, timetag: (/* @__PURE__ */ new Date()).getTime() }, s2) });
          this.markCmdInvalid(n2, t3, e2);
        }, i2 && i2.timeout ? i2.timeout : this.packetTimeout) : null });
        try {
          this.socket.send(h2), l2 || r3(d2);
        } catch (t3) {
          var a3 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED, detail: Object.assign({ ser: n2, reason: "Unable to send packet" + (t3 && t3.message ? ": " + t3.message : ""), timetag: (/* @__PURE__ */ new Date()).getTime(), rawError: t3 }, s2) });
          this.markCmdInvalid(n2, a3, e2), o3(a3);
        }
      }).catch((e3) => ve$1(this, void 0, void 0, function* () {
        var t3, i3 = e3;
        if (![ie$1.V2NIM_ERROR_CODE_DISCONNECT, ie$1.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, ie$1.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED].includes(i3.code))
          return Promise.reject(i3);
        this.reporter.reportTraceStart("exceptions", { user_id: this.core.auth.getLoginUser(), trace_id: null === (t3 = this.socket) || void 0 === t3 ? void 0 : t3.sessionId, start_time: u2, action: 2, exception_service: 6 });
        var r3 = Ue$1(i3, "detail.disconnect_reason") || "", s3 = i3.code === ie$1.V2NIM_ERROR_CODE_DISCONNECT ? JSON.stringify({ disconnect_reason: r3 }) : i3.detail.reason;
        return this.reporter.reportTraceUpdateV2("exceptions", { code: i3.code, description: s3, operation_type: 1, target: `${d2.SID}-${d2.CID}`, context: `${d2.SER}` }, { asyncParams: _e$1.net.getNetworkStatus() }), this.reporter.reportTraceEnd("exceptions", 1), Promise.reject(i3);
      }));
    }
    onMessage(e2) {
      var t2 = st(e2, this.logger);
      if (t2)
        for (var i2 of t2) {
          var r2 = i2.raw.ser;
          if (i2.error && this.logger.error("clientSocketV2::onMessage packet error", `${i2.raw.sid}_${i2.raw.cid}, ser:${r2},`, i2.error), i2.notFound)
            return void this.logger.warn("clientSocketV2::onMessage packet not found", `${i2.raw.sid}_${i2.raw.cid}, ser:${r2}`);
          "heartbeat" !== i2.cmd && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::recvCmd ${i2.raw.sid}_${i2.raw.cid},${i2.cmd},ser:${r2}`, i2.content) : this.logger.log(`clientSocketV2::recvCmd ${i2.raw.sid}_${i2.raw.cid},${i2.cmd},ser:${r2};code:${i2.raw.code}`)), this.packetHandler(i2);
        }
    }
    packetHandler(e2) {
      var t2, i2, r2, s2;
      if (e2) {
        var o2 = e2.raw.ser, n2 = this.sendingCmdMap.get(o2);
        if (n2 && n2.cmd === e2.cmd) {
          var { callback: a2, timer: c2, params: d2 } = n2;
          if (clearTimeout(c2), e2.params = d2, this.sendingCmdMap.delete(o2), "heartbeat" === e2.cmd)
            return void a2[0]();
          var l2 = null === (i2 = null === (t2 = this.core[e2.service]) || void 0 === t2 ? void 0 : t2.process) || void 0 === i2 ? void 0 : i2.call(t2, e2);
          l2 && "function" == typeof l2.then ? l2.then((e3) => {
            a2[0](e3);
          }).catch((e3) => {
            a2[1](e3);
          }) : (this.logger.log("clientSocketV2::handlerFn without promise", e2.service, e2.cmd), a2[0](e2));
        } else {
          var p2 = null === (s2 = null === (r2 = this.core[e2.service]) || void 0 === r2 ? void 0 : r2.process) || void 0 === s2 ? void 0 : s2.call(r2, e2);
          p2 && "function" == typeof p2.then && p2.catch((e3) => {
            this.logger.error("clientSocketV2::no obj cache, no process handler", e3);
          });
        }
      }
    }
    markCmdInvalid(e2, t2, i2) {
      var r2 = this.sendingCmdMap.get(e2);
      if (r2) {
        var { callback: s2, timer: o2 } = r2;
        o2 && clearTimeout(o2), this.sendingCmdMap.delete(e2), this.logger.warn(`clientSocketV2::packet ${e2}, ${i2} is invalid:`, t2), s2[1](t2);
      }
    }
    markAllCmdInvaild(e2) {
      this.logger.log("markAllCmdInvaild", e2), this.sendingCmdMap.forEach((t2) => {
        var { callback: i2, timer: r2, cmd: s2 } = t2;
        this.logger.log(`clientSocketV2::markAllCmdInvaild:cmd ${s2}`), r2 && clearTimeout(r2), i2[1](e2);
      }), this.sendingCmdMap.clear();
    }
    ping() {
      var e2;
      return ve$1(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        try {
          yield this.sendCmd("heartbeat");
        } catch (t2) {
          if (t2.code === ie$1.V2NIM_ERROR_CODE_DISCONNECT)
            return;
          if (yield this.testHeartBeat5Timeout())
            return yield this.core.reporterHookLinkKeep.update({ code: 0, description: "Heartbeat-discovered link failure", operation_type: 1, target: null === (e2 = this.socket) || void 0 === e2 ? void 0 : e2.url }), this.core.reporterHookLinkKeep.end(true), void this.doDisconnect(jt.OFFLINE, "PingError");
        }
        this.pingTimer = setTimeout(() => {
          this.ping();
        }, 3e4);
      });
    }
    testHeartBeat5Timeout() {
      return ve$1(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        for (var e2 = 0; e2 < 5; e2++)
          try {
            return yield this.sendCmd("heartbeat", {}, { timeout: 3e3 }), false;
          } catch (t2) {
            this.logger.log(`clientSocketV2::test heartbeat ${e2} Timeout`);
          }
        return true;
      });
    }
    initOnlineListener() {
      this.hasNetworkListener || (this.logger.log("clientSocketV2::onlineListener:init"), this.hasNetworkListener = true, _e$1.net.onNetworkStatusChange((e2) => {
        this.logger.log("clientSocketV2::onlineListener:network change", e2);
        var t2 = this.auth.getConnectStatus(), i2 = this.auth.getLoginStatus();
        e2.isConnected && 1 === i2 ? this.ping() : e2.isConnected && 3 === t2 ? (this.logger.log("clientSocketV2::onlineListener:online and connectStatus is waiting, do reLogin"), this.auth.reconnect.clearReconnectTimer(), this.auth.reconnect.doReLogin()) : e2.isConnected || this.doDisconnect(jt.OFFLINE, "OfflineListener");
      }));
    }
    destroyOnlineListener() {
      this.logger.log("clientSocketV2::onlineListener:destroy"), _e$1.net.offNetworkStatusChange(), this.hasNetworkListener = false;
    }
  }
  class Kt {
    constructor(e2) {
      this.currenRetryCount = 0, this.backoff = new Tt({ max: 8e3, min: 1600, jitter: 0.01 }), this.reconnectTimer = 0, this.core = e2, this.auth = e2.V2NIMLoginService;
    }
    reset() {
      this.currenRetryCount = 0, this.backoff.reset(), this.reconnectTimer && clearTimeout(this.reconnectTimer);
    }
    clearReconnectTimer() {
      this.reconnectTimer && clearTimeout(this.reconnectTimer);
    }
    attempToReLogin() {
      var e2 = this.backoff.duration();
      if ("function" == typeof this.reconnectDelayProvider)
        try {
          var t2 = this.reconnectDelayProvider(e2);
          "number" == typeof t2 && t2 >= 0 && (e2 = t2 >= 1e3 ? t2 : t2 + 200 + Math.ceil(300 * Math.random()));
        } catch (e3) {
          this.core.logger.error("reconnect::connectDelayProvider excute failed,", e3);
        }
      return this.currenRetryCount++, this.core.logger.log(`reconnect::reconnect timer is about to be set, delay ${e2} ms, current retry count is ${this.currenRetryCount}`), this.core.reporter.reportTraceStart("login", { user_id: this.auth.getLoginUser(), action: "auto_login", binary_websocket: this.auth.binaryWebsocket }), this.clearReconnectTimer(), this.reconnectTimer = setTimeout(() => {
        this.core.logger.log("reconnect::reconnect timer is now triggered");
        var e3 = this.auth.getConnectStatus();
        3 === e3 ? this.doReLogin() : this.core.logger.warn(`reconnect::reconnect timer is over because connect status now is ${e3}`);
      }, e2), true;
    }
    doReLogin() {
      this.auth.loginOption.forceMode = false, this.auth.originLoginPromise = this.auth.doLogin(true);
      var e2 = this.auth.previousLoginManager.add(this.auth.originLoginPromise);
      return e2.then(() => {
        this.core.reporter.reportTraceEnd("login", true);
      }).catch((e3) => {
        var t2 = e3;
        if (this.core.logger.warn("reconnect::try login but failed due to", t2), this.core.reporter.reportTraceEnd("login", false), this.auth.checkLoginTerminalCode(t2 && t2.code))
          return this.auth.clientSocket.doDisconnect(bt.ACTIVE, "ReloginTerminated"), void this.auth.lifeCycle.processEvent("exited", t2);
        t2 && 399 === t2.code && this.auth.lbs.reset(), this.auth.lifeCycle.processEvent("waiting");
      }), e2;
    }
    _setReconnectDelayProvider(e2) {
      this.reconnectDelayProvider = e2;
    }
  }
  function Wt(e2) {
    e2 = e2 || [];
    for (var t2 = [], i2 = 0; i2 < e2.length; i2++)
      -1 === t2.indexOf(e2[i2]) && t2.push(e2[i2]);
    return t2;
  }
  let Jt$1 = class Jt {
    constructor(e2) {
      this.socketLinkUrls = [], this.timer = 0, this.failedCount = 0, this.core = e2, this.auth = e2.V2NIMLoginService;
    }
    getLbsInfos() {
      return ve$1(this, void 0, void 0, function* () {
        if (this.socketLinkUrls.length > 0) {
          var e2 = this.socketLinkUrls.shift();
          return this.socketLinkUrls = [], this.core.logger.log("V2NIMLoginService::getLbsInfos:use cache link", e2), Promise.resolve(e2);
        }
        this.auth.lifeCycle.processEvent("addressing"), this.core.reporterHookLBS.start(this.core.account);
        var t2 = Wt(this.auth.config.lbsUrls);
        try {
          var i2 = yield this.ladderLoad(t2);
          if (200 !== i2.status || !i2.data)
            throw this.core.logger.error("V1NIMLoginService::getLbsInfos:error status", i2.status, i2), new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: `V2NIMLoginService::getLbsInfos failed, status ${i2.status}` } });
          this.success(i2);
        } catch (e3) {
          var r2 = e3;
          if (this.core.logger.error(`V2NIMLoginService::lbs getLbsInfos error, use default link: ${this.auth.config.linkUrl}. error:`, e3), this.reportForFail(t2[0], r2.code, r2.message), this.checkTerminator(r2.code))
            throw e3;
          this.socketLinkUrls = [this.auth.config.linkUrl];
        }
        return this.socketLinkUrls.shift();
      });
    }
    checkTerminator(e2) {
      return e2 === ie$1.V2NIM_ERROR_CODE_CANCELLED || e2 === ie$1.V2NIM_ERROR_CODE_TIMEOUT;
    }
    generateUrl(e2) {
      var t2 = e2.indexOf("?") > -1 ? "&" : "?";
      return e2 + t2 + "k=" + this.core.options.appkey + "&id=" + this.core.auth.getLoginUser() + "&sv=180&pv=1&networkType=0&lv=1";
    }
    requstLbs(e2) {
      return this.auth.doLoginStepsManager.add(this.core.adapters.request(this.generateUrl(e2), { method: "GET", dataType: "json", timeout: 8e3 }));
    }
    setLadderTimer(e2, t2, i2, r2) {
      this.timer && clearTimeout(this.timer);
      var s2 = e2[t2];
      this.timer = setTimeout(() => {
        s2 && (this.setLadderTimer(e2, t2 + 1, i2, r2), this.core.logger.log(`V2NIMLoginService::getLbsInfos ${t2}:`, s2), this.reportForLbsStart(s2, t2), this.requstLbs(s2).then((e3) => {
          this.reset(), i2(Object.assign(Object.assign({}, e3), { url: s2 }));
        }).catch((i3) => {
          var o2;
          if (this.core.logger.warn(`V2NIMLoginService::getLbsInfos ${t2} failed:`, i3), this.failedCount += 1, this.reportForFailOnce(s2, i3.code, (null === (o2 = i3.detail) || void 0 === o2 ? void 0 : o2.reason) || i3.message), this.failedCount >= e2.length || this.checkTerminator(i3.code))
            return this.reset(), void r2(i3);
        }));
      }, 2e3);
    }
    ladderLoad(e2) {
      return new Promise((t2, i2) => {
        e2.length > 1 && this.setLadderTimer(e2, 1, t2, i2);
        var r2 = e2[0];
        this.core.logger.log("V2NIMLoginService::getLbsInfos 0:", r2), this.reportForLbsStart(r2, 0), this.requstLbs(r2).then((e3) => {
          this.reset(), t2(Object.assign(Object.assign({}, e3), { url: r2 }));
        }).catch((t3) => {
          var s2;
          this.failedCount += 1, this.core.logger.warn("V2NIMLoginService::getLbsInfos 0 failed:", t3), this.reportForFailOnce(r2, t3.code, (null === (s2 = t3.detail) || void 0 === s2 ? void 0 : s2.reason) || t3.message), (this.failedCount >= e2.length || this.checkTerminator(t3.code)) && (this.reset(), i2(t3));
        });
      });
    }
    success(e2) {
      var t2, i2, r2 = e2.data.common, s2 = r2["mix.link"] || [], o2 = r2["link.default"] || [];
      this.socketLinkUrls = s2.concat(o2).concat(this.auth.config.linkUrl), e2.data["nos-chunk"] && (null === (t2 = this.core.cloudStorage) || void 0 === t2 ? void 0 : t2.setOptions) && (this.core.logger.log("getLbsInfos success. lbs.nos-chunk", e2.data["nos-chunk"]), this.core.cloudStorage.setOptions({ chunkUploadHost: e2.data["nos-chunk"] })), Array.isArray(e2.data.nosup) && e2.data.nosup.length > 0 && (null === (i2 = this.core.cloudStorage) || void 0 === i2 ? void 0 : i2.setOptions) && (this.core.logger.log("getLbsInfos success. lbs.nosup", e2.data.nosup), this.core.cloudStorage.setOptions({ commonUploadHostBackupList: e2.data.nosup, commonUploadHost: e2.data.nosup[0] })), this.core.logger.log("V2NIMLoginService::getLbsInfos success, socket link:", this.socketLinkUrls.slice(0), "chunkUploadHost: ", e2.data["nos-chunk"]), this.reportForLbsSuccess(e2.url, e2.data);
    }
    reportForLbsStart(e2, t2) {
      this.core.reporterHookLBS.updateBegin({ target: e2, index: t2 });
    }
    reportForLbsSuccess(e2, t2) {
      this.core.reporterHookLBS.updateComplete({ target: e2, code: 200, body: JSON.stringify(t2) }), this.core.reporterHookLBS.end(true), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: e2, code: 200, succeed: true }, { asyncParams: _e$1.net.getNetworkStatus() });
    }
    reportForFailOnce(e2, t2, i2) {
      this.core.reporterHookLBS.updateComplete({ target: e2, code: t2, body: i2 });
    }
    reportForFail(e2, t2, i2) {
      this.core.reporterHookLBS.end(false), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: e2, description: i2, code: t2, succeed: false }, { asyncParams: _e$1.net.getNetworkStatus() });
    }
    reset() {
      this.socketLinkUrls = [], this.failedCount = 0, clearTimeout(this.timer);
    }
  };
  class zt {
    constructor(e2) {
      this.lastLoginClientKey = "__NIM_LAST_LOGIN_CLIENT__", this.loginClients = [], this.loginClientOfThisConnection = {}, this.core = e2, this.auth = e2.V2NIMLoginService;
    }
    verifyAuthentication(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = yield this.auth.doLoginStepsManager.add(this.refreshLoginToken(this.auth.account)), i2 = yield this.auth.doLoginStepsManager.add(this.refreshThirdPartyExt(this.auth.account));
        this.auth.token = t2;
        var r2, s2 = _e$1.getSystemInfo(), o2 = { appkey: this.core.options.appkey, account: this.auth.account, token: t2, authType: this.auth.loginOption.authType, appLogin: e2 ? 0 : 1, clientType: 16, clientSession: this.auth.clientSession, clientId: this.auth.deviceId, sdkVersion: 100825, userAgent: this.core.options.loginSDKTypeParamCompat ? "Native/10.8.25" : s2.userAgent.replace("{{appkey}}", this.core.options.appkey).slice(0, 299), libEnv: this.core.options.loginSDKTypeParamCompat ? void 0 : s2.libEnv, hostEnv: this.core.options.loginSDKTypeParamCompat ? 0 : s2.hostEnvEnum, sdkHumanVersion: this.core.options.flutterSdkVersion || "10.8.25", os: s2.os, browser: s2.browser, protocolVersion: 1, customClientType: this.auth.config.customClientType, customTag: this.auth.config.customTag, thirdPartyExtension: i2 }, n2 = s2.os.toLowerCase();
        "UNIAPP" !== _e$1.platform || "ios" !== n2 && "android" !== n2 && "harmonyos" !== n2 ? "React Native" === _e$1.platform && (this.core.logger.log("V2NIMLoginService deviceInfo", this.core.V2NIMLoginService.deviceInfo, "os", n2), o2.isReactNative = 1, o2.clientType = "ios" === n2 ? 2 : 1, o2.deviceInfo = JSON.stringify(Object.assign({ IS_SUPPORT_HONOR: true }, this.core.V2NIMLoginService.deviceInfo))) : (o2.isReactNative = 1, o2.clientType = "ios" === n2 ? 2 : "android" === n2 ? 1 : 65, s2.pushDeviceInfo && s2.pushDeviceInfo.MANUFACTURER && (o2.deviceInfo = JSON.stringify(Object.assign({ IS_SUPPORT_HONOR: true }, s2.pushDeviceInfo)))), this.core.logger.log("V2NIMLoginService::do login ", o2.account, o2.clientSession, o2.appLogin);
        try {
          r2 = yield this.auth.doLoginStepsManager.add(this.auth.clientSocket.sendCmd("v2Login", { tag: o2 }));
        } catch (e3) {
          var a2 = e3;
          if (this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "26-3", code: a2.code || 0, succeed: false, description: a2.message }, { asyncParams: _e$1.net.getNetworkStatus() }), a2.code === ie$1.V2NIM_ERROR_CODE_CANCELLED || a2.code === ie$1.V2NIM_ERROR_CODE_TIMEOUT)
            throw a2;
          throw this.processLoginFailed(a2), a2;
        }
        var { data: c2, loginClients: d2 } = r2.content;
        return this.changeLoginClient(1, d2), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "26-3", code: 200, succeed: true }, { asyncParams: _e$1.net.getNetworkStatus() }), this.loginClientOfThisConnection = vt(c2), this.core.clientSocket.setSessionId(c2.consid), _e$1.localStorage.setItem(this.lastLoginClientKey, JSON.stringify(Object.assign({ account: this.auth.account }, this.loginClientOfThisConnection))), this.loginClientOfThisConnection;
      });
    }
    refreshLoginToken(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (0 === this.auth.loginOption.authType)
          return this.auth.token;
        if ("function" != typeof this.auth.loginOption.tokenProvider)
          return this.auth.token;
        try {
          var t2 = yield this.auth.loginOption.tokenProvider(e2);
          if ("string" == typeof t2)
            return t2;
          throw this.core.logger.error("V2NIMLoginService::excute tokenProvider complete but got Unexpected value:", t2), new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute tokenProvider complete but got Unexpected value", rawData: t2 } });
        } catch (e3) {
          var i2 = e3, r2 = i2;
          throw i2.code !== ie$1.V2NIM_ERROR_CODE_CALLBACK_FAILED && (this.core.logger.error("V2NIMLoginService::excute tokenProvider error:", i2), r2 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CALLBACK_FAILED, desc: "Excute tokenProvider error", detail: { rawError: e3 } })), this.processLoginFailed(i2), r2;
        }
      });
    }
    refreshThirdPartyExt(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if ("function" != typeof this.auth.loginOption.loginExtensionProvider)
          return "";
        try {
          var t2 = yield this.auth.loginOption.loginExtensionProvider(e2);
          if ("string" == typeof t2)
            return t2;
          throw this.core.logger.error("V2NIMLoginService::excute loginExtensionProvider complete but got Unexpected value:", t2), new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute loginExtensionProvider complete but got Unexpected value", rawData: t2 } });
        } catch (e3) {
          var i2 = e3, r2 = i2;
          if (i2.code !== ie$1.V2NIM_ERROR_CODE_CALLBACK_FAILED && (this.core.logger.error("V2NIMLoginService::excute loginExtensionProvider error:", i2), r2 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute loginExtensionProvider error", rawError: e3 } })), 2 === this.auth.loginOption.authType)
            throw this.processLoginFailed(i2), r2;
          return "";
        }
      });
    }
    processLoginFailed(e2) {
      this.auth.clientSocket.doDisconnect(bt.ACTIVE, e2), this.checkLoginTerminalCode(e2.code) && (this.auth.authenticator.reset(), this.auth.authenticator.clearLastLoginClient()), this.auth.lifeCycle.processEvent("loginFail", e2);
    }
    changeLoginClient(e2, t2) {
      var i2 = t2.map((e3) => vt(e3));
      if (1 === e2)
        this.loginClients = i2, this.auth.emit("onLoginClientChanged", e2, this.loginClients);
      else if (2 === e2) {
        var r2 = i2.filter((e3) => {
          var t3 = this.loginClients.filter((t4) => t4.clientId === e3.clientId);
          return this.loginClients.push(e3), 0 === t3.length;
        });
        r2.length > 0 && this.auth.emit("onLoginClientChanged", e2, r2);
      } else if (3 === e2) {
        var s2 = i2.filter((e3) => (function(e4, t3) {
          t3 = t3 || (() => true);
          for (var i3 = [], r3 = (e4 = e4 || []).length, s3 = 0, o2 = 0; o2 < r3; o2++)
            t3(e4[o2 - s3]) && (i3.push(e4.splice(o2 - s3, 1)[0]), s3 += 1);
        }(this.loginClients, (t3) => t3.clientId === e3.clientId && t3.consid === e3.consid), 0 === this.loginClients.filter((t3) => t3.clientId === e3.clientId).length));
        s2.length > 0 && this.auth.emit("onLoginClientChanged", e2, s2);
      }
    }
    checkAutoLogin(e2) {
      if (e2)
        return false;
      var t2 = _e$1.localStorage.getItem(this.lastLoginClientKey);
      if (!t2)
        return false;
      var i2 = "", r2 = "";
      try {
        var s2 = JSON.parse(t2);
        i2 = Ue$1(s2, "clientId"), r2 = Ue$1(s2, "account");
      } catch (e3) {
        return false;
      }
      return i2 === this.auth.deviceId && r2 === this.auth.account;
    }
    checkLoginTerminalCode(e2) {
      return [ie$1.V2NIM_ERROR_CODE_CANCELLED, ie$1.V2NIM_ERROR_CODE_TIMEOUT, ie$1.V2NIM_ERROR_CODE_HANDSHAKE, 302, 317, ie$1.V2NIM_ERROR_CODE_FORBIDDEN, ie$1.V2NIM_ERROR_CODE_NOT_FOUND, ie$1.V2NIM_ERROR_CODE_PARAMETER_ERROR, ie$1.V2NIM_ERROR_CODE_MULTI_LOGIN_FORBIDDEN, 422, ie$1.V2NIM_ERROR_CODE_IM_DISABLED, ie$1.V2NIM_ERROR_CODE_APPKEY_NOT_EXIST, ie$1.V2NIM_ERROR_CODE_BUNDLEID_CHECK_FAILED, ie$1.V2NIM_ERROR_CODE_APPKEY_BLOCKED, ie$1.V2NIM_ERROR_CODE_INVALID_TOKEN, ie$1.V2NIM_ERROR_CODE_ROBOT_NOT_ALLOWED, ie$1.V2NIM_ERROR_CODE_ACCOUNT_NOT_EXIST, ie$1.V2NIM_ERROR_CODE_ACCOUNT_BANNED, ie$1.V2NIM_ERROR_CODE_USER_PROFILE_NOT_EXIST].includes(e2);
    }
    reset() {
      this.loginClients = [], this.loginClientOfThisConnection = {};
    }
    clearLastLoginClient() {
      _e$1.localStorage.removeItem(this.lastLoginClientKey);
    }
  }
  let Xt$1 = class Xt extends Q$1 {
    constructor(e2, t2) {
      super(), this.name = e2, this.logger = t2.logger, this.core = t2;
    }
    checkV2() {
      var e2 = this.core.options.apiVersion;
      if ("v2" === e2)
        return true;
      throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: `The version "${e2}" of client is not supported.` } });
    }
    checkLogin() {
      if (0 === this.core.V2NIMLoginService.getLoginStatus())
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: "Client logout." } });
    }
    emit(e2, ...t2) {
      this.logger.debug(`${this.name}::emit event: '${e2.toString()}',`, void 0 !== t2[0] ? t2[0] : "", void 0 !== t2[1] ? t2[1] : "", void 0 !== t2[2] ? t2[2] : "");
      try {
        return super.emit(e2, ...t2);
      } catch (t3) {
        return setTimeout(() => {
          throw this.logger.error(`${this.name}::emit throw error in setTimeout. event: ${e2.toString()}. Error`, t3), t3;
        }, 0), false;
      }
    }
    process(e2) {
      var t2 = this[e2.cmd + "Handler"], i2 = this.handler && this.handler[e2.cmd + "Handler"];
      if ("function" == typeof t2 || "function" == typeof i2) {
        if (e2.error)
          return this.logger.error(`${e2.cmd}::recvError`, e2.error), Promise.reject(e2.error);
        try {
          var r2 = t2 ? t2.call(this, e2) : i2.call(this.handler, e2);
          return Promise.resolve(r2);
        } catch (e3) {
          return Promise.reject(e3);
        }
      }
      var s2 = Ue$1(e2, "error.detail.ignore");
      return e2.error && !s2 ? Promise.reject(e2.error) : Promise.resolve(e2);
    }
  };
  class Qt {
    constructor(e2) {
      this.name = "V2NIMLoginLifeCycle", this.loginStatus = 0, this.connectStatus = 0, this.core = e2, this.auth = e2.V2NIMLoginService, this.logger = e2.logger;
    }
    processEvent(e2, t2, i2) {
      var r2 = this.getConnectStatus();
      switch (e2) {
        case "addressing":
          this.logger.log(`${this.name}::addressing`), this.setLoginStatus(2), this.setConnectStatus(2);
          break;
        case "connect":
          this.logger.log(`${this.name}::connecting`), this.setLoginStatus(2), this.setConnectStatus(2);
          break;
        case "connectSucc":
          this.logger.log(`${this.name}::connect success`), this.setLoginStatus(2), this.setConnectStatus(1);
          break;
        case "connectFail":
          this.logger.log(`${this.name}::connect fail`, t2), this.setLoginStatus(3), this.setConnectStatus(0, t2);
          break;
        case "connectionBroken":
          this.logger.log(`${this.name}::connectionBroken:`, t2), this.setLoginStatus(3), this.setConnectStatus(0, t2), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleDisconnected", t2);
          break;
        case "loginSucc":
          this.logger.log(`${this.name}::login success, verify authentication success`), this.setLoginStatus(1), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleLoginSucc", i2);
          break;
        case "loginFail":
          if (this.logger.log(`${this.name}::login fail due to verify authentication failed:`, t2), !t2)
            return;
          this.setLoginStatus(this.auth.authenticator.checkLoginTerminalCode(t2.code) ? 0 : 3), this.setConnectStatus(0, t2), this.auth.emit("onLoginFailed", t2);
          break;
        case "logout":
          this.logger.log(`${this.name}::logout`), this.setLoginStatus(0), this.setConnectStatus(0), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleLogout");
          break;
        case "kicked":
          this.logger.log(`${this.name}::kicked`, i2), this.setLoginStatus(0), this.setConnectStatus(0, t2), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleKicked");
          break;
        case "exited":
          this.logger.log(`${this.name}::exited`, t2), this.setLoginStatus(0), this.setConnectStatus(0, t2);
          break;
        case "waiting":
          this.logger.log(`${this.name}::waiting to reconnect`), this.setLoginStatus(3), this.setConnectStatus(3), 2 !== r2 && this.auth.reconnect.attempToReLogin();
      }
    }
    getConnectStatus() {
      return this.connectStatus;
    }
    getLoginStatus() {
      return this.loginStatus;
    }
    setLoginStatus(e2) {
      e2 !== this.loginStatus && (this.loginStatus = e2, this.auth.emit("onLoginStatus", e2));
    }
    setConnectStatus(e2, t2) {
      if (e2 !== this.connectStatus) {
        var i2 = this.connectStatus;
        this.connectStatus = e2, this.auth.emit("onConnectStatus", e2), this.delegateConnectEvent(i2, e2, t2);
      }
    }
    delegateConnectEvent(e2, t2, i2) {
      1 === e2 && 0 === t2 && i2 && this.auth.emit("onDisconnected", i2), 2 === e2 && 0 === t2 && i2 && this.auth.emit("onConnectFailed", i2);
    }
  }
  class Zt {
    constructor(e2) {
      this.core = e2, this.auth = e2.V2NIMLoginService, this.datas = [];
    }
    switchDataSync(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var { type: t2, state: i2, error: r2, subType: s2 } = e2, o2 = this.datas.filter((e3) => e3.type === t2 && e3.subType === s2);
        o2.length > 0 ? (o2[0].state = i2, o2[0].error = r2) : this.datas.push({ type: t2, state: i2, subType: s2 });
        var n2 = this.datas.every((e3) => 3 === e3.state);
        1 === t2 && (2 === i2 && "mainSync" === s2 ? (this.core.eventBus.emit("V2NIMLoginService/syncing"), this.auth.emit("onDataSync", t2, i2)) : 3 === i2 && n2 && (this.core.eventBus.emit("V2NIMLoginService/syncDone", r2), this.auth.emit("onDataSync", t2, i2, r2)));
      });
    }
    checkSyncing() {
      return this.datas.some((e2) => "mainSync" === e2.subType && 2 === e2.state);
    }
    reset() {
      this.datas = [];
    }
  }
  var ei = { "6_3": "notifylog", "6_4": "uploadLog", "6_23": "getServerTime", "6_31": "notifyDetect", "6_32": "uploadDetect" }, ti = { type: 1, params: 2, result: 3, t1: 100, t2: 101, t3: 102, t4: 103, t5: 104, t6: 105 }, ii = { notifylog: { sid: 6, cid: 3, service: "misc" }, uploadLog: { sid: 6, cid: 4, service: "misc", hasPacketResponse: false, params: [{ type: "String", name: "url" }, { type: "Property", name: "data", reflectMapper: { type: 1, content: 2 } }] }, getServerTime: { sid: 6, cid: 23, service: "misc", response: [{ type: "Long", name: "time" }] }, notifyDetect: { sid: 6, cid: 31, service: "misc", response: [{ type: "Property", name: "data", reflectMapper: dt(ti) }] }, uploadDetect: { sid: 6, cid: 32, service: "misc", hasPacketResponse: false, params: [{ type: "Property", name: "data", reflectMapper: ti }] } }, ri$1 = { type: { type: "number" }, t1: { type: "number" }, t2: { type: "number" }, t3: { type: "number" }, t4: { type: "number" }, t5: { type: "number" }, t6: { type: "number" } };
  let si$1 = class si extends class {
    constructor(e2, t2) {
      this.name = e2, this.core = t2, this.name = e2, this.logger = t2.logger, this.core = t2;
    }
    process(e2) {
      var t2 = this[e2.cmd + "Handler"];
      if ("function" == typeof t2)
        return t2.call(this, e2);
      var i2 = Ue$1(e2, "error.detail.ignore");
      return e2.error && !i2 ? Promise.reject(e2.error) : Promise.resolve(e2);
    }
  } {
    constructor(e2) {
      super("misc", e2), this.core = e2, ct({ cmdMap: ei, cmdConfig: ii }), this.setListener();
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.core.timeOrigin.setOriginTimetick();
      }), this.core.eventBus.on("logined", () => {
        this.core.timeOrigin.setOriginTimetick();
      });
    }
    getServerTime() {
      return ve$1(this, void 0, void 0, function* () {
        var e2 = yield this.core.clientSocket.sendCmd("getServerTime");
        return parseInt(e2.content.time);
      });
    }
    notifyDetectHandler(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = function(e3) {
          return ut(ri$1, e3);
        }(e2.content.data);
        t2.t3 = e2.__receiveTimeNode.time, t2.t4 = Date.now();
        try {
          yield this.core.clientSocket.sendCmd("uploadDetect", { data: t2 });
        } catch (e3) {
          this.core.logger.warn("misc::notifyDetectHandler:upload failed", e3);
        }
      });
    }
    notifylogHandler() {
      return ve$1(this, void 0, void 0, function* () {
        var e2 = void 0;
        try {
          e2 = yield this.core.logger.extractLogs();
        } catch (e3) {
          return;
        }
        if (e2 && "string" != typeof e2) {
          var t2 = "";
          try {
            t2 = (yield this.core.cloudStorage.uploadFile({ type: "file", file: e2 })).url;
          } catch (e3) {
            return;
          }
          if (t2) {
            t2 += (t2.indexOf("?") > 0 ? "&" : "?") + "download=" + (/* @__PURE__ */ new Date()).getTime() + "_web.log";
            try {
              yield this.core.clientSocket.sendCmd("uploadLog", { url: t2 });
            } catch (e3) {
              return;
            }
          }
        }
      });
    }
  };
  function oi(e2, t2) {
    e2 = e2 || {};
    var i2 = {};
    return (t2 = t2 || []).forEach((t3) => {
      void 0 !== e2[t3] && (i2[t3] = e2[t3]);
    }), i2;
  }
  var ni$1 = ["https://lbs.netease.im/lbs/webconf.jsp"], ai = { retryCount: 3, timeout: 6e4, forceMode: false, authType: 0, syncLevel: 0 }, ci$1 = { "27_1": "v2NIMSync", "27_10": "v2QChatSync" }, di = { v2NIMSync: { sid: 27, cid: 1, service: "V2NIMSyncService", hasPacketTimer: false, params: [{ type: "Property", name: "tag", reflectMapper: { myInfo: 1, offlineMsgs: 2, teams: 3, roamingMsgs: 7, relations: 9, friends: 11, friendUsers: 13, msgReceipts: 14, myTeamMembers: 15, donnop: 16, recallMsg: 17, sessionAck: 18, broadcastMsgs: 20, avSignal: 21, superTeams: 22, mySuperTeamMembers: 23, superTeamRoamingMsgs: 24, deleteSuperTeamMsg: 25, superTeamSessionAck: 26, deleteSelfMsgs: 27, stickTopSessions: 28, sessionHistoryMsgsDelete: 29, p2pTeamModifyMessage: 30, superTeamModifyMessage: 31, filterMsgs: 100 } }], response: [{ type: "Long", name: "timetag" }] }, v2QChatSync: { sid: 27, cid: 10, service: "V2NIMSyncService", hasPacketTimer: false, params: [{ type: "Property", name: "tag", reflectMapper: { systemNotification: 1, pushConfig: 2 } }], response: [{ type: "Long", name: "timetag" }] } }, li$1 = { debug(...e2) {
  }, log(...e2) {
  }, warn(...e2) {
  }, error(...e2) {
  } };
  function pi$1(e2) {
    li$1 = e2;
  }
  function hi() {
    return li$1;
  }
  function ui$1() {
    return !(!navigator || !navigator.userAgent) && [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i].some((e2) => navigator.userAgent.match(e2));
  }
  function mi() {
    return !(!navigator || !navigator.userAgent) && "object" == typeof navigator && "string" == typeof navigator.userAgent && navigator.userAgent.indexOf("Electron") >= 0;
  }
  function gi$1() {
    return navigator && navigator.userAgent;
  }
  var vi$1 = { clear() {
    uni.clearStorageSync();
  }, getItem: (e2) => uni.getStorageSync(e2), setItem: (e2, t2) => uni.setStorageSync(e2, t2), removeItem: (e2) => uni.removeStorageSync(e2) }, fi$1 = { wifi: 2, "2g": 3, "3g": 4, "4g": 5, "5g": 6, ethernet: 1, unknown: 0, none: 0, notreachable: 0, wwan: 0 }, yi$1 = { __onNetworkStatusChangeFn: null, getNetworkStatus() {
    var e2 = uni.getSystemInfoSync() || {};
    return "app" === e2.uniPlatform && "harmonyos" === e2.osName ? Promise.resolve({ net_type: 0, net_connect: true }) : new Promise((e3, t2) => {
      uni.getNetworkType({ success: function(t3) {
        var i2;
        i2 = "boolean" == typeof t3.networkAvailable ? t3.networkAvailable : "none" !== t3.networkType.toLowerCase(), e3({ net_type: fi$1[t3.networkType.toLowerCase()], net_connect: i2 });
      }, fail: function() {
        t2(new Error("getNetworkType failed"));
      } });
    });
  }, onNetworkStatusChange(e2) {
    this.offNetworkStatusChange(), uni.onNetworkStatusChange && (this.__onNetworkStatusChangeFn = function(t2) {
      var i2 = t2.networkType.toLowerCase();
      e2({ isConnected: t2.isConnected || "none" !== i2, networkType: fi$1[i2] });
    }, uni.onNetworkStatusChange(this.__onNetworkStatusChangeFn));
  }, offNetworkStatusChange() {
    uni.offNetworkStatusChange && (this.__onNetworkStatusChangeFn && uni.offNetworkStatusChange(this.__onNetworkStatusChangeFn), this.__onNetworkStatusChangeFn = null);
  } };
  function Ii$1(e2, t2) {
    return t2 && (t2.data = t2.data || (null == t2 ? void 0 : t2.params) || {}), new Promise((i2, r2) => {
      uni.request(Object.assign(Object.assign({ method: "GET", url: e2 }, t2), { success: function(t3) {
        "number" == typeof (t3 = t3 || {}).statusCode && t3.statusCode.toString().startsWith("2") ? (t3 = { data: t3.data, status: t3.statusCode, errMsg: t3.errMsg, header: t3.header }, i2(t3)) : r2({ code: t3.statusCode || 0, message: t3.data || `uniApp request fail. url: ${e2}` });
      }, fail: function(t3) {
        var i3 = `uniApp request fail. url: ${e2}`;
        r2(t3 ? { code: t3.errCode || 0, message: t3.errMsg || i3 } : { code: 0, message: i3 });
      } }));
    });
  }
  var _i$1 = function() {
    var e2 = uni.getSystemInfoSync() || {};
    if ("mp-weixin" === e2.uniPlatform && "undefined" != typeof wx && wx.getSystemInfoSync) {
      var t2 = wx.getSystemInfoSync();
      return `NIM/Web/UNIAPP(${e2.uniRuntimeVersion})/WeChatMiniApp(${t2.SDKVersion})/V10.8.25/{{appkey}}`;
    }
    if ("undefined" != typeof tt && tt.getSystemInfoSync) {
      var i2 = tt.getSystemInfoSync();
      return `NIM/Web/UNIAPP(${e2.uniRuntimeVersion})/TiktokMiniApp(${i2.SDKVersion})/V10.8.25/{{appkey}}`;
    }
    if ("undefined" != typeof swan && swan.getSystemInfoSync) {
      var r2 = swan.getSystemInfoSync();
      return `NIM/Web/UNIAPP(${e2.uniRuntimeVersion})/BaiduMiniApp(${r2.SDKVersion})/V10.8.25/{{appkey}}`;
    }
    if ("undefined" != typeof my && my.getSystemInfoSync) {
      var s2 = my.getSystemInfoSync();
      return `NIM/Web/UNIAPP(${e2.uniRuntimeVersion})/AliMiniApp(${s2.SDKVersion})/V10.8.25/{{appkey}}`;
    }
    if (navigator && navigator.userAgent)
      return navigator.userAgent;
    if (e2.ua)
      return e2.ua;
    var o2 = uni.getSystemInfoSync();
    return `NIM/Web/UNIAPP(${o2.uniRuntimeVersion})/${o2.osName}(${o2.osVersion})/V10.8.25/{{appkey}}`;
  }, Mi = function() {
    var e2 = uni.getSystemInfoSync() || {};
    if ("mp-weixin" === e2.uniPlatform && "undefined" != typeof wx && wx.getSystemInfoSync) {
      var t2 = wx.getSystemInfoSync();
      return `${e2.uniRuntimeVersion}/${t2.version}`;
    }
    if ("undefined" != typeof tt && tt.getSystemInfoSync) {
      var i2 = tt.getSystemInfoSync();
      return `${e2.uniRuntimeVersion}/${i2.version}`;
    }
    if ("undefined" != typeof swan && swan.getSystemInfoSync) {
      var r2 = swan.getSystemInfoSync();
      return `${e2.uniRuntimeVersion}/${r2.version}`;
    }
    if ("undefined" != typeof my && my.getSystemInfoSync) {
      var s2 = my.getSystemInfoSync();
      return `${e2.uniRuntimeVersion}/${s2.version}`;
    }
    return `${e2.uniRuntimeVersion}`;
  }, Ei$1 = function() {
    var e2 = uni.getSystemInfoSync() || {};
    if ("mp-weixin" === e2.uniPlatform && "undefined" != typeof wx && wx.getSystemInfoSync) {
      var t2 = wx.getSystemInfoSync();
      return `${e2.uniRuntimeVersion}/${t2.SDKVersion}`;
    }
    if ("undefined" != typeof tt && tt.getSystemInfoSync) {
      var i2 = tt.getSystemInfoSync();
      return `${e2.uniRuntimeVersion}/${i2.SDKVersion}`;
    }
    if ("undefined" != typeof swan && swan.getSystemInfoSync) {
      var r2 = swan.getSystemInfoSync();
      return `${e2.uniRuntimeVersion}/${r2.SDKVersion}`;
    }
    return "undefined" != typeof my && my.getSystemInfoSync ? (my.getSystemInfoSync(), `${e2.uniRuntimeVersion}/${my.SDKVersion}`) : `${e2.uniRuntimeVersion}`;
  };
  function Ti$1() {
    var e2 = function() {
      var e3 = uni.getSystemInfoSync() || {};
      return "mp-weixin" === e3.uniPlatform ? [6, "WeiXin"] : "app" === e3.uniPlatform ? [101, "H5"] : "undefined" != typeof tt && tt.getSystemInfoSync ? [104, "Tiktok"] : "undefined" != typeof swan && swan.getSystemInfoSync ? [103, "Baidu"] : "undefined" != typeof my && my.getSystemInfoSync ? [102, "Ali"] : [mi() ? 5 : ui$1() ? 101 : gi$1() ? 100 : 0, mi() ? "Electron" : ui$1() ? "H5" : gi$1() ? "BROWSER" : "Unset"];
    }(), t2 = uni.getSystemInfoSync() || {};
    return { os: t2.osName || "UNIAPP_UNKNOW", osVer: t2.osVersion, browser: t2.browserName || "", browserVer: t2.browserVersion || "", libEnv: "UNIAPP", hostEnv: e2[1], hostEnvEnum: e2[0], hostEnvVer: Mi(), userAgent: _i$1(), model: Ei$1(), manufactor: e2[1], pushDeviceInfo: { PRODUCT: t2.model, DEVICE: t2.model, MANUFACTURER: t2.brand } };
  }
  function Si$1(e2) {
    var t2 = hi(), i2 = e2.headers || {};
    return e2.md5 && (i2["Content-MD5"] = e2.md5), new Promise((r2, s2) => {
      var o2 = uni.uploadFile(Object.assign(Object.assign({ url: `${e2.commonUploadHost}/${e2.nosToken.bucket}` }, Object.keys(i2).length > 0 ? { header: i2 } : {}), { formData: { Object: decodeURIComponent(e2.nosToken.objectName), "x-nos-token": e2.nosToken.token, "x-nos-entity-type": "json" }, name: "file", fileType: e2.type, filePath: e2.filePath, success(t3) {
        if (200 == t3.statusCode)
          try {
            var i3;
            try {
              i3 = JSON.parse(t3.data);
            } catch (e3) {
              i3 = {};
            }
            i3.name = e2.filePath, i3.ext = i3.name.lastIndexOf(".") > -1 ? i3.name.slice(i3.name.lastIndexOf(".") + 1).toLowerCase() : "", r2(i3);
          } catch (e3) {
            s2(new Error(`Upload Error parse result error: ${t3.data}`));
          }
        else
          s2(new Error(`Upload error ${t3.statusCode}: ${t3.errMsg}`));
      }, fail(e3) {
        "uploadFile:fail abort" === e3.errMsg && (e3.code = ie$1.V2NIM_ERROR_CODE_CANCELLED), e3.message = e3.errMsg, s2(e3);
      } }));
      try {
        e2.onUploadStart && e2.onUploadStart(o2);
      } catch (e3) {
        t2.error("Adapter uploadFile: options.onUploadStart error", e3 && e3.message), o2.abort(), s2(e3);
      }
      e2.onUploadProgress && o2.onProgressUpdate(function(t3) {
        e2.onUploadProgress && e2.onUploadProgress({ total: t3.totalBytesExpectedToSend, loaded: t3.totalBytesSent, percentage: parseFloat((t3.totalBytesSent / t3.totalBytesExpectedToSend).toFixed(2)), percentageText: t3.progress + "%" });
      });
    });
  }
  function Ci(e2) {
    return null;
  }
  let Ni$1 = class Ni {
    constructor(e2, t2 = "") {
      if (this.CONNECTING = 0, this.OPEN = 1, this.CLOSING = 2, this.CLOSED = 3, this.binaryType = "", this.onclose = function(e3) {
        hi().log("Adapter uniapp: sockets on close ", e3);
      }, this.onerror = function(e3) {
        hi().error("Adapter uniapp: sockets error ", e3);
      }, this.onmessage = function(e3) {
      }, this.onopen = function() {
      }, !e2)
        throw new Error("Failed to construct 'socket': url required");
      this.url = e2.replace(/:443(\/|$)/, "$1"), this.protocol = t2, this.readyState = this.CONNECTING;
      var i2 = this.protocol ? { protocols: this.protocol } : {};
      this.socketTask = uni.connectSocket(Object.assign(Object.assign({ url: this.url }, i2), { multiple: true, fail: (e3) => {
        this.errorHandler(e3);
      } })), this.socketTask.onOpen((e3) => {
        hi().log("Adapter uniapp:: onOpen. event: ", e3), this.readyState = this.OPEN, this.binaryType ? this.onopen() : this.onmessage && this.onmessage({ type: "open", header: e3 });
      }), this.socketTask.onError((e3) => {
        hi().log("Adapter uniapp:: onError. event: ", e3), this.errorHandler(e3);
      }), this.socketTask.onClose((e3) => {
        this.readyState = this.CLOSED, "function" == typeof this.onclose && (this.onclose && this.onclose(e3), hi().log("Adapter uniapp:: onClose. event: ", e3)), this.socketTask = null;
      }), this.socketTask.onMessage((e3) => {
        var t3;
        t3 = "string" == typeof e3.data || e3.data instanceof ArrayBuffer ? e3.data : e3.data.isBuffer && "string" == typeof e3.data.data ? function(e4) {
          for (var t4 = function(e5) {
            var t5 = String(e5).replace(/[=]+$/, "");
            if (t5.length % 4 == 1)
              throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
            for (var i4, r3 = "", s3 = 0, o2 = 0, n2 = 0; i4 = t5.charAt(n2++); ~i4 && (o2 = s3 % 4 ? 64 * o2 + i4 : i4, s3++ % 4) ? r3 += String.fromCharCode(255 & o2 >> (-2 * s3 & 6)) : 0)
              i4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(i4);
            return r3;
          }(e4), i3 = t4.length, r2 = new Uint8Array(i3), s2 = 0; s2 < i3; s2++)
            r2[s2] = t4.charCodeAt(s2);
          return r2.buffer;
        }(e3.data.data) : e3.data.data, this.onmessage && this.onmessage({ data: t3 });
      });
    }
    close() {
      hi().log("Adapter uniapp:: close uni socket actively"), this.socketTask.close({ code: 1e3, reason: "user force close websocket", complete: () => {
        this.socketTask = null;
      } });
    }
    send(e2) {
      if (this.readyState !== this.OPEN)
        throw new Error(`Adapter uniapp:: socket sendMsg when readyState=${this.readyState}`);
      if (!("string" == typeof e2 || e2 instanceof ArrayBuffer))
        throw new TypeError("Adapter uniapp:: socket sendMsg only String/ArrayBuffer supported");
      this.socketTask.send({ data: e2 });
    }
    errorHandler(e2) {
      hi().error("Adapter uniapp:: errorHandler. event: ", e2), this.readyState = this.CLOSED, this.onerror && this.onerror({ type: "error", message: e2 && e2.errMsg }), e2.errMsg && "[object Array]" === Object.prototype.toString.call(e2.errMsg) && (e2.errMsg.indexOf("断裂管道") > 0 || e2.errMsg.indexOf("broken pipe") > 0) && this.onclose && this.onclose(e2);
    }
  };
  r(function(e2, t2) {
    e2.exports = /* @__PURE__ */ function() {
      class e3 extends Error {
        constructor(e4, t3, i2, r2) {
          super(i2), this.source = e4, this.code = t3, this.desc = i2, this.detail = r2 || {};
        }
      }
      return function(t3, i2 = { dataType: "json", method: "GET", timeout: 5e3 }) {
        var r2 = "text" === i2.dataType ? "text/plain; charset=UTF-8" : "application/json; charset=UTF-8", s2 = "GET" === i2.method ? function(e4) {
          if (e4) {
            var t4 = "";
            return Object.keys(e4).forEach(function(i3, r3) {
              t4 += 0 === r3 ? "?" : "&", t4 += `${i3}=${e4[i3]}`;
            }), t4;
          }
          return "";
        }(i2.params) : "";
        return new Promise(function(o2, n2) {
          if (window.XMLHttpRequest) {
            var a2, c2 = new XMLHttpRequest();
            if (c2.onreadystatechange = function() {
              if (4 === c2.readyState)
                if (200 === c2.status) {
                  try {
                    a2 = JSON.parse(c2.response || "{}");
                  } catch (e4) {
                    a2 = c2.response;
                  }
                  o2({ status: c2.status, data: a2 });
                } else
                  setTimeout(() => {
                    n2(new e3(1, c2.status, `readyState: ${c2.readyState}; statusText: ${c2.statusText}`));
                  }, 0);
            }, c2.open(i2.method, `${t3}${s2}`), c2.timeout = i2.timeout || 5e3, c2.setRequestHeader("Content-Type", r2), i2.headers)
              for (var d2 in i2.headers)
                c2.setRequestHeader(d2, i2.headers[d2]);
            c2.ontimeout = function(t4) {
              n2(new e3(1, 408, t4 && t4.message ? t4.message : "request timeout"));
            }, c2.send(JSON.stringify(i2.data));
          } else
            n2(new e3(2, 10400, "request no suppout"));
        });
      };
    }();
  }), r(function(e2, t2) {
    e2.exports = function() {
      var e3 = { d: function(t4, i3) {
        for (var r3 in i3)
          e3.o(i3, r3) && !e3.o(t4, r3) && Object.defineProperty(t4, r3, { enumerable: true, get: i3[r3] });
      }, o: function(e4, t4) {
        return Object.prototype.hasOwnProperty.call(e4, t4);
      } }, t3 = {};
      e3.d(t3, { default: function() {
        return I2;
      } });
      var i2 = function e4(t4) {
        for (var i3 in function(e5, t5) {
          if (!(e5 instanceof t5))
            throw new TypeError("Cannot call a class as a function");
        }(this, e4), this.directUploadAddr = "https://wanproxy-web.127.net", this.retryCount = 4, this.trunkSize = 4194304, this.trunkUploadTimeout = 5e4, this.getOffsetTimeout = 1e4, this.version = "1.0", this.enableCache = true, this.logger = console, this.onError = function(e5) {
        }, this.onProgress = function(e5) {
        }, this.onUploadProgress = function(e5) {
        }, this.onComplete = function(e5) {
        }, t4)
          this[i3] = t4[i3];
      };
      function r2(e4, t4) {
        var i3 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
        if (!i3) {
          if (Array.isArray(e4) || (i3 = function(e5, t5) {
            if (e5) {
              if ("string" == typeof e5)
                return s2(e5, t5);
              var i4 = Object.prototype.toString.call(e5).slice(8, -1);
              return "Object" === i4 && e5.constructor && (i4 = e5.constructor.name), "Map" === i4 || "Set" === i4 ? Array.from(e5) : "Arguments" === i4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i4) ? s2(e5, t5) : void 0;
            }
          }(e4)) || t4 && e4 && "number" == typeof e4.length) {
            i3 && (e4 = i3);
            var r3 = 0, o3 = function() {
            };
            return { s: o3, n: function() {
              return r3 >= e4.length ? { done: true } : { done: false, value: e4[r3++] };
            }, e: function(e5) {
              throw e5;
            }, f: o3 };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var n3, a3 = true, c3 = false;
        return { s: function() {
          i3 = i3.call(e4);
        }, n: function() {
          var e5 = i3.next();
          return a3 = e5.done, e5;
        }, e: function(e5) {
          c3 = true, n3 = e5;
        }, f: function() {
          try {
            a3 || null == i3.return || i3.return();
          } finally {
            if (c3)
              throw n3;
          }
        } };
      }
      function s2(e4, t4) {
        (null == t4 || t4 > e4.length) && (t4 = e4.length);
        for (var i3 = 0, r3 = new Array(t4); i3 < t4; i3++)
          r3[i3] = e4[i3];
        return r3;
      }
      var o2 = { privateObj: {}, setItem: function(e4, t4) {
        o2.privateObj[e4] = t4;
      }, getItem: function(e4) {
        return o2.privateObj[e4];
      }, removeItem: function(e4) {
        delete o2.privateObj[e4];
      }, getKeys: function() {
        return Object.keys(o2.privateObj);
      } }, n2 = { getFileKey: function(e4) {
        var t4 = e4.size.toString(), i3 = e4.lastModified.toString();
        return "_NosUploader_" + e4.name + t4.slice(t4.length - 5) + i3.slice(i3.length - 5);
      }, getFileInfo: function(e4) {
        var t4 = o2.getItem(e4);
        if (!t4)
          return null;
        try {
          return JSON.parse(t4);
        } catch (e5) {
          return null;
        }
      }, initFile: function(e4, t4, i3) {
        n2.clearExpiredInfo();
        var r3 = this.getFileKey(t4), s3 = { ctx: void 0 !== e4.ctx ? e4.ctx : "", bucket: e4.bucketName, obj: e4.objectName, token: e4.token, modifyAt: Date.now(), end: false };
        return e4.payload && (s3.payload = e4.payload), i3 && o2.setItem(r3, JSON.stringify(s3)), r3;
      }, setUploadContext: function(e4, t4, i3) {
        var r3 = this.getFileInfo(e4);
        r3 && (r3.ctx = t4, i3 && o2.setItem(e4, JSON.stringify(r3)));
      }, setComplete: function(e4, t4) {
        var i3 = this.getFileInfo(e4);
        i3 && (i3.modifyAt = Date.now(), i3.end = true, t4 && o2.setItem(e4, JSON.stringify(i3)));
      }, getUploadContext: function(e4) {
        var t4 = this.getFileInfo(e4);
        return t4 ? t4.ctx : "";
      }, removeFileInfo: function(e4) {
        0 === e4.indexOf("_NosUploader_") && o2.removeItem(e4);
      }, clearExpiredInfo: function() {
        var e4, t4 = "function" == typeof o2.getKeys ? o2.getKeys() : Object.keys(o2), i3 = Date.now(), s3 = [], a3 = r2(t4);
        try {
          for (a3.s(); !(e4 = a3.n()).done; ) {
            var c3 = e4.value;
            if (0 === c3.indexOf("_NosUploader_")) {
              var d3 = n2.getFileInfo(c3);
              null === d3 || i3 - d3.modifyAt > I2.expireTime ? o2.removeItem(c3) : s3.push({ fileInfo: d3, key: c3 });
            }
          }
        } catch (e5) {
          a3.e(e5);
        } finally {
          a3.f();
        }
        if (s3.length > I2.maxFileCache) {
          var l3, p3 = r2(s3.sort(function(e5, t5) {
            return t5.fileInfo.modifyAt - e5.fileInfo.modifyAt;
          }).slice(I2.maxFileCache));
          try {
            for (p3.s(); !(l3 = p3.n()).done; ) {
              var h3 = l3.value;
              0 === h3.key.indexOf("_NosUploader_") && o2.removeItem(h3.key);
            }
          } catch (e5) {
            p3.e(e5);
          } finally {
            p3.f();
          }
        }
      } }, a2 = n2;
      function c2(e4) {
        return (c2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e5) {
          return typeof e5;
        } : function(e5) {
          return e5 && "function" == typeof Symbol && e5.constructor === Symbol && e5 !== Symbol.prototype ? "symbol" : typeof e5;
        })(e4);
      }
      function d2(e4) {
        var t4 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
        return (d2 = function(e5) {
          if (null === e5 || (i3 = e5, -1 === Function.toString.call(i3).indexOf("[native code]")))
            return e5;
          var i3;
          if ("function" != typeof e5)
            throw new TypeError("Super expression must either be null or a function");
          if (void 0 !== t4) {
            if (t4.has(e5))
              return t4.get(e5);
            t4.set(e5, r3);
          }
          function r3() {
            return l2(e5, arguments, u2(this).constructor);
          }
          return r3.prototype = Object.create(e5.prototype, { constructor: { value: r3, enumerable: false, writable: true, configurable: true } }), h2(r3, e5);
        })(e4);
      }
      function l2(e4, t4, i3) {
        return (l2 = p2() ? Reflect.construct : function(e5, t5, i4) {
          var r3 = [null];
          r3.push.apply(r3, t5);
          var s3 = new (Function.bind.apply(e5, r3))();
          return i4 && h2(s3, i4.prototype), s3;
        }).apply(null, arguments);
      }
      function p2() {
        if ("undefined" == typeof Reflect || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if ("function" == typeof Proxy)
          return true;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), true;
        } catch (e4) {
          return false;
        }
      }
      function h2(e4, t4) {
        return (h2 = Object.setPrototypeOf || function(e5, t5) {
          return e5.__proto__ = t5, e5;
        })(e4, t4);
      }
      function u2(e4) {
        return (u2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(e5) {
          return e5.__proto__ || Object.getPrototypeOf(e5);
        })(e4);
      }
      var m2 = function(e4) {
        !function(e5, t5) {
          if ("function" != typeof t5 && null !== t5)
            throw new TypeError("Super expression must either be null or a function");
          e5.prototype = Object.create(t5 && t5.prototype, { constructor: { value: e5, writable: true, configurable: true } }), t5 && h2(e5, t5);
        }(s3, e4);
        var t4, i3, r3 = (t4 = s3, i3 = p2(), function() {
          var e5, r4 = u2(t4);
          if (i3) {
            var s4 = u2(this).constructor;
            e5 = Reflect.construct(r4, arguments, s4);
          } else
            e5 = r4.apply(this, arguments);
          return function(e6, t5) {
            return !t5 || "object" !== c2(t5) && "function" != typeof t5 ? function(e7) {
              if (void 0 === e7)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return e7;
            }(e6) : t5;
          }(this, e5);
        });
        function s3(e5, t5) {
          var i4;
          return function(e6, t6) {
            if (!(e6 instanceof t6))
              throw new TypeError("Cannot call a class as a function");
          }(this, s3), (i4 = r3.call(this, "NosUploadError:" + e5)).errCode = t5, i4.errMsg = e5, i4;
        }
        return s3;
      }(d2(Error)), g2 = function e4(t4, i3, r3) {
        if ("uploading" === t4.uploadState) {
          var s3 = t4.config, o3 = t4.param, n3 = a2.getUploadContext(t4.fileKey);
          if (!n3)
            return r3(0);
          var c3 = new XMLHttpRequest(), d3 = s3.directUploadAddr + "/".concat(o3.bucketName) + "/".concat(encodeURIComponent(o3.objectName)) + "?uploadContext" + "&context=".concat(n3) + "&version=".concat(s3.version);
          c3.onreadystatechange = function() {
            var o4;
            if ("abort" !== t4.uploadState && 4 === c3.readyState) {
              var n4;
              try {
                n4 = JSON.parse(c3.responseText);
              } catch (e5) {
                n4 = { errMsg: "JsonParseError in getOffset. xhr.status = " + c3.status + ". xhr.responseText: " + c3.responseText, errCode: 500 };
              }
              200 === c3.status ? n4.errCode ? t4.config.onError(new m2(n4.errMsg, n4.errCode)) : r3(n4.offset) : c3.status.toString().match(/^5/) ? e4(t4, i3 - 1, r3) : i3 > 0 ? ("function" == typeof (null === (o4 = s3.logger) || void 0 === o4 ? void 0 : o4.error) && s3.logger.error("getOffset(".concat(d3, ") error. retry after 3 seconds. ").concat((/* @__PURE__ */ new Date()).toTimeString())), setTimeout(function() {
                e4(t4, i3 - 1, r3);
              }, 3500)) : c3.status ? (a2.removeFileInfo(t4.fileKey), s3.onError(new m2("getOffset(".concat(d3, ") error: ").concat(c3.status, " ").concat(c3.statusText)))) : s3.onError(new m2("getOffset(".concat(d3, ") error. no Error Code")));
            }
          }, c3.open("get", d3), c3.setRequestHeader("x-nos-token", o3.token), c3.timeout = s3.getOffsetTimeout, c3.send();
        }
      }, v2 = function e4(t4, i3, r3, s3) {
        if ("uploading" === t4.uploadState) {
          var o3 = t4.param, n3 = t4.config, c3 = File.prototype.slice, d3 = void 0 !== o3.ctx ? o3.ctx : "", l3 = i3 + n3.trunkSize >= t4.file.size, p3 = l3 ? t4.file.size : i3 + n3.trunkSize, h3 = new XMLHttpRequest(), u3 = n3.directUploadAddr + "/".concat(o3.bucketName) + "/".concat(encodeURIComponent(o3.objectName));
          if (h3.upload.onprogress = function(e5) {
            if ("abort" !== t4.uploadState) {
              var r4 = 0;
              e5.lengthComputable ? (r4 = (i3 + e5.loaded) / t4.file.size, n3.onProgress(r4), n3.onUploadProgress({ loaded: e5.loaded, total: t4.file.size, percentage: r4, percentageText: (100 * r4).toFixed(2) + "%" })) : n3.onError(new m2("browser does not support query upload progress"));
            }
          }, h3.onreadystatechange = function() {
            var o4, c4;
            if ("abort" !== t4.uploadState && 4 === h3.readyState) {
              var d4;
              try {
                d4 = JSON.parse(h3.responseText);
              } catch (e5) {
                "function" == typeof (null === (o4 = n3.logger) || void 0 === o4 ? void 0 : o4.error) && n3.logger.error("JsonParseError in uploadTrunk. xhr.status = " + h3.status + ". xhr.responseText: " + h3.responseText, e5), d4 = { errMsg: "JsonParseError in uploadTrunk. xhr.status = " + h3.status + ". xhr.responseText: " + h3.responseText };
              }
              200 === h3.status ? (t4.setContext(d4.context), l3 ? (s3(), t4.setComplete()) : e4(t4, d4.offset, n3.retryCount, s3)) : h3.status.toString().match(/^5/) ? r3 > 0 ? e4(t4, i3, r3 - 1, s3) : (a2.removeFileInfo(t4.fileKey), n3.onError(new m2(d4.errMsg, d4.errCode))) : r3 > 0 ? ("function" == typeof (null === (c4 = n3.logger) || void 0 === c4 ? void 0 : c4.error) && n3.logger.error("uploadTrunk(".concat(u3, ") error. retry after 3 seconds. ").concat((/* @__PURE__ */ new Date()).toTimeString())), setTimeout(function() {
                e4(t4, i3, r3 - 1, s3);
              }, 3500)) : h3.status ? (a2.removeFileInfo(t4.fileKey), n3.onError(new m2("uploadTrunk(".concat(u3, ") error: ").concat(h3.status, " ").concat(h3.statusText)))) : n3.onError(new m2("uploadTrunk(".concat(u3, ") error. no Error Code. Please check your network")));
            }
          }, h3.open("post", u3 + "?offset=".concat(i3) + "&complete=".concat(l3) + "&context=".concat(d3) + "&version=".concat(n3.version)), h3.setRequestHeader("x-nos-token", o3.token), o3.md5 && h3.setRequestHeader("content-md5", o3.md5), t4.file.type && h3.setRequestHeader("content-type", t4.file.type), h3.timeout = n3.trunkUploadTimeout, "undefined" != typeof FileReader) {
            var g3 = new FileReader();
            g3.addEventListener("load", function(e5) {
              var t5;
              (null === (t5 = null == e5 ? void 0 : e5.target) || void 0 === t5 ? void 0 : t5.result) instanceof ArrayBuffer && e5.target.result.byteLength > 0 ? h3.send(e5.target.result) : n3.onError(new m2("Read ArrayBuffer failed", 194003));
            }), g3.addEventListener("error", function(e5) {
              var t5 = e5.target.error;
              n3.onError(new m2("Read ArrayBuffer error. ".concat(t5.toString()), 194003));
            }), g3.readAsArrayBuffer(c3.call(t4.file, i3, p3));
          } else
            h3.send(c3.call(t4.file, i3, p3));
        }
      }, f2 = function() {
        function e4(t5, i3, r3) {
          !function(e5, t6) {
            if (!(e5 instanceof t6))
              throw new TypeError("Cannot call a class as a function");
          }(this, e4), this.uploadState = "paused", this.config = r3, this.file = t5, this.param = i3, this.fileKey = a2.initFile(i3, t5, this.config.enableCache), this.resume();
        }
        var t4;
        return (t4 = [{ key: "resume", value: function() {
          var e5 = this;
          if ("uploading" !== this.uploadState) {
            this.setUploadState("uploading");
            var t5 = this.config;
            g2(this, t5.retryCount, function(i3) {
              v2(e5, i3, t5.retryCount, function() {
                e5.setUploadState("ended"), "function" == typeof t5.onComplete && t5.onComplete(e5.param);
              });
            });
          }
        } }, { key: "pause", value: function() {
          this.setUploadState("paused");
        } }, { key: "abort", value: function() {
          "ended" !== this.uploadState && "abort" !== this.uploadState && (this.setUploadState("abort"), this.config.onError(new m2("Upload Aborted", 10499)));
        } }, { key: "setUploadState", value: function(e5) {
          e5 !== this.uploadState && (this.uploadState = e5);
        } }, { key: "setContext", value: function(e5) {
          a2.setUploadContext(this.fileKey, e5, this.config.enableCache), this.param.ctx = e5;
        } }, { key: "setComplete", value: function() {
          a2.setComplete(this.fileKey, this.config.enableCache), this.setUploadState("ended");
        } }]) && function(e5, t5) {
          for (var i3 = 0; i3 < t5.length; i3++) {
            var r3 = t5[i3];
            r3.enumerable = r3.enumerable || false, r3.configurable = true, "value" in r3 && (r3.writable = true), Object.defineProperty(e5, r3.key, r3);
          }
        }(e4.prototype, t4), e4;
      }(), y2 = { maxFileCache: 1 / 0, expireTime: 864e5, getFileUploadInformation: function(e4) {
        var t4 = a2.getFileKey(e4), i3 = a2.getFileInfo(t4);
        return null === i3 ? null : Date.now() - i3.modifyAt > y2.expireTime ? (a2.removeFileInfo(t4), null) : { uploadInfo: Object.assign({ bucketName: i3.bucket, objectName: i3.obj, token: i3.token, ctx: i3.ctx }, i3.payload ? { payload: i3.payload } : {}), complete: i3.end };
      }, setMaxFileCache: function(e4) {
        y2.maxFileCache = e4;
      }, setExpireTime: function(e4) {
        y2.expireTime = e4;
      }, printCaches: function() {
        if ("undefined" != typeof localStorage)
          for (var e4 = 0, t4 = Object.keys(localStorage); e4 < t4.length; e4++) {
            var i3 = t4[e4], r3 = a2.getFileInfo(i3);
            r3 && formatAppLog("log", "at esmNim.js:2", r3, "modifiedAt", new Date(r3.modifyAt).toTimeString());
          }
      }, createConfig: function(e4) {
        return new i2(e4);
      }, createTask: function(e4, t4, i3) {
        return new f2(e4, t4, i3);
      } }, I2 = y2;
      return t3.default;
    }();
  }), r(function(e2, t2) {
    (function() {
      var r2 = { function: true, object: true }[typeof window] && window || this, s2 = t2, o2 = e2 && !e2.nodeType && e2, n2 = s2 && o2 && "object" == typeof i && i;
      !n2 || n2.global !== n2 && n2.window !== n2 && n2.self !== n2 || (r2 = n2);
      var a2 = Math.pow(2, 53) - 1, c2 = /\bOpera/, d2 = Object.prototype, l2 = d2.hasOwnProperty, p2 = d2.toString;
      function h2(e3) {
        return (e3 = String(e3)).charAt(0).toUpperCase() + e3.slice(1);
      }
      function u2(e3) {
        return e3 = y2(e3), /^(?:webOS|i(?:OS|P))/.test(e3) ? e3 : h2(e3);
      }
      function m2(e3, t3) {
        for (var i2 in e3)
          l2.call(e3, i2) && t3(e3[i2], i2, e3);
      }
      function g2(e3) {
        return null == e3 ? h2(e3) : p2.call(e3).slice(8, -1);
      }
      function v2(e3) {
        return String(e3).replace(/([ -])(?!$)/g, "$1?");
      }
      function f2(e3, t3) {
        var i2 = null;
        return function(e4, t4) {
          var i3 = -1, r3 = e4 ? e4.length : 0;
          if ("number" == typeof r3 && r3 > -1 && r3 <= a2)
            for (; ++i3 < r3; )
              t4(e4[i3], i3);
          else
            m2(e4, t4);
        }(e3, function(r3, s3) {
          i2 = t3(i2, r3, s3, e3);
        }), i2;
      }
      function y2(e3) {
        return String(e3).replace(/^ +| +$/g, "");
      }
      var I2 = function e3(t3) {
        var i2 = r2, s3 = t3 && "object" == typeof t3 && "String" != g2(t3);
        s3 && (i2 = t3, t3 = null);
        var o3 = i2.navigator || {}, n3 = o3.userAgent || "";
        t3 || (t3 = n3);
        var a3, d3, l3 = s3 ? !!o3.likeChrome : /\bChrome\b/.test(t3) && !/internal|\n/i.test(p2.toString()), h3 = "Object", I3 = s3 ? h3 : "ScriptBridgingProxyObject", _2 = s3 ? h3 : "Environment", M2 = s3 && i2.java ? "JavaPackage" : g2(i2.java), E2 = s3 ? h3 : "RuntimeObject", T2 = /\bJava/.test(M2) && i2.java, S2 = T2 && g2(i2.environment) == _2, C2 = T2 ? "a" : "α", N2 = T2 ? "b" : "β", O2 = i2.document || {}, R2 = i2.operamini || i2.opera, A2 = c2.test(A2 = s3 && R2 ? R2["[[Class]]"] : g2(R2)) ? A2 : R2 = null, b2 = t3, k2 = [], V2 = null, L2 = t3 == n3, P2 = L2 && R2 && "function" == typeof R2.version && R2.version(), D2 = f2([{ label: "EdgeHTML", pattern: "Edge" }, "Trident", { label: "WebKit", pattern: "AppleWebKit" }, "iCab", "Presto", "NetFront", "Tasman", "KHTML", "Gecko"], function(e4, i3) {
          return e4 || RegExp("\\b" + (i3.pattern || v2(i3)) + "\\b", "i").exec(t3) && (i3.label || i3);
        }), w2 = f2(["Adobe AIR", "Arora", "Avant Browser", "Breach", "Camino", "Electron", "Epiphany", "Fennec", "Flock", "Galeon", "GreenBrowser", "iCab", "Iceweasel", "K-Meleon", "Konqueror", "Lunascape", "Maxthon", { label: "Microsoft Edge", pattern: "(?:Edge|Edg|EdgA|EdgiOS)" }, "Midori", "Nook Browser", "PaleMoon", "PhantomJS", "Raven", "Rekonq", "RockMelt", { label: "Samsung Internet", pattern: "SamsungBrowser" }, "SeaMonkey", { label: "Silk", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Sleipnir", "SlimBrowser", { label: "SRWare Iron", pattern: "Iron" }, "Sunrise", "Swiftfox", "Vivaldi", "Waterfox", "WebPositive", { label: "Yandex Browser", pattern: "YaBrowser" }, { label: "UC Browser", pattern: "UCBrowser" }, "Opera Mini", { label: "Opera Mini", pattern: "OPiOS" }, "Opera", { label: "Opera", pattern: "OPR" }, "Chromium", "Chrome", { label: "Chrome", pattern: "(?:HeadlessChrome)" }, { label: "Chrome Mobile", pattern: "(?:CriOS|CrMo)" }, { label: "Firefox", pattern: "(?:Firefox|Minefield)" }, { label: "Firefox for iOS", pattern: "FxiOS" }, { label: "IE", pattern: "IEMobile" }, { label: "IE", pattern: "MSIE" }, "Safari"], function(e4, i3) {
          return e4 || RegExp("\\b" + (i3.pattern || v2(i3)) + "\\b", "i").exec(t3) && (i3.label || i3);
        }), U2 = B2([{ label: "BlackBerry", pattern: "BB10" }, "BlackBerry", { label: "Galaxy S", pattern: "GT-I9000" }, { label: "Galaxy S2", pattern: "GT-I9100" }, { label: "Galaxy S3", pattern: "GT-I9300" }, { label: "Galaxy S4", pattern: "GT-I9500" }, { label: "Galaxy S5", pattern: "SM-G900" }, { label: "Galaxy S6", pattern: "SM-G920" }, { label: "Galaxy S6 Edge", pattern: "SM-G925" }, { label: "Galaxy S7", pattern: "SM-G930" }, { label: "Galaxy S7 Edge", pattern: "SM-G935" }, "Google TV", "Lumia", "iPad", "iPod", "iPhone", "Kindle", { label: "Kindle Fire", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Nexus", "Nook", "PlayBook", "PlayStation Vita", "PlayStation", "TouchPad", "Transformer", { label: "Wii U", pattern: "WiiU" }, "Wii", "Xbox One", { label: "Xbox 360", pattern: "Xbox" }, "Xoom"]), x2 = f2({ Apple: { iPad: 1, iPhone: 1, iPod: 1 }, Alcatel: {}, Archos: {}, Amazon: { Kindle: 1, "Kindle Fire": 1 }, Asus: { Transformer: 1 }, "Barnes & Noble": { Nook: 1 }, BlackBerry: { PlayBook: 1 }, Google: { "Google TV": 1, Nexus: 1 }, HP: { TouchPad: 1 }, HTC: {}, Huawei: {}, Lenovo: {}, LG: {}, Microsoft: { Xbox: 1, "Xbox One": 1 }, Motorola: { Xoom: 1 }, Nintendo: { "Wii U": 1, Wii: 1 }, Nokia: { Lumia: 1 }, Oppo: {}, Samsung: { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 }, Sony: { PlayStation: 1, "PlayStation Vita": 1 }, Xiaomi: { Mi: 1, Redmi: 1 } }, function(e4, i3, r3) {
          return e4 || (i3[U2] || i3[/^[a-z]+(?: +[a-z]+\b)*/i.exec(U2)] || RegExp("\\b" + v2(r3) + "(?:\\b|\\w*\\d)", "i").exec(t3)) && r3;
        }), F2 = f2(["Windows Phone", "KaiOS", "Android", "CentOS", { label: "Chrome OS", pattern: "CrOS" }, "Debian", { label: "DragonFly BSD", pattern: "DragonFly" }, "Fedora", "FreeBSD", "Gentoo", "Haiku", "Kubuntu", "Linux Mint", "OpenBSD", "Red Hat", "SuSE", "Ubuntu", "Xubuntu", "Cygwin", "Symbian OS", "hpwOS", "webOS ", "webOS", "Tablet OS", "Tizen", "Linux", "Mac OS X", "Macintosh", "Mac", "Windows 98;", "Windows "], function(e4, i3) {
          var r3 = i3.pattern || v2(i3);
          return !e4 && (e4 = RegExp("\\b" + r3 + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(t3)) && (e4 = function(e5, t4, i4) {
            var r4 = { "10.0": "10", 6.4: "10 Technical Preview", 6.3: "8.1", 6.2: "8", 6.1: "Server 2008 R2 / 7", "6.0": "Server 2008 / Vista", 5.2: "Server 2003 / XP 64-bit", 5.1: "XP", 5.01: "2000 SP1", "5.0": "2000", "4.0": "NT", "4.90": "ME" };
            return t4 && i4 && /^Win/i.test(e5) && !/^Windows Phone /i.test(e5) && (r4 = r4[/[\d.]+$/.exec(e5)]) && (e5 = "Windows " + r4), e5 = String(e5), t4 && i4 && (e5 = e5.replace(RegExp(t4, "i"), i4)), u2(e5.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]);
          }(e4, r3, i3.label || i3)), e4;
        });
        function B2(e4) {
          return f2(e4, function(e5, i3) {
            var r3 = i3.pattern || v2(i3);
            return !e5 && (e5 = RegExp("\\b" + r3 + " *\\d+[.\\w_]*", "i").exec(t3) || RegExp("\\b" + r3 + " *\\w+-[\\w]*", "i").exec(t3) || RegExp("\\b" + r3 + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(t3)) && ((e5 = String(i3.label && !RegExp(r3, "i").test(i3.label) ? i3.label : e5).split("/"))[1] && !/[\d.]+/.test(e5[0]) && (e5[0] += " " + e5[1]), i3 = i3.label || i3, e5 = u2(e5[0].replace(RegExp(r3, "i"), i3).replace(RegExp("; *(?:" + i3 + "[_-])?", "i"), " ").replace(RegExp("(" + i3 + ")[-_.]?(\\w)", "i"), "$1 $2"))), e5;
          });
        }
        function j2(e4) {
          return f2(e4, function(e5, i3) {
            return e5 || (RegExp(i3 + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(t3) || 0)[1] || null;
          });
        }
        if (D2 && (D2 = [D2]), /\bAndroid\b/.test(F2) && !U2 && (a3 = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(t3)) && (U2 = y2(a3[1]).replace(/^[a-z]{2}-[a-z]{2};\s*/i, "") || null), x2 && !U2 ? U2 = B2([x2]) : x2 && U2 && (U2 = U2.replace(RegExp("^(" + v2(x2) + ")[-_.\\s]", "i"), x2 + " ").replace(RegExp("^(" + v2(x2) + ")[-_.]?(\\w)", "i"), x2 + " $2")), (a3 = /\bGoogle TV\b/.exec(U2)) && (U2 = a3[0]), /\bSimulator\b/i.test(t3) && (U2 = (U2 ? U2 + " " : "") + "Simulator"), "Opera Mini" == w2 && /\bOPiOS\b/.test(t3) && k2.push("running in Turbo/Uncompressed mode"), "IE" == w2 && /\blike iPhone OS\b/.test(t3) ? (x2 = (a3 = e3(t3.replace(/like iPhone OS/, ""))).manufacturer, U2 = a3.product) : /^iP/.test(U2) ? (w2 || (w2 = "Safari"), F2 = "iOS" + ((a3 = / OS ([\d_]+)/i.exec(t3)) ? " " + a3[1].replace(/_/g, ".") : "")) : "Konqueror" == w2 && /^Linux\b/i.test(F2) ? F2 = "Kubuntu" : x2 && "Google" != x2 && (/Chrome/.test(w2) && !/\bMobile Safari\b/i.test(t3) || /\bVita\b/.test(U2)) || /\bAndroid\b/.test(F2) && /^Chrome/.test(w2) && /\bVersion\//i.test(t3) ? (w2 = "Android Browser", F2 = /\bAndroid\b/.test(F2) ? F2 : "Android") : "Silk" == w2 ? (/\bMobi/i.test(t3) || (F2 = "Android", k2.unshift("desktop mode")), /Accelerated *= *true/i.test(t3) && k2.unshift("accelerated")) : "UC Browser" == w2 && /\bUCWEB\b/.test(t3) ? k2.push("speed mode") : "PaleMoon" == w2 && (a3 = /\bFirefox\/([\d.]+)\b/.exec(t3)) ? k2.push("identifying as Firefox " + a3[1]) : "Firefox" == w2 && (a3 = /\b(Mobile|Tablet|TV)\b/i.exec(t3)) ? (F2 || (F2 = "Firefox OS"), U2 || (U2 = a3[1])) : !w2 || (a3 = !/\bMinefield\b/i.test(t3) && /\b(?:Firefox|Safari)\b/.exec(w2)) ? (w2 && !U2 && /[\/,]|^[^(]+?\)/.test(t3.slice(t3.indexOf(a3 + "/") + 8)) && (w2 = null), (a3 = U2 || x2 || F2) && (U2 || x2 || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(F2)) && (w2 = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(F2) ? F2 : a3) + " Browser")) : "Electron" == w2 && (a3 = (/\bChrome\/([\d.]+)\b/.exec(t3) || 0)[1]) && k2.push("Chromium " + a3), P2 || (P2 = j2(["(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)", "Version", v2(w2), "(?:Firefox|Minefield|NetFront)"])), (a3 = ("iCab" == D2 && parseFloat(P2) > 3 ? "WebKit" : /\bOpera\b/.test(w2) && (/\bOPR\b/.test(t3) ? "Blink" : "Presto")) || /\b(?:Midori|Nook|Safari)\b/i.test(t3) && !/^(?:Trident|EdgeHTML)$/.test(D2) && "WebKit" || !D2 && /\bMSIE\b/i.test(t3) && ("Mac OS" == F2 ? "Tasman" : "Trident") || "WebKit" == D2 && /\bPlayStation\b(?! Vita\b)/i.test(w2) && "NetFront") && (D2 = [a3]), "IE" == w2 && (a3 = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(t3) || 0)[1]) ? (w2 += " Mobile", F2 = "Windows Phone " + (/\+$/.test(a3) ? a3 : a3 + ".x"), k2.unshift("desktop mode")) : /\bWPDesktop\b/i.test(t3) ? (w2 = "IE Mobile", F2 = "Windows Phone 8.x", k2.unshift("desktop mode"), P2 || (P2 = (/\brv:([\d.]+)/.exec(t3) || 0)[1])) : "IE" != w2 && "Trident" == D2 && (a3 = /\brv:([\d.]+)/.exec(t3)) && (w2 && k2.push("identifying as " + w2 + (P2 ? " " + P2 : "")), w2 = "IE", P2 = a3[1]), L2) {
          if (function(e4, t4) {
            var i3 = null != e4 ? typeof e4[t4] : "number";
            return !(/^(?:boolean|number|string|undefined)$/.test(i3) || "object" == i3 && !e4[t4]);
          }(i2, "global"))
            if (T2 && (b2 = (a3 = T2.lang.System).getProperty("os.arch"), F2 = F2 || a3.getProperty("os.name") + " " + a3.getProperty("os.version")), S2) {
              try {
                P2 = i2.require("ringo/engine").version.join("."), w2 = "RingoJS";
              } catch (t4) {
                (a3 = i2.system) && a3.global.system == i2.system && (w2 = "Narwhal", F2 || (F2 = a3[0].os || null));
              }
              w2 || (w2 = "Rhino");
            } else
              "object" == typeof i2.process && !i2.process.browser && (a3 = i2.process) && ("object" == typeof a3.versions && ("string" == typeof a3.versions.electron ? (k2.push("Node " + a3.versions.node), w2 = "Electron", P2 = a3.versions.electron) : "string" == typeof a3.versions.nw && (k2.push("Chromium " + P2, "Node " + a3.versions.node), w2 = "NW.js", P2 = a3.versions.nw)), w2 || (w2 = "Node.js", b2 = a3.arch, F2 = a3.platform, P2 = (P2 = /[\d.]+/.exec(a3.version)) ? P2[0] : null));
          else
            g2(a3 = i2.runtime) == I3 ? (w2 = "Adobe AIR", F2 = a3.flash.system.Capabilities.os) : g2(a3 = i2.phantom) == E2 ? (w2 = "PhantomJS", P2 = (a3 = a3.version || null) && a3.major + "." + a3.minor + "." + a3.patch) : "number" == typeof O2.documentMode && (a3 = /\bTrident\/(\d+)/i.exec(t3)) ? (P2 = [P2, O2.documentMode], (a3 = +a3[1] + 4) != P2[1] && (k2.push("IE " + P2[1] + " mode"), D2 && (D2[1] = ""), P2[1] = a3), P2 = "IE" == w2 ? String(P2[1].toFixed(1)) : P2[0]) : "number" == typeof O2.documentMode && /^(?:Chrome|Firefox)\b/.test(w2) && (k2.push("masking as " + w2 + " " + P2), w2 = "IE", P2 = "11.0", D2 = ["Trident"], F2 = "Windows");
          F2 = F2 && u2(F2);
        }
        if (P2 && (a3 = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(P2) || /(?:alpha|beta)(?: ?\d)?/i.exec(t3 + ";" + (L2 && o3.appMinorVersion)) || /\bMinefield\b/i.test(t3) && "a") && (V2 = /b/i.test(a3) ? "beta" : "alpha", P2 = P2.replace(RegExp(a3 + "\\+?$"), "") + ("beta" == V2 ? N2 : C2) + (/\d+\+?/.exec(a3) || "")), "Fennec" == w2 || "Firefox" == w2 && /\b(?:Android|Firefox OS|KaiOS)\b/.test(F2))
          w2 = "Firefox Mobile";
        else if ("Maxthon" == w2 && P2)
          P2 = P2.replace(/\.[\d.]+/, ".x");
        else if (/\bXbox\b/i.test(U2))
          "Xbox 360" == U2 && (F2 = null), "Xbox 360" == U2 && /\bIEMobile\b/.test(t3) && k2.unshift("mobile mode");
        else if (!/^(?:Chrome|IE|Opera)$/.test(w2) && (!w2 || U2 || /Browser|Mobi/.test(w2)) || "Windows CE" != F2 && !/Mobi/i.test(t3))
          if ("IE" == w2 && L2)
            try {
              null === i2.external && k2.unshift("platform preview");
            } catch (t4) {
              k2.unshift("embedded");
            }
          else
            (/\bBlackBerry\b/.test(U2) || /\bBB10\b/.test(t3)) && (a3 = (RegExp(U2.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(t3) || 0)[1] || P2) ? (F2 = ((a3 = [a3, /BB10/.test(t3)])[1] ? (U2 = null, x2 = "BlackBerry") : "Device Software") + " " + a3[0], P2 = null) : this != m2 && "Wii" != U2 && (L2 && R2 || /Opera/.test(w2) && /\b(?:MSIE|Firefox)\b/i.test(t3) || "Firefox" == w2 && /\bOS X (?:\d+\.){2,}/.test(F2) || "IE" == w2 && (F2 && !/^Win/.test(F2) && P2 > 5.5 || /\bWindows XP\b/.test(F2) && P2 > 8 || 8 == P2 && !/\bTrident\b/.test(t3))) && !c2.test(a3 = e3.call(m2, t3.replace(c2, "") + ";")) && a3.name && (a3 = "ing as " + a3.name + ((a3 = a3.version) ? " " + a3 : ""), c2.test(w2) ? (/\bIE\b/.test(a3) && "Mac OS" == F2 && (F2 = null), a3 = "identify" + a3) : (a3 = "mask" + a3, w2 = A2 ? u2(A2.replace(/([a-z])([A-Z])/g, "$1 $2")) : "Opera", /\bIE\b/.test(a3) && (F2 = null), L2 || (P2 = null)), D2 = ["Presto"], k2.push(a3));
        else
          w2 += " Mobile";
        (a3 = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(t3) || 0)[1]) && (a3 = [parseFloat(a3.replace(/\.(\d)$/, ".0$1")), a3], "Safari" == w2 && "+" == a3[1].slice(-1) ? (w2 = "WebKit Nightly", V2 = "alpha", P2 = a3[1].slice(0, -1)) : P2 != a3[1] && P2 != (a3[2] = (/\bSafari\/([\d.]+\+?)/i.exec(t3) || 0)[1]) || (P2 = null), a3[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(t3) || 0)[1], 537.36 == a3[0] && 537.36 == a3[2] && parseFloat(a3[1]) >= 28 && "WebKit" == D2 && (D2 = ["Blink"]), L2 && (l3 || a3[1]) ? (D2 && (D2[1] = "like Chrome"), a3 = a3[1] || ((a3 = a3[0]) < 530 ? 1 : a3 < 532 ? 2 : a3 < 532.05 ? 3 : a3 < 533 ? 4 : a3 < 534.03 ? 5 : a3 < 534.07 ? 6 : a3 < 534.1 ? 7 : a3 < 534.13 ? 8 : a3 < 534.16 ? 9 : a3 < 534.24 ? 10 : a3 < 534.3 ? 11 : a3 < 535.01 ? 12 : a3 < 535.02 ? "13+" : a3 < 535.07 ? 15 : a3 < 535.11 ? 16 : a3 < 535.19 ? 17 : a3 < 536.05 ? 18 : a3 < 536.1 ? 19 : a3 < 537.01 ? 20 : a3 < 537.11 ? "21+" : a3 < 537.13 ? 23 : a3 < 537.18 ? 24 : a3 < 537.24 ? 25 : a3 < 537.36 ? 26 : "Blink" != D2 ? "27" : "28")) : (D2 && (D2[1] = "like Safari"), a3 = (a3 = a3[0]) < 400 ? 1 : a3 < 500 ? 2 : a3 < 526 ? 3 : a3 < 533 ? 4 : a3 < 534 ? "4+" : a3 < 535 ? 5 : a3 < 537 ? 6 : a3 < 538 ? 7 : a3 < 601 ? 8 : a3 < 602 ? 9 : a3 < 604 ? 10 : a3 < 606 ? 11 : a3 < 608 ? 12 : "12"), D2 && (D2[1] += " " + (a3 += "number" == typeof a3 ? ".x" : /[.+]/.test(a3) ? "" : "+")), "Safari" == w2 && (!P2 || parseInt(P2) > 45) ? P2 = a3 : "Chrome" == w2 && /\bHeadlessChrome/i.test(t3) && k2.unshift("headless")), "Opera" == w2 && (a3 = /\bzbov|zvav$/.exec(F2)) ? (w2 += " ", k2.unshift("desktop mode"), "zvav" == a3 ? (w2 += "Mini", P2 = null) : w2 += "Mobile", F2 = F2.replace(RegExp(" *" + a3 + "$"), "")) : "Safari" == w2 && /\bChrome\b/.exec(D2 && D2[1]) ? (k2.unshift("desktop mode"), w2 = "Chrome Mobile", P2 = null, /\bOS X\b/.test(F2) ? (x2 = "Apple", F2 = "iOS 4.3+") : F2 = null) : /\bSRWare Iron\b/.test(w2) && !P2 && (P2 = j2("Chrome")), P2 && 0 == P2.indexOf(a3 = /[\d.]+$/.exec(F2)) && t3.indexOf("/" + a3 + "-") > -1 && (F2 = y2(F2.replace(a3, ""))), F2 && -1 != F2.indexOf(w2) && !RegExp(w2 + " OS").test(F2) && (F2 = F2.replace(RegExp(" *" + v2(w2) + " *"), "")), D2 && !/\b(?:Avant|Nook)\b/.test(w2) && (/Browser|Lunascape|Maxthon/.test(w2) || "Safari" != w2 && /^iOS/.test(F2) && /\bSafari\b/.test(D2[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(w2) && D2[1]) && (a3 = D2[D2.length - 1]) && k2.push(a3), k2.length && (k2 = ["(" + k2.join("; ") + ")"]), x2 && U2 && U2.indexOf(x2) < 0 && k2.push("on " + x2), U2 && k2.push((/^on /.test(k2[k2.length - 1]) ? "" : "on ") + U2), F2 && (a3 = / ([\d.+]+)$/.exec(F2), d3 = a3 && "/" == F2.charAt(F2.length - a3[0].length - 1), F2 = { architecture: 32, family: a3 && !d3 ? F2.replace(a3[0], "") : F2, version: a3 ? a3[1] : null, toString: function() {
          var e4 = this.version;
          return this.family + (e4 && !d3 ? " " + e4 : "") + (64 == this.architecture ? " 64-bit" : "");
        } }), (a3 = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(b2)) && !/\bi686\b/i.test(b2) ? (F2 && (F2.architecture = 64, F2.family = F2.family.replace(RegExp(" *" + a3), "")), w2 && (/\bWOW64\b/i.test(t3) || L2 && /\w(?:86|32)$/.test(o3.cpuClass || o3.platform) && !/\bWin64; x64\b/i.test(t3)) && k2.unshift("32-bit")) : F2 && /^OS X/.test(F2.family) && "Chrome" == w2 && parseFloat(P2) >= 39 && (F2.architecture = 64), t3 || (t3 = null);
        var $2 = {};
        return $2.description = t3, $2.layout = D2 && D2[0], $2.manufacturer = x2, $2.name = w2, $2.prerelease = V2, $2.product = U2, $2.ua = t3, $2.version = w2 && P2, $2.os = F2 || { architecture: null, family: null, version: null, toString: function() {
          return "null";
        } }, $2.parse = e3, $2.toString = function() {
          return this.description || "";
        }, $2.version && k2.unshift(P2), $2.name && k2.unshift(w2), F2 && w2 && (F2 != String(F2).split(" ")[0] || F2 != w2.split(" ")[0] && !U2) && k2.push(U2 ? "(" + F2 + ")" : "on " + F2), k2.length && ($2.description = k2.join(" ")), $2;
      }();
      s2 && o2 ? m2(I2, function(e3, t3) {
        s2[t3] = e3;
      }) : r2.platform = I2;
    }).call(i);
  });
  class Oi {
    constructor(e2) {
      this.name = "V2NIMConversationIdUtil", this.core = e2;
    }
    conversationId(e2, t2) {
      return `${this.core.account}|${e2}|${t2}`;
    }
    p2pConversationId(e2) {
      return `${this.core.account}|1|${e2}`;
    }
    teamConversationId(e2) {
      return `${this.core.account}|2|${e2}`;
    }
    superTeamConversationId(e2) {
      return `${this.core.account}|3|${e2}`;
    }
    messageConversationId(e2) {
      return 1 === e2.conversationType ? e2.senderId === this.core.account ? this.p2pConversationId(e2.receiverId) : this.p2pConversationId(e2.senderId) : 2 === e2.conversationType ? this.teamConversationId(e2.receiverId) : this.superTeamConversationId(e2.receiverId);
    }
    parseConversationType(e2) {
      try {
        if (e2 && e2.startsWith(`${this.core.account}|`)) {
          var t2 = e2.replace(`${this.core.account}|`, "");
          return Number(t2[0]);
        }
        return this.core.logger.warn(`conversationId is not start with ${this.core.account}`), 0;
      } catch (e3) {
        return 0;
      }
    }
    parseConversationTargetId(e2) {
      try {
        return e2 && e2.startsWith(`${this.core.account}|`) ? e2.replace(`${this.core.account}|`, "").slice(2) : (this.core.logger.warn(`conversationId is not start with ${this.core.account}`), "");
      } catch (e3) {
        return "";
      }
    }
    convertToV1ConversationId(e2) {
      var t2 = this.parseConversationType(e2);
      return `${1 === t2 ? "p2p" : 2 === t2 ? "team" : "superTeam"}|${this.parseConversationTargetId(e2)}`;
    }
  }
  class Ri {
    constructor() {
      this.messages = /* @__PURE__ */ new Map(), this.capacity = 1e4;
    }
    reset() {
      this.messages.clear();
    }
    getMessageById(e2) {
      if (e2)
        return this.messages.get(e2);
    }
    getMessagesByConversationId(e2) {
      var t2 = [];
      return this.messages.forEach((i2) => {
        i2.conversationId === e2 && t2.push(i2);
      }), t2;
    }
    getLastMessageOfConversation(e2) {
      var t2 = this.getMessagesByConversationId(e2);
      if (0 !== t2.length)
        return t2.reduce((e3, t3) => t3.createTime > e3.createTime ? t3 : e3, t2[0]);
    }
    upsertMessages(e2) {
      e2.forEach((e3) => {
        this.setLRU(e3.messageClientId, e3);
      });
    }
    setLRU(e2, t2) {
      if (this.messages.has(e2))
        this.messages.delete(e2);
      else if (this.messages.size >= this.capacity) {
        var i2 = this.messages.keys().next().value;
        i2 && this.messages.delete(i2);
      }
      this.messages.set(e2, t2);
    }
    deleteMessage(e2) {
      this.messages.delete(e2);
    }
    deleteMessages(e2, t2) {
      this.messages.forEach((i2) => {
        e2 === i2.conversationId && (!t2 || t2 && i2.createTime < t2) && this.messages.delete(i2.messageClientId);
      });
    }
  }
  var Ai = { accountId: { type: "string", allowEmpty: false }, content: { type: "object", required: false, rules: { msg: { type: "string", allowEmpty: false }, type: { type: "number", allowEmpty: false } } }, messages: { type: "array", required: false, rules: { msg: { type: "string", allowEmpty: false }, type: { type: "number" }, role: { type: "enum", values: ["assistant", "user", "system"] } } }, promptVariables: { type: "jsonstr", required: false }, modelConfigParams: { type: "object", required: false, rules: { prompt: { type: "string", required: false }, maxTokens: { type: "number", required: false }, topP: { type: "number", required: false }, temperature: { type: "number", required: false } } } }, bi$1 = Object.assign({ requestId: { type: "string", allowEmpty: false } }, Ai), ki = [1, 3, 2, 0], Vi = [2, 7, 12, 100, 6, 1, -1, 4, 5, 11, 0, 10, 3], Li = { routeEnabled: { type: "boolean", required: false }, routeEnvironment: { type: "string", required: false } }, Pi = { pushEnabled: { type: "boolean", required: false }, pushNickEnabled: { type: "boolean", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, forcePush: { type: "boolean", required: false }, forceContent: { type: "string", required: false }, forcePushAccountIds: { type: "array", required: false, itemType: "string" } }, Di = { antispamEnabled: { type: "boolean", required: false }, antispamBusinessId: { type: "string", required: false }, antispamCustomMessage: { type: "string", required: false }, antispamCheating: { type: "string", required: false }, antispamExtension: { type: "string", required: false } }, wi = { messageConfig: { type: "object", required: false, rules: { readReceiptEnabled: { type: "boolean", required: false }, lastMessageUpdateEnabled: { type: "boolean", required: false }, historyEnabled: { type: "boolean", required: false }, roamingEnabled: { type: "boolean", required: false }, onlineSyncEnabled: { type: "boolean", required: false }, offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false } } }, routeConfig: { type: "object", required: false, rules: Li }, pushConfig: { type: "object", required: false, rules: Pi }, antiSpamConfig: { type: "object", required: false, rules: Di }, robotConfig: { type: "object", required: false, rules: { accountId: { type: "string", required: false }, topic: { type: "string", required: false }, function: { type: "string", required: false }, customContent: { type: "string", required: false } } }, aiConfig: { type: "object", required: false, rules: Ai }, targetConfig: { type: "object", required: false, rules: { receiverIds: { type: "array", itemType: "string" }, inclusive: { type: "boolean" }, newMemberVisible: { type: "boolean", required: false } } }, clientAntispamEnabled: { type: "boolean", required: false }, clientAntispamReplace: { type: "string", required: false } }, Ui = { message: { type: "object", rules: { text: { type: "string", required: false }, messageType: { type: "enum", values: Vi }, messageClientId: { type: "string", allowEmpty: false } } }, params: { type: "object", rules: wi, required: false }, replyMessage: { type: "object", rules: { conversationType: { type: "enum", values: [1, 3, 2, 0] }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, xi = { conversationId: { type: "string", allowEmpty: false }, message: { type: "object", rules: { text: { type: "string", required: false }, messageType: { type: "enum", values: Vi }, messageClientId: { type: "string", allowEmpty: false }, attachment: { type: "object", required: false, rules: { file: { type: "file", required: false } } } } }, params: { type: "object", required: false, rules: wi } }, Fi = { message: { type: "object", rules: { messageClientId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: ki }, createTime: { type: "number" } } }, params: { type: "object", rules: { postscript: { type: "string", required: false }, serverExtension: { type: "string", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, env: { type: "string", required: false } }, required: false } }, Bi = { conversationId: { type: "string", allowEmpty: false }, messageTypes: { type: "array", required: false, itemType: "enum", values: Vi }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, limit: { type: "number", min: 1, required: false }, direction: { type: "enum", values: [1, 0], required: false }, anchorMessage: { type: "object", required: false, rules: { messageServerId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, ji = { conversationType: { type: "enum", values: ki }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false } }, $i = { messageRefers: { type: "array", required: true, rules: ji } }, Gi = { conversationId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: ki }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, createTime: { type: "number" } }, Hi = { messages: { type: "array", rules: Gi } }, qi = { conversationId: { type: "string", allowEmpty: false }, serverExtension: { type: "string", required: false }, onlineSync: { type: "boolean", required: false }, deleteRoam: { type: "boolean", required: false }, clearMode: { type: "enum", values: [0], required: false } }, Yi = { serverExtension: { type: "string", required: false } }, Ki = { messageClientId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [1] }, receiverId: { type: "string", allowEmpty: false }, createTime: { type: "number" } }, Wi$1 = { messages: { type: "array", rules: { messageClientId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [2] }, receiverId: { type: "string", allowEmpty: false }, createTime: { type: "number" } }, min: 1 } }, Ji = { voiceUrl: { type: "string", required: false, allowEmpty: false }, file: { type: "file", required: false }, voicePath: { type: "string", required: false, allowEmpty: false }, mimeType: { type: "string", required: false, allowEmpty: false }, sampleRate: { type: "string", required: false, allowEmpty: false }, duration: { type: "number", required: true, min: 0 }, sceneName: { type: "string", required: false } }, zi$1 = { message: { type: "object", rules: { conversationType: { type: "enum", values: ki }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } }, index: { type: "number", min: 1 }, serverExtension: { type: "string", required: false }, pushConfig: { type: "object", required: false, rules: { pushEnabled: { type: "boolean", required: false }, needBadge: { type: "boolean", required: false }, title: { type: "string", required: false, allowEmpty: false }, content: { type: "string", required: false, allowEmpty: false }, pushPayload: { type: "string", required: false, allowEmpty: false } } } }, Xi = { messages: { type: "array", rules: { conversationType: { type: "enum", values: [1, 3, 2, 0] }, receiverId: { type: "string", allowEmpty: false }, senderId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, messageClientId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, Qi = { params: { type: "object", rules: { collectionType: { type: "number", min: 1 }, collectionData: { type: "string", allowEmpty: false }, serverExtension: { type: "string", required: false }, uniqueId: { type: "string", required: false } } } }, Zi = { collections: { type: "array", min: 1, rules: { collectionId: { type: "string", allowEmpty: false }, createTime: { type: "number" } } } }, er = { serverExtension: { type: "string", required: false }, collection: { type: "object", rules: { collectionId: { type: "string", allowEmpty: false }, collectionType: { type: "number" }, createTime: { type: "number" } } } }, tr = { beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, limit: { type: "number", min: 1, required: false }, direction: { type: "enum", required: false, values: [1, 0] }, collectionType: { type: "number", required: false }, anchorCollection: { type: "object", required: false, rules: { collectionId: { type: "string", allowEmpty: false, required: false }, createTime: { type: "number", required: false } } } }, ir = { keyword: { type: "string", allowEmpty: false }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, sortOrder: { type: "enum", values: [1, 0], required: false }, conversationLimit: { type: "number", min: 0, required: false }, messageLimit: { type: "number", min: 1, required: false }, p2pAccountIds: { type: "array", required: false, itemType: "string" }, teamIds: { type: "array", required: false, itemType: "string" }, senderAccountIds: { type: "array", required: false, itemType: "string" }, messageTypes: { type: "array", required: false, itemType: "enum", values: Vi }, messageSubtypes: { type: "array", required: false, itemType: "number" } }, rr = { message: { type: "object", rules: { receiverId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [2] } } } }, sr$1 = { messages: { type: "array", rules: { receiverId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false }, conversationType: { type: "enum", values: [2] } }, min: 1 } }, or$1 = { sceneName: { type: "string", required: false }, name: { type: "string", required: false } }, nr$1 = Object.assign(Object.assign({}, or$1), { duration: { type: "number", required: false } }), ar$1 = Object.assign(Object.assign({}, nr$1), { width: { type: "number", required: false }, height: { type: "number", required: false } }), cr$1 = Object.assign(Object.assign({}, or$1), { width: { type: "number", required: false }, height: { type: "number", required: false } }), dr$1 = { messageRefer: { type: "object", required: true, rules: ji }, beginTime: { type: "number", required: false }, endTime: { type: "number", required: false }, limit: { type: "number", min: 1, required: false }, direction: { type: "enum", values: [1, 0], required: false }, excludeMessageServerId: { type: "string", required: false, allowEmpty: false } }, lr$1 = { senderId: { type: "string", allowEmpty: false }, receiverId: { type: "string", allowEmpty: false }, createTime: { type: "number" }, messageClientId: { type: "string", allowEmpty: false }, messageServerId: { type: "string", allowEmpty: false } }, pr = { subType: { type: "number", min: 0, required: false }, text: { type: "string", required: false }, attachment: { type: "object", required: false }, serverExtension: { type: "string", required: false }, routeConfig: { type: "object", required: false, rules: Li }, pushConfig: { type: "object", required: false, rules: Pi }, antiSpamConfig: { type: "object", required: false, rules: Di }, clientAntispamEnabled: { type: "boolean", required: false }, clientAntispamReplace: { type: "string", required: false } };
  let hr$1 = class hr {
    constructor(e2, t2) {
      this.p2pMessageReceipts = {}, this.core = e2, this.service = t2;
    }
    reset() {
      this.p2pMessageReceipts = {};
    }
    sendP2PMessageReceipt(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1(Ki, e2, "", true), e2.senderId === this.core.account)
          throw new ae$1({ detail: { reason: `sendP2PMessageReceipt. sender: ${e2.senderId} is not allowed to send msg receipt` } });
        yield this.core.sendCmd("v2SendP2PMessageReceipt", { tag: { receiverId: e2.senderId, messageClientId: e2.messageClientId, createTime: e2.createTime } });
      });
    }
    isPeerRead(e2) {
      if (1 !== e2.conversationType)
        return false;
      if (e2.senderId !== this.core.account)
        return false;
      if (e2.senderId === this.core.account && e2.receiverId === this.core.account)
        return true;
      var t2 = this.core.V2NIMConversationIdUtil.messageConversationId(e2), i2 = this.p2pMessageReceipts[t2] || 0;
      return e2.createTime <= i2;
    }
    getP2PMessageReceipt(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (ue$1(this.core.account, e2), 1 !== this.core.V2NIMConversationIdUtil.parseConversationType(e2))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getP2PMessageReceipt: conversationId is not p2p conversationId" } });
        return { conversationId: e2, timestamp: this.p2pMessageReceipts[e2] || 0 };
      });
    }
    getTeamMessageReceipts(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1(sr$1, { messages: e2 }, "", true), e2.some((e3) => e3.senderId !== this.core.account))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getTeamMessageReceipts: exist messages senderId is not current user" } });
        if (e2.some((t2) => t2.receiverId !== e2[0].receiverId))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getTeamMessageReceipts: exist messages receiverId is not same" } });
        return (yield this.core.sendCmd("v2GetTeamMessageReceipts", { tag: e2 })).content.data.map((e3) => Object.assign(Object.assign({}, e3), { conversationId: this.core.V2NIMConversationIdUtil.teamConversationId(e3.receiverId) }));
      });
    }
    getTeamMessageReceiptDetail(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1(rr, { message: e2 }, "", true), e2.senderId !== this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `getTeamMessageReceiptDetail::senderId ${e2.senderId} incorrect` } });
        var t2 = yield this.core.sendCmd("v2GetTeamMessageReceiptDetail", { tag: e2 });
        return { readReceipt: { conversationId: this.core.V2NIMConversationIdUtil.teamConversationId(e2.receiverId), messageClientId: e2.messageClientId, messageServerId: e2.messageServerId, readCount: t2.content.readAccountList.length, unreadCount: t2.content.unreadAccountList.length }, readAccountList: t2.content.readAccountList, unreadAccountList: t2.content.unreadAccountList };
      });
    }
    sendTeamMessageReceipts(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (e2.some((t2) => t2.conversationId !== e2[0].conversationId))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getTeamMessageReceipts: conversationId not same" } });
        if (pe$1(Wi$1, { messages: e2 }, "", true), e2.some((e3) => e3.senderId === this.core.account))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getTeamMessageReceipts: exist messages senderId is not current user" } });
        yield this.core.sendCmd("v2SendTeamMessageReceipts", { tag: e2 });
      });
    }
    syncP2PMessagReceiptsHandler(e2) {
      var t2 = e2.content.data.map((e3) => {
        var t3 = this.core.V2NIMConversationIdUtil.p2pConversationId(e3.senderId), i2 = e3.createTime;
        return this.p2pMessageReceipts[t3] = i2, { conversationId: t3, timestamp: i2 };
      });
      this.service.emit("onReceiveP2PMessageReadReceipts", t2);
    }
    onP2PMessageReceiptsHandler(e2) {
      var t2 = this.core.V2NIMConversationIdUtil.p2pConversationId(e2.content.data.senderId), i2 = e2.content.data.createTime;
      this.p2pMessageReceipts[t2] = i2, this.service.emit("onReceiveP2PMessageReadReceipts", [{ conversationId: t2, timestamp: i2 }]);
    }
    onTeamMessageReceiptsHandler(e2) {
      var t2 = e2.content.data.map((e3) => ({ conversationId: this.core.V2NIMConversationIdUtil.teamConversationId(e3.receiverId), messageServerId: e3.messageServerId, messageClientId: e3.messageClientId, readCount: e3.readCount, unreadCount: e3.unreadCount, latestReadAccount: e3.latestReadAccount }));
      this.service.emit("onReceiveTeamMessageReadReceipts", t2);
    }
  };
  var ur = { "31_1": "v2TeamCreate", "32_1": "v2SuperTeamCreate", "31_5": "v2TeamInviteMembers", "32_5": "v2SuperTeamInviteMembers", "31_6": "v2TeamKickMembers", "32_6": "v2SuperTeamKickMembers", "31_8": "v2TeamLeave", "32_7": "v2SuperTeamLeave", "31_7": "v2TeamUpdateInfo", "32_8": "v2SuperTeamUpdateInfo", "31_9": "v2TeamGetInfo", "32_9": "v2SuperTeamGetInfo", "31_12": "v2TeamDismiss", "32_4": "v2SuperTeamDismiss", "31_13": "v2TeamApplyToJoin", "32_20": "v2SuperTeamApplyToJoin", "31_14": "v2TeamAcceptJoinApplication", "32_21": "v2SuperTeamAcceptJoinApplication", "31_15": "v2TeamRejectJoinApplication", "32_22": "v2SuperTeamRejectJoinApplication", "31_16": "v2TeamAddManagers", "32_26": "v2SuperTeamAddManagers", "31_17": "v2TeamRemoveManagers", "32_27": "v2SuperTeamRemoveManagers", "31_18": "v2TeamTransferOwner", "32_31": "v2SuperTeamTransferOwner", "31_19": "v2TeamUpdateSelfMemberInfo", "32_10": "v2SuperTeamUpdateSelfMemberInfo", "31_20": "v2TeamUpdateMember", "32_30": "v2SuperTeamUpdateMember", "31_21": "v2TeamAcceptInvitation", "32_23": "v2SuperTeamAcceptInvitation", "31_22": "v2TeamRejectInvite", "32_24": "v2SuperTeamRejectInvite", "31_33": "v2TeamGetMemberInvitor", "32_35": "v2SuperTeamGetMemberInvitor", "31_25": "v2TeamMemberSetChatBannedStatus", "32_29": "v2SuperTeamMemberSetChatBannedStatus", "31_32": "v2TeamSetChatBannedMode", "32_28": "v2SuperTeamSetChatBannedMode", "31_34": "v2TeamGetByIds", "32_36": "v2SuperTeamGetByIds", "31_35": "v2TeamMemberGetListByIds", "32_37": "v2SuperTeamMemberGetListByIds", "31_36": "v2TeamMemberGetList", "8_101": "v2TeamCreateMultiSync", "8_109": "v2TeamSync", "8_119": "v2TeamMemberUpdateMultiSync", "8_126": "v2TeamMembersOfSelfInSync", "21_101": "v2SuperTeamCreateMultiSync", "21_109": "v2SuperTeamSync", "21_110": "v2SuperTeamMemberUpdateMultiSync", "21_111": "v2SuperTeamMembersOfSelfInSync" }, mr$1 = { antispamBusinessId: 1 }, gr = "V2NIMTeamService", vr$1 = { teamId: 1, name: 3, teamType: { id: 4, retConverter: (e2) => 0 == +e2 ? 1 : +e2 }, ownerAccountId: 5, memberLimit: { id: 6, retType: "number" }, isValidTeam: { id: 8, retConverter: (e2, t2) => 1 == +e2 && (void 0 === t2[13] || 1 == +t2[13]) }, memberCount: { id: 9, retType: "number" }, memberUpdateTime: { id: 10, retType: "number" }, createTime: { id: 11, retType: "number" }, updateTime: { id: 12, retType: "number" }, intro: 14, announcement: 15, joinMode: { id: 16, retType: "number" }, serverExtension: 18, customerExtension: 19, avatar: 20, agreeMode: { id: 21, retType: "number" }, inviteMode: { id: 22, retType: "number" }, updateInfoMode: { id: 23, retType: "number" }, updateExtensionMode: { id: 24, retType: "number" }, chatBannedMode: { id: 101, retType: "number" } }, fr$1 = { teamId: 1, accountId: 3, memberRole: { id: 4, retType: "number" }, teamNick: 5, bits: { id: 7, retType: "number" }, inTeam: { id: 9, retType: "boolean" }, joinTime: { id: 10, retType: "number" }, updateTime: { id: 11, retType: "number" }, serverExtension: 12, chatBanned: { id: 13, retType: "boolean" }, invitorAccountId: 14, followAccountIds: { id: 16, retConverter: (e2) => {
    try {
      return JSON.parse(e2);
    } catch (e3) {
      return [];
    }
  } } }, yr$1 = { teamId: 1, accountId: 3, memberRole: { id: 4, retType: "number" }, teamNick: 5, bits: { id: 7, retType: "number" }, inTeam: { id: 9, retType: "boolean" }, updateTime: { id: 11, retType: "number" }, serverExtension: 12, chatBanned: { id: 13, retType: "boolean" }, invitorAccountId: 14, joinTime: { id: 15, retType: "number" }, followAccountIds: { id: 17, retConverter: (e2) => {
    try {
      return JSON.parse(e2);
    } catch (e3) {
      return [];
    }
  } } }, Ir$1 = { accountIds: { id: 1, converter: (e2) => JSON.stringify(e2) }, operation: 2 }, _r = { v2TeamCreate: { sid: 31, cid: 1, service: gr, params: [{ type: "Property", name: "team", reflectMapper: vr$1 }, { type: "StrArray", name: "inviteeAccountIds" }, { type: "String", name: "postscript" }, { type: "Property", name: "antispamConfig", reflectMapper: mr$1 }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }, { type: "StrArray", name: "failedList" }] }, v2SuperTeamCreate: { sid: 32, cid: 1, service: gr, params: [{ type: "Property", name: "team", reflectMapper: vr$1 }, { type: "StrArray", name: "inviteeAccountIds" }, { type: "String", name: "postscript" }, { type: "Property", name: "antispamConfig", reflectMapper: mr$1 }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }, { type: "StrArray", name: "failedList" }] }, v2TeamInviteMembers: { sid: 31, cid: 5, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }, { type: "String", name: "attach" }], response: [{ type: "Long", name: "time" }, { type: "StrArray", name: "abortedAccidList" }] }, v2SuperTeamInviteMembers: { sid: 32, cid: 5, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }, { type: "String", name: "attach" }], response: [{ type: "StrArray", name: "abortedAccidList" }, { type: "Long", name: "time" }] }, v2TeamUpdateInfo: { sid: 31, cid: 7, service: gr, params: [{ type: "Property", name: "team", reflectMapper: vr$1 }, { type: "Property", name: "antispamConfig", reflectMapper: mr$1 }], response: [{ type: "Long", name: "teamId" }, { type: "Long", name: "timestamp" }] }, v2SuperTeamUpdateInfo: { sid: 32, cid: 8, service: gr, params: [{ type: "Property", name: "team", reflectMapper: vr$1 }, { type: "Property", name: "antispamConfig", reflectMapper: mr$1 }], response: [{ type: "Long", name: "timestamp" }] }, v2TeamLeave: { sid: 31, cid: 8, service: gr, params: [{ type: "Long", name: "teamId" }] }, v2SuperTeamLeave: { sid: 32, cid: 7, service: gr, params: [{ type: "Long", name: "teamId" }] }, v2TeamGetInfo: { sid: 31, cid: 9, service: gr, params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }] }, v2SuperTeamGetInfo: { sid: 32, cid: 9, service: gr, params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }] }, v2TeamGetByIds: { sid: 31, cid: 34, service: gr, params: [{ type: "LongArray", name: "teamIds" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: dt(vr$1) }, { type: "LongArray", name: "tids" }] }, v2SuperTeamGetByIds: { sid: 32, cid: 36, service: gr, params: [{ type: "LongArray", name: "teamIds" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: dt(vr$1) }, { type: "LongArray", name: "tids" }] }, v2TeamDismiss: { sid: 31, cid: 12, service: gr, params: [{ type: "Long", name: "teamId" }] }, v2SuperTeamDismiss: { sid: 32, cid: 4, service: gr, params: [{ type: "Long", name: "teamId" }] }, v2TeamAcceptInvitation: { sid: 31, cid: 21, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }] }, v2SuperTeamAcceptInvitation: { sid: 32, cid: 23, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }] }, v2TeamRejectInvite: { sid: 31, cid: 22, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2SuperTeamRejectInvite: { sid: 32, cid: 24, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2TeamKickMembers: { sid: 31, cid: 6, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamKickMembers: { sid: 32, cid: 6, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamApplyToJoin: { sid: 31, cid: 13, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }, { type: "Int", name: "isInTeam" }] }, v2SuperTeamApplyToJoin: { sid: 32, cid: 20, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: dt(vr$1) }, { type: "Int", name: "isInTeam" }] }, v2TeamAcceptJoinApplication: { sid: 31, cid: 14, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, v2SuperTeamAcceptJoinApplication: { sid: 32, cid: 21, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, v2TeamRejectJoinApplication: { sid: 31, cid: 15, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2SuperTeamRejectJoinApplication: { sid: 32, cid: 22, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2TeamAddManagers: { sid: 31, cid: 16, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamAddManagers: { sid: 32, cid: 26, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamRemoveManagers: { sid: 31, cid: 17, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamRemoveManagers: { sid: 32, cid: 27, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamTransferOwner: { sid: 31, cid: 18, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, v2SuperTeamTransferOwner: { sid: 32, cid: 31, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, v2TeamUpdateSelfMemberInfo: { sid: 31, cid: 19, service: gr, params: [{ type: "Property", name: "teamMember", reflectMapper: fr$1 }, { type: "Property", name: "specialFollowUpdate", reflectMapper: Ir$1 }], response: [{ type: "Property", name: "data", reflectMapper: dt(fr$1) }] }, v2SuperTeamUpdateSelfMemberInfo: { sid: 32, cid: 10, service: gr, params: [{ type: "Property", name: "teamMember", reflectMapper: yr$1 }, { type: "Property", name: "specialFollowUpdate", reflectMapper: Ir$1 }], response: [{ type: "Property", name: "data", reflectMapper: dt(yr$1) }] }, v2TeamUpdateMember: { sid: 31, cid: 20, service: gr, params: [{ type: "Property", name: "teamMember", reflectMapper: fr$1 }] }, v2SuperTeamUpdateMember: { sid: 32, cid: 30, service: gr, params: [{ type: "Property", name: "teamMember", reflectMapper: yr$1 }] }, v2TeamGetMemberInvitor: { sid: 31, cid: 33, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrStrMap", name: "accountsMap" }] }, v2SuperTeamGetMemberInvitor: { sid: 32, cid: 35, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrStrMap", name: "accountsMap" }] }, v2TeamMemberSetChatBannedStatus: { sid: 31, cid: 25, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "accountId" }, { type: "Int", name: "chatBanned" }] }, v2SuperTeamMemberSetChatBannedStatus: { sid: 32, cid: 29, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accountId" }, { type: "Int", name: "chatBanned" }] }, v2TeamSetChatBannedMode: { sid: 31, cid: 32, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "chatBannedMode" }] }, v2SuperTeamSetChatBannedMode: { sid: 32, cid: 28, service: gr, params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "chatBannedMode" }] }, v2TeamMemberGetListByIds: { sid: 31, cid: 35, service: gr, params: [{ type: "StrArray", name: "tag" }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(fr$1) }] }, v2SuperTeamMemberGetListByIds: { sid: 32, cid: 37, service: gr, params: [{ type: "StrArray", name: "tag" }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(yr$1) }] }, v2TeamMemberGetList: { sid: 31, cid: 36, service: gr, params: [{ type: "Property", name: "tag", reflectMapper: { teamId: 1, teamType: 2, roleQueryType: 3, onlyChatBanned: { id: 4, converter: (e2) => +e2 }, nextToken: 5, limit: 6, direction: 7 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(fr$1) }, { type: "Property", name: "pageInfo", reflectMapper: { 1: "hasMore", 2: "nextToken" } }] }, v2TeamSync: { sid: 8, cid: 109, service: gr, response: [{ type: "Long", name: "timetag" }, { type: "PropertyArray", name: "datas", reflectMapper: dt(vr$1) }] }, v2TeamCreateMultiSync: { sid: 8, cid: 101, service: gr, response: [{ type: "Property", name: "data", reflectMapper: dt(vr$1) }] }, v2TeamMemberUpdateMultiSync: { sid: 8, cid: 119, service: gr, response: [{ type: "Property", name: "data", reflectMapper: dt(fr$1) }] }, v2TeamMembersOfSelfInSync: { sid: 8, cid: 126, service: gr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(fr$1) }, { type: "Long", name: "timetag" }] }, v2SuperTeamSync: { sid: 21, cid: 109, service: gr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(vr$1) }, { type: "Bool", name: "isAll" }, { type: "Long", name: "timetag" }] }, v2SuperTeamCreateMultiSync: { sid: 21, cid: 101, service: gr, response: [{ type: "Property", name: "data", reflectMapper: dt(vr$1) }] }, v2SuperTeamMemberUpdateMultiSync: { sid: 21, cid: 110, service: gr, response: [{ type: "Property", name: "data", reflectMapper: dt(yr$1) }] }, v2SuperTeamMembersOfSelfInSync: { sid: 21, cid: 111, service: gr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(yr$1) }, { type: "Long", name: "timetag" }] } };
  function Mr(e2, t2) {
    if (!e2)
      return {};
    var i2 = e2;
    return i2.tinfo && (i2.tinfo = function(e3) {
      return at(e3, dt(vr$1));
    }(i2.tinfo), i2.tinfo.teamType = t2), i2.uinfos, void 0 !== i2.mute && (i2.mute = parseInt(i2.mute)), i2;
  }
  function Er$1(e2, t2, i2 = {}) {
    return Object.assign({ teamId: e2, teamType: t2, name: "", ownerAccountId: "", memberLimit: 0, memberCount: 0, createTime: 0, updateTime: 0, intro: "", announcement: "", avatar: "", joinMode: 0, agreeMode: 0, inviteMode: 0, updateInfoMode: 0, updateExtensionMode: 0, chatBannedMode: 0, isValidTeam: true }, i2);
  }
  function Tr$1(e2, t2, i2, r2 = {}) {
    return Object.assign({ teamId: e2, teamType: t2, accountId: i2, joinTime: 0, inTeam: true, memberRole: 0, chatBanned: false }, r2);
  }
  function Sr$1(e2, t2 = 1) {
    return e2.map((e3) => function(e4, t3 = 1) {
      return e4.teamType = t3, e4.chatBanned = void 0 !== e4.chatBanned && e4.chatBanned, e4;
    }(e3, t2));
  }
  function Cr(e2, t2) {
    var i2, r2 = Object.assign(Object.assign({}, t2), { conversationId: e2.V2NIMConversationIdUtil.messageConversationId(t2), isSelf: t2.senderId === e2.account, sendingState: 1, messageStatus: { errorCode: (null === (i2 = null == t2 ? void 0 : t2.messageStatus) || void 0 === i2 ? void 0 : i2.errorCode) || 200 } });
    return r2.threadReply && (r2.threadReply = Object.assign(Object.assign({}, r2.threadReply), { conversationType: r2.conversationType, conversationId: r2.conversationId })), r2.threadRoot && (r2.threadRoot = Object.assign(Object.assign({}, r2.threadRoot), { conversationType: r2.conversationType, conversationId: r2.conversationId })), r2;
  }
  function Nr(e2, t2) {
    return Object.assign(Object.assign({}, t2), { conversationId: e2.V2NIMConversationIdUtil.messageConversationId(t2) });
  }
  function Or(e2, t2) {
    var { createTime: i2, senderId: r2, receiverId: s2, conversationType: o2 } = t2;
    return { conversationType: o2, conversationId: e2.V2NIMConversationIdUtil.messageConversationId({ conversationType: o2, senderId: r2, receiverId: s2 }), senderId: t2.senderId, receiverId: t2.receiverId, messageServerId: t2.messageServerId, createTime: i2, messageClientId: t2.messageClientId };
  }
  function Rr(e2, t2) {
    var i2 = { 7: 1, 8: 2, 12: 3, 13: 1, 14: 2 }[t2.sysMsgType];
    return { postscript: t2.postscript, revokeType: { 7: 1, 8: 2, 12: 3, 13: 4, 14: 5 }[t2.sysMsgType] || 0, revokeAccountId: t2.opeAccount || t2.senderId, callbackExtension: t2.callbackExtension, serverExtension: t2.attach || "", messageRefer: { conversationType: i2, conversationId: e2.V2NIMConversationIdUtil.messageConversationId(Object.assign(Object.assign({}, t2), { conversationType: i2, senderId: t2.senderId, receiverId: t2.receiverId })), senderId: t2.senderId, receiverId: t2.receiverId, messageServerId: t2.messageServerId, createTime: t2.deleteMsgCreatetime, messageClientId: t2.messageClientId } };
  }
  function Ar$1(e2, t2) {
    return { conversationId: 1 === t2.conversationType ? e2.V2NIMConversationIdUtil.p2pConversationId(t2.receiverId) : 2 === t2.conversationType ? e2.V2NIMConversationIdUtil.teamConversationId(t2.teamId) : e2.V2NIMConversationIdUtil.superTeamConversationId(t2.teamId), deleteTime: t2.deleteTime, serverExtension: t2.serverExtension };
  }
  function br(e2, t2) {
    var i2 = { 0: 0, 401: 401, 1: 1, 402: 402, 2: 2, 403: 403, 3: 3, 404: 404, 4: 4, 405: 405, 5: 5, 410: 410, 6: 6, 406: 406, 7: 7, 407: 407, 8: 8, 408: 408, 9: 9, 411: 411, 10: 10, 409: 409 };
    return void 0 === i2[t2] && e2.logger.warn(`[V2NIMMessageService] undefined notification type: ${t2}`), "number" == typeof i2[t2] ? i2[t2] : -1;
  }
  function kr(e2, t2) {
    return 5 === e2.messageType ? function(e3, t3) {
      var i2, r2, s2, o2, n2, a2 = t3.attachment || {};
      if (t3.attachment && "type" in t3.attachment)
        return t3;
      var c2 = void 0;
      if (null === (i2 = a2.data) || void 0 === i2 ? void 0 : i2.tinfo) {
        var { id: d2, data: l2 } = a2, p2 = d2 > 400 ? 2 : 1, { tinfo: h2 } = Mr(Object.assign({}, l2), p2);
        c2 = {}, c2 = ge$1(h2, ["teamId"]);
      }
      var u2 = Object.assign(Object.assign(Object.assign(Object.assign({ raw: a2.raw, type: br(e3, a2.id) }, c2 ? { updatedTeamInfo: c2 } : {}), { targetIds: (null === (r2 = a2.data) || void 0 === r2 ? void 0 : r2.ids) || ((null === (s2 = a2.data) || void 0 === s2 ? void 0 : s2.id) ? [a2.data.id] : []) }), "string" == typeof (null === (o2 = a2.data) || void 0 === o2 ? void 0 : o2.attach) ? { serverExtension: a2.data.attach } : {}), "number" == typeof (null === (n2 = a2.data) || void 0 === n2 ? void 0 : n2.mute) ? { chatBanned: 0 !== a2.data.mute } : {});
      return Object.assign(Object.assign({}, t3), { attachment: u2 });
    }(t2, e2) : 100 === e2.messageType ? function(e3, t3) {
      var i2, r2, s2;
      if ("string" == typeof (null === (i2 = t3.attachment) || void 0 === i2 ? void 0 : i2.raw) && (null === (s2 = null === (r2 = e3.V2NIMMessageService) || void 0 === r2 ? void 0 : r2.customAttachmentParsers) || void 0 === s2 ? void 0 : s2.length) > 0) {
        var o2 = t3.subType || 0, n2 = e3.V2NIMMessageService.customAttachmentParsers, a2 = t3.attachment.raw;
        n2.some((i3) => {
          try {
            var r3 = i3(o2, a2);
            if (fe$1(r3))
              return r3.raw = a2, t3.attachment = r3, true;
          } catch (t4) {
            return e3.logger.warn(`customAttachmentParser: subType ${o2}, raw: ${a2}. parse error with ${t4}`), false;
          }
          return false;
        });
      }
      return t3;
    }(t2, e2) : e2;
  }
  function Vr$1(e2, t2) {
    if (!t2)
      return "";
    switch (e2) {
      case 100:
        return t2.raw || "";
      case 1:
      case 3:
      case 2:
      case 6:
        return function(e3) {
          var t3 = e3, { width: i2, height: r2, duration: s2, path: o2, file: n2, raw: a2, ctx: c2, payload: d2, bucketName: l2, objectName: p2, token: h2, ext: u2 } = t3, m2 = ge$1(t3, ["width", "height", "duration", "path", "file", "raw", "ctx", "payload", "bucketName", "objectName", "token", "ext"]), g2 = "string" == typeof u2 && "." === u2[0] ? u2.slice(1) : u2;
          return JSON.stringify(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, m2), void 0 === u2 ? {} : { ext: g2 }), void 0 === i2 ? {} : { w: i2 }), void 0 === r2 ? {} : { h: r2 }), void 0 === s2 ? {} : { dur: s2 }));
        }(t2);
      case 4:
        return function(e3) {
          return JSON.stringify({ lat: e3.latitude, lng: e3.longitude, title: e3.address });
        }(t2);
      case 12:
        return function(e3) {
          var t3 = ge$1(e3, ["raw"]);
          try {
            return JSON.stringify(Object.assign(Object.assign({}, t3), { durations: e3.durations.map((e4) => ({ accid: e4.accountId, duration: e4.duration })) }));
          } catch (t4) {
            return JSON.stringify(e3);
          }
        }(t2);
      default:
        return t2.raw || JSON.stringify(t2);
    }
  }
  class Lr {
    constructor(e2) {
      this.core = e2;
    }
    doSendFile(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        var i2 = e2.attachment;
        try {
          var [r2, s2] = yield this.core.V2NIMStorageService._uploadFile({ taskId: e2.messageClientId, uploadParams: { fileObj: (null == i2 ? void 0 : i2.file) || (null == i2 ? void 0 : i2.path), sceneName: null == i2 ? void 0 : i2.sceneName } }, t2, { fileType: e2.messageType }), o2 = Object.assign(Object.assign({}, i2), { uploadState: 1 });
          void 0 !== s2.w && (o2.width = o2.width || s2.w), void 0 !== s2.h && (o2.height = o2.height || s2.h), void 0 !== s2.dur && (o2.duration = o2.duration || s2.dur), o2.ext = o2.ext && -1 === o2.ext.indexOf(".") ? `.${o2.ext}` : o2.ext;
          var n2 = ["w", "h", "dur", "ext", "name"];
          for (var a2 in s2)
            n2.includes(a2) || (o2[a2] = s2[a2]);
          var { raw: c2, file: d2, path: l2 } = o2, p2 = ge$1(o2, ["raw", "file", "path"]);
          e2.attachment = JSON.parse(JSON.stringify(p2)), e2.attachment && (e2.attachment.raw = Vr$1(e2.messageType, e2.attachment));
        } catch (t3) {
          throw e2.attachment && (e2.attachment.uploadState = 2), t3;
        }
      });
    }
    cancelMessageAttachmentUpload(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1({ messageClientId: { type: "string", allowEmpty: false } }, e2, "", true), ![2, 6, 1, 3].includes(e2.messageType))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: `cancelMessageAttachmentUpload: messageType ${e2.messageType} incorrect` } });
        if (2 === e2.sendingState || 1 === e2.sendingState)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST, detail: { reason: "cancelMessageAttachmentUpload: message is already failed or succeeded" } });
        yield this.core.V2NIMStorageService._cancelUploadFile(e2.messageClientId);
      });
    }
  }
  var Pr = "V2NIMMessageService", Dr$1 = { "30_1": "v2SendP2pMessage", "31_2": "v2SendTeamMessage", "30_31": "v2MessageP2pModify", "31_37": "v2MessageTeamModify", "32_38": "v2MessageSuperTeamModify", "7_33": "v2MessageOnModified", "4_27": "v2MessageSyncModified", "4_28": "v2MessageSuperTeamSyncModified", "4_5": "v2BatchMarkRead", "4_12": "syncP2PMessagReceipts", "30_11": "v2SendP2PMessageReceipt", "31_28": "v2SendTeamMessageReceipts", "32_2": "v2SendSuperTeamMessage", "7_12": "onP2PMessageReceipts", "8_31": "onTeamMessageReceipts", "31_29": "v2GetTeamMessageReceipts", "31_30": "v2GetTeamMessageReceiptDetail", "7_2": "onMsg", "8_3": "onMsg", "7_101": "onMsg", "8_102": "onMsg", "21_3": "onMsg", "21_102": "onMsg", "4_4": "syncOfflineMsgs", "4_9": "syncRoamingMsgs", "4_17": "syncRoamingMsgs", "30_13": "v2RevokeMessage", "32_17": "v2RevokeSuperTeamMessage", "7_14": "onRevokeMessage", "7_15": "syncRevokeMessage", "21_18": "onRevokeMessage", "21_117": "onRevokeMessage", "30_23": "v2DeleteMessage", "30_24": "v2DeleteMessages", "4_21": "syncOnDeleteMessages", "7_123": "onDeleteMessage", "7_124": "onDeleteMessages", "29_17": "v2DownloadLocalAntiSpamVocabs" }, wr = { conversationType: { id: 0, converter: Gr$1, retConverter: Hr }, receiverId: 1, senderId: 2, fromClientType: 4, fromDeviceId: 5, fromNick: 6, createTime: { id: 7, retType: "number" }, messageType: { id: 8, retType: "number" }, text: 9, attachment: { id: 10, converter: (e2, t2) => Vr$1(t2.messageType, e2), retConverter: (e2, t2) => function(e3, t3) {
    var i2;
    try {
      switch (i2 = JSON.parse(e3), t3) {
        case 100:
          return { raw: e3 };
        case 4:
          return function(e4, t4) {
            return { latitude: t4.lat, longitude: t4.lng, address: t4.title, raw: e4 };
          }(e3, i2);
        case 2:
        case 3:
        case 1:
        case 6:
          return function(e4, t4) {
            var { w: i3, h: r2, dur: s2, ext: o2 } = t4, n2 = ge$1(t4, ["w", "h", "dur", "ext"]), a2 = "string" == typeof o2 && "." !== o2[0] ? `.${o2}` : o2;
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, n2), void 0 === o2 ? {} : { ext: a2 }), void 0 === i3 ? {} : { width: i3 }), void 0 === r2 ? {} : { height: r2 }), void 0 === s2 ? {} : { duration: s2 }), { raw: e4 });
          }(e3, i2);
        case 12:
          return function(e4, t4) {
            return Object.assign(Object.assign({}, t4), { durations: t4.durations.map((e5) => ({ accountId: e5.accid, duration: e5.duration })), raw: e4 });
          }(e3, i2);
        default:
          return "object" == typeof i2 && i2 ? Object.assign(Object.assign({}, i2), { raw: e3 }) : { raw: e3 };
      }
    } catch (t4) {
      return "object" == typeof i2 && i2 ? Object.assign(Object.assign({}, i2), { raw: e3 }) : { raw: e3 };
    }
  }(e2, Number(t2[8])) }, messageClientId: 11, messageServerId: 12, resend: { id: 13, converter: lt, retType: "boolean" }, userUpdateTime: { id: 14, retType: "number" }, serverExtension: 15, pushPayload: { id: 16, access: "pushConfig.pushPayload" }, pushContent: { id: 17, access: "pushConfig.pushContent" }, forcePushAccountIds: { id: 18, access: "pushConfig.forcePushAccountIds", def: (e2) => {
    if (e2["pushConfig.forcePush"])
      return "#%@all@%#";
  }, converter: (e2, t2) => {
    if (t2["pushConfig.forcePush"])
      return e2 ? JSON.stringify(e2) : "#%@all@%#";
  }, retConverter(e2) {
    if ("#%@all@%#" !== e2 && e2)
      try {
        return JSON.parse(e2);
      } catch (e3) {
        return [];
      }
  } }, forcePushContent: { id: 19, access: "pushConfig.forcePushContent" }, forcePush: { id: 20, access: "pushConfig.forcePush", converter: lt, retType: "boolean" }, antispamCustomMessageEnabled: { id: 21, def: (e2) => Ue$1(e2, "antispamConfig.antispamCustomMessage") ? 1 : void 0, retConverter: () => {
  } }, antispamCustomMessage: { id: 22, access: "antispamConfig.antispamCustomMessage" }, antispamBusinessId: { id: 23, access: "antispamConfig.antispamBusinessId" }, clientAntispamHit: { id: 24, access: "clientAntispamHit", converter: lt, retType: "boolean" }, antispamEnabled: { id: 25, access: "antispamConfig.antispamEnabled", converter: lt, retType: "boolean" }, needAck: { id: 26, access: "messageConfig.readReceiptEnabled", converter: lt, retType: "boolean" }, lastMessageUpdateEnabled: { id: 28, access: "messageConfig.lastMessageUpdateEnabled", converter: lt, retType: "boolean" }, threadReplySenderId: { id: 29, access: "threadReply.senderId" }, threadReplyReceiverId: { id: 30, access: "threadReply.receiverId" }, threadReplyTime: { id: 31, access: "threadReply.createTime", retType: "number" }, threadReplyServerId: { id: 32, access: "threadReply.messageServerId" }, threadReplyClientId: { id: 33, access: "threadReply.messageClientId" }, threadRootSenderId: { id: 34, access: "threadRoot.senderId" }, threadRootReceiverId: { id: 35, access: "threadRoot.receiverId" }, threadRootTime: { id: 36, access: "threadRoot.createTime", retType: "number" }, threadRootServerId: { id: 37, access: "threadRoot.messageServerId" }, threadRootClientId: { id: 38, access: "threadRoot.messageClientId" }, callbackExtension: 40, subType: { id: 41, retType: "number" }, antispamCheating: { id: 42, access: "antispamConfig.antispamCheating" }, routeEnvironment: { id: 43, access: "routeConfig.routeEnvironment" }, antispamExtension: { id: 44, access: "antispamConfig.antispamExtension" }, antispamResult: 45, __clientExt: { id: 46, converter: pt, retConverter: ht }, robotFunction: { id: 47, access: "robotConfig.function" }, robotTopic: { id: 48, access: "robotConfig.topic" }, robotCustomContent: { id: 49, access: "robotConfig.customContent" }, robotAccount: { id: 50, access: "robotConfig.accountId" }, _conversationOnlineSyncNotify: { id: 51 }, _conversationOnlineSyncData: { id: 52 }, aiAgentMsgDirection: { id: 55, access: "aiConfig.aiStatus", retAccess: "aiConfig.aiStatus", retType: "number" }, aiAgentAccount: { id: 56, access: "aiConfig.accountId", retAccess: "aiConfig.accountId" }, aiAgentContent: { id: 57, access: "aiConfig.content", converter: pt, retConverter: be$1 }, aiAgentMessages: { id: 58, access: "aiConfig.messages", converter: pt, retConverter: be$1 }, aiAgentPromptVariables: { id: 59, access: "aiConfig.promptVariables", retConverter: be$1 }, aiAgentModelConfigParams: { id: 60, access: "aiConfig.modelConfigParams", converter: pt, retConverter: be$1 }, errorCode: { id: 61, access: "messageStatus.errorCode", converter: be$1, retType: "number" }, modifyTime: { id: 62, retType: "number" }, modifyAccountId: 63, historyEnabled: { id: 100, access: "messageConfig.historyEnabled", converter: lt, retType: "boolean" }, roamingEnabled: { id: 101, access: "messageConfig.roamingEnabled", converter: lt, retType: "boolean" }, onlineSyncEnabled: { id: 102, access: "messageConfig.onlineSyncEnabled", converter: lt, retType: "boolean" }, routeEnabled: { id: 105, access: "routeConfig.routeEnabled", converter: lt, retType: "boolean" }, pushEnable: { id: 107, access: "pushConfig.pushEnabled", converter: lt, retType: "boolean" }, offlineEnabled: { id: 108, access: "messageConfig.offlineEnabled", converter: lt, retType: "boolean" }, unreadEnabled: { id: 109, access: "messageConfig.unreadEnabled", converter: lt, retType: "boolean" }, pushNickEnabled: { id: 110, access: "pushConfig.pushNickEnabled", converter: lt, retType: "boolean" }, msgAckSnapshot: { id: 112, retType: "number" }, receiverIds: { id: 154, access: "targetConfig.receiverIds", converter: pt, retConverter: () => {
  } }, inclusive: { id: 155, access: "targetConfig.inclusive", converter: (e2) => e2 ? 1 : 2, retConverter: () => {
  } }, newMemberVisible: { id: 156, access: "targetConfig.newMemberVisible", converter: (e2) => e2 ? 1 : 2, retConverter: () => {
  } } }, Ur = dt(wr), xr = { conversationType: { id: 1, access: "messageRefer.conversationType", retType: "number" }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, messageServerId: { id: 4, access: "messageRefer.messageServerId" }, messageClientId: { id: 5, access: "messageRefer.messageClientId" }, createTime: { id: 6, access: "messageRefer.createTime", retType: "number" }, deleteTime: { id: 7, retType: "number" }, serverExtension: 8 };
  dt(xr);
  var Fr = { version: 1, md5: 2, nosurl: 3, thesaurus: 4 }, Br = { createTime: { id: 0, retType: "number" }, sysMsgType: 1, receiverId: 2, senderId: 3, postscript: 4, attach: 5, pushContent: 8, pushPayload: 9, messageClientId: 10, messageServerId: 11, deleteMsgCreatetime: { id: 14, retType: "number" }, opeAccount: 16, env: 21, callbackExtension: 22 }, jr = { receiverId: 0, messageServerId: 1, readCount: { id: 100, retType: "number" }, unreadCount: { id: 101, retType: "number" }, messageClientId: 102, latestReadAccount: 103 }, $r$1 = { v2BatchMarkRead: { sid: 4, cid: 5, service: Pr, hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, v2SendP2pMessage: { sid: 30, cid: 1, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, onMsg: { sid: 7, cid: 2, service: Pr, response: [{ type: "Property", name: "msg", reflectMapper: dt(wr) }] }, syncOfflineMsgs: { sid: 4, cid: 4, service: Pr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(wr) }] }, syncRoamingMsgs: { sid: 4, cid: 9, service: Pr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(wr) }] }, v2SendP2PMessageReceipt: { sid: 30, cid: 11, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2RevokeMessage: { sid: 30, cid: 13, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: Br }] }, v2DeleteMessage: { sid: 30, cid: 23, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: xr }], response: [{ type: "Long", name: "timetag" }] }, v2DeleteMessages: { sid: 30, cid: 24, service: Pr, params: [{ type: "PropertyArray", name: "tag", reflectMapper: xr }], response: [{ type: "Long", name: "timetag" }] }, v2SendTeamMessage: { sid: 31, cid: 2, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2SendTeamMessageReceipts: { sid: 31, cid: 28, service: Pr, params: [{ type: "PropertyArray", name: "tag", reflectMapper: jr }], response: [{ type: "PropertyArray", name: "tag", reflectMapper: dt(jr) }] }, v2SendSuperTeamMessage: { sid: 32, cid: 2, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2RevokeSuperTeamMessage: { sid: 32, cid: 17, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: Br }] }, syncP2PMessagReceipts: { sid: 4, cid: 12, service: Pr, response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(wr) }] }, onP2PMessageReceipts: { sid: 7, cid: 12, service: Pr, response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2GetTeamMessageReceipts: { sid: 31, cid: 29, service: Pr, params: [{ type: "PropertyArray", name: "tag", reflectMapper: jr }], response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(jr) }] }, v2GetTeamMessageReceiptDetail: { sid: 31, cid: 30, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: jr, select: ["receiverId", "messageServerId"] }], response: [{ type: "Property", name: "data", reflectMapper: dt(jr) }, { type: "StrArray", name: "readAccountList" }, { type: "StrArray", name: "unreadAccountList" }] }, onTeamMessageReceipts: { sid: 8, cid: 31, service: Pr, response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(jr) }] }, onRevokeMessage: { sid: 7, cid: 14, service: Pr, response: [{ type: "Property", name: "data", reflectMapper: dt(Br) }] }, syncRevokeMessage: { sid: 7, cid: 15, service: Pr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(Br) }] }, syncOnDeleteMessages: { sid: 4, cid: 21, service: Pr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(xr) }] }, onDeleteMessage: { sid: 7, cid: 123, service: Pr, response: [{ type: "Property", name: "data", reflectMapper: dt(xr) }] }, onDeleteMessages: { sid: 7, cid: 124, service: Pr, response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(xr) }] }, v2DownloadLocalAntiSpamVocabs: { sid: 29, cid: 17, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: Fr }], response: [{ type: "Property", name: "data", reflectMapper: dt(Fr) }] }, v2MessageP2pModify: { sid: 30, cid: 31, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2MessageTeamModify: { sid: 31, cid: 37, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2MessageSuperTeamModify: { sid: 32, cid: 38, service: Pr, params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2MessageOnModified: { sid: 7, cid: 33, service: Pr, response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, v2MessageSyncModified: { sid: 4, cid: 27, service: Pr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(wr) }, { type: "Long", name: "time" }] }, v2MessageSuperTeamSyncModified: { sid: 4, cid: 28, service: Pr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(wr) }, { type: "Long", name: "time" }] } };
  function Gr$1(e2) {
    return 1 === e2 ? 0 : 2 === e2 ? 1 : 3 === e2 ? 5 : void 0;
  }
  function Hr(e2) {
    var t2 = parseInt(e2);
    return 0 === t2 ? 1 : 1 === t2 ? 2 : 5 === t2 ? 3 : 0;
  }
  var qr$1 = "V2NIMNotificationService", Yr$1 = { "30_7": "v2SendCustomNotification", "32_16": "v2SendCustomNotificationWithSuperTeam", "7_3": "onSysNotification", "21_19": "onSysNotification", "4_6": "v2SyncOfflineSysNotifications", "4_18": "v2SyncOfflineSysNotifications", "7_14": "v2NotificationRevoke", "21_18": "v2NotificationRevoke", "21_117": "v2NotificationRevoke", "4_19": "v2NotificationSyncRevoke", "7_15": "v2NotificationSyncRevoke", "4_16": "syncBroadcastMsg", "7_17": "onBroadcastMsg" }, Kr = { timestamp: { id: 0, retType: "number" }, type: { id: 1, retType: "number" }, receiverId: 2, senderId: 3, postscript: 4, content: 5, idServer: 6, offlineEnabled: { id: 7, converter: lt, retConverter: function(e2, t2) {
    return "0" !== t2[6] && !!parseInt(e2);
  }, access: "notificationConfig.offlineEnabled" }, pushContent: { id: 8, access: "pushConfig.pushContent" }, pushPayload: { id: 9, access: "pushConfig.pushPayload" }, deletedIdClient: 10, deletedIdServer: 11, antispamEnabled: { id: 12, converter: lt, retType: "boolean", access: "antispamConfig.antispamEnabled" }, antispamCustomNotification: { id: 13, access: "antispamConfig.antispamCustomNotification" }, deletedMsgCreateTime: 14, deletedMsgFromNick: 15, opeAccount: 16, forcePushAccountIds: { id: 18, access: "pushConfig.forcePushAccountIds", def: (e2) => {
    if (101 === e2.type && e2["pushConfig.forcePush"])
      return "#%@all@%#";
  }, converter: (e2, t2) => {
    if (t2["pushConfig.forcePush"])
      return e2 ? JSON.stringify(e2) : "#%@all@%#";
  }, retConverter(e2) {
    if ("#%@all@%#" !== e2 && e2)
      try {
        return JSON.parse(e2);
      } catch (e3) {
        return [];
      }
  } }, forcePushContent: { id: 19, access: "pushConfig.forcePushContent" }, forcePush: { id: 20, converter: lt, retType: "boolean", access: "pushConfig.forcePush" }, routeEnvironment: { id: 21, access: "routeConfig.routeEnvironment" }, callbackExt: 22, clientNotificationId: { id: 23, access: "notificationConfig.clientNotificationId" }, conversationOnlineSyncNotify: 24, conversationOnlineSyncData: 25, routeEnabled: { id: 105, converter: lt, retType: "boolean", access: "routeConfig.routeEnabled" }, pushEnabled: { id: 107, converter: lt, retType: "boolean", access: "pushConfig.pushEnabled" }, unreadEnabled: { id: 109, converter: lt, retType: "boolean", access: "notificationConfig.unreadEnabled" }, pushNickEnabled: { id: 110, converter: lt, retType: "boolean", access: "pushConfig.pushNickEnabled" } }, Wr = { id: 1, senderId: 2, timestamp: { id: 4, retType: "number" }, content: 5 }, Jr = { v2SendCustomNotification: { sid: 30, cid: 7, service: qr$1, params: [{ type: "Property", name: "tag", reflectMapper: Kr }] }, v2SendCustomNotificationWithSuperTeam: { sid: 32, cid: 16, service: qr$1, params: [{ type: "Property", name: "tag", reflectMapper: Kr }] }, onSysNotification: { sid: 7, cid: 3, service: qr$1, response: [{ type: "Property", name: "data", reflectMapper: dt(Kr) }] }, syncBroadcastMsg: { sid: 4, cid: 16, service: qr$1, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(Wr) }] }, onBroadcastMsg: { sid: 7, cid: 17, service: qr$1, response: [{ type: "Property", name: "data", reflectMapper: dt(Wr) }] }, v2SyncOfflineSysNotifications: { sid: 4, cid: 9, service: qr$1, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(Kr) }] }, v2NotificationRevoke: { sid: 7, cid: 14, service: qr$1, response: [{ type: "Property", name: "data", reflectMapper: dt(Kr) }] }, v2NotificationSyncRevoke: { sid: 7, cid: 15, service: qr$1, response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(Kr) }, { type: "Long", name: "timetag" }, { type: "Byte", name: "type" }] } }, zr = { "4_5": "ysfBatchMarkRead", "101_1": "ysfSendMessage", "101_2": "ysfOnMsg", "4_100": "ysfSyncOfflineMsgs", "101_3": "ysfOnSysNotification", "101_7": "ysfSendCustomNotification", "4_101": "ysfSyncSysNotification" }, Xr$1 = { ysfBatchMarkRead: { sid: 4, cid: 5, service: "YSFService", hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, ysfSendMessage: { sid: 101, cid: 1, service: "YSFService", params: [{ type: "Property", name: "tag", reflectMapper: wr }], response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, ysfOnMsg: { sid: 101, cid: 2, service: "YSFService", response: [{ type: "Property", name: "data", reflectMapper: dt(wr) }] }, ysfSyncOfflineMsgs: { sid: 4, cid: 100, service: "YSFService", response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(wr) }] }, ysfOnSysNotification: { sid: 101, cid: 3, service: "YSFService", response: [{ type: "Property", name: "data", reflectMapper: dt(Kr) }] }, ysfSendCustomNotification: { sid: 101, cid: 7, service: "YSFService", params: [{ type: "Property", name: "tag", reflectMapper: Kr }] }, ysfSyncSysNotification: { sid: 4, cid: 101, service: "YSFService", response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(Kr) }] } }, Qr$1 = { content: { type: "string", allowEmpty: false }, params: { type: "object", required: false, rules: { notificationConfig: { type: "object", required: false, rules: { offlineEnabled: { type: "boolean", required: false }, unreadEnabled: { type: "boolean", required: false } } }, pushConfig: { type: "object", required: false, rules: { pushEnabled: { type: "boolean", required: false }, pushNickEnabled: { type: "boolean", required: false }, pushContent: { type: "string", required: false }, pushPayload: { type: "string", required: false }, forcePush: { type: "boolean", required: false }, forcePushContent: { type: "string", required: false }, forcePushAccountIds: { type: "array", required: false, itemType: "string" } } }, antispamConfig: { type: "object", required: false, rules: { antispamEnabled: { type: "boolean", required: false }, antispamCustomNotification: { type: "string", required: false } } }, routeConfig: { type: "object", required: false, rules: { routeEnabled: { type: "boolean", required: false }, routeEnvironment: { type: "string", required: false } } } } } };
  let Zr$1 = class Zr {
    constructor(e2) {
      this.core = e2;
    }
    generateNotificationTag(e2, t2, i2 = {}) {
      var r2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2), s2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2), o2 = Date.now();
      return Object.assign(Object.assign({}, i2), { notificationConfig: Object.assign({ unreadEnabled: true, offlineEnabled: true }, null == i2 ? void 0 : i2.notificationConfig), pushConfig: Object.assign({ pushEnabled: true, pushNickEnabled: true }, null == i2 ? void 0 : i2.pushConfig), antispamConfig: Object.assign({ antispamEnabled: true }, null == i2 ? void 0 : i2.antispamConfig), routeConfig: Object.assign({ routeEnabled: true }, null == i2 ? void 0 : i2.routeConfig), timestamp: o2, type: { 1: 100, 2: 101, 3: 103 }[r2], receiverId: s2, content: t2 });
    }
  };
  function es(e2) {
    var t2 = "object" == typeof e2 ? e2 : void 0, i2 = "string" == typeof e2 ? e2 : void 0;
    if (!t2 && !i2)
      throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getFileOrPath::incorrect file and path" } });
    if ("string" == typeof i2) {
      if (0 === i2.indexOf("nim-external")) {
        var r2 = document.getElementById(i2);
        if (!(r2 && r2.files && r2.files[0]))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_FILE_NOT_FOUND, detail: { reason: `getFileOrPath::file not exist: ${i2}` } });
        t2 = r2.files[0];
      } else if ("BROWSER" === _e$1.platform)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: `getFileOrPath::incorrect path: ${i2}` } });
    }
    if ("object" == typeof t2 && void 0 === t2.size)
      throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "getFileOrPath::file no size" } });
    return { file: t2, path: i2 };
  }
  var ts = { attachment: { type: "object", rules: { url: { type: "string", allowEmpty: false } } }, thumbSize: { type: "object", rules: { width: { type: "number", required: false, min: 0 }, height: { type: "number", required: false, min: 0 } } } };
  class is extends Xt$1 {
    constructor(e2) {
      super("V2NIMStorageUtil", e2), this.core = e2;
    }
    imageThumbUrl(e2, t2) {
      return e2 + `?imageView&thumbnail=${t2}z${t2}`;
    }
    videoCoverUrl(e2, t2) {
      return e2 + `?vframe&offset=${t2}`;
    }
    getImageThumbUrl(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2();
        var i2 = e2;
        pe$1(ts, { attachment: i2, thumbSize: t2 }, "", true), t2.width = t2.width || 0, t2.height = t2.height || 0, 0 === t2.width && 0 === t2.height && (t2.width = 150);
        var r2 = i2.url;
        try {
          r2 = yield this.core.V2NIMStorageService.shortUrlToLong(i2.url);
        } catch (e3) {
          this.core.logger.warn("shortUrlToLong error:", e3);
        }
        return { url: this.core.cloudStorage.getThumbUrl(r2, t2) };
      });
    }
    getVideoCoverUrl(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2();
        var i2 = e2;
        pe$1(ts, { attachment: i2, thumbSize: t2 }, "", true), t2.width = t2.width || 0, t2.height = t2.height || 0, 0 === t2.width && 0 === t2.height && (t2.width = 150);
        var r2 = i2.url;
        try {
          r2 = yield this.core.V2NIMStorageService.shortUrlToLong(i2.url);
        } catch (e3) {
          this.core.logger.warn("shortUrlToLong error:", e3);
        }
        return { url: this.core.cloudStorage.getVideoCoverUrl(r2, t2) };
      });
    }
  }
  var rs, ss, os = { file: { md5: "$(Etag)", size: "$(ObjectSize)" }, image: { md5: "$(Etag)", size: "$(ObjectSize)", w: "$(ImageInfo.Width)", h: "$(ImageInfo.Height)", orientation: "$(ImageInfo.Orientation)" }, audio: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Audio.Duration)" }, video: { md5: "$(Etag)", size: "$(ObjectSize)", dur: "$(AVinfo.Video.Duration)", w: "$(AVinfo.Video.Width)", h: "$(AVinfo.Video.Height)" } }, ns = { accessKeyId: "", secretAccessKey: "", sessionToken: "", region: "", maxRetries: 0, bucket: "", objectName: "", token: "", shortUrl: "" };
  function as(e2 = "file") {
    var t2 = os[e2] || {};
    return JSON.stringify(t2).replace(/"/gi, '\\"');
  }
  !function(e2) {
    e2[e2.nos = 1] = "nos", e2[e2.s3 = 2] = "s3";
  }(rs || (rs = {})), function(e2) {
    e2[e2.dontNeed = -1] = "dontNeed", e2[e2.time = 2] = "time", e2[e2.urls = 3] = "urls";
  }(ss || (ss = {}));
  var cs = { chunkUploadHost: "https://wannos-web.127.net", chunkUploadHostBackupList: ["https://fileup.chatnos.com", "https://oss.chatnos.com"], commonUploadHost: "https://fileup.chatnos.com", commonUploadHostBackupList: ["https://oss.chatnos.com"], chunkMaxSize: 4194304e4, commonMaxSize: 104857600, uploadReplaceFormat: "https://{host}/{object}", cdn: { defaultCdnDomain: "nim-nosdn.netease.im", cdnDomain: "", bucket: "", objectNamePrefix: "" }, downloadUrl: "https://{bucket}-nosdn.netease.im/{object}", downloadHostList: ["nos.netease.com"], nosCdnEnable: true, isNeedToGetUploadPolicyFromServer: true };
  function ds(e2, t2) {
    e2 = e2 || {}, t2 = t2 || (() => true);
    var i2 = {};
    for (var r2 in e2)
      t2(e2[r2]) && (i2[r2] = e2[r2]);
    return i2;
  }
  class ls {
    constructor(e2, t2) {
      this.nosCdnHostTimer = 0, this.nosErrorCount = 0, this.core = e2, this.cloudStorage = t2;
    }
    get config() {
      return this.cloudStorage.config;
    }
    reset() {
      this.nosErrorCount = 0;
    }
    getNosAccessToken(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = Ue$1(yield this.core.sendCmd("getNosAccessToken", { tag: e2 }), "content.nosAccessTokenTag.token"), i2 = e2.url;
        return { token: t2, url: -1 !== i2.indexOf("?") ? i2 + "&token=" + t2 : i2 + "?token=" + t2 };
      });
    }
    deleteNosAccessToken(e2) {
      return ve$1(this, void 0, void 0, function* () {
        yield this.core.sendCmd("deleteNosAccessToken", { tag: e2 });
      });
    }
    nosUpload(e2, t2) {
      var i2, r2, s2, o2, n2, a2, c2, d2;
      return ve$1(this, void 0, void 0, function* () {
        var l2 = Ue$1(this.core, "config.cdn.bucket"), p2 = { tag: e2.nosScenes || l2 || "nim" };
        e2.nosSurvivalTime && (p2.expireSec = e2.nosSurvivalTime);
        var h2, u2 = this.core.adapters.getFileUploadInformation(e2);
        if (!t2 && !u2)
          try {
            h2 = yield this.core.sendCmd("getNosToken", { responseBody: as(e2.type), nosToken: p2 });
          } catch (e3) {
            if (this.core.logger.error("uploadFile:: getNosToken error", e3), e3 instanceof oe$1)
              throw e3;
            throw new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "getNosToken error", rawError: e3, curProvider: 1 } });
          }
        var m2 = this.config.uploadReplaceFormat.replace("{host}", this.config.cdn.cdnDomain || this.config.cdn.defaultCdnDomain).replace("{object}", u2 ? null === (i2 = u2.uploadInfo) || void 0 === i2 ? void 0 : i2.objectName : t2 ? null == t2 ? void 0 : t2.objectName : h2.content.nosToken.objectName), g2 = "";
        t2 && t2.shortUrl && (g2 = t2.shortUrl), (null === (o2 = null === (s2 = null === (r2 = null == u2 ? void 0 : u2.uploadInfo) || void 0 === r2 ? void 0 : r2.payload) || void 0 === s2 ? void 0 : s2.mixStoreToken) || void 0 === o2 ? void 0 : o2.shortUrl) && (g2 = u2.uploadInfo.payload.mixStoreToken.shortUrl);
        var v2, f2 = g2 || m2;
        try {
          var y2 = u2 ? { token: null === (n2 = null == u2 ? void 0 : u2.uploadInfo) || void 0 === n2 ? void 0 : n2.token, bucket: null === (a2 = null == u2 ? void 0 : u2.uploadInfo) || void 0 === a2 ? void 0 : a2.bucketName, objectName: null === (c2 = null == u2 ? void 0 : u2.uploadInfo) || void 0 === c2 ? void 0 : c2.objectName } : t2 || h2.content.nosToken;
          this.core.logger.log("uploadFile:: uploadFile params", { nosToken: y2, chunkUploadHost: this.config.chunkUploadHost, chunkUploadHostBackupList: this.config.chunkUploadHostBackupList, commonUploadHost: this.config.commonUploadHost, commonUploadHostBackupList: this.config.commonUploadHostBackupList, platform: _e$1.platform });
          var I2 = "BROWSER" === _e$1.platform ? this.config.chunkUploadHost : `${this.config.commonUploadHost}/${y2 && y2.bucket}`;
          this.core.reporterHookCloudStorage.update({ remote_addr: I2, operation_type: t2 ? 2 : 0 }), v2 = yield this.core.adapters.uploadFile(Object.assign(Object.assign(Object.assign({}, e2), { nosToken: y2, chunkUploadHost: this.config.chunkUploadHost, chunkUploadHostBackupList: this.config.chunkUploadHostBackupList, commonUploadHost: this.config.commonUploadHost, commonUploadHostBackupList: this.config.commonUploadHostBackupList, maxSize: e2.maxSize || this.config.chunkMaxSize }), t2 ? { payload: { mixStoreToken: t2 } } : {}));
        } catch (i3) {
          this.core.logger.error("uploadFile::nos uploadFile error:", i3);
          var _2 = "v2" === Ue$1(this.core, "options.apiVersion");
          if (i3.code === ie$1.V2NIM_ERROR_CODE_CANCELLED || 10499 === i3.errCode)
            throw new ce$1({ code: _2 ? ie$1.V2NIM_ERROR_CODE_CANCELLED : 400, detail: { reason: Ue$1(i3, "message") || "Request abort", rawError: i3, curProvider: 1 } });
          if (_2 && i3.errCode === ie$1.V2NIM_ERROR_CODE_FILE_OPEN_FAILED)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_FILE_OPEN_FAILED, detail: { reason: Ue$1(i3, "message") || "Read file failed", rawError: i3, curProvider: 1 } });
          var { net_connect: M2 } = yield _e$1.net.getNetworkStatus();
          if (false === M2)
            throw new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "No network", rawError: i3, curProvider: 1 } });
          if (t2) {
            if (this.nosErrorCount <= 0) {
              try {
                this.cloudStorage.mixStorage._addCircuitTimer();
              } catch (t3) {
                throw new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "All upload attempts failed", rawError: t3, curProvider: this.cloudStorage.mixStorage.curProvider, mixStorePolicy: this.cloudStorage.mixStorage.mixStorePolicy, file: e2.file || e2.filePath } });
              }
              return this.nosErrorCount = Ue$1(this.cloudStorage, "mixStorePolicy.nosPolicy.uploadConfig.retryPolicy.retry"), this.cloudStorage._uploadFile(e2);
            }
            return this.nosErrorCount--, this.nosUpload(e2, t2);
          }
          throw new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "NOS attempts failed", rawError: i3, curProvider: 1 } });
        }
        var E2 = null == v2 ? void 0 : v2.type, T2 = E2 && E2.indexOf("/") > -1 ? E2.slice(0, E2.indexOf("/")) : "";
        T2 || (T2 = e2.type || "");
        var S2, C2 = { image: "imageInfo", video: "vinfo", audio: "vinfo" };
        if (!C2[T2])
          return Object.assign({ url: f2 }, v2);
        try {
          S2 = yield this.core.adapters.request(`${m2}?${C2[T2]}`, { method: "GET", dataType: "json", timeout: 5e3 }, { exception_service: 3 });
        } catch (e3) {
          return this.core.logger.error("uploadFile:: fetch file info error", e3), Object.assign({ url: f2 }, v2);
        }
        if (S2) {
          var { data: N2 } = S2, O2 = "imageInfo" === C2[T2] ? N2 : null === (d2 = null == N2 ? void 0 : N2.GetVideoInfo) || void 0 === d2 ? void 0 : d2.VideoInfo;
          return ds({ url: f2, name: v2.name, size: v2.size, ext: v2.ext, w: null == O2 ? void 0 : O2.Width, h: null == O2 ? void 0 : O2.Height, orientation: null == O2 ? void 0 : O2.Orientation, dur: null == O2 ? void 0 : O2.Duration, audioCodec: null == O2 ? void 0 : O2.AudioCodec, videoCodec: null == O2 ? void 0 : O2.VideoCodec, container: null == O2 ? void 0 : O2.Container }, function(e3) {
            return void 0 !== e3;
          });
        }
        return Object.assign({ url: f2 }, v2);
      });
    }
    _getNosCdnHost() {
      var e2;
      return ve$1(this, void 0, void 0, function* () {
        var t2;
        try {
          t2 = yield this.core.sendCmd("getNosCdnHost");
        } catch (e3) {
          return void this.core.logger.error("getNosCdnHost::error", e3);
        }
        if (t2) {
          var i2 = null === (e2 = null == t2 ? void 0 : t2.content) || void 0 === e2 ? void 0 : e2.nosConfigTag, r2 = parseInt(null == i2 ? void 0 : i2.expire);
          0 !== r2 && i2.cdnDomain ? -1 === r2 ? (this.config.cdn.bucket = i2.bucket, this.config.cdn.cdnDomain = i2.cdnDomain, this.config.cdn.objectNamePrefix = i2.objectNamePrefix) : (this.config.cdn.bucket = i2.bucket, this.config.cdn.cdnDomain = i2.cdnDomain, this.config.cdn.objectNamePrefix = i2.objectNamePrefix, this.nosCdnHostTimer = this.core.timerManager.addTimer(() => {
            this._getNosCdnHost();
          }, 1e3 * r2)) : (this.config.cdn.bucket = "", this.config.cdn.cdnDomain = "", this.config.cdn.objectNamePrefix = "");
        }
      });
    }
  }
  var ps = { "6_2": "getNosToken", "6_22": "getOriginUrl", "6_24": "getNosAccessToken", "6_25": "deleteNosAccessToken", "6_26": "getNosCdnHost", "6_27": "getGrayscaleConfig", "6_28": "getMixStorePolicy", "6_29": "getMixStoreToken", "6_30": "getFileAuthToken" }, hs = { nosToken: { objectName: 1, token: 2, bucket: 3, expireTime: 4, expireSec: 7, tag: 8, shortUrl: 9 }, mixStoreTokenReqTag: { provider: 0, tokenCount: 1, nosSurvivalTime: 2, tag: 3, returnBody: 4, policyVersion: 5 }, nosConfigTag: { bucket: 1, cdnDomain: 2, expire: 3, objectNamePrefix: 4 }, grayConfigTag: { config: 0, ttl: 1 }, mixStorePolicyTag: { providers: 0, ttl: 1, mixEnable: 2, nosPolicy: 3, s3Policy: 4, policyVersion: 5 }, mixStoreTokenResTag: { provider: 0, accessKeyId: 1, secretAccessKey: 2, sessionToken: 3, token: 4, expireTime: 5, bucket: 6, objectName: 7, fileExpireSec: 8, tag: 9, shortUrl: 10, region: 11 }, nosSafeUrlTag: { safeUrl: 0, originUrl: 1 }, mixStoreAuthTokenReqTag: { type: 1, urls: 2 }, mixStoreAuthTokenResTag: { type: 1, tokens: 2, token: 3, ttl: 4 }, nosAccessTokenTag: { token: 0, url: 1, userAgent: 2, ext: 3 } }, us = { getNosToken: { sid: 6, cid: 2, service: "cloudStorage", params: [{ type: "String", name: "responseBody" }, { type: "Property", name: "nosToken", entity: "nosToken", reflectMapper: hs.nosToken }], response: [{ type: "Property", name: "nosToken", reflectMapper: ft(hs.nosToken) }] }, getOriginUrl: { sid: 6, cid: 22, service: "cloudStorage", params: [{ type: "Property", name: "nosSafeUrlTag", reflectMapper: hs.nosSafeUrlTag }], response: [{ type: "Property", name: "nosSafeUrlTag", reflectMapper: ft(hs.nosSafeUrlTag) }] }, getNosCdnHost: { sid: 6, cid: 26, service: "cloudStorage", response: [{ type: "Property", name: "nosConfigTag", reflectMapper: ft(hs.nosConfigTag) }] }, getGrayscaleConfig: { sid: 6, cid: 27, service: "cloudStorage", params: [{ type: "Property", name: "config" }], response: [{ type: "Property", name: "grayConfigTag", reflectMapper: ft(hs.grayConfigTag) }] }, getMixStorePolicy: { sid: 6, cid: 28, service: "cloudStorage", params: [{ type: "LongArray", name: "supportType" }], response: [{ type: "Property", name: "mixStorePolicyTag", reflectMapper: ft(hs.mixStorePolicyTag) }] }, getMixStoreToken: { sid: 6, cid: 29, service: "cloudStorage", params: [{ type: "Property", name: "mixStoreTokenReqTag", reflectMapper: hs.mixStoreTokenReqTag }], response: [{ type: "Property", name: "mixStoreTokenResTag", reflectMapper: ft(hs.mixStoreTokenResTag) }] }, getFileAuthToken: { sid: 6, cid: 30, service: "cloudStorage", params: [{ type: "Property", name: "mixStoreAuthTokenReqTag", reflectMapper: hs.mixStoreAuthTokenReqTag }], response: [{ type: "Property", name: "mixStoreAuthTokenResTag", reflectMapper: ft(hs.mixStoreAuthTokenResTag) }] }, getNosAccessToken: { sid: 6, cid: 24, service: "cloudStorage", params: [{ type: "Property", name: "tag", reflectMapper: hs.nosAccessTokenTag }], response: [{ type: "Property", name: "tag", reflectMapper: ft(hs.nosAccessTokenTag) }] }, deleteNosAccessToken: { sid: 6, cid: 25, service: "cloudStorage", params: [{ type: "Property", name: "tag", reflectMapper: hs.nosAccessTokenTag }] } };
  class ms {
    constructor(e2, t2) {
      this.GRAYKEY = "AllGrayscaleConfig", this.MIXSTOREKEY = "AllMixStorePolicy", this.grayConfig = { mixStoreEnable: false, timeStamp: 0, ttl: 0 }, this.mixStorePolicy = { providers: [], timeStamp: 0, ttl: 0, s3Policy: null, nosPolicy: null, policyVersion: void 0 }, this.curProvider = 1, this.mixStoreErrorCount = 10, this.circuitTimer = 0, this.core = e2, this.cloudStorage = t2, this.logger = e2.logger;
    }
    reset() {
      this.grayConfig = null, this.mixStorePolicy = { providers: [], timeStamp: 0, ttl: 0, s3Policy: null, nosPolicy: null, policyVersion: void 0 }, this.curProvider = 1, this.mixStoreErrorCount = 10;
    }
    getGrayscaleConfig(e2) {
      var t2;
      return ve$1(this, void 0, void 0, function* () {
        if (_e$1.localStorage)
          try {
            _e$1.localStorage.getItem && _e$1.localStorage.getItem(this.GRAYKEY) && (this.grayConfig = JSON.parse(_e$1.localStorage.getItem(this.GRAYKEY))[e2]);
          } catch (e3) {
            _e$1.localStorage.getItem(this.GRAYKEY) && this.core.logger.error("uploadFile:: JSON.parse grayscaleConfig error ", e3);
          }
        if (!this.grayConfig || this.grayConfig.timeStamp + 1e3 * this.grayConfig.ttl < (/* @__PURE__ */ new Date()).getTime()) {
          var i2 = yield this.core.sendCmd("getGrayscaleConfig", { config: {} });
          if (i2.content && i2.content.grayConfigTag) {
            this.logger.log("uploadFile::getAppGrayConfigRequest success ");
            try {
              this.grayConfig = JSON.parse(i2.content.grayConfigTag.config), this.grayConfig.ttl = JSON.parse(i2.content.grayConfigTag.ttl);
            } catch (e3) {
              this.logger.error("getGrayscaleConfig error", e3);
            }
            if (!this.grayConfig)
              return;
            var r2 = _e$1.localStorage.getItem(this.GRAYKEY) ? JSON.parse(_e$1.localStorage.getItem(this.GRAYKEY)) : {};
            this.grayConfig.timeStamp = (/* @__PURE__ */ new Date()).getTime(), r2[e2] = this.grayConfig, _e$1.localStorage.setItem(this.GRAYKEY, JSON.stringify(r2));
          } else
            this.logger.log("uploadFile:: result grayConfig:", i2.content);
        }
        (null === (t2 = this.grayConfig) || void 0 === t2 ? void 0 : t2.mixStoreEnable) && (yield this._getMixStorePolicy(e2));
      });
    }
    _getMixStorePolicy(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = (/* @__PURE__ */ new Date()).getTime();
        if (_e$1.localStorage)
          try {
            if (this.mixStorePolicy = JSON.parse(_e$1.localStorage.getItem(this.MIXSTOREKEY))[e2], this.curProvider = parseInt(this.mixStorePolicy.providers[0]), this.mixStorePolicy.timeStamp && this.mixStorePolicy.timeStamp + 1e3 * this.mixStorePolicy.ttl > t2) {
              var i2 = this.mixStorePolicy.timeStamp + 1e3 * this.mixStorePolicy.ttl - t2;
              this.core.timerManager.addTimer(this._getMixStorePolicy.bind(this, e2), i2);
            }
          } catch (t3) {
            _e$1.localStorage.getItem(this.MIXSTOREKEY) && JSON.parse(_e$1.localStorage.getItem(this.MIXSTOREKEY))[e2] && this.core.logger.error("uploadFile:: JSON.parse mixStorePolicy error ", t3);
          }
        if (!this.mixStorePolicy || this.mixStorePolicy.timeStamp + 1e3 * this.mixStorePolicy.ttl <= t2)
          try {
            var r2 = (yield this.core.sendCmd("getMixStorePolicy", { supportType: this.cloudStorage.aws.s3 ? [1, 2] : [1] })).content.mixStorePolicyTag;
            this.mixStorePolicy = { providers: [], timeStamp: 0, ttl: 0, s3Policy: null, nosPolicy: null, policyVersion: void 0 }, this.mixStorePolicy.policyVersion = r2.policyVersion, this.mixStorePolicy.ttl = Number(r2.ttl), this.mixStorePolicy.providers = r2.providers.split(","), this.circuitTimer && this.core.timerManager.deleteTimer(this.circuitTimer), this.curProvider = parseInt(this.mixStorePolicy.providers[0]), this.mixStorePolicy.nosPolicy = r2.nosPolicy ? JSON.parse(r2.nosPolicy) : null, this.mixStorePolicy.s3Policy = r2.s3Policy ? JSON.parse(r2.s3Policy) : null, null === this.mixStorePolicy.s3Policy ? this.mixStorePolicy.providers = ["1"] : null === this.mixStorePolicy.nosPolicy ? this.mixStorePolicy.providers = ["2"] : this.mixStorePolicy.providers = this.mixStorePolicy.s3Policy.priority < this.mixStorePolicy.nosPolicy.priority ? ["2", "1"] : ["1", "2"], this.core.timerManager.addTimer(this._getMixStorePolicy.bind(this, e2), 1e3 * this.mixStorePolicy.ttl);
            var s2 = _e$1.localStorage.getItem(this.MIXSTOREKEY) ? JSON.parse(_e$1.localStorage.getItem(this.MIXSTOREKEY)) : {};
            this.mixStorePolicy.timeStamp = (/* @__PURE__ */ new Date()).getTime(), s2[e2] = this.mixStorePolicy, _e$1.localStorage.setItem(this.MIXSTOREKEY, JSON.stringify(s2));
          } catch (t3) {
            if (this.logger.error("getMixStorePolicy error", t3), 0 === this.mixStoreErrorCount)
              throw new Error("getMixStorePolicy all count error");
            this._getMixStorePolicy(e2), this.mixStoreErrorCount--;
          }
        this.mixStorePolicy.nosPolicy && (this.cloudStorage.nos.nosErrorCount = this.mixStorePolicy.nosPolicy.uploadConfig.retryPolicy.retry);
      });
    }
    _addCircuitTimer() {
      var e2 = this.mixStorePolicy.providers, t2 = e2[(e2.indexOf(String(this.curProvider)) + 1) % e2.length];
      if (!t2)
        throw new Error("uploadFile nextProvider error");
      if (t2 === e2[0])
        throw new Error("uploadFile all policy fail");
      if (this.logger.log(`uploadFile:: upload policy will change,now policy:${this.curProvider} nextProvider:${t2}`), this.curProvider = parseInt(t2), this.mixStorePolicy.nosPolicy && this.mixStorePolicy.s3Policy) {
        var i2 = this.mixStorePolicy[1 === this.curProvider ? "nosPolicy" : "s3Policy"].uploadConfig.retryPolicy.circuit;
        if (!i2 || 0 === i2)
          throw new Error("uploadFile circuit error");
        this.circuitTimer = this.core.timerManager.addTimer(() => {
          this.logger.log(`uploadFile:: upload policy will change,now policy:${this.curProvider} nextProvider:${parseInt(this.mixStorePolicy.providers[0])}`), this.curProvider = parseInt(this.mixStorePolicy.providers[0]), this.core.timerManager.deleteTimer(this.circuitTimer);
        }, 1e3 * i2);
      }
      throw new Error("uploadFile will not retry again");
    }
    getFileAuthToken(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return (yield this.core.sendCmd("getFileAuthToken", { mixStoreAuthTokenReqTag: e2 })).content.mixStoreAuthTokenResTag;
      });
    }
  }
  var gs = -1;
  class vs {
    constructor(e2, t2) {
      this.s3 = null, this.core = e2, this.cloudStorage = t2, this.logger = e2.logger;
    }
    get mixStorePolicy() {
      return this.cloudStorage.mixStorage.mixStorePolicy;
    }
    s3Upload(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        var i2;
        if (gs += 1, e2.file)
          i2 = e2.file;
        else if ("string" == typeof e2.fileInput) {
          this.logger.warn("fileInput will abandon,Please use file or filepath");
          var r2 = document.getElementById(e2.fileInput);
          if (!(r2 && r2.files && r2.files[0]))
            throw new Error("Can not get file from fileInput");
          i2 = r2.files[0];
        } else {
          if (!(e2.fileInput && e2.fileInput.files && e2.fileInput.files[0]))
            throw new Error(`Can not get file from fileInput ${e2.fileInput}`);
          i2 = e2.fileInput.files[0];
        }
        if (!this.mixStorePolicy.s3Policy)
          throw new Error("dont get s3 policy");
        var s2 = { accessKeyId: t2.accessKeyId, secretAccessKey: t2.secretAccessKey, sessionToken: t2.sessionToken, region: t2.region, maxRetries: this.mixStorePolicy.s3Policy.uploadConfig.retryPolicy.retry }, o2 = this.s3, n2 = decodeURIComponent(t2.bucket), a2 = decodeURIComponent(t2.objectName), c2 = i2, d2 = `https://${n2}.s3.amazonaws.com/${a2}`, l2 = {}, p2 = this.mixStorePolicy.s3Policy;
        if (p2 && p2.uploadConfig && Array.isArray(p2.uploadConfig.uploadUrl) && p2.uploadConfig.uploadUrl.length > 0) {
          var h2 = p2.uploadConfig.uploadUrl.length;
          gs %= h2, l2.endpoint = p2.uploadConfig.uploadUrl[gs], l2.s3ForcePathStyle = true, d2 = `${l2.endpoint}/${n2}/${a2}`;
        }
        this.core.reporterHookCloudStorage.update({ remote_addr: d2, operation_type: 1 });
        var u2 = new o2(l2);
        u2.config.update(s2);
        var m2 = { Bucket: n2, Key: a2, Body: c2, Metadata: { token: t2.token }, ContentType: c2.type || "application/octet-stream" };
        this.core.logger.log("uploadFile:: s3 upload params:", m2);
        var g2 = u2.upload(m2);
        return g2.on("httpUploadProgress", (t3) => {
          var i3 = parseFloat((t3.loaded / t3.total).toFixed(2));
          e2.onUploadProgress && e2.onUploadProgress({ total: t3.total, loaded: t3.loaded, percentage: i3, percentageText: Math.round(100 * i3) + "%" });
        }), new Promise((i3, r3) => {
          var s3 = (/* @__PURE__ */ new Date()).getTime();
          g2.send((o3, d3) => ve$1(this, void 0, void 0, function* () {
            var l3, p3, h3;
            if (o3 && "RequestAbortedError" === o3.code)
              this.logger.error("uploadFile:", "api::s3:upload file abort.", o3), r3(new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_CANCELLED : 400, detail: { reason: "S3RequestAbortedError", rawError: o3, curProvider: 2 } }));
            else {
              if (!o3) {
                var u3 = this.mixStorePolicy.s3Policy.cdnSchema;
                u3 = (u3 = u3.replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn)).replace("{objectName}", d3.Key);
                var m3 = { size: c2.size, name: c2.name, url: t2.shortUrl ? t2.shortUrl : u3, ext: c2.name.split(".")[1] || "unknown" }, g3 = e2.type || "", v2 = { image: "imageInfo" };
                return i3(v2[g3] ? yield this.getS3FileInfo({ url: u3, infoSuffix: v2[g3], s3Result: m3 }) : m3);
              }
              this.logger.error("uploadFile:", "api::s3:upload file failed.", o3), this.core.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account || (null === (p3 = null === (l3 = this.core) || void 0 === l3 ? void 0 : l3.auth) || void 0 === p3 ? void 0 : p3.account), trace_id: null === (h3 = this.core.clientSocket.socket) || void 0 === h3 ? void 0 : h3.sessionId, start_time: s3, action: 1, exception_service: 4 }), this.core.reporter.reportTraceUpdateV2("exceptions", { code: "number" == typeof o3.status ? o3.status : "number" == typeof o3.code ? o3.code : 0, description: o3.message || `${o3.code}`, operation_type: 1, target: JSON.stringify({ bucket: n2, object: a2 }) }, { asyncParams: _e$1.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1);
              var { net_connect: f2 } = yield _e$1.net.getNetworkStatus();
              if (false === f2)
                return r3(new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "No network", rawError: o3, curProvider: this.cloudStorage.mixStorage.curProvider } }));
              try {
                this.cloudStorage.mixStorage._addCircuitTimer();
              } catch (t3) {
                return r3(new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "All upload attempts failed", rawError: t3, curProvider: this.cloudStorage.mixStorage.curProvider, mixStorePolicy: this.mixStorePolicy, file: e2.file || e2.filePath } }));
              }
              i3(this.cloudStorage._uploadFile(e2));
            }
          })), e2.onUploadStart && e2.onUploadStart(g2);
        });
      });
    }
    getS3FileInfo(e2) {
      var t2;
      return ve$1(this, void 0, void 0, function* () {
        var i2, { url: r2, infoSuffix: s2, s3Result: o2 } = e2;
        try {
          i2 = yield this.core.adapters.request(`${r2}?${s2}`, { method: "GET", dataType: "text", timeout: 5e3 }, { exception_service: 3 });
        } catch (e3) {
          return this.core.logger.error("uploadFile:: fetch file info error", e3), o2;
        }
        if (i2) {
          var { data: n2 } = i2, a2 = "imageInfo" === s2 ? n2 : null === (t2 = null == n2 ? void 0 : n2.GetVideoInfo) || void 0 === t2 ? void 0 : t2.VideoInfo;
          return ds(Object.assign(Object.assign({}, o2), { w: null == a2 ? void 0 : a2.Width, h: null == a2 ? void 0 : a2.Height, orientation: null == a2 ? void 0 : a2.Orientation, dur: null == a2 ? void 0 : a2.Duration, audioCodec: null == a2 ? void 0 : a2.AudioCodec, videoCodec: null == a2 ? void 0 : a2.VideoCodec, container: null == a2 ? void 0 : a2.Container }), function(e3) {
            return void 0 !== e3;
          });
        }
        return this.core.logger.error("uploadFile:: fetch s3 file info no result", `${r2}?${s2}`), o2;
      });
    }
  }
  class fs {
    constructor(e2, t2 = {}) {
      this.config = {}, this.uploadTaskMap = {}, this.name = "cloudStorage", this.logger = e2.logger, this.core = e2, this.nos = new ls(e2, this), this.mixStorage = new ms(e2, this), this.aws = new vs(e2, this), ct({ cmdMap: ps, cmdConfig: us }), this.setOptions(t2), this.setListeners();
    }
    setOptions(e2 = {}) {
      var t2 = e2.storageKeyPrefix || "NIMClient";
      this.mixStorage.GRAYKEY = t2 + "-AllGrayscaleConfig", this.mixStorage.MIXSTOREKEY = t2 + "-AllMixStorePolicy";
      var { s3: i2 } = e2, r2 = ge$1(e2, ["s3"]), s2 = Object.assign({}, cs, this.config);
      if (r2 && Object.prototype.hasOwnProperty.call(r2, "cdn")) {
        var o2 = Object.assign(Object.assign({}, s2.cdn), r2.cdn);
        this.config = Object.assign({}, s2, r2), this.config.cdn = o2;
      } else
        this.config = Object.assign({}, s2, r2);
      i2 && (this.aws.s3 = i2);
    }
    setListeners() {
      this.core.eventBus.on("kicked", this._clearUnCompleteTask.bind(this)), this.core.eventBus.on("disconnect", this._clearUnCompleteTask.bind(this)), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLogout", this._clearUnCompleteTask.bind(this)), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleKicked", this._clearUnCompleteTask.bind(this));
    }
    _clearUnCompleteTask() {
      Object.keys(this.uploadTaskMap).forEach((e2) => {
        var t2 = this.uploadTaskMap[e2];
        t2 && t2.abort && t2.abort();
      }), this.uploadTaskMap = {};
    }
    init() {
      return ve$1(this, void 0, void 0, function* () {
        this.mixStorage.reset(), this.nos.reset(), this.config.isNeedToGetUploadPolicyFromServer && (yield this.mixStorage.getGrayscaleConfig(this.core.options.appkey)), yield this.nos._getNosCdnHost();
      });
    }
    processCallback(e2, t2) {
      var i2 = e2.onUploadProgress, r2 = e2.onUploadDone, s2 = e2.onUploadStart;
      return { onUploadStart: "function" == typeof s2 ? (e3) => {
        this.uploadTaskMap[t2] = e3;
        try {
          s2(e3);
        } catch (e4) {
          this.logger.error("CloudStorage::uploadFile:options.onUploadStart execute error", e4);
        }
      } : (e3) => {
        this.uploadTaskMap[t2] = e3;
      }, onUploadProgress: "function" == typeof i2 ? (e3) => {
        this.core.reporterHookCloudStorage.update({ transferred_size: e3.loaded, full_size: e3.total });
        try {
          i2(e3);
        } catch (e4) {
          this.logger.error("CloudStorage::uploadFile:options.onUploadProgress execute error", e4);
        }
      } : (e3) => {
        this.core.reporterHookCloudStorage.update({ transferred_size: e3.loaded, full_size: e3.total });
      }, onUploadDone: "function" == typeof r2 ? (e3) => {
        this.core.reporterHookCloudStorage.end(0);
        try {
          r2(e3);
        } catch (e4) {
          this.logger.error("CloudStorage::uploadFile:options.onUploadDone execute error", e4);
        }
      } : () => {
        this.core.reporterHookCloudStorage.end(0);
      }, taskKey: t2 };
    }
    uploadFile(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1({ maxSize: { type: "number", required: false }, type: { type: "enum", values: ["file", "image", "audio", "video"] } }, e2), !e2.fileInput && !e2.file && !e2.filePath)
          throw new Error("uploadFile needs target file object or a filePath");
        if (e2.type && "file" !== e2.type) {
          var t2 = Ue$1(e2, "file.type");
          if (t2 && "string" == typeof t2 && -1 === t2.indexOf(e2.type))
            throw new Error(`The meta type "${t2}" does not match "${e2.type}"`);
        }
        if (this.core.reporterHookCloudStorage.start(), e2.file)
          this.core.reporterHookCloudStorage.update({ full_size: e2.file.size });
        else if ("string" == typeof e2.fileInput) {
          var i2 = document.getElementById(e2.fileInput);
          i2 && i2.files && i2.files[0] && this.core.reporterHookCloudStorage.update({ full_size: i2.files[0].size });
        } else
          e2.fileInput && e2.fileInput.files && e2.fileInput.files[0] && this.core.reporterHookCloudStorage.update({ full_size: e2.fileInput.files[0].size });
        var r2 = Ne$1(), { onUploadStart: s2, onUploadProgress: o2, onUploadDone: n2 } = this.processCallback(e2, r2);
        e2.onUploadStart = s2, e2.onUploadProgress = o2, e2.onUploadDone = n2;
        var a2 = null;
        try {
          a2 = yield this._uploadFile(e2), e2.md5 && (a2.md5 = e2.md5), delete this.uploadTaskMap[r2];
        } catch (e3) {
          throw delete this.uploadTaskMap[r2], this.core.reporterHookCloudStorage.end((e3 && e3.code) === ie$1.V2NIM_ERROR_CODE_CANCELLED ? 3 : 1), e3;
        }
        return a2 && (a2.size = void 0 === a2.size ? void 0 : Number(a2.size), a2.w = void 0 === a2.w ? void 0 : Number(a2.w), a2.h = void 0 === a2.h ? void 0 : Number(a2.h), a2.dur = void 0 === a2.dur ? void 0 : Number(a2.dur)), a2.url = decodeURIComponent(a2.url), e2.onUploadDone({ size: a2.size, name: a2.name, url: a2.url, ext: a2.name.split(".")[1] || "unknown" }), a2;
      });
    }
    _uploadFile(e2) {
      var t2, i2;
      return ve$1(this, void 0, void 0, function* () {
        if (!Ue$1(this.mixStorage, "grayConfig.mixStoreEnable") || !Ue$1(this.mixStorage, "mixStorePolicy.providers.length"))
          return this.logger.log("uploadFile:: uploadFile begin, use old nos"), this.nos.nosUpload(e2);
        this.logger.log(`uploadFile::_uploadFile, grayConfig enable:${Ue$1(this.mixStorage, "grayConfig.mixStoreEnable")} curProvider:${Ue$1(this.mixStorage, "curProvider")}`);
        var r2 = this.core.adapters.getFileUploadInformation(e2), s2 = true;
        r2 ? false === r2.complete && 2 === this.mixStorage.curProvider && (s2 = false) : s2 = false, this.aws.s3 || (this.mixStorage.curProvider = 1);
        var o2 = ns;
        if (!s2)
          try {
            o2 = (yield this.core.sendCmd("getMixStoreToken", { mixStoreTokenReqTag: { provider: this.mixStorage.curProvider, tokenCount: 1, tag: "qchat", nosSurvivalTime: e2.nosSurvivalTime, returnBody: as(e2.type), policyVersion: this.mixStorage.mixStorePolicy.policyVersion } })).content.mixStoreTokenResTag;
          } catch (e3) {
            if (this.core.logger.error("uploadFile:: getMixStoreToken error", e3), e3 instanceof oe$1)
              throw e3;
            throw new ce$1({ code: "v2" === Ue$1(this.core, "options.apiVersion") ? ie$1.V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED : 400, detail: { reason: "getMixStoreToken error", rawError: e3, curProvider: this.mixStorage.curProvider, mixStorePolicy: this.mixStorage.mixStorePolicy } });
          }
        return s2 ? this.nos.nosUpload(e2, null === (i2 = null === (t2 = null == r2 ? void 0 : r2.uploadInfo) || void 0 === t2 ? void 0 : t2.payload) || void 0 === i2 ? void 0 : i2.mixStoreToken) : 2 === this.mixStorage.curProvider ? this.aws.s3Upload(e2, o2) : this.nos.nosUpload(e2, o2);
      });
    }
    getThumbUrl(e2, t2) {
      var i2, r2, s2, o2, n2;
      if (!new RegExp(/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?/).test(e2))
        return this.logger.error("illegal file url:" + e2), e2;
      var [a2, c2, d2, l2, p2, h2, u2, m2] = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.exec(e2);
      if (null === (i2 = this.grayConfig) || void 0 === i2 ? void 0 : i2.mixStoreEnable) {
        var g2 = this._getUrlType(e2);
        if (2 === g2 && this.mixStorePolicy.s3Policy && Ue$1(this.mixStorePolicy, "s3Policy.thumbPolicy.imagethumb"))
          return (null === (s2 = null === (r2 = this.mixStorePolicy.s3Policy) || void 0 === r2 ? void 0 : r2.thumbPolicy) || void 0 === s2 ? void 0 : s2.imagethumb).replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn).replace("{objectName}", h2).replace("{x}", t2.width.toString()).replace("{y}", t2.height.toString());
        if (1 === g2 && this.mixStorePolicy.nosPolicy && Ue$1(this.mixStorePolicy, "nosPolicy.thumbPolicy.imagethumb"))
          return (null === (n2 = null === (o2 = this.mixStorePolicy.nosPolicy) || void 0 === o2 ? void 0 : o2.thumbPolicy) || void 0 === n2 ? void 0 : n2.imagethumb).replace("{cdnDomain}", this.mixStorePolicy.nosPolicy.dlcdn).replace("{objectName}", h2).replace("{x}", t2.width.toString()).replace("{y}", t2.height.toString());
      }
      return e2.includes("?") ? e2 + `&imageView&thumbnail=${t2.width}x${t2.height}` : e2 + `?imageView&thumbnail=${t2.width}x${t2.height}`;
    }
    getVideoCoverUrl(e2, t2) {
      var i2, r2, s2, o2, n2;
      if (!new RegExp(/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?/).test(e2))
        return this.logger.error("illegal file url:" + e2), e2;
      var [a2, c2, d2, l2, p2, h2, u2, m2] = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.exec(e2);
      if (null === (i2 = this.grayConfig) || void 0 === i2 ? void 0 : i2.mixStoreEnable) {
        var g2 = this._getUrlType(e2);
        if (2 === g2 && this.mixStorePolicy.s3Policy && Ue$1(this.mixStorePolicy, "s3Policy.thumbPolicy.vframe"))
          return (null === (s2 = null === (r2 = this.mixStorePolicy.s3Policy) || void 0 === r2 ? void 0 : r2.thumbPolicy) || void 0 === s2 ? void 0 : s2.vframe).replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn).replace("{objectName}", h2).replace("{x}", t2.width.toString()).replace("{y}", t2.height.toString()).replace("{offset}", "0").replace("{type}", "png");
        if (1 === g2 && this.mixStorePolicy.nosPolicy && Ue$1(this.mixStorePolicy, "nosPolicy.thumbPolicy.vframe"))
          return (null === (n2 = null === (o2 = this.mixStorePolicy.nosPolicy) || void 0 === o2 ? void 0 : o2.thumbPolicy) || void 0 === n2 ? void 0 : n2.vframe).replace("{cdnDomain}", this.mixStorePolicy.nosPolicy.dlcdn).replace("{objectName}", h2).replace("{x}", t2.width.toString()).replace("{y}", t2.height.toString()).replace("{offset}", "0").replace("{type}", "png");
      }
      return e2.includes("?") ? e2 + `&vframe&offset=0&resize=${t2.width}x${t2.height}&type=png` : e2 + `?vframe&offset=0&resize=${t2.width}x${t2.height}&type=png`;
    }
    getPrivateUrl(e2) {
      var t2;
      if (!new RegExp(/http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?/).test(e2))
        return this.logger.error("illegal file url:" + e2), "";
      var [i2, r2, s2, o2, n2, a2, c2, d2] = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/.exec(e2);
      if (null === (t2 = this.grayConfig) || void 0 === t2 ? void 0 : t2.mixStoreEnable) {
        var l2 = this._getUrlType(e2);
        return 2 === l2 && this.mixStorePolicy.s3Policy && (e2 = this.mixStorePolicy.s3Policy.cdnSchema.replace("{cdnDomain}", this.mixStorePolicy.s3Policy.dlcdn).replace("{objectName}", a2)), 1 === l2 && this.mixStorePolicy.nosPolicy && (e2 = this.mixStorePolicy.nosPolicy.cdnSchema.replace("{cdnDomain}", this.mixStorePolicy.nosPolicy.dlcdn).replace("{objectName}", a2)), e2;
      }
      var { downloadUrl: p2, downloadHostList: h2, nosCdnEnable: u2 } = this.config, m2 = this.config.cdn.cdnDomain, g2 = this.config.cdn.objectNamePrefix ? decodeURIComponent(this.config.cdn.objectNamePrefix) : "", v2 = decodeURIComponent(a2), f2 = v2.indexOf(g2);
      if (m2 && f2 > -1 && u2)
        return `${r2}${m2}/${v2.slice(f2)}`;
      if (h2.includes(o2) && a2.includes("/")) {
        var y2 = a2.indexOf("/"), I2 = a2.substring(0, y2), _2 = a2.substring(y2 + 1);
        return p2.replace("{bucket}", I2).replace("{object}", _2);
      }
      var M2 = h2.filter((e3) => "string" == typeof o2 && o2.includes(e3))[0], E2 = M2 ? o2.replace(M2, "").replace(/\W/g, "") : null;
      return E2 ? p2.replace("{bucket}", E2).replace("{object}", a2) : e2;
    }
    getOriginUrl(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return "string" == typeof e2 && e2.includes("_im_url=1") ? (yield this.core.sendCmd("getOriginUrl", { nosSafeUrlTag: { safeUrl: e2 } })).content.nosSafeUrlTag.originUrl : e2;
      });
    }
    getFileToken(e2) {
      return ve$1(this, void 0, void 0, function* () {
        pe$1({ type: { type: "number", min: 2, max: 3 }, urls: { type: "array", required: false, itemType: "string" } }, e2);
        var t2 = this.mixStorePolicy.nosPolicy ? this.mixStorePolicy.nosPolicy.authPolicy.policyType : null, i2 = this.mixStorePolicy.s3Policy ? this.mixStorePolicy.s3Policy.authPolicy.policyType : null;
        if (t2 === String(-1) && i2 === String(-1))
          throw this.logger.error("don't need token"), new Error("don't need token");
        if (2 === e2.type) {
          if (t2 && t2.indexOf(String(2)) >= 0 || i2 && i2.indexOf(String(2)) > 0)
            return this.mixStorage.getFileAuthToken(e2);
          throw this.logger.error("don't support time token "), new Error("don't support type time token ");
        }
        if (!e2.urls || !e2.urls.length)
          throw this.logger.error("urls is required when urls token"), new Error("urls is required when urls token");
        var r2 = [], s2 = [];
        if (e2.urls.forEach((e3) => {
          var t3 = this._getUrlType(e3);
          1 === t3 && s2.push(e3), 2 === t3 && r2.push(e3);
        }), (!i2 || 0 !== r2.length && i2.indexOf(String(3)) < 0) && (this.logger.warn("s3 url don't support url token"), r2 = []), (!t2 || 0 !== s2.length && t2.indexOf(String(3)) < 0) && (this.logger.warn("nos url don't support url token"), s2 = []), 0 === r2.length && 0 === s2.length)
          throw this.logger.error("not support urls"), new Error("not support urls");
        if (0 === r2.length || 0 === s2.length)
          return e2.urls = JSON.stringify(e2.urls), this.mixStorage.getFileAuthToken(e2);
      });
    }
    _getUrlType(e2) {
      return this.mixStorePolicy.nosPolicy && this.mixStorePolicy.nosPolicy.dlcdns.some((t2) => e2.indexOf(t2) >= 0) ? 1 : this.mixStorePolicy.s3Policy && this.mixStorePolicy.s3Policy.dlcdns.some((t2) => e2.indexOf(t2) >= 0) ? 2 : null;
    }
    getNosAccessToken(e2) {
      return pe$1({ url: { type: "string", allowEmpty: false } }, e2), this.nos.getNosAccessToken(e2);
    }
    deleteNosAccessToken(e2) {
      return pe$1({ token: { type: "string", allowEmpty: false } }, e2), this.nos.deleteNosAccessToken(e2);
    }
    get grayConfig() {
      return this.mixStorage.grayConfig;
    }
    get mixStorePolicy() {
      return this.mixStorage.mixStorePolicy;
    }
    process(e2) {
      var t2 = Ue$1(e2, "error.detail.ignore");
      return e2.error && !t2 ? Promise.reject(e2.error) : Promise.resolve(e2);
    }
  }
  class ys extends Xt$1 {
    constructor(e2) {
      super("V2NIMStorageService", e2), this.sceneMap = { nim_default_profile_icon: { sceneName: "nim_default_profile_icon", expireTime: 0 }, nim_default_im: { sceneName: "nim_default_im", expireTime: 0 }, nim_system_nos_scene: { sceneName: "nim_system_nos_scene", expireTime: 0 }, nim_security: { sceneName: "nim_security", expireTime: 0 } }, this.uploadingMessageInfo = {}, this.core = e2, this.core._registerDep(fs, "cloudStorage"), this.core._registerDep(is, "V2NIMStorageUtil");
    }
    addCustomStorageScene(e2, t2) {
      return this.checkV2(), pe$1({ sceneName: { type: "string", allowEmpty: false }, expireTime: { type: "number", min: 0 } }, { sceneName: e2, expireTime: t2 }, "", true), this.sceneMap[e2] = { sceneName: e2, expireTime: t2 }, { sceneName: e2, expireTime: t2 };
    }
    getStorageSceneList() {
      return this.checkV2(), Object.values(this.sceneMap);
    }
    getStorageScene(e2) {
      return e2 && this.sceneMap[e2] || this.sceneMap.nim_default_im;
    }
    hasStorageScene(e2) {
      return void 0 !== this.sceneMap[e2];
    }
    createUploadFileTask(e2) {
      if (this.checkV2(), "string" == typeof e2.fileObj && 0 === e2.fileObj.indexOf("nim-external")) {
        var t2 = document.getElementById(e2.fileObj);
        t2 && t2.files && t2.files[0] && (e2.fileObj = t2.files[0]);
      }
      return { taskId: Ne$1(), uploadParams: e2 };
    }
    uploadFile(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), pe$1({ taskId: { type: "string", allowEmpty: false } }, e2, "fileTask", true), (yield this._uploadFile(e2, t2))[0];
      });
    }
    uploadFileWithMetaInfo(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), pe$1({ taskId: { type: "string", allowEmpty: false } }, e2, "fileTask", true), function(e3) {
          var { url: t3, name: i2, size: r2, ext: s2, md5: o2, h: n2, w: a2, orientation: c2, dur: d2, audioCodec: l2, videoCodec: p2, container: h2 } = e3;
          return JSON.parse(JSON.stringify({ url: t3, name: i2, size: r2, ext: s2, md5: o2, height: n2, width: a2, orientation: c2, duration: d2, audioCodec: l2, videoCodec: p2, container: h2 }));
        }((yield this._uploadFile(e2, t2))[1]);
      });
    }
    _uploadFile(e2, t2, i2) {
      var r2;
      return ve$1(this, void 0, void 0, function* () {
        if (!this.core.cloudStorage || !this.core.cloudStorage.uploadFile)
          throw new Error('Service "cloudStorage" does not exist');
        var { uploadParams: s2, taskId: o2 } = e2, { file: n2, path: a2 } = es(s2.fileObj), { fileType: c2 } = i2 || {};
        if (this.uploadingMessageInfo[o2])
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST, detail: { reason: "V2NIMStorageService.uploadFile: repeat upload" } });
        try {
          var d2 = {};
          n2 ? d2.file = n2 : a2 && (0 === (null == a2 ? void 0 : a2.indexOf("nim-external")) ? d2.fileInput = a2 : d2.filePath = a2);
          var l2 = this.getStorageScene(s2.sceneName);
          if (d2.nosScenes = l2.sceneName, d2.nosSurvivalTime = l2.expireTime, d2.type = 1 === c2 ? "image" : 2 === c2 ? "audio" : 3 === c2 ? "video" : "file", d2.file && this.core.pluginMap["browser-md5-file"]) {
            var p2 = yield this.getFileMd5(this.core.pluginMap["browser-md5-file"], o2, d2.file);
            d2.md5 = p2;
          }
          d2.onUploadProgress = (e3) => {
            "function" == typeof t2 && t2(Math.round(100 * e3.percentage));
          }, d2.onUploadStart = (e3) => {
            var t3;
            if (null === (t3 = this.uploadingMessageInfo[o2]) || void 0 === t3 ? void 0 : t3.abort)
              return e3.abort(), void delete this.uploadingMessageInfo[o2];
            this.uploadingMessageInfo[o2] = { abort: false, task: e3 };
          }, this.uploadingMessageInfo[o2] = { abort: false };
          var h2 = yield this.core.cloudStorage.uploadFile(d2);
          if (null === (r2 = this.uploadingMessageInfo[o2]) || void 0 === r2 ? void 0 : r2.abort)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: "upload file aborted" } });
          return delete this.uploadingMessageInfo[o2], [h2.url, h2];
        } catch (e3) {
          throw delete this.uploadingMessageInfo[o2], this.core.logger.error("sendFile:: upload File error or abort.", e3), e3;
        }
      });
    }
    cancelUploadFile(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), yield this._cancelUploadFile(e2.taskId);
      });
    }
    _cancelUploadFile(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2();
        var t2 = this.uploadingMessageInfo[e2];
        if (null == t2 ? void 0 : t2.task)
          try {
            this.logger.log("V2NIMStorageService.cancelUploadFile: uploadInfo task exist"), yield t2.task.abort(), delete this.uploadingMessageInfo[e2];
          } catch (t3) {
            delete this.uploadingMessageInfo[e2], this.core.logger.error("cancelMessageAttachmentUpload::abort error.", t3);
          }
        else {
          if (!t2)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST, detail: { reason: "V2NIMStorageService.cancelUploadFile: uploadInfo not exist" } });
          this.logger.log("V2NIMStorageService.cancelUploadFile: uploadInfo task not exist"), t2.abort = true;
        }
      });
    }
    getFileMd5(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        return new Promise((r2, s2) => {
          var o2, n2 = new e2();
          (null === (o2 = this.uploadingMessageInfo[t2]) || void 0 === o2 ? void 0 : o2.abort) ? s2(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: "upload file aborted" } })) : this.uploadingMessageInfo[t2] = { abort: false, task: n2 };
          try {
            n2.md5(i2, (e3, t3) => {
              "aborted" === e3 ? s2(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: e3 } })) : e3 ? s2(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "md5 calculate error in callback", rawError: e3 } })) : r2(t3);
            });
          } catch (e3) {
            s2(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "md5 calculate error", rawError: e3 } }));
          }
        });
      });
    }
    shortUrlToLong(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.core.cloudStorage.getOriginUrl(e2);
      });
    }
    getImageThumbUrl(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.core.V2NIMStorageUtil.getImageThumbUrl(e2, t2);
      });
    }
    getVideoCoverUrl(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.core.V2NIMStorageUtil.getVideoCoverUrl(e2, t2);
      });
    }
  }
  class Is extends Xt$1 {
    constructor(e2) {
      super("V2NIMMessageCreator", e2), this.name = "V2NIMMessageCreator", this.defaultNosSceneName = "nim_default_im", this.core = e2;
    }
    createMessage(e2, t2) {
      return Object.assign(Object.assign(Object.assign({ messageClientId: Ne$1(), messageType: e2, createTime: this.core.timeOrigin.getNTPTime(), sendingState: 0, messageStatus: { errorCode: 200 }, isSelf: true }, t2), t2.attachment ? { attachment: Object.assign(Object.assign({}, t2.attachment), { raw: Vr$1(e2, t2.attachment) }) } : {}), { senderId: "", receiverId: "", conversationType: 0, conversationId: "", messageServerId: "", messageConfig: Object.assign({ unreadEnabled: true, roamingEnabled: true, readReceiptEnabled: false, lastMessageUpdateEnabled: true, historyEnabled: true, onlineSyncEnabled: true, offlineEnabled: true }, t2.messageConfig), pushConfig: Object.assign({ pushEnabled: true, pushNickEnabled: true, forcePush: false }, t2.pushConfig), routeConfig: Object.assign({ routeEnabled: true }, t2.routeConfig), antispamConfig: Object.assign({ antispamEnabled: true }, t2.antispamConfig) });
    }
    createTextMessage(e2) {
      return this.checkV2(), pe$1({ text: { type: "string", allowEmpty: false } }, { text: e2 }, "", true), this.createMessage(0, { text: e2 });
    }
    createImageMessage(e2, t2, i2, r2, s2) {
      this.checkV2(), pe$1(cr$1, { name: t2, sceneName: i2, width: r2, height: s2 }, "", true);
      var o2 = this.createGenericFileMessageAttachment(e2, t2, i2, void 0, r2, s2, "jpeg");
      return this.createMessage(1, { attachment: o2, attachmentUploadState: 0 });
    }
    createAudioMessage(e2, t2, i2, r2) {
      this.checkV2(), pe$1(nr$1, { name: t2, sceneName: i2, duration: r2 }, "", true);
      var s2 = this.createGenericFileMessageAttachment(e2, t2, i2, r2, void 0, void 0, "aac");
      return this.createMessage(2, { attachment: s2, attachmentUploadState: 0 });
    }
    createVideoMessage(e2, t2, i2, r2, s2, o2) {
      this.checkV2(), pe$1(ar$1, { name: t2, sceneName: i2, duration: r2, width: s2, height: o2 }, "", true);
      var n2 = this.createGenericFileMessageAttachment(e2, t2, i2, r2, s2, o2, "mp4");
      return this.createMessage(3, { attachment: n2, attachmentUploadState: 0 });
    }
    createFileMessage(e2, t2, i2) {
      this.checkV2(), pe$1(or$1, { name: t2, sceneName: i2 }, "", true);
      var r2 = this.createGenericFileMessageAttachment(e2, t2, i2, void 0, void 0, void 0, "txt");
      return this.createMessage(6, { attachment: r2, attachmentUploadState: 0 });
    }
    createGenericFileMessageAttachment(e2, t2, i2, r2, s2, o2, n2) {
      if (i2 = i2 || this.defaultNosSceneName, !this.core.V2NIMStorageService.hasStorageScene)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2NIMStorageService not exist" } });
      if (!this.core.V2NIMStorageService.hasStorageScene(i2))
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sceneName: " + i2 + " has not been added" } });
      var { file: a2, path: c2 } = es(e2), d2 = Object.assign(Object.assign(Object.assign({ name: t2, uploadState: 0, sceneName: i2 || this.defaultNosSceneName }, r2 ? { duration: r2 } : {}), s2 ? { width: s2 } : {}), o2 ? { height: o2 } : {});
      if (a2) {
        var l2 = a2.name.lastIndexOf("."), p2 = -1 === l2 ? a2.name : a2.name.substring(0, l2);
        d2.name = d2.name || p2, d2.size = a2.size, d2.ext = `.${ke$1(a2.name) || ke$1(t2 || "") || n2}`;
      } else if (c2) {
        var h2 = c2.lastIndexOf("/"), u2 = c2.lastIndexOf("."), m2 = -1 === u2 ? c2.substring(h2 + 1) : c2.substring(h2 + 1, u2);
        d2.name = d2.name || m2, d2.ext = `.${ke$1(c2) || ke$1(t2 || "") || n2}`;
      }
      return d2 = JSON.parse(JSON.stringify(d2)), c2 ? d2.path = c2 : a2 && (d2.file = a2), d2;
    }
    createLocationMessage(e2, t2, i2) {
      return this.checkV2(), pe$1({ latitude: { type: "number", allowEmpty: false }, longitude: { type: "number", allowEmpty: false }, address: { type: "string", allowEmpty: false } }, { latitude: e2, longitude: t2, address: i2 }, "", true), this.createMessage(4, { attachment: { latitude: e2, longitude: t2, address: i2 } });
    }
    createCustomMessage(e2, t2) {
      return this.checkV2(), pe$1({ text: { type: "string" } }, { text: e2 }, "", true), pe$1({ rawAttachment: { type: "string" } }, { rawAttachment: t2 }, "", true), this.createMessage(100, { text: e2, attachment: { raw: t2 } });
    }
    createCustomMessageWithAttachment(e2, t2) {
      return this.checkV2(), pe$1({ raw: { type: "string" } }, e2, "attachment", true), pe$1({ subType: { type: "number", min: 0, required: false } }, { subType: t2 }, "", true), this.createMessage(100, t2 ? { attachment: e2, subType: t2 } : { attachment: e2 });
    }
    createCallMessage(e2, t2, i2, r2, s2) {
      return this.checkV2(), pe$1({ type: { type: "number", allowEmpty: false } }, { type: e2 }, "", true), pe$1({ channelId: { type: "string", allowEmpty: false } }, { channelId: t2 }, "", true), pe$1({ status: { type: "number", allowEmpty: false } }, { status: i2 }, "", true), pe$1({ durations: { type: "array", allowEmpty: false } }, { durations: r2 }, "", true), this.createMessage(12, { text: s2 || "", attachment: { type: e2, channelId: t2, durations: r2, status: i2 } });
    }
    createForwardMessage(e2) {
      if (this.checkV2(), !e2 || [11, 5, 7, 10].includes(e2.messageType))
        return null;
      var t2 = { messageClientId: Ne$1(), messageType: e2.messageType };
      return e2.text && (t2.text = e2.text), e2.attachment && (t2.attachment = e2.attachment), e2.attachment && "uploadState" in e2.attachment && (t2.attachmentUploadState = e2.attachment.uploadState), this.createMessage(e2.messageType, t2);
    }
    createTipsMessage(e2) {
      return this.checkV2(), pe$1({ text: { type: "string", allowEmpty: false } }, { text: e2 }, "", true), this.createMessage(10, { text: e2 });
    }
  }
  class _s {
    constructor() {
      this.name = "V2NIMMessageAttachmentCreator";
    }
    createLocationMessageAttachment(e2, t2, i2) {
      return { latitude: "number" == typeof e2 ? e2 : 0, longitude: "number" == typeof t2 ? t2 : 0, address: "string" == typeof i2 ? i2 : "" };
    }
    createCustomMessageAttachment(e2) {
      return { raw: "string" == typeof e2 ? e2 : "" };
    }
  }
  class Ms {
    constructor(e2) {
      this.config = { enable: false }, this.name = "V2NIMClientAntispamUtil", this.core = e2;
    }
    setOptions(e2) {
      this.config = Object.assign(this.config, e2);
    }
    reset(e2) {
      "destroy" === e2 && (this.vocabInfo = void 0);
    }
    downloadLocalAntiSpamVocabs() {
      return ve$1(this, void 0, void 0, function* () {
        if (this.config.enable && !this.vocabInfo)
          try {
            var e2 = yield this.core.sendCmd("v2DownloadLocalAntiSpamVocabs", { tag: { version: 0, md5: "" } });
            this.vocabInfo = Object.assign(Object.assign({}, e2.content.data), { thesaurus: JSON.parse(e2.content.data.thesaurus).thesaurus });
          } catch (e3) {
            this.core.logger.warn("V2NIMLocalAntispamUtil::downloadLocalAntiSpamVocabs error", e3);
          }
      });
    }
    checkTextAntispam(e2, t2 = "**") {
      if (!this.config.enable)
        return { operateType: 0, replacedText: e2 };
      if (pe$1({ text: { type: "string", required: true, allowEmpty: false }, replace: { type: "string" } }, { text: e2, replace: t2 }, "", true), !this.vocabInfo)
        return { operateType: 0, replacedText: e2 };
      for (var i2 = e2, r2 = 0; r2 < this.vocabInfo.thesaurus.length; r2++) {
        var s2 = this.filterContent(i2, this.vocabInfo.thesaurus[r2], t2);
        if (i2 = s2.replacedText, 2 === s2.operateType || 3 === s2.operateType)
          return s2;
      }
      return { operateType: i2 === e2 ? 0 : 1, replacedText: i2 };
    }
    filterContent(e2, t2, i2) {
      for (var r2 = 0; r2 < t2.keys.length; r2++) {
        var s2 = t2.keys[r2], o2 = s2.match || t2.match, n2 = s2.operate || t2.operate, a2 = void 0;
        try {
          a2 = this.matchContent(e2, s2.key, o2, n2, i2);
        } catch (e3) {
        }
        if (a2 && (e2 = a2.replacedText, 2 === a2.operateType || 3 === a2.operateType))
          return a2;
      }
      return { operateType: 1, replacedText: e2 };
    }
    matchContent(e2, t2, i2, r2, s2) {
      var o2 = false, n2 = null;
      if (1 === i2) {
        if (e2.indexOf(t2) >= 0) {
          o2 = true;
          var a2 = t2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
          n2 = new RegExp(a2, "g");
        }
      } else
        2 === i2 && (n2 = new RegExp(t2, "g")).test(e2) && (o2 = true);
      if (o2 && n2)
        switch (r2) {
          case 1:
            return { operateType: 1, replacedText: e2.replace(n2, s2) };
          case 2:
            return { operateType: 2, replacedText: e2 };
          case 3:
            return { operateType: 3, replacedText: e2 };
        }
      return { operateType: 0, replacedText: e2 };
    }
  }
  class Es extends Xt$1 {
    constructor(e2) {
      super("YSFService", e2), this.core._registerDep(Oi, "V2NIMConversationIdUtil"), this.core._registerDep(Is, "V2NIMMessageCreator"), this.core._registerDep(_s, "V2NIMMessageAttachmentCreator"), this.core._registerDep(Ms, "V2NIMClientAntispamUtil"), this.core._registerDep(ys, "V2NIMStorageService"), this.sendUtil = new Ts(this.core, this), this.fileUtil = new Lr(this.core), this.model = new Ri(), this.notificationUtil = new Zr$1(this.core), ct({ cmdMap: zr, cmdConfig: Xr$1 });
    }
    emit(e2, ...t2) {
      var i2, r2 = `${this.name}::emit ${e2.toString()}`;
      if ("onSendMessage" === e2) {
        var s2 = t2[0];
        this.logger.log(`${r2}`, `${s2.messageClientId}/${s2.messageServerId};createTime:${s2.createTime};`, `sendingState:${s2.sendingState};attachmentUploadState:${s2.attachmentUploadState || 0};messageStatus:${null === (i2 = s2.messageStatus) || void 0 === i2 ? void 0 : i2.errorCode}`);
      } else if ("onReceiveMessages" === e2) {
        var o2 = t2[0];
        this.logger.log(`${r2}`, o2.map((e3) => `${e3.messageClientId}/${e3.messageServerId};createTime:${e3.createTime}`));
      } else if ("onReceiveCustomNotifications" === e2) {
        var n2 = t2[0];
        this.logger.log(`${r2}`, n2.map((e3) => `sender:${e3.senderId};receiver:${e3.receiverId};ctype:${e3.conversationType};time:${e3.timestamp}`));
      } else
        this.logger.log(`${r2}`, ...t2);
      return super.emit(e2, ...t2);
    }
    sendMessage(e2, t2, i2 = {}, r2) {
      return ve$1(this, void 0, void 0, function* () {
        pe$1({ message: { type: "object" } }, { message: e2 }, "", true), e2.messageClientId = e2.messageClientId || Ne$1(), pe$1(xi, { conversationId: t2, message: e2, params: i2 }, "", true), ue$1(this.core.account, t2);
        var s2 = this.core.timeOrigin.getTimeNode(), { messageBeforeSend: o2, clientAntispamResult: n2, hiddenParams: a2 } = this.sendUtil.prepareMessage(e2, t2, i2), c2 = yield this.sendUtil.doSendMessage({ apiCallingTimeNode: s2, messageBeforeSend: o2, clientAntispamResult: n2, hiddenParams: a2, progress: r2 });
        return c2.message.senderId === c2.message.receiverId && this.markMsgsAck([c2.message]), c2;
      });
    }
    sendCustomNotification(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), ue$1(this.core.account, e2), pe$1(Qr$1, { content: t2, params: i2 }, "", true);
        var r2 = this.notificationUtil.generateNotificationTag(e2, t2, i2);
        r2.type = 100, yield this.core.sendCmd("ysfSendCustomNotification", { tag: r2 });
      });
    }
    sendMessageFn(e2) {
    }
    cancelMessageAttachmentUpload(e2) {
      return this.fileUtil.cancelMessageAttachmentUpload(e2);
    }
    markMsgsAck(e2) {
      if (e2 && e2.length > 0) {
        var t2 = e2.map((e3) => e3.messageServerId).filter((e3) => e3 && "0" !== e3);
        0 !== t2.length && this.core.sendCmd("ysfBatchMarkRead", { sid: 101, cid: 2, ids: t2 });
      }
    }
    markNotificationAck(e2) {
      if (e2 && e2.length > 0) {
        var t2 = e2.map((e3) => e3.idServer).filter((e3) => e3 && "0" !== e3);
        0 !== t2.length && this.core.sendCmd("ysfBatchMarkRead", { sid: 101, cid: 3, ids: t2 });
      }
    }
    ysfOnMsgHandler(e2) {
      var t2 = e2.content.data, i2 = kr(Cr(this.core, t2), this.core);
      delete i2.__clientExt, this.emit("onReceiveMessages", [i2]), this.model.upsertMessages([i2]), this.markMsgsAck([i2]);
    }
    ysfSyncOfflineMsgsHandler(e2) {
      var t2 = e2.content.datas;
      t2 = t2.map((e3) => kr(Cr(this.core, e3), this.core)), this.markMsgsAck(t2), this.emit("onReceiveMessages", t2), this.model.upsertMessages(t2);
    }
    ysfOnSysNotificationHandler(e2) {
      this.markNotificationAck([e2.content.data]);
      var t2 = this.processSystemNotification(e2.content.data);
      t2 && this.emit("onReceiveCustomNotifications", [t2]);
    }
    processSystemNotification(e2) {
      var t2 = Object.assign(Object.assign({}, e2), { conversationType: 1 });
      return delete t2.type, t2;
    }
    ysfSyncSysNotificationHandler(e2) {
      this.markNotificationAck(e2.content.datas);
      var t2 = e2.content.datas.sort((e3, t3) => e3.timestamp - t3.timestamp).map((e3) => this.processSystemNotification(e3)).filter((e3) => e3);
      t2 && this.emit("onReceiveCustomNotifications", t2);
    }
  }
  class Ts {
    constructor(e2, t2) {
      this.uploadingMessageInfo = {}, this.core = e2, this.service = t2;
    }
    prepareMessage(e2, t2, i2, r2) {
      var s2 = this.checkIfResend(e2), o2 = this.generateSendMessage({ message: e2, params: i2, resend: s2, conversationId: t2, replyMessage: r2 }), n2 = Object.assign({}, i2.targetConfig ? { targetConfig: i2.targetConfig } : {}), { clientAntispamResult: a2, text: c2 } = this.checkIfAntispam(i2, o2);
      return o2.text = c2, o2.clientAntispamHit = !!a2 && 3 === a2.operateType, { messageBeforeSend: o2, clientAntispamResult: a2, hiddenParams: n2 };
    }
    checkIfAntispam(e2, t2) {
      var i2, r2 = t2.text;
      if (e2.clientAntispamEnabled && (0 === t2.messageType || 10 === t2.messageType)) {
        if (1 === (i2 = this.core.V2NIMClientAntispamUtil.checkTextAntispam ? this.core.V2NIMClientAntispamUtil.checkTextAntispam(t2.text || "", e2.clientAntispamReplace) : { operateType: 0, replacedText: "" }).operateType)
          r2 = i2.replacedText;
        else if (2 === i2.operateType)
          throw this.service.emit("onSendMessage", Object.assign(Object.assign({}, t2), { sendingState: 2, messageStatus: { errorCode: ie$1.V2NIM_ERROR_CODE_CLIENT_ANTISPAM } })), new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, detail: { reason: "sendMessage: text intercepted by client antispam" } });
      }
      return { clientAntispamResult: i2, text: r2 };
    }
    doMsgReceiveReport(e2, t2) {
      if (e2.senderId !== this.core.account) {
        var i2 = Ue$1(e2, "__clientExt.statistics.apiCallingTime") || 0, r2 = Ue$1(e2, "__clientExt.statistics.sendTime") || 0, s2 = Ue$1(e2, "__clientExt.statistics.attachUploadDuration") || 0, o2 = this.core.timeOrigin.getNTPTime(), n2 = e2.createTime, a2 = this.core.timeOrigin.checkNodeReliable(t2.__receiveTimeNode) ? this.core.timeOrigin.getNTPTime(t2.__receiveTimeNode) : o2;
        this.core.reporter.report("msgReceive", { msgId: e2.messageServerId, clientId: e2.messageClientId, serverTime: e2.createTime, receiveTime: a2, fromAccid: 1 === e2.conversationType ? e2.senderId : "", toAccid: e2.receiverId, type: Gr$1(e2.conversationType), tid: 1 === e2.conversationType ? "" : e2.receiverId, apiCallingTime: i2, sendTime: r2, attachUploadDuration: s2, callbackTime: o2, preHandleTime: o2, result: 200, failReason: "", rt: o2 - n2 });
      }
    }
    checkIfResend(e2) {
      var t2 = this.service.model.getMessageById(e2.messageClientId), i2 = false;
      if (e2.messageServerId || 1 === e2.sendingState)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sendMessage: message has already been sent" } });
      if (1 === (null == t2 ? void 0 : t2.sendingState))
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sendMessage: message has already been sent" } });
      return t2 && (i2 = true), i2;
    }
    doSendMessage(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2, i2, { apiCallingTimeNode: r2, messageBeforeSend: s2, clientAntispamResult: o2, hiddenParams: n2, progress: a2 } = e2, c2 = {}, d2 = this.service instanceof Es;
        if (d2)
          t2 = "ysfSendMessage";
        else if (1 === s2.conversationType)
          t2 = "v2SendP2pMessage";
        else if (2 === s2.conversationType)
          t2 = "v2SendTeamMessage";
        else {
          if (3 !== s2.conversationType)
            throw new ae$1({ detail: { reason: `conversationType: ${s2.conversationType} is not supported` } });
          t2 = "v2SendSuperTeamMessage";
        }
        if (this.service.sendMessageFn(s2), !d2 && this.core.eventBus.emit("forwardSend/V2NIMMessageService/sendMsg", s2), !s2.attachment || !("uploadState" in s2.attachment) || s2.attachment.url || 0 !== s2.attachment.uploadState && 2 !== s2.attachment.uploadState)
          this.service.emit("onSendMessage", s2);
        else {
          var l2 = Date.now();
          try {
            s2.attachmentUploadState = 3, s2.attachment.uploadState = 3, this.service.emit("onSendMessage", s2), yield this.service.fileUtil.doSendFile(s2, a2), s2.attachmentUploadState = 1, s2.attachment.uploadState = 1, this.service.emit("onSendMessage", s2);
          } catch (e3) {
            throw s2.attachmentUploadState = 2, s2.attachment.uploadState = 2, s2.sendingState = 2, s2.messageStatus = { errorCode: e3.code || ie$1.V2NIM_ERROR_CODE_UNKNOWN }, this.service.emit("onSendMessage", s2), c2.attachUploadDuration = Date.now() - l2, this.doSendMessageFailed(r2, c2, s2, e3), e3;
          }
          c2.attachUploadDuration = Date.now() - l2;
        }
        this.core.timeOrigin.checkNodeReliable(r2) && (c2.apiCallingTime = this.core.timeOrigin.getNTPTime(r2), c2.sendTime = this.core.timeOrigin.getNTPTime(), s2.__clientExt = { statistics: c2 });
        try {
          i2 = yield this.core.sendCmd(t2, { tag: Object.assign({}, s2, n2) });
        } catch (e3) {
          throw this.doSendMessageFailed(r2, c2, s2, e3), s2.sendingState = 2, s2.messageStatus = { errorCode: e3.code || ie$1.V2NIM_ERROR_CODE_UNKNOWN }, this.service.emit("onSendMessage", s2), e3;
        }
        var p2 = Ue$1(i2, "content.data.errorCode"), h2 = Object.assign(Object.assign(Object.assign({}, s2), i2.content.data), { sendingState: 1, messageStatus: { errorCode: p2 && 200 !== p2 ? p2 : 200 } });
        this.service.sendMessageFn(h2), !d2 && this.core.eventBus.emit("forwardSend/V2NIMMessageService/sendMsg", h2), this.doMsgSendReport(r2, c2, s2);
        var u2 = h2.antispamResult;
        return u2 && (h2.messageStatus.errorCode = ie$1.V2NIM_ERROR_CODE_SERVER_ANTISPAM), delete h2.antispamResult, this.service.emit("onSendMessage", h2), Object.assign(Object.assign({ message: h2 }, u2 ? { antispamResult: u2 } : {}), o2 ? { clientAntispamResult: o2 } : {});
      });
    }
    doSendMessageFailed(e2, t2, i2, r2) {
      var s2 = Object.assign(Object.assign({}, i2), { sendingState: 2 });
      this.core.eventBus.emit("forwardSend/V2NIMMessageService/sendMsg", s2), this.service.sendMessageFn(s2), this.doMsgSendReport(e2, t2, i2, r2);
    }
    doMsgSendReport(e2, t2, i2, r2) {
      t2.apiCallingTime = this.core.timeOrigin.getNTPTime(e2), t2.sendTime = this.core.timeOrigin.getNTPTime();
      var s2 = this.core.timeOrigin.getNTPTime(), o2 = Ue$1(r2, "detail.reason");
      this.core.reporter.report("msgSend", { msgId: i2.messageServerId, clientId: i2.messageClientId, msgTime: i2.createTime, fromAccid: 1 === i2.conversationType ? i2.senderId : "", toAccid: i2.receiverId, type: Gr$1(i2.conversationType), tid: 1 === i2.conversationType ? "" : i2.receiverId, result: r2 ? r2.code : 200, failReason: o2 || (null == r2 ? void 0 : r2.message) || "", rt: s2 - t2.apiCallingTime, apiCallingTime: t2.apiCallingTime, sendTime: t2.sendTime, attachUploadDuration: t2.attachUploadDuration, apiCallbackTime: s2 });
    }
    generateSendMessage(e2) {
      var t2, i2, { conversationId: r2, replyMessage: s2, resend: o2, message: n2, params: a2 } = e2, c2 = {};
      if (s2) {
        var d2 = s2.threadRoot;
        c2 = { threadReply: { senderId: s2.senderId, receiverId: s2.receiverId, messageServerId: s2.messageServerId, createTime: s2.createTime, messageClientId: s2.messageClientId, conversationType: s2.conversationType, conversationId: s2.conversationId }, threadRoot: { senderId: d2 ? d2.senderId : s2.senderId, receiverId: d2 ? d2.receiverId : s2.receiverId, messageServerId: d2 ? d2.messageServerId : s2.messageServerId, createTime: d2 ? d2.createTime : s2.createTime, messageClientId: d2 ? d2.messageClientId : s2.messageClientId, conversationType: d2 ? d2.conversationType : s2.conversationType, conversationId: d2 ? d2.conversationId : s2.conversationId } };
      }
      var l2 = this.core.V2NIMConversationIdUtil.parseConversationType(r2), p2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(r2);
      a2.pushConfig && true !== a2.pushConfig.forcePush && (delete a2.pushConfig.forcePushContent, delete a2.pushConfig.forcePushAccountIds);
      var h2 = {}, u2 = {};
      if (a2.aiConfig) {
        var m2 = Ue$1(a2, "aiConfig.content.msg"), g2 = Ue$1(a2, "aiConfig.content.type") || 0;
        m2 ? u2 = { msg: m2, type: g2 } : void 0 === m2 && 0 === n2.messageType && (u2 = { msg: n2.text || "", type: g2 }), (h2 = Object.assign({}, a2.aiConfig)).aiStatus = 1, void 0 !== u2.msg && (h2.content = u2);
      }
      var v2 = null === (i2 = null === (t2 = this.core.V2NIMUserService) || void 0 === t2 ? void 0 : t2.model) || void 0 === i2 ? void 0 : i2.getUser(this.core.account), f2 = (null == v2 ? void 0 : v2.updateTime) || 0;
      return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, n2), c2), { messageConfig: Object.assign(Object.assign({}, n2.messageConfig), a2.messageConfig), routeConfig: Object.assign(Object.assign({}, n2.routeConfig), a2.routeConfig), pushConfig: Object.assign(Object.assign({}, n2.pushConfig), a2.pushConfig), antispamConfig: Object.assign(Object.assign({}, n2.antispamConfig), a2.antispamConfig), robotConfig: Object.assign(Object.assign({}, n2.robotConfig), a2.robotConfig) }), h2 && h2.accountId ? { aiConfig: h2 } : {}), n2.attachment ? { attachment: Object.assign({}, n2.attachment) } : {}), { resend: o2, senderId: this.core.account, conversationType: l2, receiverId: p2, conversationId: this.core.V2NIMConversationIdUtil.messageConversationId({ conversationType: l2, senderId: this.core.account, receiverId: p2 }) }), f2 ? { userUpdateTime: f2 } : {}), { sendingState: 3 });
    }
  }
  class Ss {
    constructor(e2, t2) {
      this.core = e2, this.service = t2;
    }
    checkIfModify(e2, t2) {
      if ("0" === e2.messageServerId)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: messageServerId cannot be empty" } });
      if (![0, 1, 2, 3, 4, 6, 10, 12, 100].includes(e2.messageType))
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `modifyMessage: messageType ${e2.messageType} not correct` } });
      if ([0, 1, 2, 3, 6, 10, 12].includes(e2.messageType) && t2.attachment)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `modifyMessage: messageType ${e2.messageType} can not modify attachment` } });
      var i2 = ["subType", "text", "serverExtension", "attachment"];
      if (!i2.some((e3) => void 0 !== Ue$1(t2, e3)))
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: missing modified params" } });
      if (i2.every((i3) => "attachment" === i3 ? e2.attachment && t2.attachment ? Vr$1(e2.messageType, e2.attachment) === Vr$1(e2.messageType, t2.attachment) : !t2.attachment : Ue$1(e2, i3) === Ue$1(t2, i3)))
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "modifyMessage: no change" } });
    }
    prepareMessage(e2, t2) {
      var i2 = this.generateSendMessage(e2, t2), { clientAntispamResult: r2, text: s2 } = this.checkIfAntispam(t2, i2);
      return i2.text = s2, i2.clientAntispamHit = !!r2 && 3 === r2.operateType, { messageBeforeSend: i2, clientAntispamResult: r2 };
    }
    modifyMessage(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        var i2;
        if (1 === e2.conversationType)
          i2 = "v2MessageP2pModify";
        else if (2 === e2.conversationType)
          i2 = "v2MessageTeamModify";
        else {
          if (3 !== e2.conversationType)
            throw new ae$1({ detail: { reason: `conversationType: ${e2.conversationType} is not supported` } });
          i2 = "v2MessageSuperTeamModify";
        }
        var r2 = yield this.core.sendCmd(i2, { tag: e2 });
        if (t2 && 3 === t2.operateType)
          return { errorCode: ie$1.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, clientAntispamResult: t2 };
        var s2 = Object.assign(Object.assign({}, e2), r2.content.data), o2 = s2.antispamResult;
        if (o2)
          return Object.assign({ errorCode: ie$1.V2NIM_ERROR_CODE_SERVER_ANTISPAM, antispamResult: o2 }, t2 ? { clientAntispamResult: t2 } : {});
        delete s2.antispamResult;
        var n2 = Cr(this.core, s2);
        return this.service.model.upsertMessages([n2]), this.core.eventBus.emit("V2NIMMessageService/modifyMsg", n2), this.core.eventBus.emit("forwardSend/V2NIMMessageService/modifyMsg", n2), Object.assign(Object.assign({ errorCode: 200, message: n2 }, o2 ? { antispamResult: o2 } : {}), t2 ? { clientAntispamResult: t2 } : {});
      });
    }
    checkIfAntispam(e2, t2) {
      var i2, r2 = t2.text;
      if (e2.clientAntispamEnabled && (0 === t2.messageType || 10 === t2.messageType)) {
        if (1 === (i2 = this.core.V2NIMClientAntispamUtil.checkTextAntispam ? this.core.V2NIMClientAntispamUtil.checkTextAntispam(t2.text || "", e2.clientAntispamReplace) : { operateType: 0, replacedText: "" }).operateType)
          r2 = i2.replacedText;
        else if (2 === i2.operateType)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_CLIENT_ANTISPAM, detail: { reason: "sendMessage: text intercepted by client antispam" } });
      }
      return { clientAntispamResult: i2, text: r2 };
    }
    generateSendMessage(e2, t2) {
      var i2;
      return Object.assign(Object.assign({ messageConfig: { lastMessageUpdateEnabled: null === (i2 = e2.messageConfig) || void 0 === i2 ? void 0 : i2.lastMessageUpdateEnabled }, routeConfig: Object.assign({ routeEnabled: true }, t2.routeConfig), pushConfig: Object.assign({ pushEnabled: true, pushNickEnabled: true, forcePush: false }, t2.pushConfig), antispamConfig: Object.assign({ antispamEnabled: true }, t2.antispamConfig) }, t2.attachment ? { attachment: t2.attachment } : {}), { conversationType: e2.conversationType, senderId: e2.senderId, receiverId: e2.receiverId, createTime: e2.createTime, messageClientId: e2.messageClientId, messageServerId: e2.messageServerId, messageType: e2.messageType, subType: t2.subType, text: t2.text, serverExtension: t2.serverExtension });
    }
  }
  class Cs {
    constructor(e2, t2) {
      this.emitRevokeMessage = (e3) => {
        var t3 = e3.map((e4) => Rr(this.core, e4));
        t3.forEach((e4) => {
          this.service.model.deleteMessage(e4.messageRefer.messageClientId);
        }), this.service.emit("onMessageRevokeNotifications", t3), this.core.eventBus.emit("V2NIMMessageService/revokeMessages", t3);
      }, this.core = e2, this.service = t2, this.logger = e2.logger;
    }
    revokeMessage(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1(Fi, { message: e2, params: t2 }, "", true), ue$1(this.core.account, e2.conversationId), 1 === e2.conversationType && e2.senderId !== this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "revokeMessage: p2p message senderId is not current user" } });
        if (!e2.messageServerId || "0" === e2.messageServerId)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "revokeMessage: cannot revoke message with invalid messageServerId: " + e2.messageServerId } });
        var i2 = 3 === e2.conversationType ? "v2RevokeSuperTeamMessage" : "v2RevokeMessage", r2 = Object.assign(Object.assign(Object.assign({}, e2), t2), { attach: t2 && t2.serverExtension, sysMsgType: { 1: 7, 2: 8, 3: 12 }[e2.conversationType], opeAccount: this.core.account });
        yield this.core.sendCmd(i2, { tag: r2 });
        var s2 = [JSON.parse(JSON.stringify({ postscript: t2 && t2.postscript, revokeType: { 1: 1, 2: 2, 3: 3 }[e2.conversationType], revokeAccountId: this.core.account, serverExtension: t2 && t2.serverExtension, messageRefer: Or(this.core, e2) }))];
        this.revokeMessagesFn(s2), this.core.eventBus.emit("forwardSend/V2NIMMessageService/revokeMessage", r2);
      });
    }
    deleteMessage(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1(Gi, e2, "", true), 3 === e2.sendingState)
          this.service.fileUtil.cancelMessageAttachmentUpload(e2);
        else if (e2.sendingState && 1 !== e2.sendingState)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "deleteMessage: cannot delete unsent message" } });
        var i2 = { messageRefer: Or(this.core, e2), serverExtension: t2 }, r2 = Date.now();
        e2.messageServerId && "0" !== e2.messageServerId && (r2 = (yield this.core.sendCmd("v2DeleteMessage", { tag: i2 })).content.timetag);
        var s2 = [{ serverExtension: t2, messageRefer: Or(this.core, e2), deleteTime: r2 }];
        this.core.eventBus.emit("forwardSend/V2NIMMessageService/deleteSelfMsgs", [Object.assign(Object.assign({}, i2), { deleteTime: r2 })]), this.deleteMessagesFn(s2);
      });
    }
    deleteMessages(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        pe$1(Hi, { messages: e2 }, "", true);
        var i2 = [], r2 = [];
        if (0 === e2.length)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "deleteMessages: message array length is 0" } });
        for (var s2 = e2[0].conversationId, o2 = 0; o2 < e2.length; o2++) {
          if (3 === e2[o2].sendingState)
            this.service.fileUtil.cancelMessageAttachmentUpload(e2[o2]);
          else if (e2[o2].sendingState && 1 !== e2[o2].sendingState)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: `deleteMessage: sendingState should be succeeded, please check message at index: ${o2}` } });
          if (o2 >= 1 && e2[o2].conversationId !== s2)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "deleteMessages: only allow to delete messages from same conversation" } });
          e2[o2].messageServerId && "0" !== e2[o2].messageServerId ? i2.push(e2[o2]) : r2.push(e2[o2]);
        }
        var n2 = Date.now(), a2 = [...r2];
        try {
          if (i2.length > 0) {
            var c2 = yield this.core.sendCmd("v2DeleteMessages", { tag: i2.map((e3) => ({ messageRefer: e3, serverExtension: t2 })) });
            n2 = c2.content.timetag, a2 = [...a2, ...i2];
          }
        } catch (e3) {
          if (0 === r2.length)
            throw e3;
          this.logger.warn("V2NIMMessageService:deleteMessages: delete messages with serverId failed");
        }
        var d2 = a2.map((e3) => ({ serverExtension: t2, messageRefer: Or(this.core, e3), deleteTime: n2 }));
        this.core.eventBus.emit("forwardSend/V2NIMMessageService/deleteSelfMsgs", a2.map((e3) => ({ messageRefer: e3, serverExtension: t2, deleteTime: n2 }))), this.deleteMessagesFn(d2);
      });
    }
    revokeMessagesFn(e2) {
      e2.forEach((e3) => {
        this.service.model.deleteMessage(e3.messageRefer.messageClientId);
      }), this.service.emit("onMessageRevokeNotifications", e2), this.core.eventBus.emit("V2NIMMessageService/revokeMessages", e2);
    }
    deleteMessagesFn(e2) {
      e2.forEach((e3) => {
        this.service.model.deleteMessage(e3.messageRefer.messageClientId);
      }), this.service.emit("onMessageDeletedNotifications", e2), this.core.eventBus.emit("V2NIMMessageService/deleteMessages", e2);
    }
  }
  class Ns {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.model = t2.model, this.receiptUtil = t2.receiptUtil, this.logger = this.core.logger;
    }
    onMsgHandler(e2) {
      var t2 = e2.content.msg, { _conversationOnlineSyncNotify: i2, _conversationOnlineSyncData: r2 } = t2, s2 = ge$1(t2, ["_conversationOnlineSyncNotify", "_conversationOnlineSyncData"]), o2 = Cr(this.core, s2), n2 = kr(o2, this.core);
      this.logger.log(`v2OnMsgHandler::recvMsg ${n2.messageClientId} ${n2.messageServerId}`), 5 !== n2.messageType && this.core.V2NIMUserService.checkUserUpdate && this.core.V2NIMUserService.checkUserUpdate(n2, n2.userUpdateTime), !this.service.config.compatibleWithV1 && this.service.sendUtil.doMsgReceiveReport(n2, e2), delete n2.__clientExt, this.service.emit("onReceiveMessages", [n2]), this.model.upsertMessages([n2]), !this.service.config.compatibleWithV1 && this.service.markMsgsAck([n2]), i2 && this.core.eventBus.emit("V2NIMConversationService/conversationOnlineSyncNotify", { content: { info: JSON.parse(i2), data: JSON.parse(r2) } }, n2), 5 === n2.messageType && this.core.eventBus.emit("V2NIMTeamService/notification", o2), this.core.eventBus.emit("V2NIMMessageService/onMsg", n2);
    }
    syncOfflineMsgsHandler(e2) {
      var t2 = e2.content.datas.map((e3) => kr(Cr(this.core, e3), this.core));
      !this.service.config.compatibleWithV1 && this.service.markMsgsAck(t2), this.service.emit("onReceiveMessages", t2), this.model.upsertMessages(t2), this.core.eventBus.emit("V2NIMMessageService/offlineMsgs", t2);
    }
    syncRoamingMsgsHandler(e2) {
      var t2 = e2.content.datas;
      t2 = t2.map((e3) => kr(Cr(this.core, e3), this.core)), this.service.emit("onReceiveMessages", t2), this.model.upsertMessages(t2), this.core.eventBus.emit("V2NIMMessageService/roamingMsgs", t2);
    }
    onP2PMessageReceiptsHandler(e2) {
      this.receiptUtil.onP2PMessageReceiptsHandler(e2);
    }
    onTeamMessageReceiptsHandler(e2) {
      this.receiptUtil.onTeamMessageReceiptsHandler(e2);
    }
    syncP2PMessagReceiptsHandler(e2) {
      this.receiptUtil.syncP2PMessagReceiptsHandler(e2);
    }
    syncRevokeMessageHandler(e2) {
      this.service.deleteUtil.emitRevokeMessage(e2.content.datas);
    }
    onRevokeMessageHandler(e2) {
      this.service.deleteUtil.emitRevokeMessage([e2.content.data]);
    }
    onDeleteMessageHandler(e2) {
      var t2 = e2.content.data, i2 = { serverExtension: t2.serverExtension, deleteTime: t2.deleteTime, messageRefer: Nr(this.core, t2.messageRefer) };
      this.service.deleteUtil.deleteMessagesFn([i2]);
    }
    onDeleteMessagesHandler(e2) {
      var t2 = e2.content.data.map((e3) => ({ serverExtension: e3.serverExtension, deleteTime: e3.deleteTime, messageRefer: Nr(this.core, e3.messageRefer) }));
      this.service.deleteUtil.deleteMessagesFn(t2);
    }
    syncOnDeleteMessagesHandler(e2) {
      var t2 = e2.content.datas.map((e3) => ({ serverExtension: e3.serverExtension, deleteTime: e3.deleteTime, messageRefer: Nr(this.core, e3.messageRefer) }));
      this.service.emit("onMessageDeletedNotifications", t2);
    }
    v2MessageOnModifiedHandler(e2) {
      var t2 = Cr(this.core, e2.content.data);
      this.model.upsertMessages([t2]), this.core.eventBus.emit("forwardSend/V2NIMMessageService/modifyMsg", t2), this.service.emit("onReceiveMessagesModified", [t2]);
    }
    v2MessageSyncModifiedHandler(e2) {
      var t2 = e2.content.datas.map((e3) => Cr(this.core, e3)).filter((e3) => {
        var t3, i2 = (null === (t3 = this.model.getMessageById(e3.messageClientId)) || void 0 === t3 ? void 0 : t3.modifyTime) || 0;
        return (e3.modifyTime || 0) > i2;
      });
      t2.length > 0 && (this.model.upsertMessages(t2), t2.forEach((e3) => this.core.eventBus.emit("forwardSend/V2NIMMessageService/modifyMsg", e3)), this.service.emit("onReceiveMessagesModified", t2));
    }
    v2MessageSyncSuperTeamModifiedHandler(e2) {
      this.v2MessageSyncModifiedHandler(e2);
    }
  }
  class Os {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.logger = this.core.logger;
    }
    setListener() {
      this.core.eventBus.on("forwardReceive/V2NIMMessageService/sendMsg", this.service.sendMessageFn.bind(this.service)), this.core.eventBus.on("forwardReceive/V2NIMMessageService/revokeMessages", this.service.deleteUtil.emitRevokeMessage.bind(this.service.deleteUtil)), this.core.eventBus.on("forwardReceive/V2NIMMessageService/deleteMessages", this.service.deleteUtil.deleteMessagesFn.bind(this.service.deleteUtil)), this.core.eventBus.on("V2NIMConversationService/deleteConversation", (e2) => {
        e2.forEach((e3) => this.service.model.deleteMessages(e3));
      });
    }
    beforeEmit(e2, ...t2) {
      var i2, r2, s2, o2 = `${this.service.name}::emit ${e2.toString()}`;
      if ("onSendMessage" === e2) {
        var n2 = t2[0];
        this.logger.log(`${o2}`, `${n2.messageClientId}/${n2.messageServerId}/${n2.createTime};`, `sendingState:${n2.sendingState};attachmentUploadState:${n2.attachmentUploadState || 0};messageStatus:${null === (i2 = n2.messageStatus) || void 0 === i2 ? void 0 : i2.errorCode};config.lastMsg:${null === (r2 = n2.messageConfig) || void 0 === r2 ? void 0 : r2.lastMessageUpdateEnabled};config.unread:${null === (s2 = n2.messageConfig) || void 0 === s2 ? void 0 : s2.unreadEnabled}`);
      } else if ("onReceiveMessages" === e2 || "onReceiveMessagesModified" === e2) {
        var a2 = t2[0];
        this.logger.log(`${o2}`, a2.map((e3) => {
          var t3, i3;
          return `${e3.messageClientId}/${e3.messageServerId}/${e3.createTime};config.lastMsg:${null === (t3 = e3.messageConfig) || void 0 === t3 ? void 0 : t3.lastMessageUpdateEnabled};config.unread:${null === (i3 = e3.messageConfig) || void 0 === i3 ? void 0 : i3.unreadEnabled}`;
        }));
      } else if ("onMessageRevokeNotifications" === e2) {
        var c2 = t2[0];
        this.logger.log(`${o2}`, c2.map((e3) => `msg:${e3.messageRefer.messageClientId}/${e3.messageRefer.messageServerId};revokeAccountId:${e3.revokeAccountId}`));
      } else if ("onMessageDeletedNotifications" === e2) {
        var d2 = t2[0];
        this.logger.log(`${o2}`, d2.map((e3) => `msg:${e3.messageRefer.messageClientId}/${e3.messageRefer.messageServerId};deleteTime:${e3.deleteTime}`));
      } else
        this.logger.log(`${o2}`, ...t2);
    }
  }
  class Rs extends Xt$1 {
    constructor(e2, t2 = {}) {
      super("V2NIMMessageService", e2), this.customAttachmentParsers = [], this.config = { compatibleWithV1: true }, this.core._registerDep(Oi, "V2NIMConversationIdUtil"), this.core._registerDep(Is, "V2NIMMessageCreator"), this.core._registerDep(_s, "V2NIMMessageAttachmentCreator"), this.core._registerDep(Ms, "V2NIMClientAntispamUtil"), this.receiptUtil = new hr$1(this.core, this), this.fileUtil = new Lr(this.core), this.sendUtil = new Ts(this.core, this), this.modifyUtil = new Ss(this.core, this), this.deleteUtil = new Cs(this.core, this), this.model = new Ri(), this.event = new Os(this.core, this), this.handler = new Ns(this.core, this), "v2" === this.core.options.apiVersion && (ct({ cmdMap: Dr$1, cmdConfig: $r$1 }), this.setOptions(t2), this.setListener());
    }
    setOptions(e2) {
      var t2;
      (null === (t2 = this.core.msg) || void 0 === t2 ? void 0 : t2.name) ? this.config.compatibleWithV1 = true : this.config.compatibleWithV1 = false, this.config = Object.assign(this.config, e2);
    }
    setListener() {
      this.event.setListener();
    }
    reset() {
      this.model.reset(), this.receiptUtil.reset();
    }
    emit(e2, ...t2) {
      return this.event.beforeEmit(e2, ...t2), super.emit(e2, ...t2);
    }
    checkExtendUtil() {
      var e2;
      if (!(null === (e2 = this.core.V2NIMMessageExtendUtil) || void 0 === e2 ? void 0 : e2.name))
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2NIMMessageLogUtil is not registered" } });
    }
    checkLogUtil() {
      var e2;
      if (!(null === (e2 = this.core.V2NIMMessageLogUtil) || void 0 === e2 ? void 0 : e2.name))
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2NIMMessageExtendUtil is not registered" } });
    }
    getMessageList(e2) {
      return this.checkV2(), this.checkLogUtil(), this.core.V2NIMMessageLogUtil.getMessageList(e2);
    }
    getMessageListByRefers(e2) {
      return this.checkV2(), this.checkLogUtil(), this.core.V2NIMMessageLogUtil.getMessageListByRefers(e2);
    }
    clearHistoryMessage(e2) {
      return this.checkV2(), this.checkLogUtil(), this.core.V2NIMMessageLogUtil.clearHistoryMessage(e2);
    }
    pinMessage(e2, t2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.pinMessage(e2, t2);
    }
    unpinMessage(e2, t2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.unpinMessage(e2, t2);
    }
    updatePinMessage(e2, t2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.updatePinMessage(e2, t2);
    }
    voiceToText(e2) {
      return this.checkV2(), this.checkExtendUtil(), "string" == typeof e2.duration && (e2.duration = Number(e2.duration)), this.core.V2NIMMessageExtendUtil.voiceToText(e2);
    }
    getPinnedMessageList(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getPinnedMessageList(e2);
    }
    addQuickComment(e2, t2, i2, r2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.addQuickComment(e2, t2, i2, r2);
    }
    removeQuickComment(e2, t2, i2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.removeQuickComment(e2, t2, i2);
    }
    getQuickCommentList(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getQuickCommentList(e2);
    }
    addCollection(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.addCollection(e2);
    }
    removeCollections(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.removeCollections(e2);
    }
    updateCollectionExtension(e2, t2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.updateCollectionExtension(e2, t2);
    }
    getCollectionListByOption(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getCollectionListByOption(e2);
    }
    getCollectionListExByOption(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getCollectionListExByOption(e2);
    }
    searchCloudMessages(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.searchCloudMessages(e2);
    }
    getThreadMessageList(e2) {
      return this.checkV2(), this.checkExtendUtil(), this.core.V2NIMMessageExtendUtil.getThreadMessageList(e2);
    }
    registerCustomAttachmentParser(e2) {
      "function" == typeof e2 && -1 === this.customAttachmentParsers.indexOf(e2) && this.customAttachmentParsers.unshift(e2);
    }
    unregisterCustomAttachmentParser(e2) {
      var t2 = this.customAttachmentParsers.indexOf(e2);
      t2 > -1 && this.customAttachmentParsers.splice(t2, 1);
    }
    sendP2PMessageReceipt(e2) {
      return this.checkV2(), this.receiptUtil.sendP2PMessageReceipt(e2);
    }
    isPeerRead(e2) {
      return this.checkV2(), this.receiptUtil.isPeerRead(e2);
    }
    getP2PMessageReceipt(e2) {
      return this.checkV2(), this.receiptUtil.getP2PMessageReceipt(e2);
    }
    getTeamMessageReceipts(e2) {
      return this.checkV2(), this.receiptUtil.getTeamMessageReceipts(e2);
    }
    getTeamMessageReceiptDetail(e2) {
      return this.checkV2(), this.receiptUtil.getTeamMessageReceiptDetail(e2);
    }
    sendTeamMessageReceipts(e2) {
      return this.checkV2(), this.receiptUtil.sendTeamMessageReceipts(e2);
    }
    revokeMessage(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.deleteUtil.revokeMessage(e2, t2);
      });
    }
    deleteMessage(e2, t2) {
      return this.checkV2(), this.deleteUtil.deleteMessage(e2, t2);
    }
    deleteMessages(e2, t2) {
      return this.checkV2(), this.deleteUtil.deleteMessages(e2, t2);
    }
    cancelMessageAttachmentUpload(e2) {
      return this.checkV2(), this.fileUtil.cancelMessageAttachmentUpload(e2);
    }
    markMsgsAck(e2) {
      if (e2 && e2.length > 0) {
        var t2 = [], i2 = [];
        e2.forEach((e3) => {
          e3.senderId === this.core.account && e3.senderId !== e3.receiverId || (1 === e3.conversationType ? t2.push(e3) : 2 === e3.conversationType && i2.push(e3));
        }), t2.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: 7, cid: 2, ids: t2.map((e3) => e3.messageServerId) }), i2.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: 8, cid: 3, ids: i2.map((e3) => e3.messageServerId) });
      }
    }
    sendMessage(e2, t2, i2 = {}, r2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1({ message: { type: "object" } }, { message: e2 }, "", true), e2.messageClientId = e2.messageClientId || Ne$1(), e2.conversationId && e2.conversationId !== t2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "sendMessage: message.conversationId is not equal to conversationId" } });
        pe$1(xi, { conversationId: t2, message: e2, params: i2 }, "", true), ue$1(this.core.account, t2);
        var s2 = this.core.V2NIMConversationIdUtil.parseConversationType(t2);
        if ((2 === s2 || 3 === s2) && i2.robotConfig && !i2.robotConfig.accountId)
          throw new ae$1({ detail: { reason: "When conversationType is team or superTeam, account is required in robotInfo account is required" } });
        if (2 !== s2 && 3 !== s2 || !i2.targetConfig)
          i2.targetConfig = void 0;
        else {
          var o2 = i2.targetConfig.receiverIds;
          if (3 === s2 && false === i2.targetConfig.inclusive)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "setting inclusive to false for super teams is not allowed" } });
          if (0 === (o2 = o2.filter((e3) => e3 && e3 !== this.core.account)).length)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "receiverIds cannot be empty or only contain yourself" } });
          i2.targetConfig.receiverIds = o2;
        }
        var n2, a2 = this.core.timeOrigin.getTimeNode(), { messageBeforeSend: c2, clientAntispamResult: d2, hiddenParams: l2 } = this.sendUtil.prepareMessage(e2, t2, i2);
        this.logger.log(`V2SendMessage start:${c2.messageClientId}/${c2.createTime};conversation:${t2};`, `NTPTime:${this.core.timeOrigin.getNTPTime(a2)}`);
        try {
          n2 = yield this.sendUtil.doSendMessage({ apiCallingTimeNode: a2, messageBeforeSend: c2, clientAntispamResult: d2, hiddenParams: l2, progress: r2 });
        } catch (e3) {
          throw this.logger.warn(`V2SendMessage end:${c2.messageClientId}.`, e3 instanceof oe$1 ? `failed:${e3.code}` : "failed"), e3;
        }
        return n2.message.senderId === n2.message.receiverId && this.markMsgsAck([n2.message]), this.logger.log(`V2SendMessage end:${n2.message.messageClientId}/${n2.message.messageServerId}/${n2.message.createTime}`), n2;
      });
    }
    replyMessage(e2, t2, i2 = {}, r2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1({ message: { type: "object" } }, { message: e2 }, "", true), e2.messageClientId = e2.messageClientId || Ne$1(), pe$1(Ui, { message: e2, replyMessage: t2, params: i2 }, "", true), ue$1(this.core.account, t2.conversationId), (2 === e2.conversationType || 3 === e2.conversationType) && i2.robotConfig && !i2.robotConfig.accountId)
          throw new ae$1({ detail: { reason: "When conversationType is team or superTeam, account is required in robotInfo account is required" } });
        var s2 = this.core.timeOrigin.getTimeNode(), { messageBeforeSend: o2, clientAntispamResult: n2, hiddenParams: a2 } = this.sendUtil.prepareMessage(e2, t2.conversationId, i2, t2), c2 = yield this.sendUtil.doSendMessage({ apiCallingTimeNode: s2, messageBeforeSend: o2, clientAntispamResult: n2, hiddenParams: a2, progress: r2 });
        return c2.message.senderId === c2.message.receiverId && this.markMsgsAck([c2.message]), c2;
      });
    }
    modifyMessage(e2, t2) {
      this.checkV2(), this.checkLogin(), pe$1(lr$1, e2, "message", true), pe$1(pr, t2, "params", true), this.modifyUtil.checkIfModify(e2, t2);
      var { messageBeforeSend: i2, clientAntispamResult: r2 } = this.modifyUtil.prepareMessage(e2, t2);
      return this.modifyUtil.modifyMessage(i2, r2);
    }
    sendMessageFn(e2) {
      if (e2.msgAckSnapshot) {
        var t2 = e2.msgAckSnapshot, i2 = { conversationId: e2.conversationId, messageServerId: e2.messageServerId, messageClientId: e2.messageClientId, readCount: 0, unreadCount: Number(t2) };
        delete e2.msgAckSnapshot, this.emit("onReceiveTeamMessageReadReceipts", [i2]);
      }
      e2 = kr(e2, this.core), this.model.upsertMessages([e2]), this.core.eventBus.emit("V2NIMMessageService/sendMessage", e2, e2.sendingState);
    }
  }
  var As = { super_team: 3, p2p: 1, team: 2 }, bs = { 3: "super_team", 1: "p2p", 0: "p2p", 2: "team" };
  function ks$1(e2, t2 = "|") {
    var i2 = e2.indexOf(t2);
    if (-1 === i2)
      return { target: "", type: 0 };
    var r2 = e2.slice(0, i2);
    return { target: e2.slice(i2 + 1), type: As[r2] || 0 };
  }
  function Vs(e2, t2) {
    return `${bs[e2]}|${t2}`;
  }
  class Ls {
    constructor() {
      this.map = /* @__PURE__ */ new Map(), this.capacity = 1e4, this.readTimeMap = /* @__PURE__ */ new Map(), this.stickTopMap = /* @__PURE__ */ new Map();
    }
    reset() {
      this.map.clear(), this.readTimeMap.clear(), this.stickTopMap.clear();
    }
    count() {
      return this.map.size;
    }
    sort() {
      var e2 = Array.from(this.map.values());
      e2.sort((e3, t2) => t2.sortOrder - e3.sortOrder), this.map.clear(), e2.forEach((e3) => {
        this.map.set(e3.conversationId, e3);
      });
    }
    processConversation(e2) {
      return "string" == typeof e2.lastMessage && delete e2.lastMessage, void 0 === e2.localExtension && (e2.localExtension = ""), e2;
    }
    getById(e2) {
      return this.map.get(e2);
    }
    getAll() {
      return Array.from(this.map.values()).sort((e2, t2) => t2.sortOrder - e2.sortOrder);
    }
    getByOption(e2, t2, i2) {
      var { conversationTypes: r2, onlyUnread: s2 } = i2, o2 = [];
      this.map.forEach((e3) => {
        r2 && r2.length > 0 && !r2.includes(e3.type) || s2 && !e3.unreadCount || i2.ignoreMuted && e3.mute || o2.push(e3);
      }), o2 = o2.sort((e3, t3) => t3.sortOrder - e3.sortOrder);
      var n2 = 0;
      e2 > 0 && (n2 = Ve$1(o2, "sortOrder", e2), o2[n2] && o2[n2].sortOrder === e2 && (n2 += 1));
      var a2 = o2.slice(n2).length;
      return (o2 = o2.slice(n2, n2 + t2)).length > 0 ? { offset: a2 > t2 ? o2[o2.length - 1].sortOrder : 0, finished: !(a2 > t2), conversationList: o2 } : { offset: 0, finished: true, conversationList: o2 };
    }
    upsert(e2) {
      var t2 = e2.conversationId, i2 = this.map.get(t2);
      if (!i2) {
        var r2 = this.processConversation(Object.assign({ stickTop: this.getStickTop(t2), localExtension: "", lastMessage: null, unreadCount: 0, sortOrder: 0, createTime: 0, updateTime: 0 }, e2));
        return this.setLRU(t2, r2), r2.unreadCount > 0;
      }
      var s2 = e2.unreadCount !== i2.unreadCount, o2 = Object.assign({}, i2, e2);
      return o2 = this.processConversation(o2), this.setLRU(t2, o2), s2;
    }
    setLRU(e2, t2) {
      if (this.map.has(e2))
        this.map.delete(e2);
      else if (this.map.size >= this.capacity) {
        var i2 = this.map.keys().next().value;
        i2 && this.map.delete(i2);
      }
      this.map.set(e2, t2);
    }
    bulkUpsert(e2) {
      var t2 = false;
      return e2.forEach((e3) => {
        this.upsert(e3) && (t2 = true);
      }), t2;
    }
    deleteById(e2) {
      var t2 = this.getById(e2);
      if (t2)
        return this.map.delete(e2), t2;
    }
    updateReadTime(e2, t2) {
      this.readTimeMap.set(e2, t2);
    }
    getReadTime(e2) {
      return this.readTimeMap.get(e2) || 0;
    }
    updateStickTop(e2, t2) {
      t2 ? this.stickTopMap.set(e2, true) : this.stickTopMap.delete(e2);
    }
    getStickTop(e2) {
      return this.stickTopMap.get(e2) || false;
    }
  }
  var Ps = { "4_14": "v2LocalConvSyncReadTime", "4_20": "v2LocalConvSyncSuperTeamReadTime", "4_22": "v2LocalConvSyncMoreRoaming", "4_23": "v2LocalConvSyncStickTop", "4_25": "v2LocalConvSyncReliableInfo", "7_16": "v2LocalConvMarkReadTime", "7_25": "v2LocalConvMultiMarkReadTime", "7_116": "v2LocalConvMultiSyncReadTime", "21_25": "v2LocalConvSuperTeamMarkReadTime", "21_32": "v2LocalConvSuperTeamMultiMarkReadTime", "21_125": "v2LocalConvSuperTeamMultiSyncReadTime", "33_12": "v2LocalConvStickTopAdd", "33_13": "v2LocalConvStickTopDelete", "23_112": "v2LocalConvStickTopMultiSyncAdd", "23_113": "v2LocalConvStickTopMultiSyncDelete", "23_114": "v2LocalConvStickTopMultiSyncUpdate" }, Ds = "V2NIMLocalConversationService", ws = { id: 1, ext: 2, createTime: { id: 3, retType: "number" }, updateTime: { id: 4, retType: "number" } }, Us = { scene: 1, to: 2, timetag: 3 }, xs = { v2LocalConvSyncReadTime: { sid: 4, cid: 14, service: Ds, response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Long", name: "timetag" }] }, v2LocalConvSyncSuperTeamReadTime: { sid: 4, cid: 20, service: Ds, response: [{ type: "LongLongMap", name: "superTeam" }] }, v2LocalConvSyncMoreRoaming: { sid: 4, cid: 22, service: Ds, response: [] }, v2LocalConvSyncStickTop: { sid: 4, cid: 23, service: Ds, response: [{ type: "Long", name: "timetag" }, { type: "Bool", name: "isThereAnyChange" }, { type: "PropertyArray", name: "datas", reflectMapper: dt(ws) }] }, v2LocalConvSyncReliableInfo: { sid: 4, cid: 25, service: Ds, response: [] }, v2LocalConvMarkReadTime: { sid: 7, cid: 16, service: Ds, params: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvMultiMarkReadTime: { sid: 7, cid: 25, service: Ds, ignoreErrCodes: [700], params: [{ type: "PropertyArray", name: "tags", reflectMapper: Us }] }, v2LocalConvMultiSyncReadTime: { sid: 7, cid: 116, service: Ds, response: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvSuperTeamMarkReadTime: { sid: 21, cid: 25, service: Ds, params: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvSuperTeamMultiMarkReadTime: { sid: 21, cid: 32, service: Ds, ignoreErrCodes: [700], params: [{ type: "PropertyArray", name: "tags", reflectMapper: Us }] }, v2LocalConvSuperTeamMultiSyncReadTime: { sid: 21, cid: 125, service: Ds, response: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvStickTopAdd: { sid: 33, cid: 12, service: Ds, params: [{ type: "Property", name: "tag", reflectMapper: ws }], response: [{ type: "Property", name: "data", reflectMapper: dt(ws) }] }, v2LocalConvStickTopDelete: { sid: 33, cid: 13, service: Ds, params: [{ type: "Property", name: "tag", reflectMapper: ws }], response: [{ type: "Long", name: "timetag" }] }, v2LocalConvStickTopMultiSyncAdd: { sid: 23, cid: 112, service: Ds, response: [{ type: "Property", name: "data", reflectMapper: dt(ws) }] }, v2LocalConvStickTopMultiSyncDelete: { sid: 23, cid: 113, service: Ds, response: [{ type: "Long", name: "timetag" }, { type: "Property", name: "data", reflectMapper: dt(ws) }] }, v2LocalConvStickTopMultiSyncUpdate: { sid: 23, cid: 114, service: Ds, response: [{ type: "Property", name: "data", reflectMapper: dt(ws) }] } };
  function Fs(e2, t2) {
    e2 = e2 || [], t2 = t2 || 1, t2 = Math.max(Math.floor(t2), 1);
    for (var i2 = [], r2 = 0; r2 < e2.length; r2 += t2)
      i2.push(e2.slice(r2, r2 + t2));
    return i2;
  }
  class Bs {
    constructor(e2, t2) {
      this.totalUnreadCount = void 0, this.unreadCountByFilter = {}, this.core = e2, this.service = t2, this.model = t2.model, this.logger = t2.logger;
    }
    reset() {
      this.totalUnreadCount = void 0, this.unreadCountByFilter = {};
    }
    getTotalUnreadCount() {
      return this.totalUnreadCount;
    }
    resetTotalAfterSyncDone() {
      var e2 = this.service.model.getAll().reduce((e3, t3) => e3 + (t3.unreadCount || 0), 0), t2 = this.totalUnreadCount;
      return void 0 !== t2 && t2 === e2 || (this.totalUnreadCount = e2, this.service.emit("onTotalUnreadCountChanged", e2)), e2;
    }
    digestUnreadCountChange() {
      this._digest();
    }
    _digest() {
      var e2 = this.totalUnreadCount, t2 = this.service.model.getAll().reduce((e3, t3) => e3 + (t3.unreadCount || 0), 0);
      this.core.logger.log(`V2NIMConversation::digestUnreadCountChange:oldUnreadCount ${e2}, newUnreadCount ${t2}`), e2 !== t2 && (this.totalUnreadCount = t2, this.service.emit("onTotalUnreadCountChanged", t2)), Object.keys(this.unreadCountByFilter).forEach((e3) => {
        var t3 = JSON.parse(e3), i2 = this.getUnreadCountByFilter(t3), r2 = this.unreadCountByFilter[e3];
        this.unreadCountByFilter[e3] = i2, t3.equals = $s.bind(t3), r2 !== i2 && this.service.emit("onUnreadCountChangedByFilter", t3, i2);
      });
    }
    clearUnreadCount(e2) {
      var t2 = e2.reduce((e3, t3) => (this.service.model.upsert({ conversationId: t3.conversationId, type: t3.type, unreadCount: 0 }) && e3.push(t3.conversationId), e3), []);
      if (t2.length > 0) {
        var i2 = t2.map((e3) => this.service.model.getById(e3));
        this.service.triggerConversationChanged(i2), this.digestUnreadCountChange();
      }
    }
    getUnreadCountByIds(e2) {
      return (e2 = Wt(e2)).reduce((e3, t2) => {
        var i2 = this.service.model.getById(t2);
        return e3 + (i2 && i2.unreadCount || 0);
      }, 0);
    }
    getUnreadCountByFilter(e2) {
      var t2 = this.service.model.count();
      return this.service.model.getByOption(0, t2, { conversationTypes: e2.conversationTypes, ignoreMuted: e2.ignoreMuted }).conversationList.reduce((e3, t3) => e3 + (t3.unreadCount || 0), 0);
    }
    isMessageUnread(e2, t2 = 0) {
      var i2;
      return e2.createTime > t2 && e2.senderId !== this.core.account && 200 === e2.messageStatus.errorCode && false !== (null === (i2 = e2.messageConfig) || void 0 === i2 ? void 0 : i2.unreadEnabled);
    }
    isMessageReferUnread(e2, t2 = 0) {
      var i2 = this.core.V2NIMMessageService.model.getMessageById(e2.messageClientId);
      return i2 ? this.isMessageUnread(i2, t2) : e2.createTime > t2 && e2.senderId !== this.core.account;
    }
    countUnreadByMessageInMemory(e2, t2 = 0) {
      var i2 = 0;
      return this.core.V2NIMMessageService.model.getMessagesByConversationId(e2).forEach((e3) => {
        this.isMessageUnread(e3, t2) && i2++;
      }), i2;
    }
    addFilter(e2) {
      var t2 = js(e2);
      if (void 0 !== this.unreadCountByFilter[t2])
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST });
      var i2 = JSON.parse(t2), r2 = this.getUnreadCountByFilter(i2);
      this.unreadCountByFilter[t2] = r2, this.service.emit("onUnreadCountChangedByFilter", i2, r2);
    }
    deleteFilter(e2) {
      var t2 = js(e2);
      if (void 0 === this.unreadCountByFilter[t2])
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
      delete this.unreadCountByFilter[t2];
    }
    markConversationRead(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = this.model.getById(e2), i2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2), r2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2), s2 = this.model.getReadTime(e2);
        if (!t2)
          return s2 || this.core.timeOrigin.getNTPTime();
        var o2 = this.service.compute.computeReadTimeForMark(t2);
        return s2 >= o2 ? (this.logger.log(`V2LocalConv::markConversationRead currentReadTime >= readTime ${e2},${s2},${o2}`), s2) : (3 === r2 ? yield this.core.sendCmd("v2LocalConvSuperTeamMarkReadTime", { timetag: o2, to: i2 }) : yield this.core.sendCmd("v2LocalConvMarkReadTime", { scene: 1 === r2 ? 0 : 2 === r2 ? 1 : 2, timetag: o2, to: i2 }), this.model.updateReadTime(e2, o2), o2);
      });
    }
    markMultiConversationRead(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = { cmd: "v2LocalConvSuperTeamMultiMarkReadTime", params: [] }, i2 = { cmd: "v2LocalConvMultiMarkReadTime", params: [] };
        e2.forEach((e3) => {
          var r3 = this.model.getById(e3);
          if (r3) {
            var s3 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e3), o3 = this.core.V2NIMConversationIdUtil.parseConversationType(e3), n3 = this.model.getReadTime(e3), a2 = this.service.compute.computeReadTimeForMark(r3);
            if (!(n3 >= a2)) {
              var c2 = { conversationId: e3, scene: 1 === o3 ? 0 : 2 === o3 ? 1 : 2, timetag: a2, to: s3 };
              3 === o3 ? t2.params.push(c2) : i2.params.push(c2);
            }
          }
        });
        var r2 = Fs(t2.params, 50), s2 = Fs(i2.params, 50);
        for (var o2 of r2) {
          try {
            yield this.core.sendCmd(t2.cmd, { tags: o2 });
          } catch (e3) {
            this.logger.warn("markMultiConversationRead::error:", o2.map((e4) => e4.conversationId), e3);
          }
          o2.forEach((e3) => {
            this.model.updateReadTime(e3.conversationId, e3.timetag);
          });
        }
        for (var n2 of s2) {
          try {
            yield this.core.sendCmd(i2.cmd, { tags: n2 });
          } catch (e3) {
            this.logger.warn("markMultiConversationRead::error:", n2.map((e4) => e4.conversationId), e3);
          }
          n2.forEach((e3) => {
            this.model.updateReadTime(e3.conversationId, e3.timetag);
          });
        }
      });
    }
  }
  function js(e2) {
    var { conversationTypes: t2 } = e2;
    return t2 && (t2 = t2.sort()), JSON.stringify({ conversationGroupId: e2.conversationGroupId, conversationTypes: t2, ignoreMuted: e2.ignoreMuted });
  }
  function $s(e2) {
    return JSON.stringify(this) === js(e2);
  }
  var Gs, Hs = { type: { type: "number" }, lastMessageState: { type: "number" }, unreadCount: { type: "number" }, stickTop: { type: "boolean" }, sortOrder: { type: "number" }, version: { type: "number" }, deleteFlag: { type: "boolean" }, createTime: { type: "number" }, updateTime: { type: "number" } };
  function qs(e2, t2) {
    return t2 && t2.length > 0 ? t2.map((t3) => Ks(e2, t3)) : [];
  }
  function Ys(e2, t2, i2 = 0, r2) {
    var s2, o2;
    t2 = kr(t2, e2);
    var { messageType: n2, subType: a2, text: c2, attachment: d2, serverExtension: l2 } = t2, p2 = "";
    if (t2.senderId !== e2.account && 5 !== n2) {
      p2 = Ue$1(t2, "fromNick");
      var h2 = null === (o2 = null === (s2 = e2.V2NIMFriendService) || void 0 === s2 ? void 0 : s2.model) || void 0 === o2 ? void 0 : o2.getFriend(t2.senderId);
      h2 && h2.alias && (p2 = h2.alias);
    }
    return JSON.parse(JSON.stringify({ lastMessageState: i2, messageRefer: Or(e2, t2), messageType: n2, subType: a2, text: c2, attachment: d2, serverExtension: l2, callbackExtension: t2.callbackExtension, sendingState: r2, senderName: p2 }));
  }
  function Ks(e2, t2) {
    var i2 = ut(Hs, t2);
    if (i2.groupIds ? i2.groupIds = JSON.parse(i2.groupIds) : delete i2.groupIds, "string" == typeof i2.lastMessage)
      if ("" === i2.lastMessage)
        ;
      else if (1 === i2.lastMessageState) {
        var r2 = Rr(e2, at(JSON.parse(i2.lastMessage), dt(Br)));
        i2.lastMessage = function(e3, t3) {
          var { messageRefer: i3, revokeAccountId: r3, revokeType: s3, callbackExtension: o2, serverExtension: n2, postscript: a2 } = t3, c2 = function(e4, t4, i4, r4) {
            var s4, o3, n3, a3, c3, d2, l2, p2;
            if (t4 !== e4.account) {
              var h2 = null === (o3 = null === (s4 = e4.V2NIMFriendService) || void 0 === s4 ? void 0 : s4.model) || void 0 === o3 ? void 0 : o3.getFriend(t4);
              if (h2 && h2.alias)
                return h2.alias;
              if (2 === i4) {
                var u2 = null === (a3 = null === (n3 = e4.V2NIMTeamService) || void 0 === n3 ? void 0 : n3.memberModel) || void 0 === a3 ? void 0 : a3.getById(r4, 1, t4);
                if (u2 && u2.teamNick)
                  return u2.teamNick;
              } else if (3 === i4) {
                var m2 = null === (d2 = null === (c3 = e4.V2NIMTeamService) || void 0 === c3 ? void 0 : c3.memberModel) || void 0 === d2 ? void 0 : d2.getById(r4, 1, t4);
                if (m2 && m2.teamNick)
                  return m2.teamNick;
              }
              var g2 = null === (p2 = null === (l2 = e4.V2NIMUserService) || void 0 === l2 ? void 0 : l2.model) || void 0 === p2 ? void 0 : p2.getUser(t4);
              return g2 && g2.name ? g2.name : void 0;
            }
          }(e3, t3.revokeAccountId, t3.messageRefer.conversationType, t3.messageRefer.receiverId) || "";
          return JSON.parse(JSON.stringify({ lastMessageState: 1, messageRefer: i3, revokeAccountId: r3, revokeType: s3, callbackExtension: o2, serverExtension: n2, text: a2 || "", senderName: c2 }));
        }(e2, r2);
      } else if (0 === i2.lastMessageState) {
        var s2 = at(JSON.parse(i2.lastMessage), dt(wr));
        i2.lastMessage = Ys(e2, s2, i2.lastMessageState, s2.senderId === e2.account ? 1 : void 0);
      } else
        2 === i2.lastMessageState && delete i2.lastMessage;
    return i2;
  }
  function Ws(e2) {
    var { version: t2, deleteFlag: i2 } = e2;
    return { conversation: ge$1(e2, ["version", "deleteFlag"]), version: t2, deleteFlag: i2 };
  }
  !function(e2) {
    e2[e2.createConversation = 1] = "createConversation", e2[e2.deleteConversation = 2] = "deleteConversation", e2[e2.updateConversation = 3] = "updateConversation", e2[e2.setConversationTop = 4] = "setConversationTop", e2[e2.clearConversationUnread = 5] = "clearConversationUnread", e2[e2.addConversationToGroup = 6] = "addConversationToGroup", e2[e2.removeConversationFromGroup = 7] = "removeConversationFromGroup", e2[e2.modifyConversationOnSendMessage = 8] = "modifyConversationOnSendMessage", e2[e2.modifyConversationOnDeleteMessage = 9] = "modifyConversationOnDeleteMessage", e2[e2.modifyConversationOnRecallMessage = 10] = "modifyConversationOnRecallMessage", e2[e2.modifyConversationOnClearMessage = 11] = "modifyConversationOnClearMessage", e2[e2.oneClickClearConversationUnread = 12] = "oneClickClearConversationUnread", e2[e2.modifyConversationOnUpdateMessage = 13] = "modifyConversationOnUpdateMessage";
  }(Gs || (Gs = {}));
  var Js = { type: { type: "number" }, oneClickClearUnreadType: { type: "number" }, oneClickClearUnreadConversationType: { type: "object" }, oneClickClearUnreadVersion: { type: "number" }, deleteConversationClearMessage: { type: "boolean" } };
  function zs(e2) {
    return ut(Js, e2);
  }
  class Xs {
    constructor(e2, t2) {
      this.core = e2, this.service = t2;
    }
    get hasUserService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMUserService) || void 0 === e2 ? void 0 : e2.name);
    }
    get hasFriendService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMFriendService) || void 0 === e2 ? void 0 : e2.name);
    }
    get hasTeamService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMTeamService) || void 0 === e2 ? void 0 : e2.name);
    }
    get hasMessageService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMMessageService) || void 0 === e2 ? void 0 : e2.name);
    }
    computeFromExternal(e2) {
      var t2, i2, r2;
      if (0 === e2.type)
        return e2;
      var s2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2.conversationId), o2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2.conversationId), n2 = {};
      if ((null === (t2 = this.core.V2NIMSettingService) || void 0 === t2 ? void 0 : t2.name) && (n2.mute = this.core.V2NIMSettingService.getConversationMuteStatus(e2.conversationId)), 1 === s2 && this.hasUserService) {
        var a2, c2 = this.core.V2NIMUserService.model.getUser(o2), d2 = this.hasFriendService ? this.core.V2NIMFriendService.model.getFriend(o2) : void 0;
        e2.conversationId === (null === (i2 = e2.lastMessage) || void 0 === i2 ? void 0 : i2.messageRefer.conversationId) && (a2 = null === (r2 = e2.lastMessage) || void 0 === r2 ? void 0 : r2.senderName), n2.name = (null == d2 ? void 0 : d2.alias) || (null == c2 ? void 0 : c2.name) || a2 || o2, n2.avatar = (null == c2 ? void 0 : c2.avatar) || "";
      } else if (2 === s2 && this.hasTeamService) {
        var l2 = this.core.V2NIMTeamService.model.getById(o2, 1);
        n2.name = (null == l2 ? void 0 : l2.name) || o2, n2.avatar = (null == l2 ? void 0 : l2.avatar) || "";
      } else if (3 === s2 && this.hasTeamService) {
        var p2 = this.core.V2NIMTeamService.model.getById(o2, 2);
        n2.name = (null == p2 ? void 0 : p2.name) || o2, n2.avatar = (null == p2 ? void 0 : p2.avatar) || "";
      }
      return Object.assign(e2, n2), e2;
    }
    computeSortOrder(e2, t2) {
      return t2 ? e2 ? t2 + 1e15 : t2 : e2 ? 1e15 : 0;
    }
    computeReadTimeForMark(e2) {
      var t2, i2, r2, s2 = e2.conversationId, o2 = this.service.model.getReadTime(s2);
      if (null === (i2 = null === (t2 = null == e2 ? void 0 : e2.lastMessage) || void 0 === t2 ? void 0 : t2.messageRefer) || void 0 === i2 ? void 0 : i2.createTime)
        r2 = e2.lastMessage.messageRefer.createTime;
      else {
        if (0 === e2.unreadCount && o2 > 0)
          return o2;
        if (!this.core.timeOrigin.checkNodeReliable())
          return o2 || 0;
        r2 = this.core.timeOrigin.getNTPTime();
      }
      return r2;
    }
    computeConvWithLastMsg(e2, t2) {
      var i2, r2 = t2 || this.core.V2NIMMessageService.model.getLastMessageOfConversation(e2.conversationId);
      if (r2) {
        if (false !== (null === (i2 = r2.messageConfig) || void 0 === i2 ? void 0 : i2.lastMessageUpdateEnabled)) {
          var s2 = Ys(this.core, r2, 0, r2.sendingState);
          e2.lastMessage = s2;
        }
        e2.createTime = e2.createTime || r2.createTime, e2.updateTime = r2.createTime, e2.sortOrder = this.computeSortOrder(e2.stickTop, r2.createTime);
      }
      return e2;
    }
    computeConvWithUnread(e2, t2) {
      var i2 = this.service.model.getReadTime(e2.conversationId), r2 = e2.unreadCount || 0;
      return t2 ? t2 && this.service.unread.isMessageUnread(t2) && (r2 += 1) : r2 = this.service.unread.countUnreadByMessageInMemory(e2.conversationId, i2), e2.unreadCount = r2, e2;
    }
    computeConvByMsgsCache(e2, t2) {
      var i2, r2, s2 = this.service.model.getById(e2), o2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2), n2 = this.core.V2NIMMessageService.model.getLastMessageOfConversation(e2);
      r2 = (null == t2 ? void 0 : t2.updateTime) || (n2 && n2.createTime ? n2.createTime : s2 && s2.updateTime ? s2.updateTime : this.core.timeOrigin.getNTPTime());
      var a2 = this.service.model.getStickTop(e2), c2 = Object.assign(Object.assign({ conversationId: e2, type: o2, stickTop: a2, localExtension: (null == s2 ? void 0 : s2.localExtension) || "", lastMessage: null, unreadCount: 0 }, t2), { createTime: (null == s2 ? void 0 : s2.createTime) || r2, updateTime: r2, sortOrder: this.computeSortOrder(a2, r2) });
      if (n2 && false !== (null === (i2 = n2.messageConfig) || void 0 === i2 ? void 0 : i2.lastMessageUpdateEnabled)) {
        var d2 = Ys(this.core, n2, 0, n2.sendingState);
        c2.lastMessage = d2;
      }
      return c2;
    }
  }
  class Qs {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.model = this.service.model, this.logger = this.core.logger;
    }
    v2LocalConvSyncStickTopHandler(e2) {
      var { timetag: t2, isThereAnyChange: i2, datas: r2 } = e2.content;
      if (i2) {
        var s2 = this.model.getAll(), o2 = r2.map((e3) => {
          var { target: t3, type: i3 } = ks$1(e3.id), r3 = this.core.V2NIMConversationIdUtil.conversationId(i3, t3);
          return this.model.updateStickTop(r3, true), r3;
        });
        s2.forEach((e3) => {
          o2.includes(e3.conversationId) ? (e3.stickTop = true, e3.updateTime = e3.updateTime > t2 ? e3.updateTime : t2) : e3.stickTop = false, this.model.updateStickTop(e3.conversationId, e3.stickTop);
        }), this.model.bulkUpsert(s2);
      }
    }
    v2LocalConvSyncReadTimeHandler(e2) {
      var t2 = e2.content.p2p || {}, i2 = e2.content.team.m_map || {};
      this.logger.log("v2SyncLocalConvAck::", t2, i2), Object.keys(t2).forEach((e3) => {
        var i3 = this.core.V2NIMConversationIdUtil.p2pConversationId(e3), r2 = this.model.getReadTime(i3);
        t2[e3] > r2 && (this.model.updateReadTime(i3, t2[e3]), this.service.emit("onConversationReadTimeUpdated", i3, t2[e3]));
      }), Object.keys(i2).forEach((e3) => {
        var t3 = this.core.V2NIMConversationIdUtil.teamConversationId(e3), r2 = this.model.getReadTime(t3);
        i2[e3] > r2 && (this.model.updateReadTime(t3, i2[e3]), this.service.emit("onConversationReadTimeUpdated", t3, i2[e3]));
      });
    }
    v2LocalConvSyncSuperTeamReadTimeHandler(e2) {
      var t2 = e2.content.superTeam.m_map;
      this.logger.log("v2SyncLocalSuperTeamConvAck::", t2), Object.keys(t2).forEach((e3) => {
        var i2 = this.core.V2NIMConversationIdUtil.superTeamConversationId(e3), r2 = this.model.getReadTime(i2);
        t2[e3] > r2 && (this.model.updateReadTime(i2, t2[e3]), this.service.emit("onConversationReadTimeUpdated", i2, t2[e3]));
      });
    }
    v2LocalConvMultiSyncReadTimeHandler(e2) {
      var t2 = e2.content, i2 = `${0 === t2.scene ? "p2p" : 1 === t2.scene ? "team" : "super_team"}-${t2.to}`, { type: r2, target: s2 } = ks$1(i2, "-"), o2 = this.core.V2NIMConversationIdUtil.conversationId(r2, s2), n2 = this.model.getById(o2), a2 = null == n2 ? void 0 : n2.unreadCount, c2 = this.model.getReadTime(o2);
      t2.timetag <= c2 ? this.logger.warn(`v2LocalConvMultiSyncReadTimeHandler: ${o2} do not need update ack ${t2.timetag}/${c2}`) : (this.model.updateReadTime(o2, t2.timetag), this.service.emit("onConversationReadTimeUpdated", o2, t2.timetag), n2 ? (n2 = this.service.compute.computeConvWithUnread(n2), this.model.upsert(n2), this.service.unread.digestUnreadCountChange(), void 0 === a2 && n2.unreadCount > 0 ? this.service.triggerConversationCreated(n2) : "number" == typeof a2 && n2.unreadCount !== a2 && this.service.triggerConversationChanged([n2])) : this.logger.log(`v2LocalConvMultiSyncReadTimeHandler: ${o2} not exist`));
    }
    v2LocalConvSuperTeamMultiSyncReadTimeHandler(e2) {
      this.v2LocalConvMultiSyncReadTimeHandler(e2);
    }
    v2LocalConvStickTopMultiSyncAddHandler(e2) {
      var { data: t2 } = e2.content, { target: i2, type: r2 } = ks$1(t2.id), s2 = this.core.V2NIMConversationIdUtil.conversationId(r2, i2);
      this.model.updateStickTop(s2, true);
      var o2 = this.model.getById(s2);
      o2 && (o2.stickTop = true, o2.updateTime = o2.updateTime > t2.updateTime ? o2.updateTime : t2.updateTime, o2.sortOrder = this.service.compute.computeSortOrder(true, t2.updateTime), this.model.upsert(o2), this.service.triggerConversationChanged([o2]));
    }
    v2LocalConvStickTopMultiSyncDeleteHandler(e2) {
      var { data: t2, timetag: i2 } = e2.content, { target: r2, type: s2 } = ks$1(t2.id), o2 = this.core.V2NIMConversationIdUtil.conversationId(s2, r2);
      this.model.updateStickTop(o2, false);
      var n2 = this.model.getById(o2);
      n2 && (n2.stickTop = false, n2.updateTime = n2.updateTime > i2 ? n2.updateTime : i2, n2.sortOrder = this.service.compute.computeSortOrder(false, i2), this.model.upsert(n2), this.service.triggerConversationChanged([n2]));
    }
  }
  class Zs {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.model = this.service.model, this.compute = this.service.compute, this.logger = this.core.logger;
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/syncing", () => this.service.emit("onSyncStarted")), this.core.eventBus.on("V2NIMLoginService/syncDone", this.onSyncDone.bind(this)), this.core.eventBus.on("V2NIMMessageService/sendMessage", this.sendMsg.bind(this)), this.core.eventBus.on("V2NIMMessageService/onMsg", this.recvMsg.bind(this)), this.core.eventBus.on("V2NIMMessageService/modifyMsg", this.modifyMsg.bind(this)), this.core.eventBus.on("V2NIMMessageService/deleteMessages", this.deleteMessages.bind(this)), this.core.eventBus.on("V2NIMMessageService/revokeMessages", this.deleteMessages.bind(this)), this.core.eventBus.on("V2NIMMessageLogUtil/onClearHistoryNotifications", this.clearMessages.bind(this)), this.core.eventBus.on("V2NIMMessageService/roamingMsgs", this.generateConv.bind(this)), this.core.eventBus.on("V2NIMMessageService/offlineMsgs", this.generateConv.bind(this)), this.core.eventBus.on("V2NIMSettingService/setMute", this.setMute.bind(this));
    }
    beforeEmit(e2, ...t2) {
      var i2, r2 = `${this.service.name}::emit ${e2.toString()}`;
      if ("onConversationCreated" === e2) {
        var s2 = t2[0], o2 = null === (i2 = s2.lastMessage) || void 0 === i2 ? void 0 : i2.messageRefer;
        this.logger.log(`${r2}`, `id:${s2.conversationId};unread:${s2.unreadCount};lastMsg:${(null == o2 ? void 0 : o2.messageClientId) || ""}/${(null == o2 ? void 0 : o2.messageServerId) || ""}`);
      } else if ("onConversationChanged" === e2) {
        var n2 = t2[0];
        this.logger.log(`${r2}`, n2.map((e3) => {
          var t3, i3 = null === (t3 = e3.lastMessage) || void 0 === t3 ? void 0 : t3.messageRefer;
          return `id:${e3.conversationId};unread:${e3.unreadCount};lastMsg:${(null == i3 ? void 0 : i3.messageClientId) || ""}/${(null == i3 ? void 0 : i3.messageServerId) || ""}`;
        }));
      } else
        this.logger.log(`${r2}`, ...t2);
    }
    onSyncDone(e2) {
      if (e2)
        this.service.emit("onSyncFailed", e2);
      else {
        var t2 = this.model.getAll();
        (t2 = t2.map((e3) => {
          var t3 = e3.conversationId, i2 = this.compute.computeConvByMsgsCache(t3);
          return i2 = this.compute.computeConvWithUnread(i2), i2 = this.compute.computeFromExternal(i2), this.model.upsert(i2), this.model.getById(t3);
        })).length > 0 && (this.service.triggerConversationChanged(t2), this.service.unread.resetTotalAfterSyncDone()), this.service.emit("onSyncFinished");
      }
    }
    generateConv(e2) {
      Wt(e2.map((e3) => e3.conversationId)).forEach((e3) => {
        var t2 = this.compute.computeConvByMsgsCache(e3);
        this.model.upsert(t2);
      });
    }
    setMute(e2, t2) {
      var i2 = this.model.getById(e2);
      i2 && i2.mute !== t2 && (i2.mute = t2, this.model.upsert(i2), this.service.triggerConversationChanged([i2]));
    }
    deleteMessages(e2) {
      var t2 = /* @__PURE__ */ new Set();
      e2.forEach((e3) => {
        var i3, r2 = e3.messageRefer.conversationId, s2 = this.model.getById(r2);
        if (s2) {
          if (e3.messageRefer.messageClientId === (null === (i3 = s2.lastMessage) || void 0 === i3 ? void 0 : i3.messageRefer.messageClientId)) {
            t2.add(r2);
            var o2 = this.core.V2NIMMessageService.model.getLastMessageOfConversation(r2);
            s2.lastMessage = o2 ? Ys(this.core, o2, 0, o2.sendingState) : void 0;
          }
          var n2 = this.model.getReadTime(r2);
          if (s2.unreadCount > 0 && this.service.unread.isMessageReferUnread(e3.messageRefer, n2) && (t2.add(r2), s2.unreadCount--), "deleteTime" in e3)
            e3.deleteTime > s2.updateTime && (s2.updateTime = e3.deleteTime, s2.sortOrder = this.compute.computeSortOrder(s2.stickTop, s2.updateTime));
          else {
            var a2 = this.core.timeOrigin.getNTPTime();
            s2.updateTime = a2, s2.sortOrder = this.compute.computeSortOrder(s2.stickTop, a2);
          }
          this.model.upsert(s2);
        }
      });
      var i2 = Array.from(t2);
      !this.core.V2NIMLoginService.dataSync.checkSyncing() && i2.length > 0 && (this.service.triggerConversationChanged(i2.map((e3) => this.model.getById(e3))), this.service.unread.digestUnreadCountChange());
    }
    sendMsg(e2) {
      var t2 = e2.conversationId, i2 = this.model.getById(t2);
      if (i2) {
        var r2 = this.updateCauseMessage(i2, e2);
        this.service.triggerConversationChanged([r2]);
      } else {
        var s2 = this.createCauseMessage(t2, e2);
        this.service.triggerConversationCreated(s2);
      }
    }
    recvMsg(e2) {
      var t2 = e2.conversationId, i2 = this.model.getById(t2);
      if (i2) {
        var r2 = this.updateCauseMessage(i2, e2);
        r2 = this.compute.computeConvWithUnread(r2, e2), r2 = this.compute.computeFromExternal(r2), this.model.upsert(r2), this.service.triggerConversationChanged([r2]);
      } else {
        var s2 = this.createCauseMessage(t2, e2);
        s2 = this.compute.computeConvWithUnread(s2, e2), s2 = this.compute.computeFromExternal(s2), this.model.upsert(s2), this.service.triggerConversationCreated(s2);
      }
      this.service.unread.digestUnreadCountChange();
    }
    updateCauseMessage(e2, t2) {
      return e2 = this.compute.computeConvWithLastMsg(e2, t2), this.model.upsert(e2), this.model.getById(e2.conversationId);
    }
    createCauseMessage(e2, t2) {
      var i2, r2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2), s2 = this.model.getStickTop(e2), o2 = false === (null === (i2 = t2.messageConfig) || void 0 === i2 ? void 0 : i2.lastMessageUpdateEnabled) ? void 0 : Ys(this.core, t2, 0, t2.sendingState), n2 = { conversationId: e2, type: r2, createTime: t2.createTime, updateTime: t2.createTime, sortOrder: this.compute.computeSortOrder(false, t2.createTime), stickTop: s2, localExtension: "", lastMessage: o2, unreadCount: 0 };
      return this.model.upsert(n2), n2;
    }
    clearMessages(e2) {
      var t2 = /* @__PURE__ */ new Set();
      e2.forEach((e3) => {
        var { conversationId: i3, deleteTime: r2 } = e3, s2 = this.model.getById(i3);
        s2 && (s2.unreadCount > 0 && (s2.unreadCount = 0, t2.add(i3)), s2.lastMessage && s2.lastMessage.messageRefer.createTime <= e3.deleteTime && (s2.lastMessage = void 0, t2.add(i3)), r2 > s2.updateTime && (s2.updateTime = r2, s2.sortOrder = this.compute.computeSortOrder(s2.stickTop, s2.updateTime)), this.model.upsert(s2));
      });
      var i2 = Array.from(t2);
      !this.core.V2NIMLoginService.dataSync.checkSyncing() && i2.length > 0 && (this.service.triggerConversationChanged(i2.map((e3) => this.model.getById(e3))), this.service.unread.digestUnreadCountChange());
    }
    modifyMsg(e2) {
      var t2, i2 = e2.conversationId, r2 = this.model.getById(i2);
      r2 && e2.messageClientId === (null === (t2 = r2.lastMessage) || void 0 === t2 ? void 0 : t2.messageRefer.messageClientId) && (r2.lastMessage = Ys(this.core, e2, 0, e2.sendingState), this.service.triggerConversationChanged([r2]));
    }
  }
  var eo$1 = { type: "array", itemRules: { type: "enum", values: [1, 2, 3] }, min: 1 };
  class to {
    constructor() {
      this.map = /* @__PURE__ */ new Map(), this.readTimeMap = /* @__PURE__ */ new Map();
    }
    set(e2) {
      e2.forEach((e3) => {
        e3 = this.processConversation(e3), this.map.set(e3.conversationId, e3);
      });
    }
    reset() {
      this.map.clear(), this.readTimeMap.clear();
    }
    count() {
      return this.map.size;
    }
    sort() {
      var e2 = Array.from(this.map.values());
      e2.sort((e3, t2) => t2.sortOrder - e3.sortOrder), this.map.clear(), e2.forEach((e3) => {
        this.map.set(e3.conversationId, e3);
      });
    }
    processConversation(e2) {
      return "string" == typeof e2.lastMessage && delete e2.lastMessage, void 0 === e2.localExtension && (e2.localExtension = ""), e2;
    }
    getById(e2) {
      return this.map.get(e2);
    }
    getAll() {
      return Array.from(this.map.values()).sort((e2, t2) => t2.sortOrder - e2.sortOrder);
    }
    getByOption(e2, t2, i2) {
      var { conversationTypes: r2, onlyUnread: s2, conversationGroupIds: o2 } = i2, n2 = [];
      this.map.forEach((e3) => {
        if ((!(r2 && r2.length > 0) || r2.includes(e3.type)) && (!s2 || e3.unreadCount) && (!i2.ignoreMuted || !e3.mute)) {
          if (o2) {
            var t3 = e3.groupIds, a3 = (null == t3 ? void 0 : t3.length) || 0;
            if (0 === o2.length && a3 > 0)
              return;
            if (o2.length > 0 && 0 === a3)
              return;
            if (o2.length > 0 && a3 > 0 && !o2.some((e4) => t3 && t3.includes(e4)))
              return;
          }
          n2.push(e3);
        }
      }), n2 = n2.sort((e3, t3) => t3.sortOrder - e3.sortOrder);
      var a2 = 0;
      e2 > 0 && (a2 = Ve$1(n2, "sortOrder", e2), n2[a2] && n2[a2].sortOrder === e2 && (a2 += 1));
      var c2 = n2.slice(a2).length;
      return (n2 = n2.slice(a2, a2 + t2)).length > 0 ? { offset: c2 > t2 ? n2[n2.length - 1].sortOrder : 0, finished: !(c2 > t2), conversationList: n2 } : { offset: 0, finished: true, conversationList: n2 };
    }
    upsert(e2) {
      var t2 = e2.conversationId, i2 = this.map.get(t2);
      if (!i2)
        return e2 = this.processConversation(Object.assign({}, e2)), this.map.set(t2, e2), e2.unreadCount > 0;
      var r2 = e2.unreadCount !== i2.unreadCount, s2 = Object.assign({}, i2, e2);
      return s2 = this.processConversation(s2), this.map.set(t2, s2), r2;
    }
    bulkUpsert(e2) {
      var t2 = false;
      return e2.forEach((e3) => {
        this.upsert(e3) && (t2 = true);
      }), t2;
    }
    deleteById(e2) {
      var t2 = this.getById(e2);
      if (t2)
        return this.map.delete(e2), t2;
    }
    updateReadTime(e2, t2) {
      this.readTimeMap.set(e2, t2);
    }
    getReadTime(e2) {
      return this.readTimeMap.get(e2) || 0;
    }
  }
  function io(e2, t2) {
    var i2 = typeof e2;
    if (i2 !== typeof t2)
      return false;
    if ("object" === i2) {
      if (Object.prototype.toString.call(e2) !== Object.prototype.toString.call(t2))
        return false;
      if (Array.isArray(e2)) {
        if (e2.length !== t2.length)
          return false;
        for (var r2 = 0; r2 < e2.length; r2++)
          if (!io(e2[r2], t2[r2]))
            return false;
        return true;
      }
      if (e2 instanceof RegExp && t2 instanceof RegExp)
        return e2.toString() === t2.toString();
      if (e2 instanceof Date && t2 instanceof Date)
        return e2.getTime() === t2.getTime();
      if (null === e2 && null === t2)
        return true;
      if (Object.keys(e2).length !== Object.keys(t2).length)
        return false;
      for (var s2 in e2)
        if (!io(e2[s2], t2[s2]))
          return false;
      return true;
    }
    return e2 === t2;
  }
  let ro$1 = class ro {
    constructor(e2, t2) {
      this.fieldVersion = {}, this.conversationIdsForBackFill = {}, this.tempPacket = [], this.isSyncing = false, this.nextCursor = 0, this.core = e2, this.service = t2;
    }
    reset() {
      this.tempPacket = [], this.fieldVersion = {}, this.conversationIdsForBackFill = {}, this.isSyncing = false, this.nextCursor = 0;
    }
    doSync() {
      return ve$1(this, void 0, void 0, function* () {
        var e2;
        this.isSyncing = true, this.service.emit("onSyncStarted"), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 2, subType: "conversationSync" });
        try {
          e2 = yield this.core.sendCmd("v2ConversationSync", { tag: { cursor: this.nextCursor } });
        } catch (e3) {
          var t2 = e3;
          if (t2.code === ie$1.V2NIM_ERROR_CODE_CANCELLED)
            return;
          return this.isSyncing = false, this.service.emit("onSyncFailed", t2), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 3, error: t2, subType: "conversationSync" }), void this.processTempPacket();
        }
        var i2 = 0 === parseInt(Ue$1(e2, "content.info.syncType")), r2 = Ue$1(e2, "content.info.nextCursor");
        this.doSyncAndSuccess(i2, r2);
      });
    }
    doSyncAndSuccess(e2, t2) {
      e2 && this.service.model.sort(), this.isSyncing = false, this.nextCursor = parseInt(t2) || 0, this.service.unread.resetTotalAfterSyncDone(), this.service.unread.digestUnreadCountChange(), this.service.emit("onSyncFinished"), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 3, subType: "conversationSync" }), this.processTempPacket();
    }
    setBackFillIds(e2) {
      return e2.forEach((e3) => {
        if (2 === e3.lastMessageState && this.service.compute.hasMessageService) {
          this.conversationIdsForBackFill[e3.conversationId] = true;
          var t2 = this.core.V2NIMMessageService.model.getLastMessageOfConversation(e3.conversationId);
          e3.lastMessage = t2 ? Ys(this.core, t2, e3.lastMessageState, t2.sendingState) : "";
        } else
          this.conversationIdsForBackFill[e3.conversationId] = false;
        delete e3.lastMessageState;
      }), e2;
    }
    recvConversationFromSyncAction(e2) {
      var { syncType: t2 } = Ue$1(e2, "content.info"), i2 = qs(this.core, Ue$1(e2, "content.datas"));
      0 === (t2 = parseInt(t2)) ? (i2.forEach((e3) => {
        this.initFieldVersion(e3.conversationId, e3.version);
      }), i2 = this.setBackFillIds(i2), this.setModel(i2)) : (i2 = this.setBackFillIds(i2), this.recvConversationForCreated(i2) < i2.length && this.recvConversationForChanged(i2));
    }
    recvConversation(e2) {
      if (this.isSyncing)
        this.tempPacket.push(e2);
      else {
        var t2 = qs(this.core, Ue$1(e2, "content.datas")).filter((e3) => !!e3.conversationId), i2 = zs(Ue$1(e2, "content.info")), r2 = t2.map((e3) => `id:${e3.conversationId}, ver:${e3.version}`).join(";");
        if (this.core.logger.getDebugMode() ? this.core.logger.debug(`V2NIMConversation::recvConversation: ${r2}.`, i2, t2) : this.core.logger.log(`V2NIMConversation::recvConversation: ${r2}.`, i2), 2 === i2.type) {
          var s2 = t2.map((e3) => (delete this.fieldVersion[e3.conversationId], this.service.model.deleteById(e3.conversationId), e3.conversationId));
          return this.service.emit("onConversationDeleted", s2), void this.service.unread.digestUnreadCountChange();
        }
        12 !== i2.type ? (i2.type, t2 = this.setBackFillIds(t2), this.recvConversationForCreated(t2) < t2.length && this.recvConversationForChanged(t2)) : this.compareAndClearUnreadInModel(i2.oneClickClearUnreadVersion, i2.oneClickClearUnreadType, { conversationGroupIds: i2.oneClickClearUnreadGroupId ? [i2.oneClickClearUnreadGroupId] : void 0, conversationTypes: i2.oneClickClearUnreadConversationType });
      }
    }
    recvConversationForCreated(e2) {
      var t2 = e2.filter((e3) => !this.fieldVersion[e3.conversationId]);
      return t2.reduce((e3, t3) => {
        if (!this.fieldVersion[t3.conversationId]) {
          this.initFieldVersion(t3.conversationId, t3.version), e3 = !!this.updateModel(t3) || e3;
          var i2 = this.service.model.getById(t3.conversationId);
          return i2 && this.service.triggerConversationCreated(i2), e3;
        }
        return e3;
      }, false) && this.service.unread.digestUnreadCountChange(), t2.length;
    }
    recvConversationForChanged(e2) {
      var t2 = this.bulkCompare(e2);
      if (0 !== t2.length) {
        this.bulkUpdateModel(t2);
        var i2 = t2.map((e3) => this.service.model.getById(e3.conversationId)).filter((e3) => !!e3);
        this.service.triggerConversationChanged(i2);
      }
    }
    processTempPacket() {
      this.tempPacket.forEach((e2) => {
        this.recvConversation(e2);
      }), this.tempPacket = [];
    }
    bulkCompare(e2) {
      return e2.map((e3) => this.compare(e3)).filter((e3) => !!e3);
    }
    compare(e2) {
      var { version: t2, conversationId: i2, deleteFlag: r2, type: s2 } = e2, o2 = {}, n2 = 0;
      return ["stickTop", "groupIds", "serverExtension", "localExtension", "lastMessage", "lastMessageState", "unreadCount", "sortOrder", "createTime", "updateTime"].forEach((r3) => {
        var s3 = r3;
        if (void 0 !== e2[s3]) {
          var a2 = this.fieldVersion[i2];
          a2 && "number" == typeof a2[s3] && a2[s3] >= t2 || (this.fieldVersion[i2] = this.fieldVersion[i2] || {}, this.fieldVersion[i2][s3] = t2, o2[s3] = e2[s3], n2 += 1);
        }
      }), n2 ? Object.assign(Object.assign({}, o2), { conversationId: i2, deleteFlag: r2, version: t2, type: s2 }) : void 0;
    }
    bulkUpdateModel(e2) {
      var t2 = false;
      e2.forEach((e3) => {
        this.updateModel(e3) && (t2 = true);
      }), t2 && this.service.unread.digestUnreadCountChange();
    }
    initFieldVersion(e2, t2) {
      this.fieldVersion[e2] = { stickTop: t2, groupIds: t2, serverExtension: t2, lastMessage: t2, lastMessageState: t2, unreadCount: t2, sortOrder: t2, createTime: t2, updateTime: t2 };
    }
    initConversation(e2, t2) {
      var i2 = Date.now();
      return Object.assign({ conversationId: e2, type: this.core.V2NIMConversationIdUtil.parseConversationType(e2), stickTop: false, localExtension: "", serverExtension: "", unreadCount: 0, createTime: i2, updateTime: i2, sortOrder: i2 }, t2);
    }
    updateModel(e2) {
      var { deleteFlag: t2, conversation: i2 } = Ws(e2);
      if (t2) {
        var r2 = this.service.model.deleteById(i2.conversationId);
        return !!(r2 && r2.unreadCount > 0);
      }
      return this.service.model.upsert(i2);
    }
    setModel(e2) {
      var t2 = e2.filter((e3) => !e3.deleteFlag).map((e3) => Ws(e3).conversation);
      this.service.model.set(t2);
    }
    updateModelWithLastMessage(e2, t2, i2, r2) {
      var s2 = this.service.model.getById(e2), o2 = t2 ? Ys(this.core, t2, i2, r2) : void 0;
      if (!io(null == s2 ? void 0 : s2.lastMessage, o2))
        if (s2) {
          var n2 = Object.assign(Object.assign({}, s2), { sortOrder: o2 ? s2.stickTop ? o2.messageRefer.createTime + 1e15 : o2.messageRefer.createTime : s2.sortOrder, lastMessage: o2 });
          this.service.model.upsert(n2), this.service.triggerConversationChanged([n2]);
        } else {
          this.initFieldVersion(e2, -1);
          var a2 = this.initConversation(e2, { lastMessage: o2 });
          this.service.model.upsert(a2), this.service.triggerConversationCreated(a2);
        }
    }
    updateModelByRevoke(e2) {
      var t2 = [];
      e2.forEach((e3) => {
        var { postscript: i2, messageRefer: r2 } = e3, s2 = ge$1(e3, ["postscript", "messageRefer"]), o2 = r2.conversationId, n2 = this.service.model.getById(o2);
        n2 && n2.lastMessage && n2.lastMessage.messageRefer.messageClientId === r2.messageClientId && 1 !== n2.lastMessage.lastMessageState && (n2.lastMessage.lastMessageState = 1, i2 && (n2.lastMessage.text = i2), Object.assign(n2.lastMessage, s2), this.service.model.upsert(n2), t2.push(n2));
      }), t2.length > 0 && this.service.triggerConversationChanged(t2);
    }
    compareAndUpdateModel(e2) {
      this.core.logger.log("V2NIMConversation::compareAndUpdateModel", e2.map((e3) => e3.conversationId));
      var t2 = false, i2 = [];
      e2.forEach((e3) => {
        var r2 = this.compare(e3);
        if (r2) {
          var s2 = this.service.model.getById(e3.conversationId);
          this.updateModel(r2) && (t2 = true);
          var o2 = this.service.model.getById(e3.conversationId);
          o2 && (s2 ? i2.push(o2) : this.service.triggerConversationCreated(o2));
        }
      }), i2.length > 0 && this.service.triggerConversationChanged(i2), t2 && this.service.unread.digestUnreadCountChange();
    }
    compareAndDeleteModel(e2) {
      this.core.logger.log("V2NIMConversation::compareAndDeleteModel", e2);
      var t2 = e2.reduce((e3, t3) => {
        delete this.fieldVersion[t3];
        var i2 = this.service.model.deleteById(t3);
        return !!(i2 && i2.unreadCount > 0) || e3;
      }, false);
      this.service.emit("onConversationDeleted", e2), t2 && this.service.unread.digestUnreadCountChange();
    }
    compareAndDeleteGroupInModel(e2, t2) {
      this.core.logger.log("V2NIMConversation::compareAndDeleteGroupInModel", e2, t2);
      var i2 = [];
      Object.keys(this.fieldVersion).forEach((r2) => {
        var s2 = this.fieldVersion[r2];
        if (void 0 === s2.groupIds || e2 > s2.groupIds) {
          s2.groupIds = e2;
          var o2 = this.service.model.getById(r2);
          if (o2 && o2.groupIds && o2.groupIds.length > 0) {
            var n2 = o2.groupIds.filter((e3) => e3 !== t2);
            if (n2.length !== o2.groupIds.length) {
              var a2 = Object.assign(Object.assign({}, o2), { groupIds: n2 });
              this.service.model.upsert(a2), a2 && i2.push(a2);
            }
          }
        }
      }), i2.length > 0 && this.service.triggerConversationChanged(i2);
    }
    compareAndClearUnreadInModel(e2, t2, i2) {
      this.core.logger.log("V2NIMConversation::compareAndClearUnreadInModel", e2, t2, i2);
      var r2 = [], s2 = [];
      if (1 === t2)
        s2 = this.service.model.getAll();
      else if (i2) {
        var o2 = this.service.model.count();
        s2 = this.service.model.getByOption(0, o2, i2).conversationList;
      }
      s2.forEach((t3) => {
        var i3 = t3.conversationId, s3 = this.fieldVersion[i3];
        if (void 0 === s3.unreadCount || e2 > s3.unreadCount) {
          s3.unreadCount = e2;
          var o3 = t3.unreadCount, n2 = Object.assign(Object.assign({}, t3), { unreadCount: 0 });
          this.service.model.upsert(n2), o3 > 0 && r2.push(n2);
        }
      }), r2.length > 0 && this.service.triggerConversationChanged(r2), this.service.unread.digestUnreadCountChange();
    }
    backfillLastMsg(e2, t2) {
      var i2 = e2 = Wt(e2);
      (t2 || 0 !== (i2 = e2.filter((e3) => this.conversationIdsForBackFill[e3])).length) && i2.forEach((e3) => {
        var t3 = Ue$1(this.service.model.getById(e3), "lastMessage.messageRefer.messageClientId"), i3 = this.service.compute.hasMessageService ? this.core.V2NIMMessageService.model.getLastMessageOfConversation(e3) : void 0;
        (i3 && i3.messageClientId) !== t3 && (this.conversationIdsForBackFill[e3] = false, i3 ? this.updateModelWithLastMessage(e3, i3, 2, i3.sendingState) : this.updateModelWithLastMessage(e3, void 0, 2, 0));
      });
    }
  };
  var so = { "28_1": "v2ConversationCreate", "28_2": "v2ConversationDelete", "28_3": "v2ConversationUpdate", "28_4": "v2ConversationSetTop", "28_5": "v2ConversationUnreadClear", "28_6": "v2ConversationGet", "28_7": "v2ConversationGetByIds", "28_8": "v2ConversationGetList", "28_17": "v2ConversationsDelete", "28_18": "v2ConversationsUnreadClear", "28_19": "v2ConversationSync", "28_20": "v2ConversationNotifySync", "28_21": "v2ConversationNotifySyncOnline", "28_23": "v2ConversationClearTotalUnread", "28_24": "v2ConversationClearTypeUnread", "28_25": "v2ConversationClearGroupUnread", "4_14": "syncConversationReadTime", "4_20": "syncSuperTeamReadTime", "4_22": "v2SyncSessionsWithMoreRoaming", "4_25": "v2SyncSessionReliableInfo", "30_16": "v2MarkConversationReadTime", "32_25": "v2MarkSuperTeamReadTime", "7_116": "v2MultiDeviceConversationReadTime", "21_125": "v2MultiDeviceSuperTeamReadTime" }, oo = "V2NIMConversationService", no = { conversationId: 1, type: 2, serverExtension: 3, groupIds: 4, lastMessage: 5, lastMessageState: 6, unreadCount: 7, stickTop: 8, sortOrder: 9, version: 10, deleteFlag: 11, createTime: 12, updateTime: 13 }, ao = { type: 1, oneClickClearUnreadType: 2, oneClickClearUnreadConversationType: 3, oneClickClearUnreadGroupId: 4, oneClickClearUnreadVersion: 5, deleteConversationClearMessage: 6 }, co = { v2ConversationCreate: { sid: 28, cid: 1, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(no) }] }, v2ConversationDelete: { sid: 28, cid: 2, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, clearMessage: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(no) }] }, v2ConversationUpdate: { sid: 28, cid: 3, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, serverExtension: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(no) }] }, v2ConversationSetTop: { sid: 28, cid: 4, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, stickTop: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(no) }] }, v2ConversationUnreadClear: { sid: 28, cid: 5, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(no) }] }, v2ConversationGet: { sid: 28, cid: 6, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(no) }] }, v2ConversationGetByIds: { sid: 28, cid: 7, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(no) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGetList: { sid: 28, cid: 8, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { cursor: 1, limit: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(no) }, { type: "Property", name: "info", reflectMapper: { 1: "hasMore", 2: "offset" } }] }, v2ConversationsDelete: { sid: 28, cid: 17, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1, clearMessage: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(no) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationsUnreadClear: { sid: 28, cid: 18, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(no) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationSync: { sid: 28, cid: 19, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { cursor: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: { 1: "nextCursor", 2: "syncType" } }] }, v2ConversationNotifySync: { sid: 28, cid: 20, service: oo, response: [{ type: "Property", name: "info", reflectMapper: { 1: "nextCursor", 2: "syncType" } }, { type: "PropertyArray", name: "datas", reflectMapper: ft(no) }] }, v2ConversationNotifySyncOnline: { sid: 28, cid: 21, service: oo, response: [{ type: "Property", name: "info", reflectMapper: ft(ao) }, { type: "PropertyArray", name: "datas", reflectMapper: ft(no) }] }, v2ConversationClearTotalUnread: { sid: 28, cid: 23, service: oo, response: [{ type: "Property", name: "info", reflectMapper: ft(ao) }] }, v2ConversationClearTypeUnread: { sid: 28, cid: 24, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { conversationType: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: ft(ao) }] }, v2ConversationClearGroupUnread: { sid: 28, cid: 25, service: oo, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: ft(ao) }] }, syncConversationReadTime: { sid: 4, cid: 14, service: oo, response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Long", name: "timetag" }] }, syncSuperTeamReadTime: { sid: 4, cid: 20, service: oo, response: [{ type: "LongLongMap", name: "superTeam" }] }, v2SyncSessionsWithMoreRoaming: { sid: 4, cid: 22, service: oo, response: [] }, v2SyncSessionReliableInfo: { sid: 4, cid: 25, service: oo, response: [] }, v2MarkConversationReadTime: { sid: 30, cid: 16, service: oo, params: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2MarkSuperTeamReadTime: { sid: 32, cid: 25, service: oo, params: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, v2MultiDeviceConversationReadTime: { sid: 30, cid: 116, service: oo, response: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2MultiDeviceSuperTeamReadTime: { sid: 21, cid: 125, service: oo, response: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] } };
  class lo {
    constructor(e2, t2) {
      this.totalUnreadCount = void 0, this.unreadCountByFilter = {}, this.core = e2, this.service = t2;
    }
    reset() {
      this.totalUnreadCount = void 0, this.unreadCountByFilter = {};
    }
    getTotalUnreadCount() {
      return this.totalUnreadCount;
    }
    resetTotalAfterSyncDone() {
      var e2 = this.service.model.getAll().reduce((e3, t3) => e3 + (t3.unreadCount || 0), 0), t2 = this.totalUnreadCount;
      return void 0 !== t2 && t2 === e2 || (this.totalUnreadCount = e2, this.service.emit("onTotalUnreadCountChanged", e2)), e2;
    }
    digestUnreadCountChange() {
      this._digest();
    }
    _digest() {
      var e2 = this.totalUnreadCount, t2 = this.service.model.getAll().reduce((e3, t3) => e3 + (t3.unreadCount || 0), 0);
      this.core.logger.log(`V2NIMConversation::digestUnreadCountChange:oldUnreadCount ${e2}, newUnreadCount ${t2}`), e2 !== t2 && (this.totalUnreadCount = t2, this.service.emit("onTotalUnreadCountChanged", t2)), Object.keys(this.unreadCountByFilter).forEach((e3) => {
        var t3 = JSON.parse(e3), i2 = this.getUnreadCountByFilter(t3), r2 = this.unreadCountByFilter[e3];
        this.unreadCountByFilter[e3] = i2, t3.equals = ho.bind(t3), r2 !== i2 && this.service.emit("onUnreadCountChangedByFilter", t3, i2);
      });
    }
    getUnreadCountByIds(e2) {
      return e2.reduce((e3, t2) => {
        var i2 = this.service.model.getById(t2);
        return e3 + (i2 && i2.unreadCount || 0);
      }, 0);
    }
    getUnreadCountByFilter(e2) {
      var t2 = this.service.model.count();
      return this.service.model.getByOption(0, t2, { conversationTypes: e2.conversationTypes, conversationGroupIds: e2.conversationGroupId ? [e2.conversationGroupId] : void 0, ignoreMuted: e2.ignoreMuted }).conversationList.reduce((e3, t3) => e3 + (t3.unreadCount || 0), 0);
    }
    addFilter(e2) {
      var t2 = po(e2);
      if (void 0 !== this.unreadCountByFilter[t2])
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST });
      var i2 = JSON.parse(t2), r2 = this.getUnreadCountByFilter(i2);
      this.unreadCountByFilter[t2] = r2, this.service.emit("onUnreadCountChangedByFilter", i2, r2);
    }
    deleteFilter(e2) {
      var t2 = po(e2);
      if (void 0 === this.unreadCountByFilter[t2])
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
      delete this.unreadCountByFilter[t2];
    }
  }
  function po(e2) {
    var { conversationTypes: t2 } = e2;
    return t2 && (t2 = t2.sort()), JSON.stringify({ conversationGroupId: e2.conversationGroupId, conversationTypes: t2, ignoreMuted: e2.ignoreMuted });
  }
  function ho(e2) {
    return JSON.stringify(this) === po(e2);
  }
  var uo = { createTime: { type: "number" }, updateTime: { type: "number" } };
  function mo(e2) {
    return e2 && e2.length > 0 ? e2.map((e3) => go(e3)) : [];
  }
  function go(e2) {
    return ut(uo, e2);
  }
  function vo$1(e2) {
    var t2 = JSON.parse(e2);
    return Object.keys(t2).map((e3) => ({ conversationId: e3, error: new oe$1({ code: t2[e3] }) }));
  }
  var fo, yo$1 = { type: { type: "number" }, deleteVersion: { type: "number" }, conversationIds: { type: "object" } };
  function Io$1(e2) {
    return ut(yo$1, e2);
  }
  !function(e2) {
    e2[e2.createConversationGroup = 1] = "createConversationGroup", e2[e2.deleteConversationGroup = 2] = "deleteConversationGroup", e2[e2.updateConversationGroup = 3] = "updateConversationGroup", e2[e2.addConversationToGroup = 4] = "addConversationToGroup", e2[e2.removeConversationFromGroup = 5] = "removeConversationFromGroup";
  }(fo || (fo = {}));
  let _o$1 = class _o {
    constructor(e2, t2) {
      this.core = e2, this.service = t2;
    }
    get hasUserService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMUserService) || void 0 === e2 ? void 0 : e2.name);
    }
    get hasFriendService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMFriendService) || void 0 === e2 ? void 0 : e2.name);
    }
    get hasTeamService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMTeamService) || void 0 === e2 ? void 0 : e2.name);
    }
    get hasMessageService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMMessageService) || void 0 === e2 ? void 0 : e2.name);
    }
    computeConvs(e2) {
      return e2.map((e3) => this.computeConv(e3));
    }
    computeConv(e2) {
      var t2, i2, r2, s2, o2;
      if (0 === e2.type)
        return e2;
      var n2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2.conversationId), a2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2.conversationId), c2 = {};
      if ((null === (t2 = this.core.V2NIMSettingService) || void 0 === t2 ? void 0 : t2.name) && (c2.mute = this.core.V2NIMSettingService.getConversationMuteStatus(e2.conversationId)), 1 === n2 && this.hasUserService) {
        var d2, l2 = this.core.V2NIMUserService.model.getUser(a2), p2 = this.hasFriendService ? this.core.V2NIMFriendService.model.getFriend(a2) : void 0;
        e2.conversationId !== (null === (i2 = e2.lastMessage) || void 0 === i2 ? void 0 : i2.messageRefer.conversationId) || 0 !== (null === (r2 = e2.lastMessage) || void 0 === r2 ? void 0 : r2.lastMessageState) && 2 !== (null === (s2 = e2.lastMessage) || void 0 === s2 ? void 0 : s2.lastMessageState) || (d2 = null === (o2 = e2.lastMessage) || void 0 === o2 ? void 0 : o2.senderName), c2.name = (null == p2 ? void 0 : p2.alias) || (null == l2 ? void 0 : l2.name) || d2 || a2, c2.avatar = (null == l2 ? void 0 : l2.avatar) || "";
      } else if (2 === n2 && this.hasTeamService) {
        var h2 = this.core.V2NIMTeamService.model.getById(a2, 1);
        c2.name = (null == h2 ? void 0 : h2.name) || a2, c2.avatar = (null == h2 ? void 0 : h2.avatar) || "";
      } else if (3 === n2 && this.hasTeamService) {
        var u2 = this.core.V2NIMTeamService.model.getById(a2, 2);
        c2.name = (null == u2 ? void 0 : u2.name) || a2, c2.avatar = (null == u2 ? void 0 : u2.avatar) || "";
      }
      return Object.assign(e2, c2), e2;
    }
    computeReadTimeForMark(e2) {
      var t2, i2, r2, s2 = e2.conversationId, o2 = this.service.model.getReadTime(s2);
      if (null === (i2 = null === (t2 = null == e2 ? void 0 : e2.lastMessage) || void 0 === t2 ? void 0 : t2.messageRefer) || void 0 === i2 ? void 0 : i2.createTime)
        r2 = e2.lastMessage.messageRefer.createTime;
      else {
        if (!this.core.timeOrigin.checkNodeReliable())
          return o2 || 0;
        r2 = this.core.timeOrigin.getNTPTime();
      }
      return r2;
    }
  };
  let Mo$1 = class Mo {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.model = this.service.model, this.logger = this.core.logger;
    }
    get ifEnabled() {
      return true === this.core.options.enableV2CloudConversation;
    }
    v2ConversationNotifySyncHandler(e2) {
      this.ifEnabled && this.service.versionCache.recvConversationFromSyncAction(e2);
    }
    v2ConversationNotifySyncOnlineHandler(e2) {
      this.ifEnabled && this.service.versionCache.recvConversation(e2);
    }
    syncConversationReadTimeHandler(e2) {
      var t2, i2, r2;
      if (this.ifEnabled) {
        if (null === (t2 = null == e2 ? void 0 : e2.content) || void 0 === t2 ? void 0 : t2.p2p)
          for (var [s2, o2] of Object.entries(e2.content.p2p))
            this.model.updateReadTime(this.core.V2NIMConversationIdUtil.p2pConversationId(s2), o2), this.service.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.p2pConversationId(s2), o2);
        if (null === (r2 = null === (i2 = null == e2 ? void 0 : e2.content) || void 0 === i2 ? void 0 : i2.team) || void 0 === r2 ? void 0 : r2.m_map)
          for (var [n2, a2] of Object.entries(e2.content.team.m_map))
            this.model.updateReadTime(this.core.V2NIMConversationIdUtil.teamConversationId(n2), a2), this.service.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.teamConversationId(n2), a2);
      }
    }
    syncSuperTeamReadTimeHandler(e2) {
      var t2, i2;
      if (this.ifEnabled && (null === (i2 = null === (t2 = null == e2 ? void 0 : e2.content) || void 0 === t2 ? void 0 : t2.superTeam) || void 0 === i2 ? void 0 : i2.m_map))
        for (var [r2, s2] of Object.entries(e2.content.superTeam.m_map))
          this.model.updateReadTime(this.core.V2NIMConversationIdUtil.superTeamConversationId(r2), s2), this.service.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.superTeamConversationId(r2), s2);
    }
    v2MultiDeviceConversationReadTimeHandler(e2) {
      var t2;
      this.ifEnabled && (null === (t2 = null == e2 ? void 0 : e2.content) || void 0 === t2 ? void 0 : t2.to) && (0 === e2.content.scene ? (this.model.updateReadTime(this.core.V2NIMConversationIdUtil.p2pConversationId(e2.content.to), e2.content.timetag), this.service.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.p2pConversationId(e2.content.to), e2.content.timetag)) : (this.model.updateReadTime(this.core.V2NIMConversationIdUtil.teamConversationId(e2.content.to), e2.content.timetag), this.service.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.teamConversationId(e2.content.to), e2.content.timetag)));
    }
    v2MultiDeviceSuperTeamReadTimeHandler(e2) {
      var t2;
      this.ifEnabled && (null === (t2 = null == e2 ? void 0 : e2.content) || void 0 === t2 ? void 0 : t2.to) && (this.model.updateReadTime(this.core.V2NIMConversationIdUtil.superTeamConversationId(e2.content.to), e2.content.timetag), this.service.emit("onConversationReadTimeUpdated", this.core.V2NIMConversationIdUtil.superTeamConversationId(e2.content.to), e2.content.timetag));
    }
  };
  let Eo$1 = class Eo {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.model = this.service.model, this.versionCache = this.service.versionCache, this.logger = this.core.logger;
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => this.versionCache.doSync()), this.core.eventBus.on("V2NIMConversationService/conversationOnlineSyncNotify", this.conversationOnlineSyncNotify.bind(this)), this.core.eventBus.on("V2NIMMessageService/sendMessage", this.sendMessage.bind(this)), this.core.eventBus.on("V2NIMMessageService/deleteMessages", this.deleteMessages.bind(this)), this.core.eventBus.on("V2NIMMessageService/revokeMessages", this.revokeMessages.bind(this)), this.core.eventBus.on("V2NIMMessageService/roamingMsgs", this.roamingOrOfflineMsgs.bind(this)), this.core.eventBus.on("V2NIMMessageService/offlineMsgs", this.roamingOrOfflineMsgs.bind(this)), this.core.eventBus.on("V2NIMSettingService/setMute", this.setMute.bind(this));
    }
    beforeEmit(e2, ...t2) {
      var i2, r2, s2 = `${this.service.name}::emit ${e2.toString()}`;
      if ("onConversationCreated" === e2) {
        var o2 = t2[0];
        this.logger.log(`${s2}`, `id:${o2.conversationId};unread:${o2.unreadCount};lastMsg:${null === (i2 = o2.lastMessage) || void 0 === i2 ? void 0 : i2.messageRefer.messageClientId}/${null === (r2 = o2.lastMessage) || void 0 === r2 ? void 0 : r2.messageRefer.messageServerId}`);
      } else if ("onConversationChanged" === e2) {
        var n2 = t2[0];
        this.logger.log(`${s2}`, n2.map((e3) => {
          var t3, i3;
          return `id:${e3.conversationId};unread:${e3.unreadCount};lastMsg:${null === (t3 = e3.lastMessage) || void 0 === t3 ? void 0 : t3.messageRefer.messageClientId}/${null === (i3 = e3.lastMessage) || void 0 === i3 ? void 0 : i3.messageRefer.messageServerId}`;
        }));
      } else
        this.logger.log(`${s2}`, ...t2);
    }
    conversationOnlineSyncNotify(e2, t2) {
      var i2;
      false !== (null === (i2 = null == t2 ? void 0 : t2.messageConfig) || void 0 === i2 ? void 0 : i2.lastMessageUpdateEnabled) && (e2.content.info = at(e2.content.info, ft(ao)), e2.content.data = at(e2.content.data, ft(no)), t2 && (e2.content.data.lastMessage = Ys(this.core, t2, 0)), e2.content.datas = [e2.content.data], this.service.handler.v2ConversationNotifySyncOnlineHandler.call(this, e2));
    }
    sendMessage(e2, t2) {
      var i2, r2;
      1 === t2 && true === (null === (i2 = e2.messageConfig) || void 0 === i2 ? void 0 : i2.historyEnabled) || false !== (null === (r2 = null == e2 ? void 0 : e2.messageConfig) || void 0 === r2 ? void 0 : r2.lastMessageUpdateEnabled) && this.versionCache.updateModelWithLastMessage(e2.conversationId, e2, 2, t2);
    }
    deleteMessages(e2) {
      var t2 = e2.map((e3) => e3.messageRefer.conversationId);
      this.versionCache.backfillLastMsg(t2, true);
    }
    revokeMessages(e2) {
      this.versionCache.updateModelByRevoke(e2);
    }
    roamingOrOfflineMsgs(e2) {
      var t2 = Wt(e2.map((e3) => e3.conversationId));
      this.versionCache.backfillLastMsg(t2, false);
    }
    setMute(e2, t2) {
      var i2 = this.model.getById(e2);
      i2 && i2.mute !== t2 && (i2.mute = t2, this.model.upsert(i2), this.service.triggerConversationChanged([i2]));
    }
  };
  let To$1 = class To extends Xt$1 {
    constructor(e2, t2 = {}) {
      super("V2NIMConversationService", e2), this.config = {}, this.model = new to(), this.versionCache = new ro$1(this.core, this), this.unread = new lo(this.core, this), this.compute = new _o$1(this.core, this), this.event = new Eo$1(this.core, this), this.handler = new Mo$1(this.core, this), this.core._registerDep(Oi, "V2NIMConversationIdUtil"), "v2" === this.core.options.apiVersion && true === this.core.options.enableV2CloudConversation && (ct({ cmdMap: so, cmdConfig: co }), this.setOptions(t2), this.setListener());
    }
    setOptions(e2) {
      this.config = Object.assign(this.config, e2);
    }
    setListener() {
      this.event.setListener();
    }
    reset() {
      this.versionCache.reset(), this.model.reset(), this.unread.reset();
    }
    emit(e2, ...t2) {
      return this.event.beforeEmit(e2, ...t2), super.emit(e2, ...t2);
    }
    checkEnable() {
      if (true !== this.core.options.enableV2CloudConversation)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2CloudConversation is not enabled" } });
    }
    getConversationList(e2, t2) {
      this.checkEnable(), this.checkV2(), pe$1({ offset: { type: "number", min: 0 } }, { offset: e2 }, "", true), pe$1({ limit: { type: "number", min: 1 } }, { limit: t2 }, "", true), this.core.V2NIMLoginService.checkIllegalState();
      var i2 = this.model.getByOption(e2, t2, {});
      return i2.conversationList = this.compute.computeConvs(i2.conversationList), Promise.resolve(i2);
    }
    getConversationListByOption(e2, t2, i2) {
      this.checkEnable(), this.checkV2(), pe$1({ offset: { type: "number", min: 0 } }, { offset: e2 }, "", true), pe$1({ limit: { type: "number", min: 1 } }, { limit: t2 }, "", true), pe$1({ option: { type: "object", required: true, rules: { conversationTypes: { type: "array", itemType: "number", required: false }, onlyUnread: { type: "boolean", required: false }, conversationGroupIds: { type: "array", itemType: "string", required: false } } } }, { option: i2 }, "", true), this.core.V2NIMLoginService.checkIllegalState();
      var r2 = this.model.getByOption(e2, t2, i2);
      return r2.conversationList = this.compute.computeConvs(r2.conversationList), Promise.resolve(r2);
    }
    getConversation(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), ue$1(this.core.account, e2);
        var t2 = this.model.getById(e2);
        if (t2)
          return this.compute.computeConv(t2);
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
      });
    }
    getConversationListByIds(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true), this.core.V2NIMLoginService.checkIllegalState();
        var t2 = e2.map((e3) => this.model.getById(e3)).filter((e3) => !!e3);
        return this.compute.computeConvs(t2);
      });
    }
    createConversation(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), ue$1(this.core.account, e2);
        var t2 = Ue$1(yield this.core.sendCmd("v2ConversationCreate", { tag: { conversationId: e2 } }), "content.data"), i2 = Ks(this.core, t2);
        this.versionCache.compareAndUpdateModel([i2]);
        var r2 = this.model.getById(e2);
        if (r2)
          return this.compute.computeConv(r2);
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
      });
    }
    deleteConversation(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), ue$1(this.core.account, e2), pe$1({ clearMessage: { type: "boolean", required: false } }, { clearMessage: t2 }, "", true);
        try {
          yield this.core.sendCmd("v2ConversationDelete", { tag: { conversationId: e2, clearMessage: Number(t2 || false) } });
        } catch (t3) {
          this.logger.warn(`V2NIMConversationService:deleteConversation: delete conversation failed: ${e2}`);
        }
        this.model.getById(e2) && (t2 && this.core.eventBus.emit("V2NIMConversationService/deleteConversation", [e2]), this.versionCache.compareAndDeleteModel([e2]));
      });
    }
    deleteConversationListByIds(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true), pe$1({ clearMessage: { type: "boolean", required: false } }, { clearMessage: t2 }, "", true);
        var i2 = vo$1(Ue$1(yield this.core.sendCmd("v2ConversationsDelete", { tag: { conversationIds: JSON.stringify(e2), clearMessage: Number(t2 || false) } }), "content.info.failedMap")).filter((e3) => e3.error.code !== ie$1.V2NIM_ERROR_CODE_CONVERSATION_NOT_EXIST || !this.model.getById(e3.conversationId));
        return i2.length < e2.length && (t2 && this.core.eventBus.emit("V2NIMConversationService/deleteConversation", e2), this.versionCache.compareAndDeleteModel(e2)), i2;
      });
    }
    stickTopConversation(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), ue$1(this.core.account, e2), pe$1({ stickTop: { type: "boolean" } }, { stickTop: t2 }, "", true);
        var i2 = Ue$1(yield this.core.sendCmd("v2ConversationSetTop", { tag: { conversationId: e2, stickTop: Number(t2) } }), "content.data"), r2 = Ks(this.core, i2);
        this.versionCache.compareAndUpdateModel([r2]);
      });
    }
    updateConversation(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), ue$1(this.core.account, e2), pe$1({ updateInfo: { type: "object", required: true, rules: { serverExtension: { type: "string" } } } }, { updateInfo: t2 }, "", true);
        var i2 = Ue$1(yield this.core.sendCmd("v2ConversationUpdate", { tag: Object.assign({ conversationId: e2 }, t2) }), "content.data"), r2 = Ks(this.core, i2);
        this.versionCache.compareAndUpdateModel([r2]);
      });
    }
    updateConversationLocalExtension(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), ue$1(this.core.account, e2), pe$1({ localExtension: { type: "string" } }, { localExtension: t2 }, "", true);
        var i2 = this.model.getById(e2);
        if (!i2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
        if (i2.localExtension !== t2) {
          var r2 = Object.assign(Object.assign({}, i2), { localExtension: t2 });
          this.model.upsert(r2), this.triggerConversationChanged([r2]);
        }
      });
    }
    getTotalUnreadCount() {
      return this.checkEnable(), this.checkV2(), this.unread.getTotalUnreadCount() || 0;
    }
    getUnreadCountByIds(e2) {
      this.checkEnable(), this.checkV2(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true);
      var t2 = this.unread.getUnreadCountByIds(e2);
      return Promise.resolve(t2);
    }
    getUnreadCountByFilter(e2) {
      this.checkEnable(), this.checkV2(), this.valiteFilter(e2);
      var t2 = this.unread.getUnreadCountByFilter(e2);
      return Promise.resolve(t2);
    }
    clearTotalUnreadCount() {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2();
        var e2 = zs(Ue$1(yield this.core.sendCmd("v2ConversationClearTotalUnread"), "content.info"));
        this.versionCache.compareAndClearUnreadInModel(e2.oneClickClearUnreadVersion, e2.oneClickClearUnreadType);
      });
    }
    clearUnreadCountByIds(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true);
        var t2 = yield this.core.sendCmd("v2ConversationsUnreadClear", { tag: { conversationIds: JSON.stringify(e2) } }), i2 = qs(this.core, Ue$1(t2, "content.datas")), r2 = vo$1(Ue$1(t2, "content.info.failedMap"));
        return this.versionCache.compareAndUpdateModel(i2), r2;
      });
    }
    clearUnreadCountByGroupId(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ groupId: { type: "string" } }, { groupId: e2 }, "", true), yield this.core.sendCmd("v2ConversationClearGroupUnread", { tag: { groupId: e2 } });
      });
    }
    clearUnreadCountByTypes(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ types: eo$1 }, { types: e2 }, "", true);
        var t2 = zs(Ue$1(yield this.core.sendCmd("v2ConversationClearTypeUnread", { tag: { conversationType: JSON.stringify(e2) } }), "content.info"));
        this.versionCache.compareAndClearUnreadInModel(t2.oneClickClearUnreadVersion, t2.oneClickClearUnreadType, { conversationTypes: t2.oneClickClearUnreadConversationType });
      });
    }
    markConversationRead(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), this.checkLogin(), ue$1(this.core.account, e2);
        var t2 = this.model.getById(e2);
        if (!t2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Conversation not exist" } });
        var i2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2), r2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2), s2 = this.model.getReadTime(e2), o2 = this.compute.computeReadTimeForMark(t2);
        return s2 >= o2 ? (this.logger.log(`V2Conv::markConversationRead currentReadTime >= readTime ${e2},${s2},${o2}`), s2) : (3 === r2 ? yield this.core.sendCmd("v2MarkSuperTeamReadTime", { timetag: o2, to: i2 }) : yield this.core.sendCmd("v2MarkConversationReadTime", { scene: 1 === r2 ? 0 : 2 === r2 ? 1 : 2, timetag: o2, to: i2 }), this.model.updateReadTime(e2, o2), o2);
      });
    }
    getConversationReadTime(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkEnable(), this.checkV2(), ue$1(this.core.account, e2), this.model.getReadTime(e2);
      });
    }
    subscribeUnreadCountByFilter(e2) {
      var t2;
      this.checkEnable(), this.checkV2(), this.checkLogin(), this.valiteFilter(e2), 0 === (null === (t2 = e2.conversationTypes) || void 0 === t2 ? void 0 : t2.length) && delete e2.conversationTypes, this.unread.addFilter(e2);
    }
    unsubscribeUnreadCountByFilter(e2) {
      var t2;
      this.checkEnable(), this.checkV2(), this.checkLogin(), this.valiteFilter(e2), 0 === (null === (t2 = e2.conversationTypes) || void 0 === t2 ? void 0 : t2.length) && delete e2.conversationTypes, this.unread.deleteFilter(e2);
    }
    valiteFilter(e2) {
      if (pe$1({ filter: { type: "object", required: true, rules: { conversationTypes: { type: "array", itemType: "number", required: false }, conversationGroupId: { type: "string", allowEmpty: false, required: false }, ignoreMuted: { type: "boolean", required: false } } } }, { filter: e2 }, "", true), void 0 === e2.conversationTypes && void 0 === e2.conversationGroupId && true !== e2.ignoreMuted)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Filter cannot be empty" } });
    }
    triggerConversationChanged(e2) {
      e2 = this.compute.computeConvs(e2), (e2 = JSON.parse(JSON.stringify(e2))).forEach((e3) => {
        e3.lastMessage || (e3.lastMessage = void 0), delete e3.lastMessageState;
      }), this.emit("onConversationChanged", e2);
    }
    triggerConversationCreated(e2) {
      e2 = this.compute.computeConv(e2), delete (e2 = JSON.parse(JSON.stringify(e2))).lastMessageState, this.emit("onConversationCreated", e2);
    }
  };
  var So$1, Co$1 = { "28_9": "v2ConversationGroupCreate", "28_10": "v2ConversationGroupDelete", "28_11": "v2ConversationGroupUpdate", "28_12": "v2ConversationGroupGet", "28_13": "v2ConversationGroupsGet", "28_14": "v2ConversationGroupListGet", "28_15": "v2ConversationGroupAddTo", "28_16": "v2ConversationGroupRemoveFrom", "28_22": "v2ConversationGroupNotifySyncOnline" }, No$1 = "V2NIMConversationGroupService", Oo$1 = { groupId: 1, name: 2, serverExtension: 3, createTime: 4, updateTime: 5 }, Ro$1 = { v2ConversationGroupCreate: { sid: 28, cid: 9, service: No$1, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1, name: 2, serverExtension: 3 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(Oo$1) }, { type: "PropertyArray", name: "conversations", reflectMapper: ft(no) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupDelete: { sid: 28, cid: 10, service: No$1, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: { 1: "type", 2: "deleteVersion", 3: "groupList" } }] }, v2ConversationGroupUpdate: { sid: 28, cid: 11, service: No$1, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, name: 2, serverExtension: 3 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(Oo$1) }] }, v2ConversationGroupGet: { sid: 28, cid: 12, service: No$1, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: ft(Oo$1) }] }, v2ConversationGroupsGet: { sid: 28, cid: 13, service: No$1, params: [{ type: "Property", name: "tag", reflectMapper: { groupIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(Oo$1) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupListGet: { sid: 28, cid: 14, service: No$1, response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(Oo$1) }] }, v2ConversationGroupAddTo: { sid: 28, cid: 15, service: No$1, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, conversationIds: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(no) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupRemoveFrom: { sid: 28, cid: 16, service: No$1, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, conversationIds: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: ft(no) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupNotifySyncOnline: { sid: 28, cid: 22, service: No$1, response: [{ type: "Property", name: "info", reflectMapper: { 1: "type", 2: "deleteVersion", 3: "conversationIds" } }, { type: "Property", name: "data", reflectMapper: ft(Oo$1) }] } }, Ao$1 = "V2NIMMessageLogUtil", bo$1 = { "30_6": "v2GetMessageList", "33_2": "v2GetMessageListByRefers", "30_18": "v2ClearHistoryMessage", "7_118": "onClearHistoryMessage", "4_24": "syncClearHistoryMessage", "31_23": "v2GetTeamMessageList", "32_14": "v2GetSuperTeamMessageList" }, ko = { conversationType: { id: 0, retType: "number" }, receiverId: 1, deleteRoam: { id: 2, converter: lt }, teamId: 3, onlineSync: { id: 4, converter: lt }, deleteTime: { id: 6, retType: "number" }, serverExtension: 7 }, Vo$1 = [{ type: "Long", name: "beginTime" }, { type: "Long", name: "endTime" }, { type: "Long", name: "lastMsgId" }, { type: "Int", name: "limit" }, { type: "Bool", name: "direction" }, { type: "LongArray", name: "msgTypes" }], Lo$1 = { v2GetMessageList: { sid: 30, cid: 6, service: Ao$1, params: [{ type: "String", name: "to" }, ...Vo$1], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: dt(wr) }] }, v2GetMessageListByRefers: { sid: 33, cid: 2, service: Ao$1, params: [{ type: "PropertyArray", name: "tag", reflectMapper: wr, select: ["conversationType", "senderId", "receiverId", "createTime", "messageServerId"] }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: dt(wr) }] }, v2ClearHistoryMessage: { sid: 30, cid: 18, service: Ao$1, params: [{ type: "Property", name: "tag", reflectMapper: ko }], response: [{ type: "Long", name: "timetag" }] }, v2GetTeamMessageList: { sid: 31, cid: 23, service: Ao$1, params: [{ type: "Long", name: "to" }, ...Vo$1], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: dt(wr) }] }, v2GetSuperTeamMessageList: { sid: 32, cid: 14, service: Ao$1, params: [{ type: "Long", name: "to" }, ...Vo$1], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: dt(wr) }] }, onClearHistoryMessage: { sid: 7, cid: 118, service: Ao$1, response: [{ type: "Property", name: "data", reflectMapper: dt(ko) }] }, syncClearHistoryMessage: { sid: 4, cid: 24, service: Ao$1, response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(ko) }] } }, Po = "V2NIMMessageExtendUtil", Do = { "29_5": "v2VoiceToText", "33_15": "v2PinMessage", "33_16": "v2UpdatePinMessage", "33_17": "v2UnpinMessage", "23_18": "onPinMessage", "23_19": "onUpdatePinMessage", "23_20": "onUnpinMessage", "23_115": "onPinMessage", "23_116": "onUpdatePinMessage", "23_117": "onUnpinMessage", "33_21": "v2GetPinMessageList", "33_3": "v2AddQuickComment", "33_4": "v2RemoveQuickComment", "33_7": "v2GetQuickComment", "23_5": "onAddQuickComment", "23_6": "onRemoveQuickComment", "23_103": "onAddQuickComment", "23_104": "onRemoveQuickComment", "33_8": "v2AddCollection", "33_9": "v2RemoveCollections", "33_10": "v2UpdateCollectionExtension", "33_11": "v2GetCollectionListByOption", "30_26": "v2SearchCloudMessagesGroupByConversation", "30_27": "v2SearchCloudMessages", "33_1": "v2GetThreadMessageList" }, wo$1 = { conversationType: { id: 1, converter: Gr$1, retConverter: Hr, access: "messageRefer.conversationType" }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, createTime: { id: 4, retType: "number", access: "messageRefer.createTime" }, messageServerId: { id: 5, access: "messageRefer.messageServerId" }, messageClientId: { id: 6, access: "messageRefer.messageClientId" }, detail: 7, modify: { id: 8, retType: "number" } }, Uo = { conversationType: { id: 1, access: "messageRefer.conversationType", retConverter: Hr }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, time: { id: 4, access: "messageRefer.createTime", converter: lt, retType: "number" }, messageServerId: { id: 5, access: "messageRefer.messageServerId" }, messageClientId: { id: 6, access: "messageRefer.messageClientId" }, operatorId: 7, serverExtension: 8, createTime: { id: 9, converter: lt, retType: "number" }, updateTime: { id: 10, converter: lt, retType: "number" } }, xo$1 = { operatorId: 1, index: { id: 2, retType: "number" }, createTime: { id: 3, retType: "number" }, serverExtension: 4, pushEnabled: { id: 5, access: "pushConfig.pushEnabled", converter: lt }, needBadge: { id: 6, access: "pushConfig.needBadge", converter: lt }, title: { id: 7, access: "pushConfig.title" }, pushContent: { id: 8, access: "pushConfig.pushContent" }, pushPayload: { id: 9, access: "pushConfig.pushPayload" } }, Fo$1 = { accid: 1, serverExtension: 2, createTime: { id: 3, retType: "number" }, updateTime: { id: 4, retType: "number" } }, Bo$1 = { collectionId: 1, collectionType: { id: 2, retType: "number" }, collectionData: 3, serverExtension: 4, uniqueId: 5, createTime: { id: 6, retType: "number" }, updateTime: { id: 7, retType: "number" } }, jo = { keyword: 1, beginTime: 2, endTime: 3, messageLimit: 5, sortOrder: { id: 6, converter: (e2) => 0 === e2 ? 2 : 1 }, p2pAccountIds: { id: 7, converter: (e2) => e2.join(",") }, teamIds: { id: 8, converter: (e2) => e2.join(",") }, senderAccountIds: { id: 9, converter: (e2) => e2.join(",") }, messageTypes: { id: 10, converter: (e2) => e2.join(",") }, messageSubtypes: { id: 11, converter: (e2) => e2.join(",") } }, $o = Object.assign(Object.assign({}, jo), { conversationLimit: 4 }), Go = { v2PinMessage: { sid: 33, cid: 15, service: Po, params: [{ type: "Property", name: "msg", reflectMapper: wr, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Fo$1 }], response: [{ type: "Long", name: "timetag" }] }, v2UnpinMessage: { sid: 33, cid: 17, service: Po, params: [{ type: "Property", name: "msg", reflectMapper: wr, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Fo$1 }], response: [{ type: "Long", name: "timetag" }] }, v2UpdatePinMessage: { sid: 33, cid: 16, service: Po, params: [{ type: "Property", name: "msg", reflectMapper: wr, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Fo$1 }], response: [{ type: "Long", name: "timetag" }] }, v2GetPinMessageList: { sid: 33, cid: 21, service: Po, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, timetag: 2 } }], response: [{ type: "Long", name: "timetag" }, { type: "Bool", name: "changed" }, { type: "PropertyArray", name: "data", reflectMapper: dt(Uo) }] }, v2VoiceToText: { sid: 29, cid: 5, service: Po, params: [{ type: "Property", name: "tag", reflectMapper: { mimeType: 0, sampleRate: 1, voiceUrl: 2, duration: 3 } }], response: [{ type: "String", name: "data" }] }, v2AddQuickComment: { sid: 33, cid: 3, service: Po, params: [{ type: "Property", name: "message", reflectMapper: wr, select: ["conversationType", "senderId", "receiverId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "quickComment", reflectMapper: xo$1 }], response: [{ type: "Long", name: "timetag" }] }, v2RemoveQuickComment: { sid: 33, cid: 4, service: Po, params: [{ type: "Property", name: "message", reflectMapper: wr, select: ["conversationType", "senderId", "receiverId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "quickComment", reflectMapper: xo$1 }], response: [{ type: "Long", name: "timetag" }] }, onAddQuickComment: { sid: 23, cid: 5, service: Po, response: [{ type: "Property", name: "message", reflectMapper: dt(wr) }, { type: "Property", name: "quickComment", reflectMapper: dt(xo$1) }] }, onRemoveQuickComment: { sid: 23, cid: 6, service: Po, response: [{ type: "Property", name: "message", reflectMapper: dt(wr) }, { type: "Property", name: "quickComment", reflectMapper: dt(xo$1) }] }, v2GetQuickComment: { sid: 33, cid: 7, service: Po, params: [{ type: "PropertyArray", name: "tag", reflectMapper: wo$1 }], response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(wo$1) }] }, onPinMessage: { sid: 23, cid: 18, service: Po, response: [{ type: "Property", name: "msg", reflectMapper: dt(wr) }, { type: "Property", name: "pinInfo", reflectMapper: dt(Fo$1) }] }, onUpdatePinMessage: { sid: 23, cid: 19, service: Po, response: [{ type: "Property", name: "msg", reflectMapper: dt(wr) }, { type: "Property", name: "pinInfo", reflectMapper: dt(Fo$1) }] }, onUnpinMessage: { sid: 23, cid: 20, service: Po, response: [{ type: "Property", name: "msg", reflectMapper: dt(wr) }, { type: "Property", name: "pinInfo", reflectMapper: dt(Fo$1) }] }, v2AddCollection: { sid: 33, cid: 8, service: Po, params: [{ type: "Property", name: "tag", reflectMapper: Bo$1 }], response: [{ type: "Property", name: "data", reflectMapper: dt(Bo$1) }] }, v2RemoveCollections: { sid: 33, cid: 9, service: Po, params: [{ type: "PropertyArray", name: "tag", reflectMapper: Bo$1, select: ["collectionId", "createTime"] }], response: [{ type: "Int", name: "data" }] }, v2UpdateCollectionExtension: { sid: 33, cid: 10, service: Po, params: [{ type: "Property", name: "tag", reflectMapper: Bo$1 }], response: [{ type: "Property", name: "data", reflectMapper: dt(Bo$1) }] }, v2GetCollectionListByOption: { sid: 33, cid: 11, service: Po, params: [{ type: "Property", name: "tag", reflectMapper: { beginTime: 1, endTime: 2, excludeId: 3, limit: 4, direction: 5, collectionType: 6 } }], response: [{ type: "Long", name: "total" }, { type: "PropertyArray", name: "data", reflectMapper: dt(Bo$1) }] }, v2SearchCloudMessagesGroupByConversation: { sid: 30, cid: 26, service: Po, params: [{ type: "Property", name: "tag", reflectMapper: $o }], response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(wr) }] }, v2SearchCloudMessages: { sid: 30, cid: 27, service: Po, params: [{ type: "Property", name: "tag", reflectMapper: jo }], response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(wr) }] }, v2GetThreadMessageList: { sid: 33, cid: 1, service: Po, params: [{ type: "Property", name: "messageRefer", reflectMapper: wr }, { type: "Property", name: "tag", reflectMapper: { beginTime: 1, endTime: 2, excludeMessageServerId: 3, limit: 4, reverse: 5 } }], response: [{ type: "Property", name: "message", reflectMapper: dt(wr) }, { type: "Property", name: "replyResult", reflectMapper: dt({ total: { id: 1, retType: "number" }, timestamp: { id: 2, retType: "number" } }) }, { type: "PropertyArray", name: "replyList", reflectMapper: dt(wr) }] } }, Ho = { joinMode: { type: "enum", values: [1, 0, 2], required: false }, agreeMode: { type: "enum", values: [0, 1], required: false }, inviteMode: { type: "enum", values: [1, 0], required: false }, updateInfoMode: { type: "enum", values: [1, 0], required: false }, updateExtensionMode: { type: "enum", values: [1, 0], required: false }, chatBannedMode: { type: "enum", values: [0, 1], required: false } }, qo = { type: "object", required: true, rules: Object.assign({ name: { type: "string", allowEmpty: false }, teamType: { type: "enum", values: [1, 2] }, memberLimit: { type: "number", min: 1, required: false } }, Ho) }, Yo = { type: "array", min: 1, itemType: "string" }, Ko = { type: "boolean" }, Wo = { type: "string" }, Jo = { type: "string", allowEmpty: false }, zo = { type: "object", rules: { antispamBusinessId: { type: "string", required: false } }, required: false }, Xo = { teamId: { type: "string", regExp: /^[1-9]\d*$/, allowEmpty: false } }, Qo = { teamIds: { type: "array", itemRules: { type: "string", allowEmpty: false, regExp: /^[1-9]\d*$/ }, min: 1 } }, Zo$1 = { teamType: { type: "enum", values: [1, 2] } }, en = { teamTypes: { type: "array", itemType: "enum", values: [1, 2], required: false } }, tn$1 = { inviteeParams: { type: "object", required: true, rules: { inviteeAccountIds: Yo, postscript: Object.assign(Object.assign({}, Wo), { required: false }), serverExtension: Object.assign(Object.assign({}, Wo), { required: false }) } } }, rn$1 = { updateTeamInfoParams: { type: "object", required: true, rules: Object.assign({ name: { type: "string", allowEmpty: false, required: false }, memberLimit: { type: "number", min: 1, required: false } }, Ho) } }, sn = { type: "enum", values: [0, 2] }, on = { memberInfoParams: { type: "object", rules: { teamNick: { type: "string", required: false }, serverExtension: { type: "string", required: false } } } }, nn$1 = { chatBannedMode: { type: "enum", values: [0, 1] } }, an = { queryOption: { type: "object", rules: { roleQueryType: { type: "enum", values: [0, 2, 1] }, onlyChatBanned: { type: "boolean", required: false }, direction: { type: "enum", values: [1, 0], required: false }, limit: { type: "number", min: 1, required: false }, nextToken: { type: "string", required: false } } } }, cn = { teamId: Xo.teamId, teamType: { type: "enum", values: [1, 2] }, operatorAccountId: { type: "string", allowEmpty: false } }, dn = { actionType: { type: "enum", values: [2, 0, 1, 3] } }, ln = { actionType: { type: "enum", values: [2] } }, pn$1 = { actionType: { type: "enum", values: [0] } }, hn$1 = { types: { type: "array", itemType: "enum", values: [0, 2, 1, 3], required: false }, status: { type: "array", itemType: "enum", values: [1, 3, 0, 2], required: false }, offset: { type: "number", min: 0, required: false }, limit: { type: "number", min: 1, required: false } }, un = { teamId: Xo.teamId, teamType: Zo$1.teamType, accountIds: Yo };
  class mn {
    constructor() {
      this.teamMap = /* @__PURE__ */ new Map(), this.superTeamMap = /* @__PURE__ */ new Map();
    }
    set(e2) {
      e2.forEach((e3) => {
        this.chooseMap(e3.teamType).set(e3.teamId, e3);
      });
    }
    reset() {
      this.teamMap.clear(), this.superTeamMap.clear();
    }
    count(e2, t2 = true) {
      var i2 = this.chooseMap(e2), r2 = 0;
      return i2.forEach((e3) => {
        t2 && e3.isValidTeam && r2++, t2 || r2++;
      }), r2;
    }
    chooseMap(e2) {
      return 2 === e2 ? this.superTeamMap : 1 === e2 ? this.teamMap : /* @__PURE__ */ new Map();
    }
    getById(e2, t2, i2 = true) {
      var r2 = this.chooseMap(t2).get(e2);
      if (r2) {
        if (i2 && r2.isValidTeam)
          return r2;
        if (!i2)
          return r2;
      }
    }
    getAll(e2, t2 = true) {
      var i2 = this.chooseMap(e2);
      return Array.from(i2.values()).filter((e3) => !(!t2 || !e3.isValidTeam) || !t2 || void 0).sort((e3, t3) => t3.updateTime - e3.updateTime);
    }
    upsert(e2) {
      var t2 = e2.teamId, i2 = e2.teamType, r2 = this.chooseMap(i2), s2 = r2.get(t2) || {}, o2 = Object.assign({}, s2, e2);
      return r2.set(t2, o2), o2;
    }
    deleteById(e2, t2) {
      var i2 = this.getById(e2, t2);
      if (i2)
        return i2.isValidTeam = false, i2;
    }
    searchTeamByKeyword(e2) {
      var t2 = [];
      return this.teamMap.forEach((i2) => {
        i2.name.includes(e2) && t2.push(i2);
      }), this.superTeamMap.forEach((i2) => {
        i2.name.includes(e2) && t2.push(i2);
      }), t2;
    }
  }
  class gn {
    constructor() {
      this.teamMembers = [], this.superTeamMembers = [], this.maxSize = 2e3;
    }
    reset() {
      this.teamMembers = [], this.superTeamMembers = [];
    }
    setData(e2) {
      e2.forEach((e3) => {
        this.chooseList(e3.teamType).push(e3);
      });
    }
    chooseList(e2) {
      return 2 === e2 ? this.superTeamMembers : 1 === e2 ? this.teamMembers : [];
    }
    getById(e2, t2, i2) {
      return this.chooseList(t2).find((t3) => t3.teamId === e2 && t3.accountId === i2);
    }
    upsert(e2) {
      var t2 = e2.teamType, i2 = e2.teamId, r2 = this.chooseList(t2), s2 = r2.findIndex((t3) => t3.teamId === i2 && t3.accountId === e2.accountId);
      -1 === s2 ? r2.push(e2) : r2[s2] = Object.assign(Object.assign({}, r2[s2]), e2), r2.length > this.maxSize && r2.shift();
    }
    deleteByAccount(e2, t2, i2) {
      var r2 = this.chooseList(t2), s2 = r2.findIndex((t3) => t3.teamId === e2 && t3.accountId === i2);
      if (-1 !== s2) {
        var o2 = r2[s2];
        return o2.inTeam = false, r2.splice(s2, 1), o2;
      }
    }
    deleteByTeamId(e2, t2) {
      var i2 = this.chooseList(t2).filter((t3) => t3.teamId !== e2);
      2 === t2 ? this.superTeamMembers = i2 : this.teamMembers = i2;
    }
  }
  class vn {
    constructor(e2, t2) {
      this.core = e2, this.service = t2;
    }
    processNotification(e2) {
      var { attachment: t2, senderId: i2, receiverId: r2, createTime: s2 } = e2, { id: o2, data: n2 } = t2, a2 = o2 > 400 ? 2 : 1, { id: c2, ids: d2, tinfo: l2, mute: p2 } = Mr(n2, a2), h2 = this.service.model.getById(r2, a2);
      switch (this.core.logger.log(`v2Team::processNotification, notificationType:${o2}, teamId:${r2}`, n2), o2) {
        case So$1.SUPER_TEAM_INVITATION:
        case So$1.TEAM_INVITATION:
          d2.includes(this.core.account) && this.onTeamJoined(l2), this.onTeamMembersJoined(l2, d2.filter((e3) => e3 !== this.core.account));
          break;
        case So$1.SUPER_TEAM_INVITE_ACCEPT:
        case So$1.TEAM_INVITE_ACCEPT:
          i2 === this.core.account ? this.onTeamJoined(l2) : this.onTeamMemberJoined(l2, i2);
          break;
        case So$1.SUPER_TEAM_APPLY_ACCEPT:
        case So$1.TEAM_APPLY_ACCEPT:
          c2 === this.core.account ? this.onTeamJoined(l2) : this.onTeamMemberJoined(l2, c2);
          break;
        case So$1.SUPER_TEAM_ADD_MANAGER:
        case So$1.TEAM_ADD_MANAGER:
          this.updateTeamMemberRole(r2, a2, d2, { memberRole: 2, updateTime: s2 });
          break;
        case So$1.SUPER_TEAM_REMOVE_MANAGER:
        case So$1.TEAM_REMOVE_MANAGER:
          this.updateTeamMemberRole(r2, a2, d2, { memberRole: 0, updateTime: s2 });
          break;
        case So$1.SUPER_TEAM_KICK:
        case So$1.TEAM_KICK:
          this.onTeamInfoUpdated(l2), d2.forEach((e3) => {
            e3 === this.core.account ? this.onTeamLeft(r2, a2, true) : this.onTeamMemberKicked(i2, l2.teamId, l2.teamType, e3);
          });
          break;
        case So$1.SUPER_TEAM_LEAVE:
        case So$1.TEAM_LEAVE:
          l2 ? this.onTeamInfoUpdated(l2) : h2 && i2 === this.core.account && (h2.isValidTeam = false, this.onTeamInfoUpdated(h2)), i2 === this.core.account ? this.onTeamLeft(r2, a2, false) : this.onTeamMemberLeft(r2, a2, i2);
          break;
        case So$1.SUPER_TEAM_DISMISS:
        case So$1.TEAM_DISMISS:
          this.onTeamDismissed(r2, a2);
          break;
        case So$1.SUPER_TEAM_UPDATE:
        case So$1.TEAM_UPDATED:
          this.onTeamInfoUpdated(l2);
          break;
        case So$1.SUPER_TEAM_TRANSFER_OWNER:
        case So$1.TEAM_TRANSFER_OWNER:
          this.onTeamInfoUpdated(l2), this.updateTeamMemberRole(r2, a2, [i2, l2.ownerAccountId], [{ memberRole: 0, updateTime: s2 }, { memberRole: 1, updateTime: s2 }]);
          break;
        case So$1.SUPER_TEAM_MEMBER_MUTE:
        case So$1.TEAM_MEMBER_MUTE:
          this.service.model.upsert(l2), this.updateTeamMemberRole(r2, a2, c2 ? [c2] : d2, { chatBanned: 0 !== p2, updateTime: s2 });
      }
    }
    onTeamJoined(e2) {
      this.service.model.upsert(e2), this.service.emit("onTeamJoined", e2), this.service.getTeamMemberListByIds(e2.teamId, e2.teamType, [this.core.account]).catch((e3) => {
        this.core.logger.error("Get Member error after onTeamJoined", e3);
      });
    }
    onTeamLeft(e2, t2, i2) {
      var r2 = this.service.model.deleteById(e2, t2) || Er$1(e2, t2, { isValidTeam: false });
      this.service.memberModel.deleteByAccount(e2, t2, this.core.account), this.service.emit("onTeamLeft", r2, i2);
    }
    onTeamDismissed(e2, t2) {
      var i2 = this.service.model.deleteById(e2, t2);
      i2 || (i2 = Er$1(e2, t2, { isValidTeam: false })), this.service.memberModel.deleteByTeamId(e2, t2), this.service.emit("onTeamDismissed", i2);
    }
    onTeamInfoUpdated(e2) {
      var t2 = this.service.model.upsert(e2);
      this.service.emit("onTeamInfoUpdated", t2);
    }
    onTeamMemberJoined(e2, t2) {
      this.service.model.upsert(e2), this.service.emit("onTeamInfoUpdated", e2);
      var i2 = e2.updateTime || e2.createTime, r2 = Tr$1(e2.teamId, e2.teamType, t2, { joinTime: i2, updateTime: i2 });
      this.service.emit("onTeamMemberJoined", [r2]);
    }
    onTeamMembersJoined(e2, t2) {
      var i2 = e2.updateTime || e2.createTime, r2 = t2.map((t3) => Tr$1(e2.teamId, e2.teamType, t3, { joinTime: i2, updateTime: i2 }));
      0 !== r2.length && (this.service.model.upsert(e2), this.service.emit("onTeamInfoUpdated", e2), this.service.emit("onTeamMemberJoined", r2));
    }
    onTeamMemberLeft(e2, t2, i2) {
      var r2 = this.service.memberModel.deleteByAccount(e2, t2, i2);
      r2 || (r2 = Tr$1(e2, t2, i2, { inTeam: false })), this.service.emit("onTeamMemberLeft", [r2]);
    }
    onTeamMemberKicked(e2, t2, i2, r2) {
      var s2 = this.service.memberModel.deleteByAccount(t2, i2, r2);
      s2 || (s2 = Tr$1(t2, i2, r2, { inTeam: false })), this.service.emit("onTeamMemberKicked", e2, [s2]);
    }
    onTeamMemberInfoUpdated(e2) {
      e2.forEach((e3) => {
        if (e3.accountId === this.core.account && this.core.V2NIMSettingService.name && this.core.V2NIMConversationIdUtil.name) {
          var t2 = 1 === e3.teamType ? this.core.V2NIMConversationIdUtil.teamConversationId(e3.teamId) : this.core.V2NIMConversationIdUtil.superTeamConversationId(e3.teamId), i2 = this.core.V2NIMSettingService.getConversationMuteStatus(t2);
          this.core.eventBus.emit("V2NIMSettingService/setMute", t2, i2);
        }
      }), this.service.emit("onTeamMemberInfoUpdated", e2);
    }
    updateTeamMemberRole(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        var s2 = i2.filter((i3, s3) => {
          var o3 = this.service.memberModel.getById(e2, t2, i3);
          return o3 && this.service.memberModel.upsert(Object.assign(Object.assign({}, o3), Array.isArray(r2) ? r2[s3] : r2)), !o3;
        });
        if (s2.length > 0)
          try {
            (yield this.service.getTeamMemberListByIds(e2, t2, s2)).forEach((e3) => this.service.memberModel.upsert(e3));
          } catch (e3) {
            this.core.logger.warn("v2Team::processNotification, getTeamMemberListByIds failed", e3);
          }
        var o2 = i2.map((i3) => this.service.memberModel.getById(e2, t2, i3)).filter((e3) => !!e3);
        o2.length > 0 && this.onTeamMemberInfoUpdated(o2);
      });
    }
    processSysNotification(e2) {
      var { receiverId: t2, postscript: i2, senderId: r2, timestamp: s2, content: o2 } = e2, n2 = {};
      try {
        n2 = JSON.parse(o2);
      } catch (e3) {
        this.core.logger.warn("v2Team::processSysNotification, parse content failed", o2);
      }
      var a2 = { actionType: { 0: 0, 1: 1, 2: 2, 3: 3, 15: 0, 16: 1, 17: 2, 18: 3 }[e2.type], teamId: t2, teamType: e2.type >= 15 ? 2 : 1, operatorAccountId: r2, postscript: i2, timestamp: s2, actionStatus: 0 };
      n2.attach && (a2.serverExtension = n2.attach), this.core.logger.log("v2Team::processSysNotification, type:", e2.type, a2), this.service.notificationModel.create(a2), this.service.emit("onReceiveTeamJoinActionInfo", a2);
    }
    updateTeamActionStatus(e2, t2) {
      this.service.notificationModel.update({ teamId: e2.teamId, teamType: e2.teamType, operatorAccountId: e2.operatorAccountId, actionType: e2.actionType, actionStatus: t2 });
    }
    checkIfExpired(e2) {
      return !(!e2 || 509 !== e2 && (e2 >= 500 && e2 <= 599 || e2 >= 19e4));
    }
  }
  !function(e2) {
    e2[e2.TEAM_INVITATION = 0] = "TEAM_INVITATION", e2[e2.TEAM_KICK = 1] = "TEAM_KICK", e2[e2.TEAM_LEAVE = 2] = "TEAM_LEAVE", e2[e2.TEAM_UPDATED = 3] = "TEAM_UPDATED", e2[e2.TEAM_DISMISS = 4] = "TEAM_DISMISS", e2[e2.TEAM_APPLY_ACCEPT = 5] = "TEAM_APPLY_ACCEPT", e2[e2.TEAM_TRANSFER_OWNER = 6] = "TEAM_TRANSFER_OWNER", e2[e2.TEAM_ADD_MANAGER = 7] = "TEAM_ADD_MANAGER", e2[e2.TEAM_REMOVE_MANAGER = 8] = "TEAM_REMOVE_MANAGER", e2[e2.TEAM_INVITE_ACCEPT = 9] = "TEAM_INVITE_ACCEPT", e2[e2.TEAM_MEMBER_MUTE = 10] = "TEAM_MEMBER_MUTE", e2[e2.SUPER_TEAM_INVITATION = 401] = "SUPER_TEAM_INVITATION", e2[e2.SUPER_TEAM_KICK = 402] = "SUPER_TEAM_KICK", e2[e2.SUPER_TEAM_LEAVE = 403] = "SUPER_TEAM_LEAVE", e2[e2.SUPER_TEAM_UPDATE = 404] = "SUPER_TEAM_UPDATE", e2[e2.SUPER_TEAM_DISMISS = 405] = "SUPER_TEAM_DISMISS", e2[e2.SUPER_TEAM_TRANSFER_OWNER = 406] = "SUPER_TEAM_TRANSFER_OWNER", e2[e2.SUPER_TEAM_ADD_MANAGER = 407] = "SUPER_TEAM_ADD_MANAGER", e2[e2.SUPER_TEAM_REMOVE_MANAGER = 408] = "SUPER_TEAM_REMOVE_MANAGER", e2[e2.SUPER_TEAM_MEMBER_MUTE = 409] = "SUPER_TEAM_MEMBER_MUTE", e2[e2.SUPER_TEAM_APPLY_ACCEPT = 410] = "SUPER_TEAM_APPLY_ACCEPT", e2[e2.SUPER_TEAM_INVITE_ACCEPT = 411] = "SUPER_TEAM_INVITE_ACCEPT";
  }(So$1 || (So$1 = {}));
  class fn {
    constructor() {
      this.list = [], this.maxCount = 1e3;
    }
    reset() {
      this.list = [];
    }
    create(e2) {
      this.list.push(e2), this.list.length > this.maxCount && this.list.shift();
    }
    update(e2) {
      this.list.forEach((t2) => {
        t2.teamId === e2.teamId && t2.teamType === e2.teamType && t2.actionType === e2.actionType && t2.operatorAccountId === e2.operatorAccountId && 0 === t2.actionStatus && Object.assign(t2, e2);
      });
    }
    delete(e2) {
      this.list = this.list.map((t2) => {
        if (t2.teamId !== e2.teamId || t2.teamType !== e2.teamType || t2.operatorAccountId !== e2.operatorAccountId || t2.actionType !== e2.actionType || t2.timestamp !== e2.timestamp)
          return t2;
      }).filter((e3) => e3);
    }
    getByOption(e2) {
      var { types: t2, status: i2, offset: r2 = 0, limit: s2 = 50 } = e2, o2 = [];
      this.list.forEach((e3) => {
        t2 && t2.length > 0 && !t2.includes(e3.actionType) || i2 && i2.length > 0 && !i2.includes(e3.actionStatus) || o2.push(e3);
      }), o2 = o2.sort((e3, t3) => t3.timestamp - e3.timestamp);
      var n2 = 0;
      r2 > 0 && (n2 = Ve$1(o2, "timestamp", r2), o2[n2] && o2[n2].timestamp === r2 && (n2 += 1));
      var a2 = o2.slice(n2).length;
      return (o2 = o2.slice(n2, n2 + s2)).length > 0 ? { offset: a2 > s2 ? o2[o2.length - 1].timestamp : 0, finished: !(a2 > s2), infos: o2 } : { offset: 0, finished: true, infos: o2 };
    }
  }
  class yn {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.model = t2.model, this.memberModel = t2.memberModel, this.notification = t2.notification, this.logger = this.core.logger;
    }
    setListener() {
      this.core.eventBus.on("V2NIMTeamService/onSyncStarted", () => {
        this.service.emit("onSyncStarted");
      }), this.core.eventBus.on("V2NIMTeamService/onSyncFinished", () => {
        this.service.emit("onSyncFinished");
      }), this.core.eventBus.on("V2NIMTeamService/onSyncFailed", (e2) => {
        this.service.emit("onSyncFailed", e2);
      }), this.core.eventBus.on("forwardReceive/V2NIMTeamService/created", (e2) => {
        this.model.upsert(e2);
        var t2 = Tr$1(e2.teamId, e2.teamType, this.core.account, { memberRole: 1 });
        this.memberModel.upsert(t2), this.service.emit("onTeamCreated", e2);
      }), this.core.eventBus.on("forwardReceive/V2NIMTeamService/updateSelfTeamMemberInfo", (e2) => {
        this.memberModel.upsert(e2), this.service.emit("onTeamInfoUpdated", [e2]);
      }), this.core.eventBus.on("forwardReceive/V2NIMTeamService/updateTeamActionStatus", this.notification.updateTeamActionStatus.bind(this.notification)), this.core.eventBus.on("V2NIMTeamService/sysNotification", this.notification.processSysNotification.bind(this.notification)), this.core.eventBus.on("V2NIMTeamService/notification", this.notification.processNotification.bind(this.notification));
    }
    beforeEmit(e2, ...t2) {
      var i2 = `${this.service.name}::emit ${e2.toString()}`;
      if ("onTeamCreated" === e2 || "onTeamDismissed" === e2 || "onTeamJoined" === e2 || "onTeamLeft" === e2 || "onTeamInfoUpdated" === e2) {
        var r2 = t2[0];
        this.logger.log(`${i2}`, `team:${r2.teamId}_${r2.teamType};updateTime:${r2.updateTime}`);
      } else if ("onTeamMemberJoined" === e2 || "onTeamMemberLeft" === e2 || "onTeamMemberInfoUpdated" === e2) {
        var s2 = t2[0];
        this.logger.log(`${i2}`, s2.map((e3) => `team:${e3.teamId}_${e3.teamType};account:${e3.accountId}`));
      } else if ("onTeamMemberKicked" === e2) {
        var o2 = t2[0], n2 = t2[1];
        this.logger.log(`${i2}`, `operator${o2}`, n2.map((e3) => `team:${e3.teamId}_${e3.teamType};account:${e3.accountId}`));
      } else
        this.logger.log(`${i2}`, ...t2);
    }
    onSyncDone(e2) {
      e2 ? this.service.emit("onSyncFailed", e2) : this.service.emit("onSyncFinished");
    }
  }
  class In {
    constructor(e2, t2) {
      this.core = e2, this.service = t2, this.model = t2.model, this.memberModel = t2.memberModel, this.logger = this.core.logger;
    }
    v2TeamSyncHandler(e2) {
      this.model.set(e2.content.datas);
    }
    v2SuperTeamSyncHandler(e2) {
      this.model.set(e2.content.datas);
    }
    v2TeamCreateMultiSyncHandler(e2) {
      var t2 = e2.content.data;
      this.model.upsert(t2);
      var i2 = Tr$1(t2.teamId, t2.teamType, this.core.account, { memberRole: 1 });
      this.memberModel.upsert(i2), this.service.emit("onTeamCreated", t2);
    }
    v2SuperTeamCreateMultiSyncHandler(e2) {
      var t2 = e2.content.data;
      this.model.upsert(t2);
      var i2 = Tr$1(t2.teamId, t2.teamType, this.core.account, { memberRole: 1 });
      this.memberModel.upsert(i2), this.service.emit("onTeamCreated", t2);
    }
    v2TeamMemberUpdateMultiSyncHandler(e2) {
      var t2 = e2.content.data;
      t2.teamType = 1;
      var i2 = this.memberModel.getById(t2.teamId, t2.teamType, t2.accountId);
      this.service.notification.updateTeamMemberRole(t2.teamId, t2.teamType, [t2.accountId], t2), t2.accountId === this.core.account && i2 && i2.bits !== t2.bits && this.core.eventBus.emit("V2NIMSettingService/updateBits", t2.teamId, t2.teamType, t2.bits);
    }
    v2SuperTeamMemberUpdateMultiSyncHandler(e2) {
      var t2 = e2.content.data;
      t2.teamType = 2;
      var i2 = this.memberModel.getById(t2.teamId, t2.teamType, t2.accountId);
      this.service.notification.updateTeamMemberRole(t2.teamId, t2.teamType, [t2.accountId], t2), t2.accountId === this.core.account && i2 && i2.bits !== t2.bits && this.core.eventBus.emit("V2NIMSettingService/updateBits", t2.teamId, t2.teamType, t2.bits);
    }
    v2TeamMembersOfSelfInSyncHandler(e2) {
      e2.content.datas.forEach((e3) => {
        e3.teamType = 1, this.memberModel.upsert(e3);
      });
    }
    v2SuperTeamMembersOfSelfInSyncHandler(e2) {
      e2.content.datas.forEach((e3) => {
        e3.teamType = 2, this.memberModel.upsert(e3);
      });
    }
  }
  var _n = "V2NIMUserService", Mn = { "34_3": "v2UpdateBlockList", "34_7": "v2GetUserList", "34_10": "v2UpdateSelfUserProfile", "3_109": "v2SyncSelfUserInfo", "3_110": "onUpdateUserProfile", "3_103": "onUpdateBlockList", "3_8": "syncBlockAndMuteList", "34_5": "v2SetP2PMessageMuteMode", "3_105": "v2OnUpdateMuteList" }, En = { accountId: 1, name: 3, avatar: 4, sign: 5, gender: { id: 6, retType: "number" }, email: 7, birthday: 8, mobile: 9, serverExtension: 10, createTime: { id: 12, retType: "number" }, updateTime: { id: 13, retType: "number" } }, Tn = { v2UpdateBlockList: { sid: 34, cid: 3, service: _n, params: [{ type: "String", name: "accountId" }, { type: "Bool", name: "addToBlockList" }] }, v2GetUserList: { sid: 34, cid: 7, service: _n, params: [{ type: "StrArray", name: "accountIds" }], response: [{ type: "PropertyArray", name: "data", reflectMapper: dt(En) }] }, v2UpdateSelfUserProfile: { sid: 34, cid: 10, service: _n, params: [{ type: "Property", name: "tag", reflectMapper: En }], response: [{ type: "Long", name: "updateTime" }] }, onUpdateUserProfile: { sid: 3, cid: 110, service: _n, response: [{ type: "Property", name: "data", reflectMapper: dt(En) }] }, onUpdateBlockList: { sid: 3, cid: 103, service: _n, response: [{ type: "String", name: "accountId" }, { type: "Bool", name: "addToBlockList" }] }, syncBlockAndMuteList: { sid: 3, cid: 8, service: _n, response: [{ type: "PropertyArray", name: "data", reflectMapper: dt({ accountId: 0, isMute: { id: 1, retType: "boolean" }, isBlock: { id: 2, retType: "boolean" } }) }, { type: "Long", name: "timetag" }] }, v2SyncSelfUserInfo: { sid: 3, cid: 109, service: _n, response: [{ type: "Property", name: "user", reflectMapper: dt(En) }] }, v2SetP2PMessageMuteMode: { sid: 34, cid: 5, service: _n, params: [{ type: "String", name: "accountId" }, { type: "Bool", name: "muteMode" }] }, v2OnUpdateMuteList: { sid: 3, cid: 105, service: _n, response: [{ type: "String", name: "accountId" }, { type: "Bool", name: "mute" }] } };
  class Sn {
    constructor() {
      this.muteList = /* @__PURE__ */ new Set(), this.userMap = /* @__PURE__ */ new Map(), this.blockList = [];
    }
    reset() {
      this.muteList.clear(), this.userMap.clear(), this.blockList = [];
    }
    setAccountMuteMode(e2, t2) {
      1 === t2 ? this.muteList.add(e2) : this.muteList.delete(e2);
    }
    setUser(e2) {
      this.userMap.set(e2.accountId, e2);
    }
    getUser(e2) {
      return this.userMap.get(e2);
    }
    getUserListBySearchOption(e2) {
      return Array.from(this.userMap.values()).filter((t2) => !(void 0 !== e2.searchName && !e2.searchName || !t2.name.includes(e2.keyword)) || !(!e2.searchAccountId || !t2.accountId.includes(e2.keyword)) || !!(t2.mobile && e2.searchMobile && t2.mobile.includes(e2.keyword)));
    }
    addToBlockList(e2) {
      e2.forEach((e3) => {
        this.blockList.includes(e3) || this.blockList.push(e3);
      });
    }
    removeFromBlockList(e2) {
      e2.forEach((e3) => {
        var t2 = this.blockList.indexOf(e3);
        -1 !== t2 && this.blockList.splice(t2, 1);
      });
    }
  }
  var Cn = { type: "string", required: true, allowEmpty: false }, Nn = { type: "string", required: false, allowEmpty: true }, On = { name: { type: "string", required: false, allowEmpty: true }, avatar: Nn, sign: Nn, email: Nn, birthday: Nn, mobile: Nn, gender: { type: "number", required: false }, serverExtension: Nn };
  class Rn extends Xt$1 {
    constructor(e2) {
      super("V2NIMUserService", e2), ct({ cmdMap: Mn, cmdConfig: Tn }), this.model = new Sn(), "v2" === this.core.options.apiVersion && this.setListener();
    }
    reset() {
      this.model.reset();
    }
    setListener() {
      this.core.eventBus.on("forwardReceive/V2NIMUserService/updateBlockList", (e2, t2) => {
        t2 ? this.model.addToBlockList([e2]) : this.model.removeFromBlockList([e2]), t2 ? this.emitBlockListAdded(e2) : this.emit("onBlockListRemoved", e2);
      }), this.core.eventBus.on("forwardReceive/V2NIMUserService/updateUserProfile", (e2) => {
        this.updateUserProfileInMemory(e2);
      });
    }
    emit(e2, ...t2) {
      var i2 = `${this.name}::emit ${e2.toString()}`;
      if ("onUserProfileChanged" === e2) {
        var r2 = t2[0];
        this.logger.log(`${i2}`, r2.map((e3) => `id:${e3.accountId};name:${e3.name};updateTime:${e3.updateTime}`));
      } else if ("onBlockListAdded" === e2) {
        var s2 = t2[0];
        this.logger.log(`${i2}`, `id:${s2.accountId};name:${s2.name};updateTime:${s2.updateTime}`);
      } else
        this.logger.log(`${i2}`, ...t2);
      return super.emit(e2, ...t2);
    }
    getUserList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this._getUserList(e2);
      });
    }
    _getUserList(e2) {
      var t2;
      return ve$1(this, void 0, void 0, function* () {
        pe$1({ accountIds: Yo }, { accountIds: e2 }, "", true);
        var i2 = [];
        e2.forEach((e3) => {
          this.model.getUser(e3) || i2.push(e3);
        });
        var r2 = null;
        i2.length > 0 && (r2 = yield this.core.sendCmd("v2GetUserList", { accountIds: i2 })), ((null === (t2 = null == r2 ? void 0 : r2.content) || void 0 === t2 ? void 0 : t2.data) || []).forEach((e3) => {
          this.model.setUser(e3);
        });
        var s2 = [];
        return e2.forEach((e3) => {
          var t3 = this.model.getUser(e3);
          t3 && s2.push(t3);
        }), s2;
      });
    }
    getUserListFromCloud(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1({ accountIds: { type: "array", min: 1, max: 500, itemType: "string" } }, { accountIds: e2 }, "", true);
        var t2 = (yield this.core.sendCmd("v2GetUserList", { accountIds: e2 })).content.data || [], i2 = [];
        t2.forEach((e3) => {
          var t3 = this.model.getUser(e3.accountId);
          this.compareUserForUpdate(t3, e3) && i2.push(e3), this.model.setUser(e3);
        });
        var r2 = e2.reduce((e3, t3) => {
          var i3 = this.model.getUser(t3);
          return i3 && e3.push(i3), e3;
        }, []);
        return i2.length > 0 && this.emit("onUserProfileChanged", i2), r2;
      });
    }
    compareUserForUpdate(e2, t2) {
      return !e2 || !("number" == typeof e2.updateTime && "number" == typeof t2.updateTime && e2.updateTime >= t2.updateTime);
    }
    updateSelfUserProfile(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(On, e2, "", true);
        var t2 = yield this.core.sendCmd("v2UpdateSelfUserProfile", { tag: Object.assign(Object.assign({}, e2), { accountId: this.core.account }) });
        yield this.updateUserProfileInMemory(Object.assign(Object.assign({}, e2), { updateTime: t2.content.updateTime }));
      });
    }
    addUserToBlockList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), e2 === this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot block yourself" } });
        pe$1({ accountId: Cn }, { accountId: e2 }, "", true), yield this.core.sendCmd("v2UpdateBlockList", { accountId: e2, addToBlockList: true }), this.model.addToBlockList([e2]), this.emitBlockListAdded(e2);
      });
    }
    removeUserFromBlockList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), e2 === this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot unblock yourself" } });
        pe$1({ accountId: Cn }, { accountId: e2 }, "", true), yield this.core.sendCmd("v2UpdateBlockList", { accountId: e2, addToBlockList: false }), this.model.removeFromBlockList([e2]), this.emit("onBlockListRemoved", e2);
      });
    }
    searchUserByOption(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), pe$1({ keyword: { type: "string", allowEmpty: false }, searchName: { type: "boolean", required: false }, searchAccountId: { type: "boolean", required: false }, searchMobile: { type: "boolean", required: false } }, e2, "", true), false === (void 0 === e2.searchName || e2.searchName) && !e2.searchAccountId && !e2.searchMobile)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "one of searchName, searchAccountId, searchMobile must be true" } });
        return this.model.getUserListBySearchOption(e2);
      });
    }
    getBlockList() {
      return this.checkV2(), Promise.resolve(this.model.blockList);
    }
    updateUserProfileInMemory(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = this.model.getUser(this.core.account);
        t2 ? (Object.assign(t2, e2), this.model.setUser(t2)) : t2 = (yield this._getUserList([this.core.account]))[0], t2 && this.emit("onUserProfileChanged", [t2]);
      });
    }
    onUpdateUserProfileHandler(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = e2.content.data;
        yield this.updateUserProfileInMemory(t2);
      });
    }
    onUpdateBlockListHandler(e2) {
      var t2 = e2.content.accountId;
      e2.content.addToBlockList ? (this.model.addToBlockList([t2]), this.emitBlockListAdded(t2)) : (this.model.removeFromBlockList([t2]), this.emit("onBlockListRemoved", t2));
    }
    syncBlockAndMuteListHandler(e2) {
      e2.content.data.forEach((e3) => {
        e3.isBlock ? this.model.addToBlockList([e3.accountId]) : this.model.setAccountMuteMode(e3.accountId, e3.isMute ? 1 : 0);
      });
    }
    v2SyncSelfUserInfoHandler(e2) {
      var t2 = e2.content.user;
      this.model.setUser(t2);
    }
    checkUserUpdate(e2, t2) {
      var i2 = e2.senderId;
      i2 !== this.core.account && this.refreshUserInfo(i2, t2);
    }
    refreshUserInfo(e2, t2 = 0) {
      return ve$1(this, void 0, void 0, function* () {
        if (e2 && "string" == typeof e2) {
          var i2 = this.model.getUser(e2), r2 = [];
          if (!i2 || i2 && "number" == typeof i2.updateTime && "number" == typeof t2 && !isNaN(i2.updateTime) && !isNaN(t2) && i2.updateTime < t2)
            try {
              r2 = (yield this.core.sendCmd("v2GetUserList", { accountIds: [e2] })).content.data;
            } catch (t3) {
              return void this.logger.warn(`V2NIMUserService:refreshUserInfo: failed for ${e2}`);
            }
          for (var s2 of r2)
            this.model.setUser(s2), this.emit("onUserProfileChanged", [s2]);
        }
      });
    }
    emitBlockListAdded(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var t2 = yield this._getUserList([e2]);
        1 === t2.length && this.emit("onBlockListAdded", t2[0]);
      });
    }
    v2OnUpdateMuteListHandler(e2) {
      return ve$1(this, void 0, void 0, function* () {
        var { accountId: t2, mute: i2 } = e2.content, r2 = i2 ? 1 : 0;
        this.core.eventBus.emit("v2NIMUserService/updateMuteList", t2, r2);
      });
    }
  }
  var An = "V2NIMFriendService", bn = { "35_1": "v2AddFriend", "35_2": "v2DeleteFriend", "35_3": "v2SetFriendInfo", "35_4": "v2IncFriendInfo", "12_101": "v2OnAddFriend", "12_102": "v2OnDeleteFriend", "12_103": "v2OnUpdateFriendInfo", "12_5": "v2SyncFriendList", "12_6": "v2SyncFriendUserList" }, kn = { accountId: 4, relationShip: { id: 5, retType: "number" }, source: { id: 7, retType: "number" }, alias: 8, serverExtension: 10, createTime: { id: 11, retType: "number" }, updateTime: { id: 12, retType: "number" }, customerExtension: 13 }, Vn = { v2AddFriend: { sid: 35, cid: 1, service: An, params: [{ type: "String", name: "accountId" }, { type: "Byte", name: "verifyType" }, { type: "String", name: "postscript" }], response: [] }, v2DeleteFriend: { sid: 35, cid: 2, service: An, params: [{ type: "String", name: "accountId" }, { type: "Property", name: "params", reflectMapper: { deleteAlias: { id: 1, converter: lt } } }] }, v2SetFriendInfo: { sid: 35, cid: 3, service: An, params: [{ type: "Property", name: "tag", reflectMapper: kn }] }, v2OnAddFriend: { sid: 12, cid: 101, service: An, response: [{ type: "String", name: "accountId" }, { type: "Byte", name: "verifyType" }, { type: "String", name: "postscript" }, { type: "Property", name: "ext", reflectMapper: dt({ serverExt: 1 }) }] }, v2OnDeleteFriend: { sid: 12, cid: 102, service: An, response: [{ type: "String", name: "accountId" }] }, v2OnUpdateFriendInfo: { sid: 12, cid: 103, service: An, response: [{ type: "Property", name: "data", reflectMapper: dt(kn) }] }, v2SyncFriendList: { sid: 12, cid: 5, service: An, response: [{ type: "PropertyArray", name: "friends", reflectMapper: dt(kn) }, { type: "Long", name: "timetag" }] }, v2SyncFriendUserList: { sid: 12, cid: 6, service: An, response: [{ type: "PropertyArray", name: "users", reflectMapper: dt(En) }] }, v2IncFriendInfo: { sid: 35, cid: 4, service: An, params: [{ type: "Long", name: "timetag" }], response: [{ type: "PropertyArray", name: "friends", reflectMapper: dt(kn) }, { type: "Long", name: "timetag" }] } }, Ln = { accountId: { type: "string", required: true, allowEmpty: false }, params: { type: "object", required: true, rules: { addMode: { type: "enum", required: true, values: [1, 2] }, postscript: { type: "string", required: false, allowEmpty: true } } } }, Pn = { accountId: { type: "string", required: true, allowEmpty: false }, params: { type: "object", required: false, rules: { deleteAlias: { type: "boolean", required: false } } } }, Dn = { accountId: { type: "string", required: true, allowEmpty: false }, params: { type: "object", required: false, rules: { alias: { type: "string", required: false, allowEmpty: true }, serverExtension: { type: "string", required: false, allowEmpty: true } } } }, wn = { applicantAccountId: { type: "string", required: true, allowEmpty: false }, recipientAccountId: { type: "string", required: true, allowEmpty: false }, operatorAccountId: { type: "string", required: false, allowEmpty: false }, postscript: { type: "string", required: false, allowEmpty: true }, status: { type: "enum", required: true, values: [1, 4, 3, 0, 2] }, timestamp: { type: "number", min: 1 } }, Un = { offset: { type: "number", required: false }, limit: { type: "number", required: false }, status: { type: "array", itemType: "enum", required: false, values: [1, 4, 3, 0, 2] } };
  class xn {
    constructor(e2, t2) {
      this.core = e2, this.service = t2;
    }
    processSysNotification(e2) {
      if (6 === e2.type) {
        var t2 = e2.senderId;
        this.core.V2NIMFriendService.handleDeleteFriend(t2, 2);
      } else if (5 === e2.type)
        try {
          var i2 = JSON.parse(e2.content);
          if (1 === (null == i2 ? void 0 : i2.vt)) {
            this.core.V2NIMFriendService.handleAddFriend(e2.senderId, e2.timestamp);
            var r2 = { applicantAccountId: e2.senderId, recipientAccountId: e2.receiverId, operatorAccountId: e2.senderId, postscript: e2.postscript, timestamp: e2.timestamp, status: 4, read: true };
            this.service.model.appendFriendAddApplication(r2), this.service.model.updateFriendAddApplicationStatus(r2.applicantAccountId, 4, r2.applicantAccountId);
          } else if (2 === (null == i2 ? void 0 : i2.vt)) {
            var s2 = { applicantAccountId: e2.senderId, recipientAccountId: e2.receiverId, operatorAccountId: e2.senderId, postscript: e2.postscript, timestamp: e2.timestamp, status: 0, read: false };
            this.service.handleApplyFriend(s2), this.service.model.appendFriendAddApplication(s2);
          } else if (3 === (null == i2 ? void 0 : i2.vt)) {
            this.core.V2NIMFriendService.handleAddFriend(e2.senderId, e2.timestamp);
            var o2 = { applicantAccountId: e2.receiverId, recipientAccountId: e2.senderId, operatorAccountId: e2.senderId, timestamp: e2.timestamp, postscript: e2.postscript, status: 1, read: true };
            this.service.model.appendFriendAddApplication(o2);
          } else if (4 === (null == i2 ? void 0 : i2.vt)) {
            var n2 = { applicantAccountId: e2.receiverId, recipientAccountId: e2.senderId, operatorAccountId: e2.senderId, timestamp: e2.timestamp, postscript: e2.postscript, status: 2, read: true };
            this.service.model.appendFriendAddApplication(n2), this.service.emit("onFriendAddRejected", n2);
          }
        } catch (e3) {
          this.core.logger.warn("V2NIMFriendNotificationImpl::processSysNotification, parse content error:", e3);
        }
    }
  }
  class Fn {
    constructor() {
      this.validFriendIds = /* @__PURE__ */ new Set(), this.friendMap = /* @__PURE__ */ new Map(), this.applicationInfoList = [], this.friendTimetag = 0;
    }
    getAddApplicationList(e2) {
      var t2 = void 0 === e2.offset ? 0 : e2.offset, i2 = this.applicationInfoList.filter((t3) => {
        var i3 = e2.status || [];
        return 0 === i3.length || !!i3.includes(t3.status);
      }).reverse(), r2 = e2.limit || 50, s2 = i2.slice(t2, t2 + r2), o2 = t2 + r2 >= i2.length;
      return { infos: s2, finished: o2, offset: o2 ? 0 : t2 + r2 };
    }
    reset() {
      this.friendMap.clear(), this.validFriendIds.clear(), this.applicationInfoList = [];
    }
    setAddApplicationRead() {
      for (var e2 of this.applicationInfoList)
        e2.read = true;
    }
    getAddApplicationUnreadCount() {
      var e2 = /* @__PURE__ */ new Set();
      for (var t2 of this.applicationInfoList)
        t2.read || 0 !== t2.status || e2.add(t2.applicantAccountId);
      return e2.size;
    }
    appendFriendAddApplication(e2) {
      this.applicationInfoList.push(e2);
    }
    clearApplicationList() {
      this.applicationInfoList = [];
    }
    deleteApplication(e2) {
      this.applicationInfoList = this.applicationInfoList.map((t2) => {
        if (t2.applicantAccountId !== e2.applicantAccountId || t2.recipientAccountId !== e2.recipientAccountId || t2.timestamp !== e2.timestamp)
          return t2;
      }).filter((e3) => e3);
    }
    updateFriendAddApplicationStatus(e2, t2, i2) {
      if (0 !== t2)
        for (var r2 of this.applicationInfoList)
          r2.applicantAccountId === e2 && 0 === r2.status && (r2.status = t2, r2.operatorAccountId = i2, r2.read = true);
    }
    upsertFriend(e2, t2) {
      delete t2.relationShip;
      var i2 = this.friendMap.get(e2) || {}, r2 = Object.assign({ accountId: e2 }, i2, t2);
      return this.friendMap.set(e2, r2), this.validFriendIds.add(e2), r2;
    }
    addFriend(e2) {
      this.validFriendIds.add(e2);
    }
    deleteFriend(e2) {
      this.validFriendIds.delete(e2);
    }
    getFriend(e2) {
      return this.validFriendIds.has(e2) ? this.friendMap.get(e2) : void 0;
    }
    getFriendList() {
      return Array.from(this.validFriendIds.values()).map((e2) => this.getFriend(e2)).filter((e2) => !!e2);
    }
    getFriendListBySearchOption(e2) {
      return Array.from(this.validFriendIds.values()).map((e3) => this.getFriend(e3)).filter((t2) => {
        var i2 = void 0 === e2.searchAlias || e2.searchAlias;
        return !(void 0 === t2 || !(i2 && t2.alias && t2.alias.includes(e2.keyword) || e2.searchAccountId && t2.accountId.includes(e2.keyword)));
      });
    }
    getFriendByIds(e2) {
      return e2.map((e3) => this.getFriend(e3)).filter((e3) => !!e3);
    }
    setFriendTimetag(e2) {
      this.friendTimetag = e2;
    }
    getFriendTimetag() {
      return this.friendTimetag;
    }
  }
  var Bn = { muteMode: { type: "enum", values: [2, 0, 1] } }, jn = { accountId: { type: "string", required: true, allowEmpty: false }, muteMode: { type: "enum", required: true, values: [2, 0, 1] } }, $n = { type: "object", required: false, rules: { certificateName: { type: "string", required: true, allowEmpty: false }, appId: { type: "string", required: false, allowEmpty: false }, appKey: { type: "string", required: false, allowEmpty: false }, secret: { type: "string", required: false, allowEmpty: false } } }, Gn = { config: { type: "object", required: true, rules: { apns: $n, hwPush: $n, miPush: $n, vivoPush: $n, oppoPush: $n, honorPush: $n, fcmPush: $n, mzPush: $n } } }, Hn = { "34_1": "v2SetDeviceToken", "34_2": "v2SetAppBackground", "34_15": "v2SetPushMobileOnDesktopOnline" }, qn = { v2SetDeviceToken: { sid: 34, cid: 1, service: "V2NIMSettingService", params: [{ type: "String", name: "certificateName" }, { type: "String", name: "pushDeviceToken" }, { type: "Int", name: "pushkit" }] }, v2SetAppBackground: { sid: 34, cid: 2, service: "V2NIMSettingService", params: [{ type: "Bool", name: "isBackground" }, { type: "Int", name: "badge" }] }, v2SetPushMobileOnDesktopOnline: { sid: 34, cid: 15, service: "V2NIMSettingService", params: [{ type: "Property", name: "tag", reflectMapper: { need: { id: 1, converter: (e2) => e2 ? 2 : 1 } } }] } }, Yn = Yn || function(t2) {
    var i2;
    "undefined" != typeof window && $inject_global_crypto && (i2 = $inject_global_crypto), "undefined" != typeof self && self.crypto && (i2 = self.crypto), "undefined" != typeof globalThis && globalThis.crypto && (i2 = globalThis.crypto), !i2 && "undefined" != typeof window && window.msCrypto && (i2 = window.msCrypto), !i2 && void 0 !== e.g && e.g.crypto && (i2 = e.g.crypto);
    var r2 = function() {
      if (i2) {
        if ("function" == typeof i2.getRandomValues)
          try {
            return i2.getRandomValues(new Uint32Array(1))[0];
          } catch (e2) {
          }
        if ("function" == typeof i2.randomBytes)
          try {
            return i2.randomBytes(4).readInt32LE();
          } catch (e2) {
          }
      }
      throw new Error("Native crypto module could not be used to get secure random number.");
    }, s2 = Object.create || /* @__PURE__ */ function() {
      function e2() {
      }
      return function(t3) {
        var i3;
        return e2.prototype = t3, i3 = new e2(), e2.prototype = null, i3;
      };
    }(), o2 = {}, n2 = o2.lib = {}, a2 = n2.Base = { extend: function(e2) {
      var t3 = s2(this);
      return e2 && t3.mixIn(e2), t3.hasOwnProperty("init") && this.init !== t3.init || (t3.init = function() {
        t3.$super.init.apply(this, arguments);
      }), t3.init.prototype = t3, t3.$super = this, t3;
    }, create: function() {
      var e2 = this.extend();
      return e2.init.apply(e2, arguments), e2;
    }, init: function() {
    }, mixIn: function(e2) {
      for (var t3 in e2)
        e2.hasOwnProperty(t3) && (this[t3] = e2[t3]);
      e2.hasOwnProperty("toString") && (this.toString = e2.toString);
    }, clone: function() {
      return this.init.prototype.extend(this);
    } }, c2 = n2.WordArray = a2.extend({ init: function(e2, t3) {
      e2 = this.words = e2 || [], this.sigBytes = null != t3 ? t3 : 4 * e2.length;
    }, toString: function(e2) {
      return (e2 || l2).stringify(this);
    }, concat: function(e2) {
      var t3 = this.words, i3 = e2.words, r3 = this.sigBytes, s3 = e2.sigBytes;
      if (this.clamp(), r3 % 4)
        for (var o3 = 0; o3 < s3; o3++) {
          var n3 = i3[o3 >>> 2] >>> 24 - o3 % 4 * 8 & 255;
          t3[r3 + o3 >>> 2] |= n3 << 24 - (r3 + o3) % 4 * 8;
        }
      else
        for (var a3 = 0; a3 < s3; a3 += 4)
          t3[r3 + a3 >>> 2] = i3[a3 >>> 2];
      return this.sigBytes += s3, this;
    }, clamp: function() {
      var e2 = this.words, i3 = this.sigBytes;
      e2[i3 >>> 2] &= 4294967295 << 32 - i3 % 4 * 8, e2.length = t2.ceil(i3 / 4);
    }, clone: function() {
      var e2 = a2.clone.call(this);
      return e2.words = this.words.slice(0), e2;
    }, random: function(e2) {
      for (var t3 = [], i3 = 0; i3 < e2; i3 += 4)
        t3.push(r2());
      return new c2.init(t3, e2);
    } }), d2 = o2.enc = {}, l2 = d2.Hex = { stringify: function(e2) {
      for (var t3 = e2.words, i3 = e2.sigBytes, r3 = [], s3 = 0; s3 < i3; s3++) {
        var o3 = t3[s3 >>> 2] >>> 24 - s3 % 4 * 8 & 255;
        r3.push((o3 >>> 4).toString(16)), r3.push((15 & o3).toString(16));
      }
      return r3.join("");
    }, parse: function(e2) {
      for (var t3 = e2.length, i3 = [], r3 = 0; r3 < t3; r3 += 2)
        i3[r3 >>> 3] |= parseInt(e2.substr(r3, 2), 16) << 24 - r3 % 8 * 4;
      return new c2.init(i3, t3 / 2);
    } }, p2 = d2.Latin1 = { stringify: function(e2) {
      for (var t3 = e2.words, i3 = e2.sigBytes, r3 = [], s3 = 0; s3 < i3; s3++) {
        var o3 = t3[s3 >>> 2] >>> 24 - s3 % 4 * 8 & 255;
        r3.push(String.fromCharCode(o3));
      }
      return r3.join("");
    }, parse: function(e2) {
      for (var t3 = e2.length, i3 = [], r3 = 0; r3 < t3; r3++)
        i3[r3 >>> 2] |= (255 & e2.charCodeAt(r3)) << 24 - r3 % 4 * 8;
      return new c2.init(i3, t3);
    } }, h2 = d2.Utf8 = { stringify: function(e2) {
      try {
        return decodeURIComponent(escape(p2.stringify(e2)));
      } catch (e3) {
        throw new Error("Malformed UTF-8 data");
      }
    }, parse: function(e2) {
      return p2.parse(unescape(encodeURIComponent(e2)));
    } }, u2 = n2.BufferedBlockAlgorithm = a2.extend({ reset: function() {
      this._data = new c2.init(), this._nDataBytes = 0;
    }, _append: function(e2) {
      "string" == typeof e2 && (e2 = h2.parse(e2)), this._data.concat(e2), this._nDataBytes += e2.sigBytes;
    }, _process: function(e2) {
      var i3, r3 = this._data, s3 = r3.words, o3 = r3.sigBytes, n3 = this.blockSize, a3 = o3 / (4 * n3), d3 = (a3 = e2 ? t2.ceil(a3) : t2.max((0 | a3) - this._minBufferSize, 0)) * n3, l3 = t2.min(4 * d3, o3);
      if (d3) {
        for (var p3 = 0; p3 < d3; p3 += n3)
          this._doProcessBlock(s3, p3);
        i3 = s3.splice(0, d3), r3.sigBytes -= l3;
      }
      return new c2.init(i3, l3);
    }, clone: function() {
      var e2 = a2.clone.call(this);
      return e2._data = this._data.clone(), e2;
    }, _minBufferSize: 0 });
    n2.Hasher = u2.extend({ cfg: a2.extend(), init: function(e2) {
      this.cfg = this.cfg.extend(e2), this.reset();
    }, reset: function() {
      u2.reset.call(this), this._doReset();
    }, update: function(e2) {
      return this._append(e2), this._process(), this;
    }, finalize: function(e2) {
      return e2 && this._append(e2), this._doFinalize();
    }, blockSize: 16, _createHelper: function(e2) {
      return function(t3, i3) {
        return new e2.init(i3).finalize(t3);
      };
    }, _createHmacHelper: function(e2) {
      return function(t3, i3) {
        return new m2.HMAC.init(e2, i3).finalize(t3);
      };
    } });
    var m2 = o2.algo = {};
    return o2;
  }(Math), Kn = Yn.enc.Utf8, Wn = Yn, Jn = Wn.lib, zn = Jn.Base, Xn = Jn.WordArray, Qn = Wn.algo, Zn = Qn.MD5, ea = Qn.EvpKDF = zn.extend({ cfg: zn.extend({ keySize: 4, hasher: Zn, iterations: 1 }), init: function(e2) {
    this.cfg = this.cfg.extend(e2);
  }, compute: function(e2, t2) {
    for (var i2, r2 = this.cfg, s2 = r2.hasher.create(), o2 = Xn.create(), n2 = o2.words, a2 = r2.keySize, c2 = r2.iterations; n2.length < a2; ) {
      i2 && s2.update(i2), i2 = s2.update(e2).finalize(t2), s2.reset();
      for (var d2 = 1; d2 < c2; d2++)
        i2 = s2.finalize(i2), s2.reset();
      o2.concat(i2);
    }
    return o2.sigBytes = 4 * a2, o2;
  } });
  Wn.EvpKDF = function(e2, t2, i2) {
    return ea.create(i2).compute(e2, t2);
  }, Yn.EvpKDF;
  var ta = Yn, ia = ta.lib.WordArray;
  ta.enc.Base64 = { stringify: function(e2) {
    var t2 = e2.words, i2 = e2.sigBytes, r2 = this._map;
    e2.clamp();
    for (var s2 = [], o2 = 0; o2 < i2; o2 += 3)
      for (var n2 = (t2[o2 >>> 2] >>> 24 - o2 % 4 * 8 & 255) << 16 | (t2[o2 + 1 >>> 2] >>> 24 - (o2 + 1) % 4 * 8 & 255) << 8 | t2[o2 + 2 >>> 2] >>> 24 - (o2 + 2) % 4 * 8 & 255, a2 = 0; a2 < 4 && o2 + 0.75 * a2 < i2; a2++)
        s2.push(r2.charAt(n2 >>> 6 * (3 - a2) & 63));
    var c2 = r2.charAt(64);
    if (c2)
      for (; s2.length % 4; )
        s2.push(c2);
    return s2.join("");
  }, parse: function(e2) {
    var t2 = e2.length, i2 = this._map, r2 = this._reverseMap;
    if (!r2) {
      r2 = this._reverseMap = [];
      for (var s2 = 0; s2 < i2.length; s2++)
        r2[i2.charCodeAt(s2)] = s2;
    }
    var o2 = i2.charAt(64);
    if (o2) {
      var n2 = e2.indexOf(o2);
      -1 !== n2 && (t2 = n2);
    }
    return function(e3, t3, i3) {
      for (var r3 = [], s3 = 0, o3 = 0; o3 < t3; o3++)
        if (o3 % 4) {
          var n3 = i3[e3.charCodeAt(o3 - 1)] << o3 % 4 * 2 | i3[e3.charCodeAt(o3)] >>> 6 - o3 % 4 * 2;
          r3[s3 >>> 2] |= n3 << 24 - s3 % 4 * 8, s3++;
        }
      return ia.create(r3, s3);
    }(e2, t2, r2);
  }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }, Yn.enc.Base64, function(e2) {
    e2.lib.Cipher || function() {
      var t2 = e2, i2 = t2.lib, r2 = i2.Base, s2 = i2.WordArray, o2 = i2.BufferedBlockAlgorithm, n2 = t2.enc;
      n2.Utf8;
      var a2 = n2.Base64, c2 = t2.algo.EvpKDF, d2 = i2.Cipher = o2.extend({ cfg: r2.extend(), createEncryptor: function(e3, t3) {
        return this.create(this._ENC_XFORM_MODE, e3, t3);
      }, createDecryptor: function(e3, t3) {
        return this.create(this._DEC_XFORM_MODE, e3, t3);
      }, init: function(e3, t3, i3) {
        this.cfg = this.cfg.extend(i3), this._xformMode = e3, this._key = t3, this.reset();
      }, reset: function() {
        o2.reset.call(this), this._doReset();
      }, process: function(e3) {
        return this._append(e3), this._process();
      }, finalize: function(e3) {
        return e3 && this._append(e3), this._doFinalize();
      }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: /* @__PURE__ */ function() {
        function e3(e4) {
          return "string" == typeof e4 ? y2 : v2;
        }
        return function(t3) {
          return { encrypt: function(i3, r3, s3) {
            return e3(r3).encrypt(t3, i3, r3, s3);
          }, decrypt: function(i3, r3, s3) {
            return e3(r3).decrypt(t3, i3, r3, s3);
          } };
        };
      }() });
      i2.StreamCipher = d2.extend({ _doFinalize: function() {
        return this._process(true);
      }, blockSize: 1 });
      var l2 = t2.mode = {}, p2 = i2.BlockCipherMode = r2.extend({ createEncryptor: function(e3, t3) {
        return this.Encryptor.create(e3, t3);
      }, createDecryptor: function(e3, t3) {
        return this.Decryptor.create(e3, t3);
      }, init: function(e3, t3) {
        this._cipher = e3, this._iv = t3;
      } }), h2 = l2.CBC = function() {
        var e3 = p2.extend();
        function t3(e4, t4, i3) {
          var r3, s3 = this._iv;
          s3 ? (r3 = s3, this._iv = void 0) : r3 = this._prevBlock;
          for (var o3 = 0; o3 < i3; o3++)
            e4[t4 + o3] ^= r3[o3];
        }
        return e3.Encryptor = e3.extend({ processBlock: function(e4, i3) {
          var r3 = this._cipher, s3 = r3.blockSize;
          t3.call(this, e4, i3, s3), r3.encryptBlock(e4, i3), this._prevBlock = e4.slice(i3, i3 + s3);
        } }), e3.Decryptor = e3.extend({ processBlock: function(e4, i3) {
          var r3 = this._cipher, s3 = r3.blockSize, o3 = e4.slice(i3, i3 + s3);
          r3.decryptBlock(e4, i3), t3.call(this, e4, i3, s3), this._prevBlock = o3;
        } }), e3;
      }(), u2 = (t2.pad = {}).Pkcs7 = { pad: function(e3, t3) {
        for (var i3 = 4 * t3, r3 = i3 - e3.sigBytes % i3, o3 = r3 << 24 | r3 << 16 | r3 << 8 | r3, n3 = [], a3 = 0; a3 < r3; a3 += 4)
          n3.push(o3);
        var c3 = s2.create(n3, r3);
        e3.concat(c3);
      }, unpad: function(e3) {
        var t3 = 255 & e3.words[e3.sigBytes - 1 >>> 2];
        e3.sigBytes -= t3;
      } };
      i2.BlockCipher = d2.extend({ cfg: d2.cfg.extend({ mode: h2, padding: u2 }), reset: function() {
        var e3;
        d2.reset.call(this);
        var t3 = this.cfg, i3 = t3.iv, r3 = t3.mode;
        this._xformMode == this._ENC_XFORM_MODE ? e3 = r3.createEncryptor : (e3 = r3.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == e3 ? this._mode.init(this, i3 && i3.words) : (this._mode = e3.call(r3, this, i3 && i3.words), this._mode.__creator = e3);
      }, _doProcessBlock: function(e3, t3) {
        this._mode.processBlock(e3, t3);
      }, _doFinalize: function() {
        var e3, t3 = this.cfg.padding;
        return this._xformMode == this._ENC_XFORM_MODE ? (t3.pad(this._data, this.blockSize), e3 = this._process(true)) : (e3 = this._process(true), t3.unpad(e3)), e3;
      }, blockSize: 4 });
      var m2 = i2.CipherParams = r2.extend({ init: function(e3) {
        this.mixIn(e3);
      }, toString: function(e3) {
        return (e3 || this.formatter).stringify(this);
      } }), g2 = (t2.format = {}).OpenSSL = { stringify: function(e3) {
        var t3 = e3.ciphertext, i3 = e3.salt;
        return (i3 ? s2.create([1398893684, 1701076831]).concat(i3).concat(t3) : t3).toString(a2);
      }, parse: function(e3) {
        var t3, i3 = a2.parse(e3), r3 = i3.words;
        return 1398893684 == r3[0] && 1701076831 == r3[1] && (t3 = s2.create(r3.slice(2, 4)), r3.splice(0, 4), i3.sigBytes -= 16), m2.create({ ciphertext: i3, salt: t3 });
      } }, v2 = i2.SerializableCipher = r2.extend({ cfg: r2.extend({ format: g2 }), encrypt: function(e3, t3, i3, r3) {
        r3 = this.cfg.extend(r3);
        var s3 = e3.createEncryptor(i3, r3), o3 = s3.finalize(t3), n3 = s3.cfg;
        return m2.create({ ciphertext: o3, key: i3, iv: n3.iv, algorithm: e3, mode: n3.mode, padding: n3.padding, blockSize: e3.blockSize, formatter: r3.format });
      }, decrypt: function(e3, t3, i3, r3) {
        return r3 = this.cfg.extend(r3), t3 = this._parse(t3, r3.format), e3.createDecryptor(i3, r3).finalize(t3.ciphertext);
      }, _parse: function(e3, t3) {
        return "string" == typeof e3 ? t3.parse(e3, this) : e3;
      } }), f2 = (t2.kdf = {}).OpenSSL = { execute: function(e3, t3, i3, r3) {
        r3 || (r3 = s2.random(8));
        var o3 = c2.create({ keySize: t3 + i3 }).compute(e3, r3), n3 = s2.create(o3.words.slice(t3), 4 * i3);
        return o3.sigBytes = 4 * t3, m2.create({ key: o3, iv: n3, salt: r3 });
      } }, y2 = i2.PasswordBasedCipher = v2.extend({ cfg: v2.cfg.extend({ kdf: f2 }), encrypt: function(e3, t3, i3, r3) {
        var s3 = (r3 = this.cfg.extend(r3)).kdf.execute(i3, e3.keySize, e3.ivSize);
        r3.iv = s3.iv;
        var o3 = v2.encrypt.call(this, e3, t3, s3.key, r3);
        return o3.mixIn(s3), o3;
      }, decrypt: function(e3, t3, i3, r3) {
        r3 = this.cfg.extend(r3), t3 = this._parse(t3, r3.format);
        var s3 = r3.kdf.execute(i3, e3.keySize, e3.ivSize, t3.salt);
        return r3.iv = s3.iv, v2.decrypt.call(this, e3, t3, s3.key, r3);
      } });
    }();
  }(Yn);
  var ra = Yn, sa = ra.lib.StreamCipher, oa = ra.algo, na = oa.RC4 = sa.extend({ _doReset: function() {
    for (var e2 = this._key, t2 = e2.words, i2 = e2.sigBytes, r2 = this._S = [], s2 = 0; s2 < 256; s2++)
      r2[s2] = s2;
    s2 = 0;
    for (var o2 = 0; s2 < 256; s2++) {
      var n2 = s2 % i2, a2 = t2[n2 >>> 2] >>> 24 - n2 % 4 * 8 & 255;
      o2 = (o2 + r2[s2] + a2) % 256;
      var c2 = r2[s2];
      r2[s2] = r2[o2], r2[o2] = c2;
    }
    this._i = this._j = 0;
  }, _doProcessBlock: function(e2, t2) {
    e2[t2] ^= aa.call(this);
  }, keySize: 8, ivSize: 0 });
  function aa() {
    for (var e2 = this._S, t2 = this._i, i2 = this._j, r2 = 0, s2 = 0; s2 < 4; s2++) {
      i2 = (i2 + e2[t2 = (t2 + 1) % 256]) % 256;
      var o2 = e2[t2];
      e2[t2] = e2[i2], e2[i2] = o2, r2 |= e2[(e2[t2] + e2[i2]) % 256] << 24 - 8 * s2;
    }
    return this._i = t2, this._j = i2, r2;
  }
  ra.RC4 = sa._createHelper(na);
  var ca = oa.RC4Drop = na.extend({ cfg: na.cfg.extend({ drop: 192 }), _doReset: function() {
    na._doReset.call(this);
    for (var e2 = this.cfg.drop; e2 > 0; e2--)
      aa.call(this);
  } });
  ra.RC4Drop = sa._createHelper(ca);
  var da = Yn.RC4, la = { "4_26": "v2AIChatNotify", "29_35": "v2AIProxyModelCall", "29_36": "v2AIGetUserList" }, pa = { accountId: 1, messages: { id: 2, converter: pt, retConverter: ht }, requestId: 3, content: { id: 4, converter: pt, retConverter: ht }, promptVariables: 5, modelConfigParams: { id: 6, converter: pt, retConverter: ht }, antispamBusinessId: 7, antispamEnabled: { id: 8, converter: lt } }, ha = { accountId: 1, name: 3, avatar: 4, sign: 5, gender: { id: 6, retType: "number" }, email: 7, birthday: 8, mobile: 9, serverExtension: 10, modelType: { id: 11, retType: "number" }, modelConfig: { id: 12, retConverter: (e2) => {
    if (e2 = ht(e2)) {
      var t2 = Object.keys(e2).reduce((t3, i2) => (t3[function(e3) {
        return (e3 = e3 || "").split("_").map((e4, t4) => 0 === t4 ? e4 : e4[0].toUpperCase() + e4.slice(1)).join("");
      }(i2)] = e2[i2], t3), {});
      if ("string" == typeof t2.promptKeys)
        try {
          t2.promptKeys = JSON.parse(t2.promptKeys);
        } catch (e3) {
        }
      return t2;
    }
  } }, yunxinConfig: { id: 13, retConverter: (e2) => {
    if (e2 = ht(e2))
      return e2;
  } }, valid: { id: 14, retType: "boolean" }, createTime: { id: 15, retType: "number" }, updateTime: { id: 16, retType: "number" } }, ua = { v2AIChatNotify: { sid: 4, cid: 26, service: "V2NIMAIService", response: [{ type: "Property", name: "data", reflectMapper: dt({ code: { id: 1, retType: "number" }, accountId: 2, requestId: 3, content: { id: 4, retConverter: ht } }) }] }, v2AIProxyModelCall: { sid: 29, cid: 35, service: "V2NIMAIService", params: [{ type: "Property", name: "tag", reflectMapper: pa }] }, v2AIGetUserList: { sid: 29, cid: 36, service: "V2NIMAIService", params: [{ type: "Property", name: "tag", reflectMapper: { pageToken: 1, limit: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: dt(ha) }, { type: "Property", name: "queryTag", reflectMapper: dt({ hasMore: { id: 16, retType: "boolean" }, nextToken: 2 }) }] } }, ma = { accountId: 1, uid: { id: 2, retType: "number" }, joinTime: { id: 3, retType: "number" }, expireTime: { id: 4, retType: "number" }, deviceId: 5 }, ga = { channelType: { id: 1, retType: "number", retAccess: "channelInfo.channelType" }, channelName: { id: 2, retAccess: "channelInfo.channelName" }, channelId: { id: 3, retAccess: "channelInfo.channelId" }, createTime: { id: 4, retType: "number", retAccess: "channelInfo.createTime" }, expireTime: { id: 5, retType: "number", retAccess: "channelInfo.expireTime" }, creatorAccountId: { id: 6, retAccess: "channelInfo.creatorAccountId" }, channelExtension: { id: 7, retAccess: "channelInfo.channelExtension" }, channelValid: { id: 8, retDef: true, retAccess: "channelInfo.channelValid", retConverter: (e2) => 1 !== parseInt(e2) }, fromAccid: 10, toAccid: 11, requestId: 12, pushEnabled: { id: 13, access: "pushConfig.pushEnabled", converter: lt, retType: "boolean" }, pushTitle: { id: 14, access: "pushConfig.pushTitle" }, pushContent: { id: 15, access: "pushConfig.pushContent" }, pushPayload: { id: 16, access: "pushConfig.pushPayload" }, unreadEnabled: { id: 17, access: "signallingConfig.unreadEnabled", converter: lt, retType: "boolean", def: 1 }, members: { id: 18, retAccess: "members", retConverter: (e2) => {
    try {
      return JSON.parse(e2).map((e3) => at(e3, dt(ma)));
    } catch (e3) {
      return;
    }
  } }, attach: { id: 19, retConverter: ht }, serverExtension: { id: 20, retDef: "" }, offlineEnabled: { id: 21, converter: lt, retType: "boolean", def: 1 }, msgId: 22, selfUid: { id: 23, retType: "number", access: "signallingConfig.selfUid" }, time: { id: 24, retType: "number" }, rtcChannelName: { id: 25, access: "rtcConfig.rtcChannelName" }, rtcTokenTtl: { id: 26, retType: "number", access: "rtcConfig.rtcTokenTtl", retAccess: "rtcInfo.rtcTokenTtl" }, rtcToken: { id: 27, retAccess: "rtcInfo.rtcToken" }, rtcParams: { id: 28, access: "rtcConfig.rtcParams", retAccess: "rtcInfo.rtcParams" }, callStatus: { id: 30, retType: "number" } };
  dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga), dt(ga);
  var va, fa = { eventType: { id: 1, retType: "number" }, statusType: { id: 2, retType: "number" }, uniqueId: 3, extension: 4, duration: { id: 5, retType: "number" }, onlineOnly: { id: 6, retType: "boolean", converter: (e2) => e2 ? 1 : 2 }, multiSync: { id: 7, retType: "boolean", converter: lt }, publishTime: { id: 10, retType: "number" }, serverId: 11, clientType: { id: 12, retType: "number" }, serverExtension: 13, extensionReceived: 14, accountId: 103 }, ya = { eventType: { id: 1, retType: "number" }, duration: { id: 2, retType: "number" }, immediateSync: { id: 3, retType: "number", converter: lt }, accountId: 102, subscribeTime: { id: 105, retType: "number" } };
  dt(fa), dt(fa), dt(ya), dt(ya), dt(fa), function(e2) {
    e2[e2.V2NIM_PROXY_REQUEST_METHOD_GET = 1] = "V2NIM_PROXY_REQUEST_METHOD_GET", e2[e2.V2NIM_PROXY_REQUEST_METHOD_POST = 2] = "V2NIM_PROXY_REQUEST_METHOD_POST", e2[e2.V2NIM_PROXY_REQUEST_METHOD_PUT = 3] = "V2NIM_PROXY_REQUEST_METHOD_PUT", e2[e2.V2NIM_PROXY_REQUEST_METHOD_DELETE = 4] = "V2NIM_PROXY_REQUEST_METHOD_DELETE";
  }(va || (va = {}));
  dt({ zone: 1, path: 2, method: 3, header: 4, body: 5 }), dt({ fromAccountId: 1, body: 2, time: { id: 3, retType: "number" } }), va.V2NIM_PROXY_REQUEST_METHOD_DELETE, va.V2NIM_PROXY_REQUEST_METHOD_GET, va.V2NIM_PROXY_REQUEST_METHOD_POST, va.V2NIM_PROXY_REQUEST_METHOD_PUT;
  var Ia = Ze$1;
  Ia.registerService(class extends Xt$1 {
    constructor(e2, t2 = {}) {
      var i2;
      super("V2NIMLoginService", e2), this.account = "", this.previousLoginAccount = "", this.token = "", this.deviceId = "", this.clientSession = "", this.processId = "", this.kickedDetail = null, this.binaryWebsocket = true, this.core._registerDep(si$1, "misc"), ct({ cmdMap: yt, cmdConfig: Mt }), "v2" === e2.options.apiVersion && (ct({ cmdMap: It, cmdConfig: Et }), this.core.auth = this), this.previousLoginManager = new we$1(), this.doLoginStepsManager = new we$1(), this.loginTimerManager = new me$1(), this.loginOption = Object.assign({}, ai), this.config = { lbsUrls: ni$1, linkUrl: "weblink.netease.im:443", linkSSL: true }, this.setOptions(t2), e2.V2NIMLoginService = this, false !== this.core.options.binaryWebsocket && "function" == typeof Uint8Array ? (this.binaryWebsocket = true, i2 = new Bt(this.core)) : (this.binaryWebsocket = false, i2 = new Yt(this.core)), this.clientSocket = i2, "v2" === this.core.options.apiVersion && (this.core.clientSocket = i2), this.lifeCycle = new Qt(e2), this.reconnect = new Kt(e2), this.lbs = new Jt$1(e2), this.authenticator = new zt(e2), this.dataSync = new Zt(e2);
    }
    get hasSettingService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMSettingService) || void 0 === e2 ? void 0 : e2.name);
    }
    setOptions(e2) {
      var t2, i2, r2;
      pe$1({ lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, e2, "", true), this.config = Re$1(this.config, e2), null === (i2 = null === (t2 = this.core.clientSocket) || void 0 === t2 ? void 0 : t2.setLinkSSL) || void 0 === i2 || i2.call(t2, null === (r2 = this.config.linkSSL) || void 0 === r2 || r2);
      var s2 = "", o2 = "";
      this.config.isFixedDeviceId ? (s2 = _e$1.localStorage.getItem("__NIM_DEVC_ID__") || Ne$1(), o2 = _e$1.localStorage.getItem("__NIM_CLIENT_SESSION_ID__") || Ne$1(), _e$1.localStorage.setItem("__NIM_DEVC_ID__", s2), _e$1.localStorage.setItem("__NIM_CLIENT_SESSION_ID__", o2)) : (s2 = Ne$1(), o2 = Ne$1()), this.deviceId = s2, this.clientSession = o2, this.core.reporter.setConfig({ common: { dev_id: s2 } });
    }
    reset() {
      this.account = "", this.token = "", this.processId = "", this.lbs.reset(), this.reconnect.reset(), this.authenticator.reset(), this.authenticator.clearLastLoginClient(), this.dataSync.reset();
    }
    login(e2, t2, i2 = {}) {
      return ve$1(this, void 0, void 0, function* () {
        this._checkApiVersion();
        var r2 = _e$1.getSystemInfo() || {}, s2 = r2.os ? r2.os.toLowerCase() : "";
        if ("React Native" === _e$1.platform && "android" === s2 && this.hasSettingService && this.core.V2NIMSettingService.offlinePushPlugin)
          try {
            this.deviceInfo = yield this.core.V2NIMSettingService.getRNDeviceInfo();
          } catch (e3) {
            this.logger.error(e3);
          }
        if (!e2)
          throw new ae$1({ detail: { reason: "Empty account" } });
        if (pe$1({ retryCount: { type: "number", min: 0, required: false }, forceMode: { type: "boolean", required: false }, authType: { type: "enum", values: [0, 1, 2], required: false }, syncLevel: { type: "enum", values: [1, 0], required: false } }, i2, "", true), 0 === i2.authType && !t2)
          throw new ae$1({ detail: { reason: "When authType is 0, token cannot be empty" } });
        if ("" !== this.previousLoginAccount && this.previousLoginAccount !== e2 && this.core._clearModuleData(), 0 === this.getLoginStatus())
          this.logger.log(`V2NIMLoginService::login:allowLogin:${e2}`, i2);
        else {
          if (1 === this.getLoginStatus())
            return this.smoothForLogined(e2, t2, i2);
          if (2 === this.getLoginStatus())
            return this.smoothForLogining(e2, t2, i2);
        }
        this.account = e2, this.previousLoginAccount = e2, this.token = t2, this.processId = Ne$1(), this.loginOption = Re$1(ai, i2), this.kickedDetail = null, this.loginTimerManager.destroy(), this.loginTimerManager.addTimer(() => {
          var e3 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_TIMEOUT, detail: { reason: "Login API timeout" } });
          this.doLoginStepsManager.clear(e3), this.previousLoginManager.clear(e3), this.originLoginPromise = void 0, this.lifeCycle.processEvent("exited", e3);
        }, this.loginOption.timeout > 0 ? this.loginOption.timeout : 6e4, 1);
        try {
          yield this.multiTryDoLogin(), this.loginTimerManager.destroy();
        } catch (e3) {
          throw this.loginTimerManager.destroy(), e3;
        }
      });
    }
    getChatroomLinkAddress(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        pe$1({ roomId: { type: "string", regExp: /^\d+$/, required: true, allowEmpty: false }, miniProgram: { type: "boolean", required: false } }, { roomId: e2, miniProgram: t2 }, "", true);
        var i2 = "unknow environment" !== Oe$1();
        return t2 = void 0 === t2 ? i2 : t2, (yield this.clientSocket.sendCmd("v2GetChatroomLinkAddress", { roomId: e2, miniProgram: t2 })).content.linkAddress;
      });
    }
    multiTryDoLogin(e2) {
      return ve$1(this, void 0, void 0, function* () {
        for (var t2 = new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "loginFailed" } }), i2 = 0; i2 <= this.loginOption.retryCount; i2++) {
          var r2 = `V2NIMLoginService::times of login try: ${i2}`;
          i2 > 0 ? this.logger.warn(r2) : this.logger.log(r2);
          try {
            this.originLoginPromise = e2 || this.doLogin(false), e2 = void 0;
            var s2 = yield this.previousLoginManager.add(this.originLoginPromise);
            return this.core.reporter.reportTraceEnd("login", true), this.doLoginStepsManager.clear(), this.previousLoginManager.clear(), this.originLoginPromise = void 0, s2;
          } catch (e3) {
            if (t2 = e3 || t2, this.logger.error(`V2NIMLoginService::login failed, times of login try: ${i2}, err.code: ${null == t2 ? void 0 : t2.code}, err.message: "${null == t2 ? void 0 : t2.message}"`), t2.code !== ie$1.V2NIM_ERROR_CODE_CANCELLED && this.core.reporter.reportTraceEnd("login", false), this.reconnect.clearReconnectTimer(), this.checkLoginTerminalCode(t2 && t2.code))
              throw this.lifeCycle.processEvent("exited", t2), t2;
            t2 && 399 === t2.code && this.lbs.reset();
          }
        }
        throw this.lifeCycle.processEvent("exited", t2), t2;
      });
    }
    doLogin(e2) {
      var t2, i2;
      return ve$1(this, void 0, void 0, function* () {
        var r2 = !!e2 || this.authenticator.checkAutoLogin(this.loginOption.forceMode);
        this.core.reporter.reportTraceCancel("login"), this.core.reporter.reportTraceStart("login", r2 ? { user_id: this.account, action: "auto_login", process_id: this.processId, binary_websocket: this.binaryWebsocket } : { user_id: this.account, action: "manual_login", process_id: this.processId, binary_websocket: this.binaryWebsocket }), this.core.reporter.reportTraceUpdateV2("login", { code: 0, description: JSON.stringify(this.loginOption), operation_type: "conf_init", succeed: true, duration: 0, target: "" }, { asyncParams: _e$1.net.getNetworkStatus() });
        var s2 = yield this.doLoginStepsManager.add(this.lbs.getLbsInfos());
        yield this.doLoginStepsManager.add(this.clientSocket.connect(s2, e2));
        var o2 = yield this.doLoginStepsManager.add(this.authenticator.verifyAuthentication(r2));
        if (this.processId = Ne$1(), this.clientSocket.resetSocketConfig(), this.reconnect.reset(), this.dataSync.reset(), this.lifeCycle.processEvent("loginSucc", void 0, Object.assign(Object.assign({}, o2), { isReconnect: e2 })), this.clientSocket.ping(), this.core.abtest.abtRequest(), "function" == typeof (null === (t2 = this.core.V2NIMClientAntispamUtil) || void 0 === t2 ? void 0 : t2.downloadLocalAntiSpamVocabs) && this.core.V2NIMClientAntispamUtil.downloadLocalAntiSpamVocabs(), "function" == typeof (null === (i2 = this.core.cloudStorage) || void 0 === i2 ? void 0 : i2.init))
          try {
            yield this.core.cloudStorage.init();
          } catch (e3) {
            this.logger.warn("doLogin::cloudStorage init error", e3);
          }
        return o2;
      });
    }
    smoothForLogined(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        var r2 = this.checkIsSameLogin(e2, t2, i2);
        return this.logger.warn(`V2NIMLoginService::smoothForLogined:Logined, isSameLogin ${r2}`), r2 ? void 0 : (yield this.logout(), this.login(e2, t2, i2));
      });
    }
    smoothForLogining(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        var r2 = this.checkIsSameLogin(e2, t2, i2);
        if (this.logger.warn(`V2NIMLoginService::smoothForLogining:Logining progress exists, abort the previous login attempt and start next attempt, isSameLogin ${r2}`), this.previousLoginManager.clear(), this.reconnect.reset(), this.account = e2, this.previousLoginAccount = e2, this.token = t2, this.loginOption = Re$1(this.loginOption, i2), !r2)
          return this.doLoginStepsManager.clear(), this.clientSocket.doDisconnect(bt.ACTIVE, "Aborted"), this.reset(), this.lifeCycle.processEvent("logout"), yield Promise.resolve(), this.login(e2, t2, i2);
        if (!this.originLoginPromise)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "NoPreviousLoginExists" } });
        this.reconnect.reset(), yield Promise.resolve(), yield this.multiTryDoLogin(this.originLoginPromise);
      });
    }
    checkIsSameLogin(e2, t2, i2) {
      return this.account === e2 && this.loginOption.authType === i2.authType && (0 !== i2.authType || this.token === t2);
    }
    logout() {
      return ve$1(this, void 0, void 0, function* () {
        this._checkApiVersion(), this.doLoginStepsManager.clear(), this.previousLoginManager.clear(), this.loginTimerManager.destroy(), this.originLoginPromise = void 0;
        var e2 = this.getConnectStatus(), t2 = this.getLoginStatus();
        switch (t2) {
          case 1:
            try {
              yield this.clientSocket.sendCmd("v2Logout", void 0, { timeout: 1e3 }), this.clientSocket.doDisconnect(bt.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout");
            } catch (e3) {
              this.logger.error("Instance::disconnect sendCmd:logout error", e3), this.clientSocket.doDisconnect(bt.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout");
            }
            break;
          case 2:
          case 3:
            this.clientSocket.doDisconnect(bt.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout");
            break;
          case 0:
            throw this.core._clearModuleData(), new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `Illegal logout. loginStatus ${t2}. connectStatus ${e2}` } });
          default:
            throw this.core._clearModuleData(), new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `Illegal logout. illegal status: loginStatus ${t2}. connectStatus ${e2}` } });
        }
      });
    }
    getConnectStatus() {
      return this.lifeCycle.getConnectStatus();
    }
    getLoginStatus() {
      return this.lifeCycle.getLoginStatus();
    }
    getLoginUser() {
      return this.account;
    }
    getLoginClients() {
      return function(e2, t2) {
        e2 = e2 || [], t2 = t2 || "";
        for (var i2 = [], r2 = [], s2 = 0; s2 < e2.length; s2++) {
          var o2 = e2[s2][t2];
          -1 === r2.indexOf(o2) && (r2.push(o2), i2.push(e2[s2]));
        }
        return i2;
      }(this.authenticator.loginClients, "clientId").map((e2) => oi(e2, ["type", "os", "timestamp", "customTag", "customClientType", "clientId", "clientIP"]));
    }
    getCurrentLoginClient() {
      var e2;
      if (null === (e2 = this.authenticator.loginClientOfThisConnection) || void 0 === e2 ? void 0 : e2.clientId)
        return oi(this.authenticator.loginClientOfThisConnection, ["type", "os", "timestamp", "customTag", "customClientType", "clientId", "clientIP"]);
    }
    getDataSync() {
      var e2 = this.dataSync.datas;
      return e2 && e2.length > 0 ? e2.map((e3) => ({ type: e3.type, state: e3.state })) : null;
    }
    setReconnectDelayProvider(e2) {
      this.reconnect._setReconnectDelayProvider(e2);
    }
    kickOffline(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this._checkApiVersion(), pe$1({ clientId: { type: "string", allowEmpty: false } }, e2, "", true), 0 === Ue$1(yield this.clientSocket.sendCmd("v2KickOffline", { clientIds: [e2.clientId] }), "content.clientIds.length"))
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_REQUEST_FAILED });
      });
    }
    getKickedOfflineDetail() {
      return this.kickedDetail;
    }
    checkLoginTerminalCode(e2) {
      return this.authenticator.checkLoginTerminalCode(e2);
    }
    checkIllegalState() {
      if (!this.getLoginUser())
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_ILLEGAL_STATE });
    }
    _checkApiVersion() {
      if ("v2" !== this.core.options.apiVersion)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'apiVersion is not "v2"' } });
    }
    v2LoginHandler(e2) {
      if (e2.error)
        throw this.clientSocket.doDisconnect(bt.ACTIVE, e2.error), e2.error;
      return e2;
    }
    v2LoginClientChangeHandler(e2) {
      this.authenticator.changeLoginClient(parseInt(e2.content.state), e2.content.datas);
    }
    nimLoginClientChangeHandler(e2) {
      this.authenticator.changeLoginClient(parseInt(e2.content.state), e2.content.datas);
    }
    qchatLoginClientChangeHandler(e2) {
      var t2 = parseInt(e2.content.state);
      t2 = 1 === t2 ? 2 : 3, this.authenticator.changeLoginClient(t2, [e2.content.data]);
    }
    v2BeKickedHandler(e2) {
      if (e2.error)
        this.core.logger.error("v2BeKickedHandler error, ", e2.error);
      else {
        var t2 = function(e3) {
          return ut({ reason: { type: "number" }, clientType: { type: "number" }, customClientType: { type: "number" } }, e3);
        }(e2.content);
        this.core.logger.warn("v2Bekicked::", t2), this.kickedDetail = t2, this.clientSocket.doDisconnect(bt.KICKED, t2), this.core._clearModuleData(), this.lifeCycle.processEvent("kicked", new oe$1({ code: ie$1.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "disconnect due to kicked" } }), t2), this.emit("onKickedOffline", t2);
      }
    }
    emit(e2, ...t2) {
      var i2 = `${this.name}::emit ${e2.toString()}`;
      if ("onLoginFailed" === e2 || "onDisconnected" === e2 || "onConnectFailed" === e2) {
        var r2 = t2[0];
        this.logger.log(`${i2}`, r2.toString());
      } else if ("onDataSync" === e2) {
        var s2 = t2[2];
        this.logger.log(`${i2}`, t2[0], t2[1], s2 && s2.toString());
      } else
        this.logger.log(`${i2}`, ...t2);
      return super.emit(e2, ...t2);
    }
  }, "V2NIMLoginService"), Ia.registerService(class extends Xt$1 {
    constructor(e2) {
      super("V2NIMSyncService", e2), this.teamKey = ["teams", "superTeams", "myTeamMembers", "mySuperTeamMembers"], this.config = {}, this.timetags = {}, "v2" === this.core.options.apiVersion && (this.initEventListeners(), ct({ cmdMap: ci$1, cmdConfig: di }));
    }
    reset() {
      this.timetags = {};
    }
    setOptions(e2) {
      var t2 = this.core;
      return this.config = Object.assign({ myInfo: !!t2.V2NIMUserService.name, offlineMsgs: !!t2.V2NIMMessageService.name, roamingMsgs: !!t2.V2NIMMessageService.name, relations: !!t2.V2NIMUserService.name, friends: !!t2.V2NIMFriendService.name, friendUsers: !!t2.V2NIMUserService.name, msgReceipts: !!t2.V2NIMMessageService.name, broadcastMsgs: !!t2.V2NIMNotificationService.name, recallMsg: !!t2.V2NIMMessageService.name, sessionAck: !!t2.V2NIMConversationService.name, superTeamSessionAck: !!t2.V2NIMConversationService.name, superTeamRoamingMsgs: !!t2.V2NIMTeamService.name, deleteSuperTeamMsg: !!t2.V2NIMTeamService.name, deleteSelfMsgs: !!t2.V2NIMMessageService.name, sessionHistoryMsgsDelete: !!t2.V2NIMMessageService.name, avSignal: !!t2.V2NIMSignallingService.name, teams: !!t2.V2NIMTeamService.name, superTeams: !!t2.V2NIMTeamService.name, myTeamMembers: !!t2.V2NIMTeamService.name, mySuperTeamMembers: !!t2.V2NIMTeamService.name, p2pTeamModifyMessage: !!t2.V2NIMMessageService.name, superTeamModifyMessage: !!t2.V2NIMMessageService.name, stickTopSessions: !!t2.V2NIMLocalConversationService.name }, e2), this.config;
    }
    doBasicSync() {
      return ve$1(this, void 0, void 0, function* () {
        var e2 = Object.keys(this.config).filter((e3) => !this.teamKey.includes(e3) && this.config[e3]), t2 = this.genSyncParams(e2);
        this.logger.log("V2Sync:basic", t2);
        var i2 = (yield this.core.clientSocket.sendCmd("v2NIMSync", { tag: t2 })).content.timetag;
        this.setTimetags(i2, e2), yield this.delaySyncDone(), yield this.handleImmediate(), this.core.logger.log("sync::basic sync complete in", i2);
      });
    }
    doTeamSync() {
      return ve$1(this, void 0, void 0, function* () {
        var e2 = this.teamKey.filter((e3) => this.config[e3]);
        if (0 !== e2.length) {
          var t2 = this.genSyncParams(e2);
          this.core.eventBus.emit("V2NIMTeamService/onSyncStarted"), this.logger.log("V2Sync:team", t2);
          var i2 = null;
          try {
            i2 = yield this.core.clientSocket.sendCmd("v2NIMSync", { tag: t2 });
          } catch (e3) {
            throw this.core.eventBus.emit("V2NIMTeamService/onSyncFailed", e3), e3;
          }
          this.core.eventBus.emit("V2NIMTeamService/onSyncFinished");
          var r2 = i2.content.timetag;
          this.setTimetags(r2, this.teamKey), this.core.logger.log("sync::team sync complete in", r2);
        }
      });
    }
    doQchatSync() {
      return ve$1(this, void 0, void 0, function* () {
        var e2 = yield this.core.clientSocket.sendCmd("v2QChatSync", { tag: { systemNotification: 0 } });
        this.core.logger.log("sync::qchat sync complete in", e2.content.timetag);
      });
    }
    doSync() {
      return ve$1(this, void 0, void 0, function* () {
        var e2 = Ue$1(this.core, "V2NIMLoginService.authenticator.loginClientOfThisConnection.loginType");
        if (void 0 !== e2) {
          if (this.logger.log(`sync::doSync:type ${e2}`), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 2, subType: "mainSync" }), 1 === e2)
            try {
              yield this.doBasicSync(), yield this.doTeamSync();
            } catch (e3) {
              return void this.doSyncComplete(e3);
            }
          else if (2 === e2)
            try {
              yield this.doQchatSync();
            } catch (e3) {
              return void this.doSyncComplete(e3);
            }
          else {
            if (3 !== e2)
              return;
            try {
              yield this.doBasicSync(), yield this.doTeamSync(), yield this.doQchatSync();
            } catch (e3) {
              return void this.doSyncComplete(e3);
            }
          }
          this.doSyncComplete();
        } else
          this.logger.warn("sync::doSync: no loginType, stop sync");
      });
    }
    doSyncComplete(e2) {
      e2 && this.core.logger.log("sync::doSync complete but got error", e2), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 3, error: e2, subType: "mainSync" });
    }
    initEventListeners() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.doSync();
      });
    }
    genSyncParams(e2) {
      return e2.reduce((e3, t2) => {
        var i2 = t2;
        return e3[i2] = this.timetags[i2] || 0, e3;
      }, {});
    }
    setTimetags(e2, t2) {
      t2.forEach((t3) => {
        this.timetags[t3] = e2;
      });
    }
    handleImmediate() {
      return this.core.session && this.core.session.onSyncDone && this.core.session.onSyncDone(), Promise.resolve();
    }
    delaySyncDone() {
      return "ALI" === Oe$1() ? (this.core.logger.log("sync: emit ALIAPP sycnHandler, handle later"), new Promise((e2) => {
        setTimeout(() => {
          e2();
        }, 100);
      })) : Promise.resolve();
    }
  }, "V2NIMSyncService"), ye$1(_e$1, { setLogger: pi$1, platform: "UNIAPP", localStorage: vi$1, request: Ii$1, WebSocket: Ni$1, uploadFile: Si$1, getFileUploadInformation: Ci, getSystemInfo: Ti$1, net: yi$1 }), Ia.registerService(Rs, "V2NIMMessageService"), Ia.registerService(To$1, "V2NIMConversationService"), Ia.registerService(class extends Xt$1 {
    constructor(e2) {
      super("V2NIMAIService", e2), ct({ cmdMap: la, cmdConfig: ua });
    }
    emit(e2, ...t2) {
      var i2 = `${this.name}::emit ${e2.toString()}`;
      if ("onProxyAIModelCall" === e2) {
        var r2 = t2[0];
        this.logger.log(`${i2}`, `code:${r2.code};accountId:${r2.accountId};requestId:${r2.requestId}`);
      } else
        this.logger.log(`${i2}`, ...t2);
      return super.emit(e2, ...t2);
    }
    getAIUserList() {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), (yield this.core.sendCmd("v2AIGetUserList", { tag: {} })).content.datas;
      });
    }
    proxyAIModelCall(e2) {
      return ve$1(this, void 0, void 0, function* () {
        pe$1(bi$1, e2, "", true), yield this.core.sendCmd("v2AIProxyModelCall", { tag: e2 });
      });
    }
    v2AIChatNotifyHandler(e2) {
      var t2 = e2.content.data;
      t2 && t2.requestId ? this.emit("onProxyAIModelCall", { code: t2.code || 200, accountId: t2.accountId, requestId: t2.requestId, content: t2.content }) : this.logger.warn("v2AIChatNotifyHandler: invalid data", t2);
    }
  }, "V2NIMAIService"), Ia.registerService(class extends Xt$1 {
    constructor(e2, t2 = {}) {
      super("V2NIMLocalConversationService", e2), this.config = {}, this.model = new Ls(), this.unread = new Bs(this.core, this), this.compute = new Xs(this.core, this), this.event = new Zs(this.core, this), this.handler = new Qs(this.core, this), this.core._registerDep(Oi, "V2NIMConversationIdUtil"), this.core._registerDep(Rs, "V2NIMMessageService"), "v2" === this.core.options.apiVersion && (ct({ cmdMap: Ps, cmdConfig: xs }), this.setOptions(t2), this.setListener());
    }
    setOptions(e2) {
      this.config = Object.assign(this.config, e2);
    }
    setListener() {
      this.event.setListener();
    }
    reset() {
      this.model.reset(), this.unread.reset();
    }
    emit(e2, ...t2) {
      return this.event.beforeEmit(e2, ...t2), super.emit(e2, ...t2);
    }
    getConversationList(e2, t2) {
      this.checkV2(), pe$1({ offset: { type: "number", min: 0 } }, { offset: e2 }, "", true), pe$1({ limit: { type: "number", min: 1 } }, { limit: t2 }, "", true), this.core.V2NIMLoginService.checkIllegalState();
      var i2 = this.model.getByOption(e2, t2, {});
      return i2.conversationList = i2.conversationList.map((e3) => this.compute.computeFromExternal(e3)), Promise.resolve(i2);
    }
    getConversationListByOption(e2, t2, i2) {
      this.checkV2(), pe$1({ offset: { type: "number", min: 0 } }, { offset: e2 }, "", true), pe$1({ limit: { type: "number", min: 1 } }, { limit: t2 }, "", true), pe$1({ conversationTypes: { type: "array", itemType: "number", required: false }, onlyUnread: { type: "boolean", required: false } }, i2, "option", true), this.core.V2NIMLoginService.checkIllegalState();
      var r2 = this.model.getByOption(e2, t2, i2);
      return r2.conversationList = r2.conversationList.map((e3) => this.compute.computeFromExternal(e3)), Promise.resolve(r2);
    }
    getConversation(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), ue$1(this.core.account, e2);
        var t2 = this.model.getById(e2);
        if (t2)
          return this.compute.computeFromExternal(t2);
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
      });
    }
    getConversationListByIds(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true), this.core.V2NIMLoginService.checkIllegalState(), e2.map((e3) => this.model.getById(e3)).filter((e3) => !!e3).map((e3) => this.compute.computeFromExternal(e3));
      });
    }
    createConversation(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), ue$1(this.core.account, e2);
        var t2 = this.model.getById(e2);
        if (t2)
          return this.compute.computeFromExternal(t2);
        var i2 = this.compute.computeConvByMsgsCache(e2, { updateTime: this.core.timeOrigin.getNTPTime() });
        i2 = this.compute.computeConvWithUnread(i2), i2 = this.compute.computeFromExternal(i2), this.model.upsert(i2);
        var r2 = this.model.getById(e2);
        return this.triggerConversationCreated(r2), r2;
      });
    }
    deleteConversation(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), ue$1(this.core.account, e2), pe$1({ clearMessage: { type: "boolean", required: false } }, { clearMessage: t2 }, "", true), yield this.unread.markConversationRead(e2);
        var i2 = this.model.deleteById(e2);
        if (!i2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
        t2 && this.core.V2NIMMessageService.model.deleteMessages(e2), !!(i2 && i2.unreadCount > 0) && this.unread.digestUnreadCountChange(), this.emit("onConversationDeleted", [e2]);
      });
    }
    deleteConversationListByIds(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true), pe$1({ clearMessage: { type: "boolean", required: false } }, { clearMessage: t2 }, "", true), yield this.unread.markMultiConversationRead(e2);
        var i2 = false;
        return e2.forEach((e3) => {
          t2 && this.core.V2NIMMessageService.model.deleteMessages(e3), this.model.deleteById(e3) && (i2 = true);
        }), i2 && this.unread.digestUnreadCountChange(), this.emit("onConversationDeleted", e2), [];
      });
    }
    stickTopConversation(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), ue$1(this.core.account, e2), pe$1({ stickTop: { type: "boolean" } }, { stickTop: t2 }, "", true);
        var i2 = this.model.getById(e2);
        if ((null == i2 ? void 0 : i2.stickTop) !== t2) {
          var r2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2), s2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2), o2 = yield this.core.sendCmd(t2 ? "v2LocalConvStickTopAdd" : "v2LocalConvStickTopDelete", { tag: { id: Vs(s2, r2) } });
          this.model.updateStickTop(e2, t2);
          var n2 = o2.content.timetag || o2.content.data.updateTime;
          this.model.upsert({ conversationId: e2, type: s2, stickTop: t2, updateTime: n2, sortOrder: this.compute.computeSortOrder(t2, n2) });
          var a2 = [this.model.getById(e2)];
          this.triggerConversationChanged(a2);
        }
      });
    }
    updateConversationLocalExtension(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), ue$1(this.core.account, e2), pe$1({ localExtension: { type: "string" } }, { localExtension: t2 }, "", true);
        var i2 = this.model.getById(e2);
        if (!i2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST });
        if (i2.localExtension !== t2) {
          var r2 = Object.assign(Object.assign({}, i2), { localExtension: t2 });
          this.model.upsert(r2), this.triggerConversationChanged([r2]);
        }
      });
    }
    getTotalUnreadCount() {
      return this.checkV2(), this.unread.getTotalUnreadCount() || 0;
    }
    getUnreadCountByIds(e2) {
      this.checkV2(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true);
      var t2 = this.unread.getUnreadCountByIds(e2);
      return Promise.resolve(t2);
    }
    getUnreadCountByFilter(e2) {
      this.checkV2(), this.valiteFilter(e2);
      var t2 = this.unread.getUnreadCountByFilter(e2);
      return Promise.resolve(t2);
    }
    clearTotalUnreadCount() {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.checkLogin();
        var e2 = this.model.getAll();
        yield this.unread.markMultiConversationRead(e2.map((e3) => e3.conversationId)), this.unread.clearUnreadCount(e2);
      });
    }
    clearUnreadCountByIds(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.checkLogin(), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1 } }, { conversationIds: e2 }, "", true);
        var t2 = [], i2 = [], r2 = new RegExp(`^${this.core.account}\\|[1-3]\\|`);
        if (e2.forEach((e3) => {
          r2.test(e3) ? t2.push(e3) : i2.push(e3);
        }), t2.length > 0) {
          var s2 = t2.map((e3) => this.model.getById(e3)).filter((e3) => !!e3);
          yield this.unread.markMultiConversationRead(t2), this.unread.clearUnreadCount(s2);
        }
        return i2.map((e3) => ({ conversationId: e3, error: new oe$1({ code: ie$1.V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST }) }));
      });
    }
    clearUnreadCountByTypes(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.checkLogin(), pe$1({ types: eo$1 }, { types: e2 }, "", true);
        var t2 = this.model.getByOption(0, 1e3, { conversationTypes: e2 });
        yield this.unread.markMultiConversationRead(t2.conversationList.map((e3) => e3.conversationId)), this.unread.clearUnreadCount(t2.conversationList);
      });
    }
    subscribeUnreadCountByFilter(e2) {
      var t2;
      this.checkV2(), this.checkLogin(), this.valiteFilter(e2), 0 === (null === (t2 = e2.conversationTypes) || void 0 === t2 ? void 0 : t2.length) && delete e2.conversationTypes, this.unread.addFilter(e2);
    }
    unsubscribeUnreadCountByFilter(e2) {
      var t2;
      this.checkV2(), this.checkLogin(), this.valiteFilter(e2), 0 === (null === (t2 = e2.conversationTypes) || void 0 === t2 ? void 0 : t2.length) && delete e2.conversationTypes, this.unread.deleteFilter(e2);
    }
    getConversationReadTime(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), ue$1(this.core.account, e2), this.model.getReadTime(e2);
      });
    }
    markConversationRead(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.checkLogin(), ue$1(this.core.account, e2), this.unread.markConversationRead(e2);
      });
    }
    valiteFilter(e2) {
      if (pe$1({ filter: { type: "object", required: true, rules: { conversationTypes: { type: "array", itemType: "number", required: false }, ignoreMuted: { type: "boolean", required: false } } } }, { filter: e2 }, "", true), void 0 === e2.conversationTypes && true !== e2.ignoreMuted)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Filter cannot be empty" } });
    }
    triggerConversationChanged(e2) {
      e2 = e2.map((e3) => this.compute.computeFromExternal(e3)), (e2 = JSON.parse(JSON.stringify(e2))).forEach((e3) => {
        e3.lastMessage || (e3.lastMessage = void 0), delete e3.lastMessageState;
      }), this.emit("onConversationChanged", e2);
    }
    triggerConversationCreated(e2) {
      e2 = this.compute.computeFromExternal(e2), delete (e2 = JSON.parse(JSON.stringify(e2))).lastMessageState, this.emit("onConversationCreated", e2);
    }
  }, "V2NIMLocalConversationService"), Ia.registerService(class extends Xt$1 {
    constructor(e2, t2 = {}) {
      super("V2NIMConversationGroupService", e2), this.config = {}, this.core._registerDep(To$1, "V2NIMConversationService"), "v2" === this.core.options.apiVersion && true === this.core.options.enableV2CloudConversation && (ct({ cmdMap: Co$1, cmdConfig: Ro$1 }), this.setOptions(t2));
    }
    setOptions(e2) {
      this.config = Object.assign(this.config, e2);
    }
    emit(e2, ...t2) {
      var i2 = `${this.name}::emit ${e2.toString()}`;
      if ("onConversationsAddedToGroup" === e2) {
        var r2 = t2[0], s2 = t2[1];
        this.logger.log(`${i2}`, `groupId:${r2}`, `conversations:${s2.map((e3) => e3.conversationId).join(",")}`);
      } else
        this.logger.log(`${i2}`, ...t2);
      return super.emit(e2, ...t2);
    }
    get ifEnabled() {
      return true === this.core.options.enableV2CloudConversation;
    }
    checkEnable() {
      if (true !== this.core.options.enableV2CloudConversation)
        throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "V2CloudConversation is not enabled" } });
    }
    createConversationGroup(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ name: { type: "string", allowEmpty: false } }, { name: e2 }, "", true), pe$1({ serverExtension: { type: "string", required: false } }, { serverExtension: t2 }, "", true), pe$1({ conversationIds: { type: "array", itemType: "string", required: false } }, { conversationIds: i2 }, "", true);
        var r2 = yield this.core.sendCmd("v2ConversationGroupCreate", { tag: { name: e2, serverExtension: t2 || "", conversationIds: i2 && JSON.stringify(i2) } }), s2 = go(Ue$1(r2, "content.data")), o2 = qs(this.core, Ue$1(r2, "content.conversations")), n2 = vo$1(Ue$1(r2, "content.info.failedMap"));
        return this.emit("onConversationGroupCreated", s2), o2.length > 0 && (this.core.V2NIMConversationService.versionCache.compareAndUpdateModel(o2), this.emit("onConversationsAddedToGroup", s2.groupId, o2.map((e3) => this.core.V2NIMConversationService.model.getById(e3.conversationId)).filter((e3) => !!e3))), { group: s2, failedList: n2 };
      });
    }
    deleteConversationGroup(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ groupId: { type: "string", allowEmpty: false } }, { groupId: e2 }, "", true);
        var t2 = Io$1(Ue$1(yield this.core.sendCmd("v2ConversationGroupDelete", { tag: { groupId: e2 } }), "content.info"));
        this.core.V2NIMConversationService.versionCache.compareAndDeleteGroupInModel(t2.deleteVersion, e2), this.emit("onConversationGroupDeleted", e2);
      });
    }
    updateConversationGroup(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkEnable(), this.checkV2(), pe$1({ groupId: { type: "string", allowEmpty: false } }, { groupId: e2 }, "", true), pe$1({ name: { type: "string", required: false } }, { name: t2 }, "", true), pe$1({ serverExtension: { type: "string", required: false } }, { serverExtension: i2 }, "", true), void 0 === t2 && void 0 === i2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER });
        var r2 = go(Ue$1(yield this.core.sendCmd("v2ConversationGroupUpdate", { tag: { groupId: e2, name: t2, serverExtension: i2 } }), "content.data"));
        this.emit("onConversationGroupChanged", r2);
      });
    }
    addConversationsToGroup(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ groupId: { type: "string", allowEmpty: false } }, { groupId: e2 }, "", true), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1, allowEmpty: false } }, { conversationIds: t2 }, "", true);
        var i2 = yield this.core.sendCmd("v2ConversationGroupAddTo", { tag: { groupId: e2, conversationIds: JSON.stringify(t2) } }), r2 = Ue$1(i2, "content.info.failedMap") || "", s2 = [];
        r2 && (s2 = vo$1(r2));
        var o2 = qs(this.core, Ue$1(i2, "content.datas"));
        this.core.V2NIMConversationService.versionCache.compareAndUpdateModel(o2);
        var n2 = o2.map((e3) => this.core.V2NIMConversationService.model.getById(e3.conversationId)).filter((e3) => !!e3);
        return n2.length > 0 && this.emit("onConversationsAddedToGroup", e2, n2), s2;
      });
    }
    removeConversationsFromGroup(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ groupId: { type: "string", allowEmpty: false } }, { groupId: e2 }, "", true), pe$1({ conversationIds: { type: "array", itemType: "string", min: 1, allowEmpty: false } }, { conversationIds: t2 }, "", true);
        var i2 = yield this.core.sendCmd("v2ConversationGroupRemoveFrom", { tag: { groupId: e2, conversationIds: JSON.stringify(t2) } }), r2 = Ue$1(i2, "content.info.failedMap") || "", s2 = [];
        r2 && (s2 = vo$1(r2));
        var o2 = qs(this.core, Ue$1(i2, "content.datas"));
        return this.core.V2NIMConversationService.versionCache.compareAndUpdateModel(o2), this.emit("onConversationsRemovedFromGroup", e2, o2.map((e3) => e3.conversationId)), s2;
      });
    }
    getConversationGroup(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkEnable(), this.checkV2(), pe$1({ groupId: { type: "string", allowEmpty: false } }, { groupId: e2 }, "", true), go(Ue$1(yield this.core.sendCmd("v2ConversationGroupGet", { tag: { groupId: e2 } }), "content.data"));
      });
    }
    getConversationGroupList() {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkEnable(), this.checkV2(), mo(Ue$1(yield this.core.sendCmd("v2ConversationGroupListGet"), "content.datas"));
      });
    }
    getConversationGroupListByIds(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkEnable(), this.checkV2(), pe$1({ groupIds: { type: "array", itemType: "string", min: 1 } }, { groupIds: e2 }, "", true);
        var t2 = mo(Ue$1(yield this.core.sendCmd("v2ConversationGroupsGet", { tag: { groupIds: e2 && JSON.stringify(e2) } }), "content.datas"));
        return e2.map((e3) => t2.filter((t3) => t3.groupId === e3)[0]).filter((e3) => !!e3);
      });
    }
    v2ConversationGroupNotifySyncOnlineHandler(e2) {
      if (this.ifEnabled) {
        var t2 = Io$1(Ue$1(e2, "content.info")), { type: i2, deleteVersion: r2, conversationIds: s2 } = t2, o2 = go(Ue$1(e2, "content.data"));
        if (this.core.logger.log("v2ConversationGroupNotifySyncOnlineHandler", t2, o2), 1 === i2)
          this.emit("onConversationGroupCreated", o2), s2 && s2.length > 0 && this.emit("onConversationsAddedToGroup", o2.groupId, s2.map((e3) => this.core.V2NIMConversationService.model.getById(e3)).filter((e3) => !!e3));
        else if (2 === i2)
          this.emit("onConversationGroupDeleted", o2.groupId), this.core.V2NIMConversationService.versionCache.compareAndDeleteGroupInModel(r2, o2.groupId);
        else if (3 === i2)
          this.emit("onConversationGroupChanged", o2);
        else if (4 === i2) {
          var n2 = s2.map((e3) => this.core.V2NIMConversationService.model.getById(e3)).filter((e3) => !!e3);
          this.emit("onConversationsAddedToGroup", o2.groupId, n2);
        } else
          5 === i2 && this.emit("onConversationsRemovedFromGroup", o2.groupId, s2);
      }
    }
  }, "V2NIMConversationGroupService"), Ia.registerService(class extends Xt$1 {
    constructor(e2) {
      super("V2NIMMessageLogUtil", e2), this.clearHistoryMessageFn = (e3) => {
        var t2 = Ar$1(this.core, e3);
        this.emitClearHistoryMessage([t2]);
      }, this.core = e2, this.service = this.core.V2NIMMessageService, "v2" === this.core.options.apiVersion && (ct({ cmdMap: bo$1, cmdConfig: Lo$1 }), this.setListener());
    }
    setListener() {
      this.core.eventBus.on("forwardReceive/V2NIMMessageLogService/clearHistoryMessage", this.clearHistoryMessageFn);
    }
    getMessageListByRefers(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1($i, { messageRefers: e2 }, "", true), 0 === e2.length)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageListByRefers: messageRefers cannot be an empty array" } });
        var t2 = [], i2 = e2.map((e3) => {
          var i3 = this.service.model.getMessageById(e3.messageClientId);
          return !i3 && e3.messageServerId && "0" !== e3.messageServerId && t2.push(e3), i3;
        }), r2 = [];
        if (t2.length > 0) {
          var s2 = yield this.core.sendCmd("v2GetMessageListByRefers", { tag: t2 });
          r2 = s2.content.msgs;
        }
        return i2.map((t3, i3) => {
          if (t3)
            return t3;
          var s3 = e2[i3], o2 = r2.find((e3) => e3.messageServerId === s3.messageServerId);
          return o2 ? Cr(this.core, o2) : void 0;
        }).filter((e3) => void 0 !== e3).map((e3) => kr(e3, this.core));
      });
    }
    getMessageList(e2) {
      var t2;
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), !this.core.V2NIMConversationIdUtil || !this.core.V2NIMConversationIdUtil.parseConversationType)
          throw new Error('Service "V2NIMConversationService" does not exist');
        pe$1(Bi, e2, "", true), ue$1(this.core.account, e2.conversationId);
        var i2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2.conversationId), r2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2.conversationId), s2 = 1 === i2 ? "v2GetMessageList" : 2 === i2 ? "v2GetTeamMessageList" : "v2GetSuperTeamMessageList", o2 = e2.beginTime || 0, n2 = e2.endTime || 0;
        if (0 !== o2 && 0 !== n2 && o2 > n2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageList: beginTime cannot be greater than endTime" } });
        var a2 = void 0 === e2.direction ? 0 : e2.direction;
        if (e2.anchorMessage) {
          if (0 === e2.direction) {
            if (0 === n2)
              n2 = e2.anchorMessage.createTime;
            else if (n2 !== e2.anchorMessage.createTime)
              throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageList: When providing anchorMessage, when sorting in descending order, endTime does not need to be provided, or endTime should be equal to anchorMessage.createTime" } });
          } else if (0 === o2)
            o2 = e2.anchorMessage.createTime;
          else if (o2 !== e2.anchorMessage.createTime)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getMessageList: When providing anchorMessage, when sorting in ascending order, there is no need to provide beginTime, or beginTime should be equal to anchorMessage.createTime" } });
        }
        var c2 = null === (t2 = e2.anchorMessage) || void 0 === t2 ? void 0 : t2.messageServerId, d2 = yield this.core.sendCmd(s2, { beginTime: o2, endTime: n2, lastMsgId: c2 || 0, limit: e2.limit || 50, direction: a2, msgTypes: e2.messageTypes ? e2.messageTypes.slice() : [], to: r2 }), { content: l2 } = d2, p2 = [];
        return p2 = l2.msgs.map((e3) => Cr(this.core, e3)), c2 && (p2 = p2.filter((e3) => e3.messageServerId !== c2)), this.getMessageListMonkeyPatch(p2, e2).map((e3) => kr(e3, this.core));
      });
    }
    getMessageListMonkeyPatch(e2, t2) {
      var i2 = t2.conversationId, r2 = e2, s2 = r2.reduce((e3, t3) => (e3[t3.messageClientId] = true, e3), {}), o2 = this.service.model.getMessagesByConversationId(i2);
      o2 = o2.sort((e3, i3) => 1 === t2.direction ? e3.createTime - i3.createTime : i3.createTime - e3.createTime);
      var n2 = 0, a2 = t2.beginTime || 0, c2 = t2.endTime || 0;
      t2.anchorMessage && (0 === t2.direction ? c2 = t2.anchorMessage.createTime : a2 = t2.anchorMessage.createTime, n2 = o2.findIndex((e3) => {
        var i3;
        return e3.messageClientId === (null === (i3 = t2.anchorMessage) || void 0 === i3 ? void 0 : i3.messageClientId);
      }), n2 += 1);
      for (var d2 = n2; d2 < o2.length; d2++) {
        var l2 = o2[d2], p2 = !s2[l2.messageClientId], h2 = void 0 === l2.sendingState || 1 === l2.sendingState, u2 = l2.conversationId === i2, m2 = l2.createTime > a2 && (l2.createTime < c2 || 0 === c2), g2 = !t2.messageTypes || t2.messageTypes.includes(l2.messageType);
        p2 && h2 && u2 && m2 && g2 && r2.push(o2[d2]);
      }
      return (r2 = r2.sort((e3, i3) => 1 === t2.direction ? e3.createTime - i3.createTime : i3.createTime - e3.createTime)).slice(0, t2.limit || 50);
    }
    clearHistoryMessage(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(qi, e2, "", true), ue$1(this.core.account, e2.conversationId);
        var { conversationId: t2, deleteRoam: i2, onlineSync: r2, serverExtension: s2 } = e2, o2 = this.core.V2NIMConversationIdUtil.parseConversationType(t2), n2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(t2), a2 = { deleteRoam: i2, onlineSync: r2, serverExtension: s2, conversationType: o2 };
        1 === o2 ? a2.receiverId = n2 : a2.teamId = n2;
        var c2 = this.core.timeOrigin.getNTPTime();
        c2 = (yield this.core.sendCmd("v2ClearHistoryMessage", { tag: a2 })).content.timetag, this.core.eventBus.emit("forwardSend/V2NIMMessageLogService/clearHistoryMessage", Object.assign(Object.assign({}, a2), { deleteTime: c2 })), this.emitClearHistoryMessage([{ deleteTime: c2, serverExtension: s2, conversationId: t2 }]);
      });
    }
    syncClearHistoryMessageHandler(e2) {
      var t2 = e2.content.data.map((e3) => Ar$1(this.core, e3));
      this.emitClearHistoryMessage(t2);
    }
    onClearHistoryMessageHandler(e2) {
      var t2 = Ar$1(this.core, e2.content.data);
      this.emitClearHistoryMessage([t2]);
    }
    emitClearHistoryMessage(e2) {
      e2.forEach((e3) => {
        this.service.model.deleteMessages(e3.conversationId, e3.deleteTime);
      }), this.core.eventBus.emit("V2NIMMessageLogUtil/onClearHistoryNotifications", e2), this.service.emit("onClearHistoryNotifications", e2);
    }
  }, "V2NIMMessageLogUtil"), Ia.registerService(class extends Xt$1 {
    constructor(e2) {
      super("V2NIMMessageExtendUtil", e2), this.core = e2, "v2" === this.core.options.apiVersion && ct({ cmdMap: Do, cmdConfig: Go });
    }
    pinMessage(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(ji, e2, "message", true), pe$1(Yi, { serverExtension: t2 }, "", true);
        var i2 = yield this.core.sendCmd("v2PinMessage", { msg: e2, msgPin: { serverExtension: t2 } });
        this.emitPinNotification({ pinState: 1, message: e2, serverExtension: t2, createTime: i2.content.timetag, updateTime: i2.content.timetag, operatorId: this.core.account });
      });
    }
    unpinMessage(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(ji, e2, "messageRefer", true), pe$1(Yi, { serverExtension: t2 }, "", true);
        var i2 = yield this.core.sendCmd("v2UnpinMessage", { msg: e2, msgPin: { serverExtension: t2 } });
        this.emitPinNotification({ pinState: 0, message: e2, serverExtension: t2, updateTime: i2.content.timetag, operatorId: this.core.account });
      });
    }
    updatePinMessage(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(ji, e2, "message", true), pe$1(Yi, { serverExtension: t2 }, "", true);
        var i2 = yield this.core.sendCmd("v2UpdatePinMessage", { msg: e2, msgPin: { serverExtension: t2 } });
        this.emitPinNotification({ pinState: 2, message: e2, serverExtension: t2, updateTime: i2.content.timetag, operatorId: this.core.account });
      });
    }
    getPinnedMessageList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), !this.core.V2NIMConversationIdUtil || !this.core.V2NIMConversationIdUtil.parseConversationType)
          throw new Error('Service "V2NIMConversationService" does not exist');
        ue$1(this.core.account, e2);
        var t2 = this.core.V2NIMConversationIdUtil.convertToV1ConversationId(e2);
        return t2 = t2.replace("superTeam", "super_team"), (yield this.core.sendCmd("v2GetPinMessageList", { tag: { conversationId: t2, timetag: 0 } })).content.data.map((e3) => Object.assign(Object.assign({}, e3), { messageRefer: Object.assign(Object.assign({}, e3.messageRefer), { conversationId: this.core.V2NIMConversationIdUtil.messageConversationId(e3.messageRefer) }) })).sort((e3, t3) => t3.updateTime - e3.updateTime);
      });
    }
    addQuickComment(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(zi$1, { message: e2, index: t2, serverExtension: i2, pushConfig: r2 }, "", true);
        var s2 = yield this.core.sendCmd("v2AddQuickComment", { message: e2, quickComment: { index: t2, serverExtension: i2, pushConfig: r2 } }), o2 = { operationType: 1, quickComment: { messageRefer: Or(this.core, e2), createTime: s2.content.timetag, index: t2, serverExtension: i2 || "", operatorId: this.core.account } };
        this.core.V2NIMMessageService.emit("onMessageQuickCommentNotification", o2);
      });
    }
    removeQuickComment(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(ji, e2, "messageRefer", true), pe$1({ index: { type: "number", min: 1 } }, { index: t2 }, "", true), pe$1({ serverExtension: { type: "string", required: false } }, { serverExtension: i2 }, "", true);
        var r2 = yield this.core.sendCmd("v2RemoveQuickComment", { message: e2, quickComment: { index: t2, serverExtension: i2 } }), s2 = { operationType: 2, quickComment: { messageRefer: Or(this.core, e2), createTime: r2.content.timetag, index: t2, serverExtension: i2 || "", operatorId: this.core.account } };
        this.core.V2NIMMessageService.emit("onMessageQuickCommentNotification", s2);
      });
    }
    getQuickCommentList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xi, { messages: e2 }, "", true);
        var t2 = {};
        return (yield this.core.sendCmd("v2GetQuickComment", { tag: e2.map((e3) => ({ messageRefer: e3 })) })).content.data.forEach((e3) => {
          var i2, r2;
          try {
            if (!e3.detail)
              return void (t2[i2 = e3.messageRefer.messageClientId] || (t2[i2] = []));
            var s2 = JSON.parse(e3.detail);
            t2[r2 = e3.messageRefer.messageClientId] || (t2[r2] = []), s2.forEach((i3) => {
              t2[e3.messageRefer.messageClientId].push({ messageRefer: Object.assign(Object.assign({}, e3.messageRefer), { conversationId: this.core.V2NIMConversationIdUtil.messageConversationId(e3.messageRefer) }), operatorId: i3[1], index: parseInt(i3[2]), createTime: parseInt(i3[3]), serverExtension: i3[4] });
            });
          } catch (t3) {
            this.logger.error("getQuickCommentList JSON Parse Error", e3.detail, t3);
          }
        }), t2;
      });
    }
    voiceToText(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1(Ji, e2, "", true), !e2.voicePath && !e2.voiceUrl && !e2.file)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "voiceToText: voicePath、voiceUrl、file cannot be empty at the same time" } });
        var { voicePath: t2, file: i2, mimeType: r2, sampleRate: s2, duration: o2, sceneName: n2 } = e2, a2 = n2 ? this.core.V2NIMStorageService.getStorageScene(n2) : null, c2 = e2.voiceUrl;
        if (!c2) {
          var d2 = {};
          i2 ? d2.file = i2 : 0 === (null == t2 ? void 0 : t2.indexOf("nim-external")) ? d2.fileInput = t2 : d2.filePath = t2, c2 = (yield this.core.cloudStorage.uploadFile(Object.assign({ type: "audio", nosScenes: a2 ? a2.sceneName : void 0, nosSurvivalTime: a2 ? a2.expireTime : void 0 }, d2))).url;
        }
        return (yield this.core.sendCmd("v2VoiceToText", { tag: { voiceUrl: c2, mimeType: r2, sampleRate: s2, duration: o2 } }, { timeout: 3e4 })).content.data;
      });
    }
    onPinMessageHandler(e2) {
      return this.pinMessageChangeHandler(e2, 1);
    }
    onUnpinMessageHandler(e2) {
      return this.pinMessageChangeHandler(e2, 0);
    }
    onUpdatePinMessageHandler(e2) {
      return this.pinMessageChangeHandler(e2, 2);
    }
    pinMessageChangeHandler(e2, t2) {
      var i2 = e2.content.msg, r2 = e2.content.pinInfo;
      i2.conversationId = this.core.V2NIMConversationIdUtil.messageConversationId(i2), this.emitPinNotification({ pinState: t2, message: i2, serverExtension: r2.serverExtension, createTime: r2.createTime, updateTime: r2.updateTime, operatorId: r2.accid });
    }
    emitPinNotification(e2) {
      var t2 = { pinState: e2.pinState, pin: Object.assign(Object.assign({ serverExtension: e2.serverExtension || "", operatorId: e2.operatorId }, e2.createTime ? { createTime: e2.createTime } : {}), { updateTime: e2.updateTime, messageRefer: Or(this.core, e2.message) }) };
      this.core.V2NIMMessageService.emit("onMessagePinNotification", t2);
    }
    onAddQuickCommentHandler(e2) {
      return this.onQuickCommentNotificationHandler(e2, 1);
    }
    onRemoveQuickCommentHandler(e2) {
      return this.onQuickCommentNotificationHandler(e2, 2);
    }
    onQuickCommentNotificationHandler(e2, t2) {
      var i2 = { operationType: t2, quickComment: Object.assign({ messageRefer: Object.assign(Object.assign({}, e2.content.message), { conversationId: this.core.V2NIMConversationIdUtil.messageConversationId(e2.content.message) }) }, e2.content.quickComment) };
      this.core.V2NIMMessageService.emit("onMessageQuickCommentNotification", i2);
    }
    addCollection(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), pe$1(Qi, { params: e2 }, "", true), (yield this.core.sendCmd("v2AddCollection", { tag: e2 })).content.data;
      });
    }
    removeCollections(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), pe$1(Zi, { collections: e2 }, "", true), (yield this.core.sendCmd("v2RemoveCollections", { tag: e2 })).content.data;
      });
    }
    updateCollectionExtension(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), pe$1(er, { collection: e2, serverExtension: t2 }, "", true), (yield this.core.sendCmd("v2UpdateCollectionExtension", { tag: Object.assign(Object.assign({}, e2), { serverExtension: t2 }) })).content.data;
      });
    }
    getCollectionListByOption(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), pe$1(tr, e2, "", true), (yield this.getCollectionListExByOption(e2)).collectionList;
      });
    }
    getCollectionListExByOption(e2) {
      var t2, i2;
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(tr, e2, "", true);
        var r2 = e2.beginTime || 0, s2 = e2.endTime || 0, o2 = void 0 === e2.direction ? 0 : e2.direction;
        if (void 0 !== (null === (t2 = e2.anchorCollection) || void 0 === t2 ? void 0 : t2.collectionId)) {
          if (0 === e2.direction) {
            if (0 === s2)
              s2 = e2.anchorCollection.createTime;
            else if (s2 !== e2.anchorCollection.createTime)
              throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getCollectionListExByOption: When providing anchorCollection, when sorting in descending order, endTime does not need to be provided, or endTime should be equal to anchorCollection.createTime" } });
          } else if (0 === r2)
            r2 = e2.anchorCollection.createTime;
          else if (r2 !== e2.anchorCollection.createTime)
            throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getCollectionListExByOption: When providing anchorCollection, when sorting in ascending order, there is no need to provide beginTime, or beginTime should be equal to anchorCollection.createTime" } });
        }
        if (0 !== r2 && 0 !== s2 && r2 >= s2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getCollectionListExByOption: beginTime cannot be greater than endTime" } });
        var n2 = { beginTime: r2, endTime: s2, direction: o2, limit: e2.limit, collectionType: e2.collectionType, excludeId: (null === (i2 = e2.anchorCollection) || void 0 === i2 ? void 0 : i2.collectionId) ? e2.anchorCollection.collectionId : 0 };
        n2.collectionType || delete n2.collectionType;
        var a2 = yield this.core.sendCmd("v2GetCollectionListByOption", { tag: n2 });
        return { totalCount: a2.content.total, collectionList: a2.content.data };
      });
    }
    searchCloudMessages(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(ir, e2, "", true);
        var t2 = e2.beginTime || 0, i2 = e2.endTime || 0;
        if (0 !== t2 && 0 !== i2 && t2 > i2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "searchCloudMessages: beginTime cannot be greater than endTime" } });
        var r2 = void 0 === e2.sortOrder ? 0 : e2.sortOrder, s2 = e2.conversationLimit || 0, o2 = e2.messageLimit || 10, n2 = s2 > 0 ? "v2SearchCloudMessagesGroupByConversation" : "v2SearchCloudMessages";
        return (yield this.core.sendCmd(n2, { tag: Object.assign(Object.assign({}, e2), { beginTime: t2, endTime: i2, sortOrder: r2, conversationLimit: s2, messageLimit: o2 }) })).content.data.map((e3) => Cr(this.core, e3));
      });
    }
    getThreadMessageList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (pe$1(dr$1, e2, "getThreadMessageList", true), e2.beginTime = e2.beginTime || 0, e2.endTime && e2.beginTime > e2.endTime)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "getThreadMessageList: beginTime cannot be greater than endTime" } });
        var t2 = yield this.core.sendCmd("v2GetThreadMessageList", { messageRefer: e2.messageRefer, tag: { beginTime: e2.beginTime, endTime: e2.endTime, limit: e2.limit, reverse: 1 === e2.direction ? 1 : 0, excludeMessageServerId: e2.excludeMessageServerId } }), { message: i2, replyResult: r2, replyList: s2 } = t2.content;
        return { message: Cr(this.core, i2), timestamp: r2.timestamp, replyCount: r2.total, replyList: s2.map((e3) => Cr(this.core, e3)) };
      });
    }
  }, "V2NIMMessageExtendUtil"), Ia.registerService(ys, "V2NIMStorageService"), Ia.registerService(class extends Xt$1 {
    constructor(e2) {
      super("V2NIMTeamService", e2), this.core._registerDep(Oi, "V2NIMConversationIdUtil"), this.model = new mn(), this.memberModel = new gn(), this.notificationModel = new fn(), this.notification = new vn(e2, this), this.event = new yn(e2, this), this.handler = new In(e2, this), "v2" === this.core.options.apiVersion && (ct({ cmdMap: ur, cmdConfig: _r }), this.setListener());
    }
    setListener() {
      this.event.setListener();
    }
    reset() {
      this.model.reset(), this.memberModel.reset(), this.notificationModel.reset();
    }
    emit(e2, ...t2) {
      return this.event.beforeEmit(e2, ...t2), super.emit(e2, ...t2);
    }
    createTeam(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1({ createTeamParams: qo }, { createTeamParams: e2 }, "", true), pe$1({ inviteeAccountIds: Object.assign(Object.assign({}, Yo), { min: 0, required: false }) }, { inviteeAccountIds: t2 }, "", true), pe$1({ antispamConfig: zo }, { antispamConfig: r2 }, "", true);
        var s2 = 2 === e2.teamType ? "v2SuperTeamCreate" : "v2TeamCreate", o2 = yield this.core.sendCmd(s2, { team: e2, inviteeAccountIds: t2 || [], postscript: i2 || "", antispamConfig: r2 }), n2 = o2.content.team;
        return this.model.upsert(n2), this.getTeamMemberListByIds(n2.teamId, n2.teamType, [this.core.account]).catch((e3) => {
          this.core.logger.error("Get Member error after createTeam", e3);
        }), this.emit("onTeamCreated", n2), { team: n2, failedList: o2.content.failedList };
      });
    }
    updateTeamInfo(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1(rn$1, { updateTeamInfoParams: i2 }, "", true), pe$1({ antispamConfig: zo }, { antispamConfig: r2 }, "", true);
        var s2 = Object.assign({ teamId: e2, teamType: t2 }, i2), o2 = 2 === t2 ? "v2SuperTeamUpdateInfo" : "v2TeamUpdateInfo";
        yield this.core.sendCmd(o2, { team: s2, antispamConfig: r2 }), this.model.upsert(s2);
      });
    }
    leaveTeam(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true);
        var i2 = 2 === t2 ? "v2SuperTeamLeave" : "v2TeamLeave";
        yield this.core.sendCmd(i2, { teamId: e2 }), this.model.deleteById(e2, t2);
      });
    }
    getTeamInfo(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true);
        var i2 = 2 === t2 ? "v2SuperTeamGetInfo" : "v2TeamGetInfo", r2 = this.model.getById(e2, t2, false);
        if (r2)
          return r2;
        var s2 = (yield this.core.sendCmd(i2, { teamId: e2 })).content.team;
        return this.model.upsert(s2), s2;
      });
    }
    getJoinedTeamList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(en, { teamTypes: e2 }, "", true), this.core.V2NIMLoginService.checkIllegalState(), e2 && 0 !== e2.length || (e2 = [1, 2]);
        var t2 = [];
        return e2.forEach((e3) => {
          t2 = t2.concat(this.model.getAll(e3));
        }), t2.sort((e3, t3) => e3.createTime - t3.createTime);
      });
    }
    getJoinedTeamCount(e2) {
      this.checkV2(), pe$1(en, { teamTypes: e2 }, "", true), this.core.V2NIMLoginService.checkIllegalState(), e2 && 0 !== e2.length || (e2 = [1, 2]);
      var t2 = 0;
      return e2.forEach((e3) => {
        t2 += this.model.count(e3);
      }), t2;
    }
    getTeamInfoByIds(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Qo, { teamIds: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true);
        var i2 = 2 === t2 ? "v2SuperTeamGetByIds" : "v2TeamGetByIds", r2 = e2.map((e3) => this.model.getById(e3, t2, false)), s2 = e2.filter((e3, t3) => !r2[t3]);
        if (0 === s2.length)
          return r2;
        var o2 = (yield this.core.sendCmd(i2, { teamIds: s2 })).content.teams;
        return r2.map((t3, i3) => {
          if (t3)
            return t3;
          var r3 = e2[i3], s3 = o2.find((e3) => e3.teamId === r3);
          return s3 && this.model.upsert(s3), s3;
        }).filter((e3) => !!e3);
      });
    }
    dismissTeam(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true);
        var i2 = 2 === t2 ? "v2SuperTeamDismiss" : "v2TeamDismiss";
        yield this.core.sendCmd(i2, { teamId: e2 });
      });
    }
    inviteMember(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ inviteeAccountIds: Yo }, { inviteeAccountIds: i2 }, "", true), pe$1({ postscript: Object.assign(Object.assign({}, Wo), { required: false }) }, { postscript: r2 }, "", true);
        var s2 = 2 === t2 ? "v2SuperTeamInviteMembers" : "v2TeamInviteMembers";
        return (yield this.core.sendCmd(s2, { teamId: e2, accounts: i2, ps: r2 || "" })).content.abortedAccidList;
      });
    }
    inviteMemberEx(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1(tn$1, { inviteeParams: i2 }, "", true);
        var r2 = 2 === t2 ? "v2SuperTeamInviteMembers" : "v2TeamInviteMembers";
        return (yield this.core.sendCmd(r2, { teamId: e2, accounts: i2.inviteeAccountIds, ps: i2.postscript || "", attach: i2.serverExtension })).content.abortedAccidList;
      });
    }
    acceptInvitation(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(cn, e2, "invitationInfo", true), pe$1(ln, e2, "invitationInfo", true);
        var { teamType: t2, teamId: i2, operatorAccountId: r2 } = e2, s2 = 2 === t2 ? "v2SuperTeamAcceptInvitation" : "v2TeamAcceptInvitation";
        try {
          var o2 = yield this.core.sendCmd(s2, { teamId: i2, from: r2 });
          return this.notification.updateTeamActionStatus(e2, 1), o2.content.team;
        } catch (t3) {
          var n2 = t3;
          throw this.notification.checkIfExpired(n2.code) && this.notification.updateTeamActionStatus(e2, 3), t3;
        }
      });
    }
    rejectInvitation(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(cn, e2, "invitationInfo", true), pe$1(ln, e2, "invitationInfo", true), pe$1({ postscript: Object.assign(Object.assign({}, Wo), { required: false }) }, { postscript: t2 }, "", true);
        var { teamType: i2, teamId: r2, operatorAccountId: s2 } = e2, o2 = 2 === i2 ? "v2SuperTeamRejectInvite" : "v2TeamRejectInvite";
        try {
          yield this.core.sendCmd(o2, { teamId: r2, from: s2, ps: t2 || "" }), this.notification.updateTeamActionStatus(e2, 2);
        } catch (t3) {
          var n2 = t3;
          throw this.notification.checkIfExpired(n2.code) && this.notification.updateTeamActionStatus(e2, 3), t3;
        }
      });
    }
    kickMember(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ memberAccountIds: Yo }, { memberAccountIds: i2 }, "", true);
        var r2 = 2 === t2 ? "v2SuperTeamKickMembers" : "v2TeamKickMembers";
        yield this.core.sendCmd(r2, { teamId: e2, accounts: i2 });
      });
    }
    applyJoinTeam(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true);
        var r2 = 2 === t2 ? "v2SuperTeamApplyToJoin" : "v2TeamApplyToJoin", s2 = yield this.core.sendCmd(r2, { teamId: e2, ps: i2 || "" }), o2 = s2.content.team, n2 = s2.content.isInTeam;
        return o2.isValidTeam = !!o2.isValidTeam && !!n2, o2;
      });
    }
    acceptJoinApplication(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(cn, e2, "applicationInfo", true), pe$1(pn$1, e2, "applicationInfo", true);
        var { teamType: t2, teamId: i2, operatorAccountId: r2 } = e2, s2 = 2 === t2 ? "v2SuperTeamAcceptJoinApplication" : "v2TeamAcceptJoinApplication";
        try {
          yield this.core.sendCmd(s2, { teamId: i2, from: r2 }), this.notification.updateTeamActionStatus(e2, 1);
        } catch (t3) {
          var o2 = t3;
          throw this.notification.checkIfExpired(o2.code) && this.notification.updateTeamActionStatus(e2, 3), t3;
        }
      });
    }
    rejectJoinApplication(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(cn, e2, "applicationInfo", true), pe$1(pn$1, e2, "applicationInfo", true), pe$1({ postscript: Object.assign(Object.assign({}, Wo), { required: false }) }, { postscript: t2 }, "", true);
        var { teamType: i2, teamId: r2, operatorAccountId: s2 } = e2, o2 = 2 === i2 ? "v2SuperTeamRejectJoinApplication" : "v2TeamRejectJoinApplication";
        try {
          yield this.core.sendCmd(o2, { teamId: r2, from: s2, ps: t2 || "" }), this.notification.updateTeamActionStatus(e2, 2);
        } catch (t3) {
          var n2 = t3;
          throw this.notification.checkIfExpired(n2.code) && this.notification.updateTeamActionStatus(e2, 3), t3;
        }
      });
    }
    updateTeamMemberRole(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ memberAccountIds: Yo }, { memberAccountIds: i2 }, "", true), pe$1({ memberRole: sn }, { memberRole: r2 }, "", true);
        var s2 = 2 === r2 ? "AddManagers" : "RemoveManagers";
        s2 = 2 === t2 ? `v2SuperTeam${s2}` : `v2Team${s2}`, yield this.core.sendCmd(s2, { teamId: e2, accounts: Wt(i2) });
      });
    }
    transferTeamOwner(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ accountId: Jo }, { accountId: i2 }, "", true), pe$1({ leave: { type: "boolean", required: false } }, { leave: r2 }, "", true);
        var s2 = this.model.getById(e2, t2);
        if (s2 && s2.ownerAccountId === i2)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Transfer to self is not allowed" } });
        var o2 = 2 === t2 ? "v2SuperTeamTransferOwner" : "v2TeamTransferOwner";
        yield this.core.sendCmd(o2, { teamId: e2, account: i2, leave: r2 || false });
      });
    }
    updateSelfTeamMemberInfo(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1(on, { memberInfoParams: i2 }, "", true), void 0 === i2.teamNick && void 0 === i2.serverExtension)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER });
        var r2 = 2 === t2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", s2 = Object.assign(Object.assign({}, i2), { teamId: e2, accountId: this.core.account });
        yield this.core.sendCmd(r2, { teamMember: s2 }), yield this.notification.updateTeamMemberRole(e2, t2, [this.core.account], s2);
        var o2 = this.memberModel.getById(e2, t2, this.core.account);
        if (this.core.V2NIMSettingService.name && this.core.V2NIMConversationIdUtil.name) {
          var n2 = 1 === t2 ? this.core.V2NIMConversationIdUtil.teamConversationId(e2) : this.core.V2NIMConversationIdUtil.superTeamConversationId(e2), a2 = this.core.V2NIMSettingService.getConversationMuteStatus(n2);
          this.core.eventBus.emit("V2NIMSettingService/setMute", n2, a2);
        }
        this.core.eventBus.emit("forwardSend/V2NIMTeamService/updateSelfTeamMemberInfo", o2);
      });
    }
    updateTeamMemberNick(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ accountId: Jo }, { accountId: i2 }, "", true), pe$1({ nick: Wo }, { nick: r2 }, "", true), i2 === this.core.account)
          return this.updateSelfTeamMemberInfo(e2, t2, { teamNick: r2 });
        var s2 = 2 === t2 ? "v2SuperTeamUpdateMember" : "v2TeamUpdateMember";
        yield this.core.sendCmd(s2, { teamMember: { teamNick: r2, teamId: e2, accountId: i2 } });
      });
    }
    setTeamChatBannedMode(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1(nn$1, { chatBannedMode: i2 }, "", true);
        var r2 = 2 === t2 ? "v2SuperTeamSetChatBannedMode" : "v2TeamSetChatBannedMode";
        yield this.core.sendCmd(r2, { teamId: e2, chatBannedMode: i2 }), this.model.upsert({ teamId: e2, teamType: t2, chatBannedMode: i2 });
      });
    }
    setTeamMemberChatBannedStatus(e2, t2, i2, r2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ accountId: Jo }, { accountId: i2 }, "", true), pe$1({ chatBanned: Ko }, { chatBanned: r2 }, "", true);
        var s2 = 2 === t2 ? "v2SuperTeamMemberSetChatBannedStatus" : "v2TeamMemberSetChatBannedStatus";
        yield this.core.sendCmd(s2, { teamId: e2, accountId: 2 === t2 ? [i2] : i2, chatBanned: r2 ? 1 : 0 });
      });
    }
    getTeamMemberList(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1(an, { queryOption: i2 }, "", true);
        var r2 = void 0 === i2.direction ? 0 : i2.direction;
        r2 = 0 === r2 ? 1 : 0;
        var s2 = yield this.core.sendCmd("v2TeamMemberGetList", { tag: Object.assign(Object.assign({ teamId: e2, teamType: t2, onlyChatBanned: false, nextToken: "", limit: 100 }, i2), { direction: r2 }) }), o2 = s2.content.datas, n2 = Ue$1(s2, "raw.r.0");
        return 2 === t2 && n2 && n2.map && (o2 = n2.map((e3) => at(e3, dt(yr$1)))), { nextToken: s2.content.pageInfo.nextToken || "", finished: !+s2.content.pageInfo.hasMore, memberList: Sr$1(o2, t2) };
      });
    }
    getTeamMemberListByIds(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ accountIds: Yo }, { accountIds: i2 }, "", true);
        for (var r2 = 2 === t2 ? "v2SuperTeamMemberGetListByIds" : "v2TeamMemberGetListByIds", s2 = i2.map((t3) => `${e2}|${t3}`), o2 = [], n2 = 0; n2 < s2.length; n2 += 20) {
          var a2 = Sr$1((yield this.core.sendCmd(r2, { tag: s2.slice(n2, n2 + 20) })).content.datas, t2);
          o2 = o2.concat(a2), a2.forEach((e3) => this.memberModel.upsert(e3));
        }
        return o2;
      });
    }
    getTeamMemberInvitor(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1({ accountIds: Yo }, { accountIds: i2 }, "", true);
        var r2 = 2 === t2 ? "v2SuperTeamGetMemberInvitor" : "v2TeamGetMemberInvitor";
        return (yield this.core.sendCmd(r2, { teamId: e2, accounts: i2 })).content.accountsMap;
      });
    }
    searchTeamByKeyword(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.checkLogin(), pe$1({ keyword: Jo }, { keyword: e2 }, "", true), this.model.searchTeamByKeyword(e2);
      });
    }
    addTeamMembersFollow(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(un, { teamId: e2, teamType: t2, accountIds: i2 }, "", true);
        var r2 = 2 === t2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", [s2] = yield this.getTeamMemberListByIds(e2, t2, [this.core.account]), o2 = (yield this.core.sendCmd(r2, { teamMember: { teamId: e2 }, specialFollowUpdate: { accountIds: i2, operation: 1 } })).content.data;
        Object.keys(o2).length > 0 && (Object.assign(s2, o2), this.emit("onTeamMemberInfoUpdated", [s2]), this.memberModel.upsert(s2));
      });
    }
    removeTeamMembersFollow(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(un, { teamId: e2, teamType: t2, accountIds: i2 }, "", true);
        var [r2] = yield this.getTeamMemberListByIds(e2, t2, [this.core.account]), s2 = 2 === t2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", o2 = (yield this.core.sendCmd(s2, { teamMember: { teamId: e2 }, specialFollowUpdate: { accountIds: i2, operation: 0 } })).content.data;
        Object.keys(o2).length > 0 && (Object.assign(r2, o2), this.emit("onTeamMemberInfoUpdated", [r2]), this.memberModel.upsert(r2));
      });
    }
    getTeamJoinActionInfoList(e2) {
      return this.checkV2(), pe$1(hn$1, e2, "option", true), this.core.V2NIMLoginService.checkIllegalState(), Promise.resolve(this.notificationModel.getByOption(e2));
    }
    clearAllTeamJoinActionInfo() {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.notificationModel.reset();
      });
    }
    deleteTeamJoinActionInfo(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), pe$1(cn, e2, "", true), pe$1(dn, e2, "", true), pe$1({ timestamp: { type: "number", min: 1 } }, e2, "", true), this.notificationModel.delete(e2);
      });
    }
  }, "V2NIMTeamService"), Ia.registerService(Rn, "V2NIMUserService"), Ia.registerService(class extends Xt$1 {
    constructor(e2) {
      super("V2NIMFriendService", e2), this.notification = new xn(this.core, this), this.model = new Fn(), this.core._registerDep(Rn, "V2NIMUserService"), "v2" === this.core.options.apiVersion && (ct({ cmdMap: bn, cmdConfig: Vn }), this.setListener());
    }
    reset() {
      this.model.reset();
    }
    setListener() {
      this.core.eventBus.on("V2NIMFriendService/sysNotification", this.notification.processSysNotification.bind(this.notification)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/addFriend", this.handleAddFriend.bind(this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/deleteFriend", this.handleDeleteFriend.bind(this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/setFriendInfo", this.handleSetFriendInfo.bind(this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/acceptAddApplication", this.handlePassFriendApply.bind(this)), this.core.eventBus.on("forwardReceive/V2NIMFriendService/rejectAddApplication", this.handleRejectFriendApply.bind(this));
    }
    emit(e2, ...t2) {
      var i2 = `${this.name}::emit ${e2.toString()}`;
      if ("onFriendAdded" === e2 || "onFriendInfoChanged" === e2) {
        var r2 = t2[0];
        this.logger.log(`${i2}`, `${r2.accountId};updateTime:${r2.updateTime}`);
      } else
        this.logger.log(`${i2}`, ...t2);
      return super.emit(e2, ...t2);
    }
    get hasUserService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMUserService) || void 0 === e2 ? void 0 : e2.name);
    }
    addFriend(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), e2 === this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot add yourself" } });
        pe$1(Ln, { accountId: e2, params: t2 }, "", true), yield this.core.sendCmd("v2AddFriend", { accountId: e2, verifyType: t2.addMode, postscript: t2.postscript || "" }), 1 === t2.addMode && (yield this.handleAddFriend(e2));
      });
    }
    deleteFriend(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), e2 === this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot delete yourself" } });
        pe$1(Pn, { accountId: e2, params: t2 }, "", true), yield this.core.sendCmd("v2DeleteFriend", { accountId: e2, params: t2 }), t2.deleteAlias && this.model.upsertFriend(e2, { alias: "" }), this.handleDeleteFriend(e2);
      });
    }
    acceptAddApplication(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(wn, e2, "", true);
        try {
          yield this.core.sendCmd("v2AddFriend", { accountId: e2.applicantAccountId, verifyType: 3, postscript: "" }), this.handlePassFriendApply(e2.applicantAccountId);
        } catch (t2) {
          throw this.handlePassFriendApply(e2.applicantAccountId, t2), t2;
        }
      });
    }
    rejectAddApplication(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1(wn, e2, "", true);
        try {
          yield this.core.sendCmd("v2AddFriend", { accountId: e2.applicantAccountId, verifyType: 4, postscript: t2 || "" }), this.handleRejectFriendApply({ applicantAccountId: e2.applicantAccountId, recipientAccountId: e2.recipientAccountId, operatorAccountId: this.core.account, postscript: t2 || "", timestamp: this.core.timeOrigin.getNTPTime(), read: true, status: 2 });
        } catch (i2) {
          throw this.handleRejectFriendApply({ applicantAccountId: e2.applicantAccountId, recipientAccountId: e2.recipientAccountId, operatorAccountId: this.core.account, postscript: t2 || "", timestamp: this.core.timeOrigin.getNTPTime(), read: true, status: 3 }, i2), i2;
        }
      });
    }
    setFriendInfo(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1(Dn, { accountId: e2, params: t2 }, "", true), e2 === this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "Cannot set yourself" } });
        yield this.core.sendCmd("v2SetFriendInfo", { tag: Object.assign({ accountId: e2 }, t2) }), this.handleSetFriendInfo(e2, t2);
      });
    }
    getFriendList() {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.computedFields(this.model.getFriendList());
      });
    }
    getFriendByIds(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), pe$1({ accountIds: { type: "array", itemType: "string", required: true, min: 1 } }, { accountIds: e2 }, "", true), this.computedFields(this.model.getFriendByIds(e2));
      });
    }
    checkFriend(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), pe$1({ accountIds: { type: "array", itemType: "string", required: true, min: 1 } }, { accountIds: e2 }, "", true);
        var t2 = {};
        return e2.forEach((e3) => {
          t2[e3] = !!this.model.getFriend(e3);
        }), t2;
      });
    }
    getAddApplicationList(e2) {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), pe$1(Un, e2, "", true), this.model.getAddApplicationList(e2);
      });
    }
    setAddApplicationRead() {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.model.setAddApplicationRead();
      });
    }
    getAddApplicationUnreadCount() {
      return ve$1(this, void 0, void 0, function* () {
        return this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.model.getAddApplicationUnreadCount();
      });
    }
    clearAllAddApplication() {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), this.model.clearApplicationList();
      });
    }
    deleteAddApplication(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), pe$1(wn, e2, "", true), e2.applicantAccountId !== this.core.account && e2.recipientAccountId !== this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "The applicant and recipient are not youself" } });
        this.model.deleteApplication(e2);
      });
    }
    searchFriendByOption(e2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), this.core.V2NIMLoginService.checkIllegalState(), pe$1({ keyword: { type: "string", allowEmpty: false }, searchAccountId: { type: "boolean", required: false } }, e2, "", true), void 0 !== e2.searchAlias && !e2.searchAlias && !e2.searchAccountId)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "searchAlias and searchAccountId cannot be false at the same time" } });
        return this.computedFields(this.model.getFriendListBySearchOption(e2));
      });
    }
    v2OnAddFriendHandler(e2) {
      var { accountId: t2, verifyType: i2, postscript: r2 } = e2.content;
      if (1 === i2)
        this.handleAddFriend(t2);
      else if (2 === i2) {
        var s2 = { applicantAccountId: this.core.account, recipientAccountId: t2, operatorAccountId: this.core.account, postscript: r2, timestamp: this.core.timeOrigin.getNTPTime(), status: 0, read: false };
        this.handleApplyFriend(s2);
      } else if (3 === i2)
        this.handlePassFriendApply(t2);
      else if (4 === i2) {
        var o2 = { applicantAccountId: t2, recipientAccountId: this.core.account, operatorAccountId: this.core.account, postscript: r2, timestamp: this.core.timeOrigin.getNTPTime(), status: 2, read: true };
        this.handleRejectFriendApply(o2);
      }
    }
    v2OnDeleteFriendHandler(e2) {
      var { accountId: t2 } = e2.content;
      this.handleDeleteFriend(t2);
    }
    v2OnUpdateFriendInfoHandler(e2) {
      var { data: t2 } = e2.content, i2 = this.model.upsertFriend(t2.accountId, t2);
      this.emit("onFriendInfoChanged", this.computedField(i2));
    }
    v2SyncFriendListHandler(e2) {
      var { friends: t2, timetag: i2 } = e2.content;
      this.model.setFriendTimetag(i2), t2.forEach((e3) => {
        e3.serverExtension || (e3.serverExtension = ""), e3.customerExtension || (e3.customerExtension = ""), 0 === e3.relationShip ? this.model.deleteFriend(e3.accountId) : this.model.upsertFriend(e3.accountId, e3);
      });
    }
    v2SyncFriendUserListHandler(e2) {
      var { users: t2 } = e2.content;
      this.hasUserService && t2.forEach((e3) => {
        this.core.V2NIMUserService.model.setUser(e3);
      });
    }
    handleApplyFriend(e2) {
      this.emit("onFriendAddApplication", e2);
    }
    handleAddFriend(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.model.addFriend(e2), yield this.incrementSyncFriend(), yield this.core.V2NIMUserService.refreshUserInfo(e2);
        var t3 = this.model.getFriend(e2);
        t3 && this.emit("onFriendAdded", this.computedField(t3));
      });
    }
    handleDeleteFriend(e2, t2) {
      t2 = void 0 === t2 ? 1 : t2, this.emit("onFriendDeleted", e2, t2), this.model.deleteFriend(e2);
    }
    handleSetFriendInfo(e2, t2) {
      var i2 = this.model.upsertFriend(e2, t2);
      this.emit("onFriendInfoChanged", this.computedField(i2));
    }
    handlePassFriendApply(e2, t2) {
      var i2 = t2 ? null == t2 ? void 0 : t2.code : 200;
      if (!(i2 >= 19e4 || i2 === ie$1.V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT))
        if (200 === i2 || i2 === ie$1.V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST)
          this.model.updateFriendAddApplicationStatus(e2, 1, this.core.account), this.handleAddFriend(e2);
        else {
          if (i2 >= 500 && i2 <= 599 && 509 !== i2)
            return;
          this.model.updateFriendAddApplicationStatus(e2, 3, this.core.account);
        }
    }
    handleRejectFriendApply(e2, t2) {
      var i2 = t2 ? null == t2 ? void 0 : t2.code : 200;
      if (!(i2 >= 19e4 || i2 === ie$1.V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT))
        if (200 === i2)
          this.emit("onFriendAddRejected", e2), this.model.updateFriendAddApplicationStatus(e2.applicantAccountId, 2, this.core.account);
        else if (i2 === ie$1.V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST)
          this.model.updateFriendAddApplicationStatus(e2.applicantAccountId, 1, this.core.account);
        else {
          if (i2 >= 500 && i2 <= 599 && 509 !== i2)
            return;
          this.model.updateFriendAddApplicationStatus(e2.applicantAccountId, 3, this.core.account);
        }
    }
    incrementSyncFriend() {
      return ve$1(this, void 0, void 0, function* () {
        var e2 = yield this.core.sendCmd("v2IncFriendInfo", { timetag: this.model.getFriendTimetag() }), { friends: t2, timetag: i2 } = e2.content;
        this.model.setFriendTimetag(i2), t2.forEach((e3) => {
          this.model.upsertFriend(e3.accountId, e3);
        });
      });
    }
    computedFields(e2) {
      return e2.map((e3) => this.computedField(e3));
    }
    computedField(e2) {
      var t2, i2, r2 = null === (i2 = null === (t2 = this.core.V2NIMUserService) || void 0 === t2 ? void 0 : t2.model) || void 0 === i2 ? void 0 : i2.getUser(e2.accountId);
      return r2 ? Object.assign({}, e2, { userProfile: r2 }) : e2;
    }
  }, "V2NIMFriendService"), Ia.registerService(class extends Xt$1 {
    constructor(e2, t2) {
      super("V2NIMNotificationService", e2), this.config = { compatibleWithV1: true }, this.notificationUtil = new Zr$1(this.core), this.core._registerDep(Oi, "V2NIMConversationIdUtil"), "v2" === this.core.options.apiVersion && (ct({ cmdMap: Yr$1, cmdConfig: Jr }), this.setOptions(t2));
    }
    setOptions(e2) {
      var t2;
      (null === (t2 = this.core.systemMessage) || void 0 === t2 ? void 0 : t2.name) ? this.config.compatibleWithV1 = true : this.config.compatibleWithV1 = false, this.config = Object.assign(this.config, e2);
    }
    emit(e2, ...t2) {
      var i2 = `${this.name}::emit ${e2.toString()}`;
      if ("onReceiveCustomNotifications" === e2) {
        var r2 = t2[0];
        this.logger.log(`${i2}`, r2.map((e3) => `sender:${e3.senderId};receiver:${e3.receiverId};ctype:${e3.conversationType};time:${e3.timestamp}`));
      } else if ("onReceiveBroadcastNotifications" === e2) {
        var s2 = t2[0];
        this.logger.log(`${i2}`, s2.map((e3) => `id:${e3.id};sender:${e3.senderId};time:${e3.time}`));
      } else
        this.logger.log(`${i2}`, ...t2);
      return super.emit(e2, ...t2);
    }
    sendCustomNotification(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), ue$1(this.core.account, e2), pe$1(Qr$1, { content: t2, params: i2 }, "", true);
        var r2 = 3 === this.core.V2NIMConversationIdUtil.parseConversationType(e2) ? "v2SendCustomNotificationWithSuperTeam" : "v2SendCustomNotification", s2 = this.notificationUtil.generateNotificationTag(e2, t2, i2);
        yield this.core.sendCmd(r2, { tag: s2 });
      });
    }
    processSystemNotification(e2) {
      var t2 = e2.type;
      if ([0, 1, 2, 3, 4, 15, 16, 17, 18].includes(t2))
        this.core.eventBus.emit("V2NIMTeamService/sysNotification", e2);
      else {
        if (![5, 6].includes(t2)) {
          var i2 = Object.assign(Object.assign({}, e2), { conversationType: { 100: 1, 101: 2, 102: 1, 103: 3 }[t2] });
          return delete i2.type, i2;
        }
        this.core.eventBus.emit("V2NIMFriendService/sysNotification", e2);
      }
    }
    markBroadcastMsgAck(e2) {
      this.config.compatibleWithV1 || this.core.sendCmd("v2BatchMarkRead", { sid: 7, cid: 17, ids: e2.map((e3) => e3.id) });
    }
    syncBroadcastMsgHandler(e2) {
      var t2 = e2.content.datas;
      this.markBroadcastMsgAck(t2), this.emit("onReceiveBroadcastNotifications", t2);
    }
    onBroadcastMsgHandler(e2) {
      var t2 = e2.content.data;
      this.markBroadcastMsgAck([t2]), this.emit("onReceiveBroadcastNotifications", [t2]);
    }
    onSysNotificationHandler(e2) {
      this.markSysNotificationAck([e2.content.data]);
      var t2 = this.processSystemNotification(e2.content.data);
      t2 && this.emit("onReceiveCustomNotifications", [t2]);
    }
    v2SyncOfflineSysNotificationsHandler(e2) {
      this.markSysNotificationAck(e2.content.datas);
      var t2 = e2.content.datas.sort((e3, t3) => e3.timestamp - t3.timestamp).map((e3) => this.processSystemNotification(e3)).filter((e3) => e3);
      t2 && this.emit("onReceiveCustomNotifications", t2);
    }
    v2NotificationRevokeHandler(e2) {
      this.markSysNotificationAck([e2.content.data]);
    }
    v2NotificationSyncRevokeHandler(e2) {
      var { type: t2 } = e2.content;
      1 === parseInt(t2) && this.markSysNotificationAck(e2.content.datas);
    }
    markSysNotificationAck(e2) {
      if (!this.config.compatibleWithV1) {
        var t2 = [], i2 = [], r2 = [15, 16, 17, 18, 103];
        e2.forEach((e3) => {
          e3.idServer && (r2.includes(e3.type) ? i2.push(e3.idServer) : t2.push(e3.idServer));
        }), t2.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: "7", cid: "3", ids: t2 }), i2.length > 0 && this.core.sendCmd("v2BatchMarkRead", { sid: "21", cid: "19", ids: i2 });
      }
    }
  }, "V2NIMNotificationService"), Ia.registerService(class extends Xt$1 {
    constructor(e2) {
      super("V2NIMSettingService", e2), this.offlinePushPlugin = void 0, this.offlinePushConfig = void 0, this.authConfig = void 0, this.aosPushInfo = void 0, this.appBackgroundOptions = { badge: 0, isBackground: false }, this.p2pMessageMuteModeChangeHandler = (e3, t2) => {
        this.emit("onP2PMessageMuteModeChanged", e3, t2), this.hasUserService && this.core.V2NIMUserService.model.setAccountMuteMode(e3, t2);
        var i2 = this.core.V2NIMConversationIdUtil.p2pConversationId(e3), r2 = 1 === t2;
        this.core.eventBus.emit("V2NIMSettingService/setMute", i2, r2);
      }, this.setTokenAndBackgroundStateAfterLogin = (e3) => {
        this.aosPushInfo = e3, this.logger.log("OfflinePushService: setTokenAndBackgroundStateAfterLogin"), this.offlinePushPlugin && (this.logger.log("OfflinePushService: setTokenAndBackgroundStateAfterLogin plugin is provided"), this.logger.log("OfflinePushService: setTokenAndBackgroundStateAfterLogin pushType is: ", e3 && e3.pushType), this.regToken(), this.core.sendCmd("v2SetAppBackground", { isBackground: this.appBackgroundOptions.isBackground, badge: this.appBackgroundOptions.badge || 0 }));
      }, this.core._registerDep(Oi, "V2NIMConversationIdUtil"), "v2" === this.core.options.apiVersion && (this.setListener(), ct({ cmdMap: Hn, cmdConfig: qn }));
    }
    get hasUserService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMUserService) || void 0 === e2 ? void 0 : e2.name);
    }
    get hasTeamService() {
      var e2;
      return !!(null === (e2 = this.core.V2NIMTeamService) || void 0 === e2 ? void 0 : e2.name);
    }
    setListener() {
      this.core.eventBus.on("V2NIMSettingService/updateBits", (e2, t2, i2) => {
        this.emit("onTeamMessageMuteModeChanged", e2, t2, i2);
      }), this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", this.setTokenAndBackgroundStateAfterLogin), this.core.eventBus.on("v2NIMUserService/updateMuteList", this.p2pMessageMuteModeChangeHandler), this.core.eventBus.on("forwardReceive/v2NIMSettingService/setP2PMessageMuteMode", this.p2pMessageMuteModeChangeHandler);
    }
    emit(e2, ...t2) {
      var i2 = `${this.name}::emit ${e2.toString()}`;
      return this.logger.log(`${i2}`, ...t2), super.emit(e2, ...t2);
    }
    getConversationMuteStatus(e2) {
      if ("string" != typeof e2)
        return false;
      var t2 = this.core.V2NIMConversationIdUtil.parseConversationType(e2), i2 = this.core.V2NIMConversationIdUtil.parseConversationTargetId(e2);
      return 3 === t2 ? 0 !== this.getTeamMessageMuteMode(i2, 2) : 2 === t2 ? 0 !== this.getTeamMessageMuteMode(i2, 1) : !(1 !== t2 || !this.hasUserService || !this.core.V2NIMUserService.model.muteList.has(i2));
    }
    setTeamMessageMuteMode(e2, t2, i2) {
      return ve$1(this, void 0, void 0, function* () {
        if (!this.hasTeamService)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "setTeamMessageMuteMode: no team service" } });
        this.checkV2(), pe$1(Xo, { teamId: e2 }, "", true), pe$1(Zo$1, { teamType: t2 }, "", true), pe$1(Bn, { muteMode: i2 }, "", true);
        var r2 = 2 === t2 ? "v2SuperTeamUpdateSelfMemberInfo" : "v2TeamUpdateSelfMemberInfo", s2 = { teamId: e2, teamType: t2, accountId: this.core.account, bits: i2 };
        yield this.core.sendCmd(r2, { teamMember: s2 }), this.core.V2NIMTeamService.memberModel.upsert(s2), this.emit("onTeamMessageMuteModeChanged", e2, t2, i2);
        var o2 = 1 === t2 ? this.core.V2NIMConversationIdUtil.teamConversationId(e2) : this.core.V2NIMConversationIdUtil.superTeamConversationId(e2), n2 = this.getConversationMuteStatus(o2);
        this.core.eventBus.emit("V2NIMSettingService/setMute", o2, n2);
      });
    }
    getTeamMessageMuteMode(e2, t2) {
      var i2;
      return "string" != typeof e2 || "number" != typeof t2 ? 0 : this.hasTeamService ? 3 & ((null === (i2 = this.core.V2NIMTeamService.memberModel.getById(e2, t2, this.core.account)) || void 0 === i2 ? void 0 : i2.bits) || 0) : 0;
    }
    setP2PMessageMuteMode(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        if (this.checkV2(), pe$1(jn, { accountId: e2, muteMode: t2 }, "", true), e2 === this.core.account)
          throw new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: "can not set mute mode for self" } });
        yield this.core.sendCmd("v2SetP2PMessageMuteMode", { accountId: e2, muteMode: 1 === t2 }), this.p2pMessageMuteModeChangeHandler(e2, t2);
      });
    }
    getP2PMessageMuteMode(e2) {
      return pe$1({ accountId: { type: "string", required: true, allowEmpty: false } }, { accountId: e2 }, "", true), this.hasUserService && this.core.V2NIMUserService.model.muteList.has(e2) ? 1 : 0;
    }
    getRNDeviceInfo() {
      var e2;
      return ve$1(this, void 0, void 0, function* () {
        return this.logger.log("OfflinePushService:getDeviceInfo start"), null === (e2 = this.offlinePushPlugin) || void 0 === e2 || e2.init(JSON.stringify(this.authConfig), (e3, t2, i2) => {
          if (this.logger.log(`OfflinePushService:: type: ${e3}, tokenName: ${t2}, token: ${i2}`), i2) {
            var r2 = "", s2 = _e$1.getSystemInfo() || {}, o2 = s2.os ? s2.os.toLowerCase() : "";
            this.aosPushInfo && this.aosPushInfo.pushType ? r2 = this.aosPushInfo.pushType : "ios" === o2 ? r2 = "" : "android" === o2 && (r2 = "8"), this.pushTokenToServer(r2, i2);
          } else
            this.logger.warn("OfflinePushService:: token is empty. Please check your parameters");
        }), new Promise((e3, t2) => {
          var i2;
          null === (i2 = this.offlinePushPlugin) || void 0 === i2 || i2.getDeviceInfo((i3) => {
            try {
              this.logger.log(`OfflinePushService:getDeviceInfo result ${i3 ? JSON.stringify(i3) : ""}`), e3(JSON.parse(i3));
            } catch (e4) {
              t2(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "OfflinePushService:getDeviceInfo error" } }));
            }
          }), setTimeout(() => {
            t2(new oe$1({ code: ie$1.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "OfflinePushService:getDeviceInfo timeout" } }));
          }, 2e3);
        });
      });
    }
    getP2PMessageMuteList() {
      return ve$1(this, void 0, void 0, function* () {
        return this.hasUserService ? Promise.resolve(Array.from(this.core.V2NIMUserService.model.muteList)) : Promise.resolve([]);
      });
    }
    setAppBackground(e2, t2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1({ isBackground: { type: "boolean" }, badge: { type: "number", required: false } }, { isBackground: e2, badge: t2 }, "", true), this.appBackgroundOptions = { isBackground: e2, badge: t2 || 0 }, yield this.core.sendCmd("v2SetAppBackground", { isBackground: e2, badge: t2 || 0 });
      });
    }
    setPushMobileOnDesktopOnline(e2) {
      return ve$1(this, void 0, void 0, function* () {
        this.checkV2(), pe$1({ need: { type: "boolean", required: false } }, { need: e2 }, "", true), e2 = void 0 === e2 || e2, yield this.core.sendCmd("v2SetPushMobileOnDesktopOnline", { tag: { need: e2 } });
      });
    }
    setOfflinePushConfig(e2, t2) {
      var i2, r2, s2, o2, n2, a2, c2, d2, l2, p2, h2, u2, m2, g2, v2, f2, y2, I2, _2, M2, E2, T2, S2, C2, N2, O2, R2, A2, b2, k2, V2, L2, P2, D2, w2, U2;
      pe$1(Gn, { config: t2 }, "", true), this.logger.log("setOfflinePushConfig", "plugin", e2, "config", t2), this.offlinePushPlugin = e2, this.offlinePushConfig = t2, this.authConfig = { xmAppId: null === (r2 = null === (i2 = this.offlinePushConfig) || void 0 === i2 ? void 0 : i2.miPush) || void 0 === r2 ? void 0 : r2.appId, xmAppKey: null === (o2 = null === (s2 = this.offlinePushConfig) || void 0 === s2 ? void 0 : s2.miPush) || void 0 === o2 ? void 0 : o2.appKey, xmCertificateName: null === (a2 = null === (n2 = this.offlinePushConfig) || void 0 === n2 ? void 0 : n2.miPush) || void 0 === a2 ? void 0 : a2.certificateName, hwAppId: null === (d2 = null === (c2 = this.offlinePushConfig) || void 0 === c2 ? void 0 : c2.hwPush) || void 0 === d2 ? void 0 : d2.appId, hwCertificateName: null === (p2 = null === (l2 = this.offlinePushConfig) || void 0 === l2 ? void 0 : l2.hwPush) || void 0 === p2 ? void 0 : p2.certificateName, oppoAppId: null === (u2 = null === (h2 = this.offlinePushConfig) || void 0 === h2 ? void 0 : h2.oppoPush) || void 0 === u2 ? void 0 : u2.appId, oppoAppKey: null === (g2 = null === (m2 = this.offlinePushConfig) || void 0 === m2 ? void 0 : m2.oppoPush) || void 0 === g2 ? void 0 : g2.appKey, oppoAppSecret: null === (f2 = null === (v2 = this.offlinePushConfig) || void 0 === v2 ? void 0 : v2.oppoPush) || void 0 === f2 ? void 0 : f2.secret, oppoCertificateName: null === (I2 = null === (y2 = this.offlinePushConfig) || void 0 === y2 ? void 0 : y2.oppoPush) || void 0 === I2 ? void 0 : I2.certificateName, vivoAppId: null === (M2 = null === (_2 = this.offlinePushConfig) || void 0 === _2 ? void 0 : _2.vivoPush) || void 0 === M2 ? void 0 : M2.appId, vivoAppKey: null === (T2 = null === (E2 = this.offlinePushConfig) || void 0 === E2 ? void 0 : E2.vivoPush) || void 0 === T2 ? void 0 : T2.appKey, vivoCertificateName: null === (C2 = null === (S2 = this.offlinePushConfig) || void 0 === S2 ? void 0 : S2.vivoPush) || void 0 === C2 ? void 0 : C2.certificateName, fcmCertificateName: null === (O2 = null === (N2 = this.offlinePushConfig) || void 0 === N2 ? void 0 : N2.fcmPush) || void 0 === O2 ? void 0 : O2.certificateName, mzAppId: null === (A2 = null === (R2 = this.offlinePushConfig) || void 0 === R2 ? void 0 : R2.mzPush) || void 0 === A2 ? void 0 : A2.appId, mzAppKey: null === (k2 = null === (b2 = this.offlinePushConfig) || void 0 === b2 ? void 0 : b2.mzPush) || void 0 === k2 ? void 0 : k2.appKey, mzCertificateName: null === (L2 = null === (V2 = this.offlinePushConfig) || void 0 === V2 ? void 0 : V2.mzPush) || void 0 === L2 ? void 0 : L2.certificateName, apnsCertificateName: null === (D2 = null === (P2 = this.offlinePushConfig) || void 0 === P2 ? void 0 : P2.apns) || void 0 === D2 ? void 0 : D2.certificateName, honorCertificateName: null === (U2 = null === (w2 = this.offlinePushConfig) || void 0 === w2 ? void 0 : w2.honorPush) || void 0 === U2 ? void 0 : U2.certificateName };
    }
    regToken() {
      var e2 = _e$1.getSystemInfo() || {}, t2 = e2.os ? e2.os.toLowerCase() : "";
      if (this.logger.log("OfflinePushService: os", t2), "ios" === t2 || "android" === t2)
        if (!this.offlinePushPlugin || "UNIAPP" === _e$1.platform && "function" != typeof this.offlinePushPlugin.getDeviceToken || "React Native" === _e$1.platform && "android" === t2 && "function" != typeof this.offlinePushPlugin.init || "React Native" === _e$1.platform && "ios" === t2 && "function" != typeof this.offlinePushPlugin.checkPermissions)
          this.logger.warn("OfflinePushService: plugin is not correct, please check your plugin according to Yunxin Official Documentation");
        else {
          "React Native" === _e$1.platform && _e$1.envPayload.AppState && _e$1.envPayload.AppState.addEventListener("change", this.handleRNAppStateChange.bind(this));
          var i2 = "";
          this.aosPushInfo && this.aosPushInfo.pushType ? i2 = this.aosPushInfo.pushType : "ios" === t2 ? i2 = "" : "android" === t2 && (i2 = "8"), this.logger.log("OfflinePushService:: prepare to get device token. suggestPushType: " + i2), this.logger.log("OfflinePushService push config", JSON.stringify(this.authConfig, null, 2), "platform", _e$1.platform), "UNIAPP" === _e$1.platform ? this.offlinePushPlugin.getDeviceToken({ suggestPushType: i2, config: this.authConfig }, (e3) => {
            e3 ? (this.logger.log("OfflinePushService:: token is :" + e3), this.pushTokenToServer(i2, e3)) : this.logger.warn("OfflinePushService:: token is empty. Please check your parameters");
          }) : "React Native" === _e$1.platform && "android" === t2 ? (this.logger.log("OfflinePushService:: onLogin", this.core.account, typeof i2, i2), this.offlinePushPlugin.onLogin(this.core.account, parseInt(i2), false, "")) : "React Native" === _e$1.platform && "ios" === t2 ? this.offlinePushPlugin.checkPermissions(() => {
            this.logger.log("OfflinePushService addEventListener requestPermissions");
            try {
              this.offlinePushPlugin.requestPermissions();
            } catch (e3) {
              this.logger.log("OfflinePushService:: requestPermissions error", e3);
            }
            this.offlinePushPlugin.addEventListener("register", (e3) => {
              this.logger.log(`OfflinePushService:: ios token: ${e3}`), this.pushTokenToServer(i2, e3);
            }), this.offlinePushPlugin.addEventListener("registrationError", (e3) => {
              this.logger.log("OfflinePushService:: ios registerError", e3);
            });
          }) : this.logger.error(`OfflinePushService:: platform is not supported. Please check your parameters. Platform: ${_e$1.platform}. os: ${t2}`);
        }
      else
        this.logger.warn("OfflinePushService: only Android or IOS support offline push");
    }
    pushTokenToServer(e2, t2) {
      var i2, r2, s2, o2, n2, a2, c2, d2, l2 = "", p2 = this.offlinePushConfig;
      switch (e2) {
        case "5":
          l2 = null === (i2 = null == p2 ? void 0 : p2.miPush) || void 0 === i2 ? void 0 : i2.certificateName;
          break;
        case "6":
          l2 = null === (r2 = null == p2 ? void 0 : p2.hwPush) || void 0 === r2 ? void 0 : r2.certificateName;
          break;
        case "7":
          l2 = null === (s2 = null == p2 ? void 0 : p2.mzPush) || void 0 === s2 ? void 0 : s2.certificateName;
          break;
        case "8":
          l2 = null === (o2 = null == p2 ? void 0 : p2.fcmPush) || void 0 === o2 ? void 0 : o2.certificateName;
          break;
        case "9":
          l2 = null === (n2 = null == p2 ? void 0 : p2.vivoPush) || void 0 === n2 ? void 0 : n2.certificateName;
          break;
        case "10":
          l2 = null === (a2 = null == p2 ? void 0 : p2.oppoPush) || void 0 === a2 ? void 0 : a2.certificateName;
          break;
        case "11":
          l2 = null === (c2 = null == p2 ? void 0 : p2.honorPush) || void 0 === c2 ? void 0 : c2.certificateName;
          break;
        default:
          l2 = null === (d2 = null == p2 ? void 0 : p2.apns) || void 0 === d2 ? void 0 : d2.certificateName;
      }
      if ("" === l2 || void 0 === l2)
        this.logger.warn("OfflinePushService:: certificate name is empty for push type: ", e2);
      else
        try {
          if ("UNIAPP" === _e$1.platform) {
            var h2 = Kn.parse("557d1e3cafa43e2589a588270c53d56f"), u2 = Kn.stringify(da.decrypt(t2, h2));
            this.logger.log("OfflinePushService:: token", u2), this.core.sendCmd("v2SetDeviceToken", { certificateName: l2, pushDeviceToken: u2, pushkit: 0 });
          } else
            this.core.sendCmd("v2SetDeviceToken", { certificateName: l2, pushDeviceToken: t2, pushkit: 0 });
        } catch (e3) {
          return this.logger.log("OfflinePushService:: decrypt error", e3), void this.logger.warn("OfflinePushService:: token before decrypt", t2);
        }
    }
    handleRNAppStateChange(e2) {
      this.logger.log(`push::handleAppStateChange: pushConfig ios/aos; state: ${e2}`), this.appBackgroundOptions = { badge: this.core.V2NIMConversationService.getTotalUnreadCount(), isBackground: "background" === e2 || "inactive" === e2 }, this.setAppBackground(this.appBackgroundOptions.isBackground, this.appBackgroundOptions.badge);
    }
  }, "V2NIMSettingService"), Ia.registerService(class {
    constructor(e2) {
      this.name = "V2NIMMessageConverter", this.core = e2;
    }
    messageSerialization(e2) {
      if (!e2)
        return null;
      var t2 = nt$1(e2, wr);
      return JSON.stringify(t2);
    }
    messageDeserialization(e2) {
      var t2, i2, r2, s2, o2, n2, a2, c2, d2, l2, p2, h2, u2, m2, g2, v2, f2, y2, I2, _2, M2, E2, T2;
      if (!e2)
        return null;
      try {
        var S2 = at(JSON.parse(e2), Ur);
        return S2.sendingState = 0, 1 !== S2.conversationType || S2.senderId !== this.core.account && S2.receiverId !== this.core.account ? 2 === S2.conversationType ? S2.conversationId = this.core.V2NIMConversationIdUtil.teamConversationId(S2.receiverId) : 3 === S2.conversationType && (S2.conversationId = this.core.V2NIMConversationIdUtil.superTeamConversationId(S2.receiverId)) : S2.conversationId = this.core.V2NIMConversationIdUtil.p2pConversationId(S2.senderId === this.core.account ? S2.receiverId : S2.senderId), S2.threadReply && (S2.threadReply.conversationType = S2.conversationType, S2.threadReply = Nr(this.core, S2.threadReply)), S2.threadRoot && (S2.threadRoot.conversationType = S2.conversationType, S2.threadRoot = Nr(this.core, S2.threadRoot)), [1, 3, 2, 0].includes(S2.conversationType) || this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid conversationType(enum): ${S2.conversationType}`), S2.senderId && "string" != typeof S2.senderId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid senderId(string): ${S2.senderId}`), S2.receiverId && "string" != typeof S2.receiverId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid receiverId(string): ${S2.receiverId}`), "createTime" in S2 && isNaN(S2.createTime) && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid createTime(number): ${S2.createTime}`), [2, 7, 12, 100, 6, 1, -1, 4, 5, 11, 0, 10, 3].includes(S2.messageType) || this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid messageType(enum): ${S2.messageType}`), "subType" in S2 && isNaN(S2.subType) && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid subType(number): ${S2.subType}`), S2.messageClientId && "string" != typeof S2.messageClientId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid messageClientId(string): ${S2.messageClientId}`), S2.messageServerId && "string" != typeof S2.messageServerId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid messageServerId(string): ${S2.messageServerId}`), S2.attachment && "object" != typeof S2.attachment && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid attachment(object): ${S2.attachment}`), S2.text && "string" != typeof S2.text && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid text(string): ${S2.text}`), S2.serverExtension && "string" != typeof S2.serverExtension && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid serverExtension(string): ${S2.serverExtension}`), S2.callbackExtension && "string" != typeof S2.callbackExtension && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid callbackExtension(string): ${S2.callbackExtension}`), (null === (t2 = S2.pushConfig) || void 0 === t2 ? void 0 : t2.pushContent) && "string" != typeof S2.pushConfig.pushContent && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid pushContent(string): ${S2.pushConfig.pushContent}`), (null === (i2 = S2.pushConfig) || void 0 === i2 ? void 0 : i2.pushPayload) && "string" != typeof S2.pushConfig.pushPayload && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid pushPayload(string): ${S2.pushConfig.pushPayload}`), (null === (r2 = S2.pushConfig) || void 0 === r2 ? void 0 : r2.forcePushContent) && "string" != typeof S2.pushConfig.forcePushContent && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid forcePushContent(string): ${S2.pushConfig.forcePushContent}`), (null === (s2 = S2.pushConfig) || void 0 === s2 ? void 0 : s2.forcePushAccountIds) && !Array.isArray(S2.pushConfig.forcePushAccountIds) && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid forcePushAccountIds(array): ${S2.pushConfig.forcePushAccountIds}`), (null === (o2 = S2.routeConfig) || void 0 === o2 ? void 0 : o2.routeEnvironment) && "string" != typeof S2.routeConfig.routeEnvironment && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid routeEnvironment(string): ${S2.routeConfig.routeEnvironment}`), (null === (n2 = S2.antispamConfig) || void 0 === n2 ? void 0 : n2.antispamBusinessId) && "string" != typeof S2.antispamConfig.antispamBusinessId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid antispamBusinessId(string): ${S2.antispamConfig.antispamBusinessId}`), (null === (a2 = S2.antispamConfig) || void 0 === a2 ? void 0 : a2.antispamCustomMessage) && "string" != typeof S2.antispamConfig.antispamCustomMessage && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid antispamCustomMessage(string): ${S2.antispamConfig.antispamCustomMessage}`), (null === (c2 = S2.antispamConfig) || void 0 === c2 ? void 0 : c2.antispamCheating) && "string" != typeof S2.antispamConfig.antispamCheating && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid antispamCheating(string): ${S2.antispamConfig.antispamCheating}`), (null === (d2 = S2.antispamConfig) || void 0 === d2 ? void 0 : d2.antispamExtension) && "string" != typeof S2.antispamConfig.antispamExtension && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid antispamExtension(string): ${S2.antispamConfig.antispamExtension}`), (null === (l2 = S2.robotConfig) || void 0 === l2 ? void 0 : l2.accountId) && "string" != typeof S2.robotConfig.accountId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid accountId(string): ${S2.robotConfig.accountId}`), (null === (p2 = S2.robotConfig) || void 0 === p2 ? void 0 : p2.topic) && "string" != typeof S2.robotConfig.topic && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid topic(string): ${S2.robotConfig.topic}`), (null === (h2 = S2.robotConfig) || void 0 === h2 ? void 0 : h2.function) && "string" != typeof S2.robotConfig.function && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid function(string): ${S2.robotConfig.function}`), (null === (u2 = S2.robotConfig) || void 0 === u2 ? void 0 : u2.customContent) && "string" != typeof S2.robotConfig.customContent && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid customContent(string): ${S2.robotConfig.customContent}`), (null === (m2 = S2.threadRoot) || void 0 === m2 ? void 0 : m2.senderId) && "string" != typeof S2.threadRoot.senderId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid senderId(string): ${S2.threadRoot.senderId}`), (null === (g2 = S2.threadRoot) || void 0 === g2 ? void 0 : g2.receiverId) && "string" != typeof S2.threadRoot.receiverId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid receiverId(string): ${S2.threadRoot.receiverId}`), (null === (v2 = S2.threadRoot) || void 0 === v2 ? void 0 : v2.messageClientId) && "string" != typeof S2.threadRoot.messageClientId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid messageClientId(string): ${S2.threadRoot.messageClientId}`), (null === (f2 = S2.threadRoot) || void 0 === f2 ? void 0 : f2.messageServerId) && "string" != typeof S2.threadRoot.messageServerId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid messageServerId(string): ${S2.threadRoot.messageServerId}`), S2.threadRoot && "createTime" in S2.threadRoot && isNaN(S2.threadRoot.createTime) && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid createTime(number): ${S2.threadRoot.createTime}`), S2.threadRoot && ![1, 3, 2, 0].includes(S2.threadRoot.conversationType) && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid conversationType(enum): ${S2.threadRoot.conversationType}`), (null === (y2 = S2.threadRoot) || void 0 === y2 ? void 0 : y2.conversationId) && "string" != typeof S2.threadRoot.conversationId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid conversationId(string): ${S2.threadRoot.conversationId}`), (null === (I2 = S2.threadReply) || void 0 === I2 ? void 0 : I2.senderId) && "string" != typeof S2.threadReply.senderId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid senderId(string): ${S2.threadReply.senderId}`), (null === (_2 = S2.threadReply) || void 0 === _2 ? void 0 : _2.receiverId) && "string" != typeof S2.threadReply.receiverId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid receiverId(string): ${S2.threadReply.receiverId}`), (null === (M2 = S2.threadReply) || void 0 === M2 ? void 0 : M2.messageClientId) && "string" != typeof S2.threadReply.messageClientId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid messageClientId(string): ${S2.threadReply.messageClientId}`), (null === (E2 = S2.threadReply) || void 0 === E2 ? void 0 : E2.messageServerId) && "string" != typeof S2.threadReply.messageServerId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid messageServerId(string): ${S2.threadReply.messageServerId}`), S2.threadReply && "createTime" in S2.threadReply && isNaN(S2.threadReply.createTime) && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid createTime(number): ${S2.threadReply.createTime}`), S2.threadReply && ![1, 3, 2, 0].includes(S2.threadReply.conversationType) && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid conversationType(enum): ${S2.threadReply.conversationType}`), (null === (T2 = S2.threadReply) || void 0 === T2 ? void 0 : T2.conversationId) && "string" != typeof S2.threadReply.conversationId && this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid conversationId(string): ${S2.threadReply.conversationId}`), delete S2.__clientExt, delete S2.userUpdateTime, S2;
      } catch (t3) {
        return this.core.logger.error(`V2NIMMessageConverterImpl.messageDeserialization: invalid message string: ${e2}`), null;
      }
    }
  }, "V2NIMMessageConverter");
  var _a = t$1.p, Ma = t$1.K;
  const _sfc_main$1g = /* @__PURE__ */ vue.defineComponent({
    __name: "NetworkAlert",
    setup(__props, { expose: __expose }) {
      __expose();
      const isConnected = vue.ref(true);
      const text = vue.ref(t$2("connectingText"));
      vue.onMounted(() => {
        var _a2, _b, _c, _d;
        if (((_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.connectStore) == null ? void 0 : _b.connectStatus) === Ma.V2NIMConnectStatus.V2NIM_CONNECT_STATUS_CONNECTED) {
          isConnected.value = true;
        } else if (((_d = (_c = uni.$UIKitStore) == null ? void 0 : _c.connectStore) == null ? void 0 : _d.connectStatus) === Ma.V2NIMConnectStatus.V2NIM_CONNECT_STATUS_DISCONNECTED) {
          isConnected.value = false;
          text.value = t$2("offlineText");
        } else {
          isConnected.value = false;
          text.value = t$2("connectingText");
        }
      });
      const uninstallConnectWatch = autorun(() => {
        var _a2, _b, _c, _d;
        if (((_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.connectStore) == null ? void 0 : _b.connectStatus) === Ma.V2NIMConnectStatus.V2NIM_CONNECT_STATUS_CONNECTED) {
          isConnected.value = true;
        } else if (((_d = (_c = uni.$UIKitStore) == null ? void 0 : _c.connectStore) == null ? void 0 : _d.connectStatus) === Ma.V2NIMConnectStatus.V2NIM_CONNECT_STATUS_DISCONNECTED) {
          isConnected.value = false;
          text.value = t$2("offlineText");
        } else {
          isConnected.value = false;
          text.value = t$2("connectingText");
        }
      });
      vue.onUnmounted(() => {
        uninstallConnectWatch();
      });
      const __returned__ = { isConnected, text, uninstallConnectWatch };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1f(_ctx, _cache, $props, $setup, $data, $options) {
    return !$setup.isConnected && $setup.text ? (vue.openBlock(), vue.createElementBlock(
      "div",
      {
        key: 0,
        class: "network-alert"
      },
      vue.toDisplayString($setup.text),
      1
      /* TEXT */
    )) : vue.createCommentVNode("v-if", true);
  }
  const NetworkAlert = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$1f], ["__scopeId", "data-v-f5969aa8"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/NetworkAlert.vue"]]);
  const _sfc_main$1f = /* @__PURE__ */ vue.defineComponent({
    __name: "Empty",
    props: {
      text: { type: String, required: false, default: "" }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const __returned__ = {};
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "empty-wrapper" }, [
      vue.createElementVNode("image", {
        class: "empty-img",
        src: "https://yx-web-nosdn.netease.im/common/e0f58096f06c18cdd101f2614e6afb09/empty.png"
      }),
      vue.createElementVNode(
        "div",
        { class: "empty-text" },
        vue.toDisplayString($props.text),
        1
        /* TEXT */
      )
    ]);
  }
  const Empty = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$1e], ["__scopeId", "data-v-ffd264d0"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/Empty.vue"]]);
  const preUrl = "";
  function customNavigateTo(options) {
    uni.navigateTo({ ...options, url: preUrl + options.url });
  }
  function customRedirectTo(options) {
    uni.redirectTo({ ...options, url: preUrl + options.url });
  }
  function customSwitchTab(options) {
    uni.switchTab({ ...options, url: preUrl + options.url });
  }
  function customReLaunch(options) {
    uni.reLaunch({ ...options, url: preUrl + options.url });
  }
  const _sfc_main$1e = /* @__PURE__ */ vue.defineComponent({
    __name: "Avatar",
    props: {
      account: { type: String, required: true },
      teamId: { type: String, required: false, default: "" },
      avatar: { type: String, required: false, default: "" },
      size: { type: String, required: false, default: "" },
      gotoUserCard: { type: Boolean, required: false, default: false },
      fontSize: { type: String, required: false, default: "" },
      isRedirect: { type: Boolean, required: false, default: false }
    },
    emits: ["onLongpress"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const $emit = __emit;
      const avatarSize = props.size || 42;
      const user = vue.ref();
      let isLongPress = false;
      const appellation = vue.ref("");
      const appellationWatch = autorun(() => {
        var _a2;
        appellation.value = (_a2 = uni.$UIKitStore.uiStore.getAppellation({
          account: props.account,
          ignoreAlias: false
        })) == null ? void 0 : _a2.slice(0, 2);
      });
      const userInfoWatch = autorun(() => {
        var _a2, _b;
        (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.userStore) == null ? void 0 : _b.getUserActive(props.account).then((data2) => {
          user.value = data2;
        });
      });
      const avatarUrl = vue.computed(() => {
        var _a2, _b, _c, _d;
        user.value = (_c = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.userStore) == null ? void 0 : _b.users) == null ? void 0 : _c.get(props.account);
        return props.avatar || ((_d = user.value) == null ? void 0 : _d.avatar);
      });
      const key = `__yx_avatar_color_${props.account}__`;
      let color = uni.getStorageSync(key);
      if (!color) {
        const colorMap = {
          0: "#60CFA7",
          1: "#53C3F3",
          2: "#537FF4",
          3: "#854FE2",
          4: "#BE65D9",
          5: "#E9749D",
          6: "#F9B751"
        };
        const _color = colorMap[Math.floor(Math.random() * 7)];
        uni.setStorageSync(key, _color);
        color = _color;
      }
      const handleAvatarClick = () => {
        var _a2, _b, _c, _d;
        if (props.gotoUserCard && !isLongPress) {
          if (props.isRedirect) {
            if (props.account === ((_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.userStore) == null ? void 0 : _b.myUserInfo.accountId)) {
              customRedirectTo({
                url: `/pages/user-card/my-detail/index`
              });
            } else {
              customRedirectTo({
                url: `/pages/user-card/friend/index?account=${props.account}`
              });
            }
          } else {
            if (props.account === ((_d = (_c = uni.$UIKitStore) == null ? void 0 : _c.userStore) == null ? void 0 : _d.myUserInfo.accountId)) {
              customNavigateTo({
                url: `/pages/user-card/my-detail/index`
              });
            } else {
              customNavigateTo({
                url: `/pages/user-card/friend/index?account=${props.account}`
              });
            }
          }
        }
      };
      const longpress = () => {
        isLongPress = true;
        $emit("onLongpress");
      };
      const touchend = () => {
        const timeOut = setTimeout(() => {
          isLongPress = false;
          clearTimeout(timeOut);
        }, 200);
      };
      vue.onUnmounted(() => {
        userInfoWatch();
        appellationWatch();
      });
      const __returned__ = { props, $emit, avatarSize, user, get isLongPress() {
        return isLongPress;
      }, set isLongPress(v2) {
        isLongPress = v2;
      }, appellation, appellationWatch, userInfoWatch, avatarUrl, key, get color() {
        return color;
      }, set color(v2) {
        color = v2;
      }, handleAvatarClick, longpress, touchend };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "div",
      {
        class: "avatar",
        style: vue.normalizeStyle({ width: $setup.avatarSize + "px", height: $setup.avatarSize + "px" }),
        onClick: $setup.handleAvatarClick,
        onLongpress: $setup.longpress,
        onTouchend: $setup.touchend
      },
      [
        vue.createCommentVNode(" 使用遮罩层避免android长按头像会出现保存图片的弹窗 "),
        vue.createElementVNode("div", { class: "img-mask" }),
        $setup.avatarUrl ? (vue.openBlock(), vue.createElementBlock("image", {
          key: 0,
          "lazy-load": true,
          class: "avatar-img",
          src: $setup.avatarUrl,
          mode: "aspectFill"
        }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode(
          "div",
          {
            class: "avatar-name-wrapper",
            style: vue.normalizeStyle({ backgroundColor: $setup.color })
          },
          [
            vue.createElementVNode(
              "div",
              {
                class: "avatar-name-text",
                style: vue.normalizeStyle({ fontSize: $props.fontSize + "px" })
              },
              vue.toDisplayString($setup.appellation),
              5
              /* TEXT, STYLE */
            )
          ],
          4
          /* STYLE */
        )
      ],
      36
      /* STYLE, NEED_HYDRATION */
    );
  }
  const Avatar = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$1d], ["__scopeId", "data-v-c8a835f9"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/Avatar.vue"]]);
  const _sfc_main$1d = /* @__PURE__ */ vue.defineComponent({
    __name: "Appellation",
    props: {
      account: { type: String, required: true },
      teamId: { type: String, required: false, default: void 0 },
      ignoreAlias: { type: Boolean, required: false, default: false },
      nickFromMsg: { type: String, required: false, default: void 0 },
      color: { type: String, required: false, default: "#333" },
      fontSize: { type: Number, required: false, default: 16 }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const appellation = vue.ref("");
      const { account, teamId, ignoreAlias, nickFromMsg } = __props;
      const uninstallAppellationWatch = autorun(() => {
        appellation.value = uni.$UIKitStore.uiStore.getAppellation({
          account,
          teamId,
          ignoreAlias,
          nickFromMsg
        });
      });
      vue.onUnmounted(() => {
        uninstallAppellationWatch();
      });
      const __returned__ = { appellation, account, teamId, ignoreAlias, nickFromMsg, uninstallAppellationWatch };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "span",
      {
        class: "appellation",
        style: vue.normalizeStyle({ color: $props.color, fontSize: $props.fontSize + "px" })
      },
      vue.toDisplayString($setup.appellation),
      5
      /* TEXT, STYLE */
    );
  }
  const Appellation = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$1c], ["__scopeId", "data-v-3d795ad0"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/Appellation.vue"]]);
  var commonjsGlobal$2 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  var dayjs_min = { exports: {} };
  (function(module2, exports) {
    !function(t2, e2) {
      module2.exports = e2();
    }(commonjsGlobal$2, function() {
      var t2 = 1e3, e2 = 6e4, n2 = 36e5, r2 = "millisecond", i2 = "second", s2 = "minute", u2 = "hour", a2 = "day", o2 = "week", c2 = "month", f2 = "quarter", h2 = "year", d2 = "date", l2 = "Invalid Date", $2 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M2 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e3 = ["th", "st", "nd", "rd"], n3 = t3 % 100;
        return "[" + t3 + (e3[(n3 - 20) % 10] || e3[n3] || e3[0]) + "]";
      } }, m2 = function(t3, e3, n3) {
        var r3 = String(t3);
        return !r3 || r3.length >= e3 ? t3 : "" + Array(e3 + 1 - r3.length).join(n3) + t3;
      }, v2 = { s: m2, z: function(t3) {
        var e3 = -t3.utcOffset(), n3 = Math.abs(e3), r3 = Math.floor(n3 / 60), i3 = n3 % 60;
        return (e3 <= 0 ? "+" : "-") + m2(r3, 2, "0") + ":" + m2(i3, 2, "0");
      }, m: function t3(e3, n3) {
        if (e3.date() < n3.date())
          return -t3(n3, e3);
        var r3 = 12 * (n3.year() - e3.year()) + (n3.month() - e3.month()), i3 = e3.clone().add(r3, c2), s3 = n3 - i3 < 0, u3 = e3.clone().add(r3 + (s3 ? -1 : 1), c2);
        return +(-(r3 + (n3 - i3) / (s3 ? i3 - u3 : u3 - i3)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c2, y: h2, w: o2, d: a2, D: d2, h: u2, m: s2, s: i2, ms: r2, Q: f2 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g2 = "en", D2 = {};
      D2[g2] = M2;
      var p2 = "$isDayjsObject", S2 = function(t3) {
        return t3 instanceof _2 || !(!t3 || !t3[p2]);
      }, w2 = function t3(e3, n3, r3) {
        var i3;
        if (!e3)
          return g2;
        if ("string" == typeof e3) {
          var s3 = e3.toLowerCase();
          D2[s3] && (i3 = s3), n3 && (D2[s3] = n3, i3 = s3);
          var u3 = e3.split("-");
          if (!i3 && u3.length > 1)
            return t3(u3[0]);
        } else {
          var a3 = e3.name;
          D2[a3] = e3, i3 = a3;
        }
        return !r3 && i3 && (g2 = i3), i3 || !r3 && g2;
      }, O2 = function(t3, e3) {
        if (S2(t3))
          return t3.clone();
        var n3 = "object" == typeof e3 ? e3 : {};
        return n3.date = t3, n3.args = arguments, new _2(n3);
      }, b2 = v2;
      b2.l = w2, b2.i = S2, b2.w = function(t3, e3) {
        return O2(t3, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
      };
      var _2 = function() {
        function M3(t3) {
          this.$L = w2(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p2] = true;
        }
        var m3 = M3.prototype;
        return m3.parse = function(t3) {
          this.$d = function(t4) {
            var e3 = t4.date, n3 = t4.utc;
            if (null === e3)
              return /* @__PURE__ */ new Date(NaN);
            if (b2.u(e3))
              return /* @__PURE__ */ new Date();
            if (e3 instanceof Date)
              return new Date(e3);
            if ("string" == typeof e3 && !/Z$/i.test(e3)) {
              var r3 = e3.match($2);
              if (r3) {
                var i3 = r3[2] - 1 || 0, s3 = (r3[7] || "0").substring(0, 3);
                return n3 ? new Date(Date.UTC(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3)) : new Date(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3);
              }
            }
            return new Date(e3);
          }(t3), this.init();
        }, m3.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m3.$utils = function() {
          return b2;
        }, m3.isValid = function() {
          return !(this.$d.toString() === l2);
        }, m3.isSame = function(t3, e3) {
          var n3 = O2(t3);
          return this.startOf(e3) <= n3 && n3 <= this.endOf(e3);
        }, m3.isAfter = function(t3, e3) {
          return O2(t3) < this.startOf(e3);
        }, m3.isBefore = function(t3, e3) {
          return this.endOf(e3) < O2(t3);
        }, m3.$g = function(t3, e3, n3) {
          return b2.u(t3) ? this[e3] : this.set(n3, t3);
        }, m3.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m3.valueOf = function() {
          return this.$d.getTime();
        }, m3.startOf = function(t3, e3) {
          var n3 = this, r3 = !!b2.u(e3) || e3, f3 = b2.p(t3), l3 = function(t4, e4) {
            var i3 = b2.w(n3.$u ? Date.UTC(n3.$y, e4, t4) : new Date(n3.$y, e4, t4), n3);
            return r3 ? i3 : i3.endOf(a2);
          }, $3 = function(t4, e4) {
            return b2.w(n3.toDate()[t4].apply(n3.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n3);
          }, y3 = this.$W, M4 = this.$M, m4 = this.$D, v3 = "set" + (this.$u ? "UTC" : "");
          switch (f3) {
            case h2:
              return r3 ? l3(1, 0) : l3(31, 11);
            case c2:
              return r3 ? l3(1, M4) : l3(0, M4 + 1);
            case o2:
              var g3 = this.$locale().weekStart || 0, D3 = (y3 < g3 ? y3 + 7 : y3) - g3;
              return l3(r3 ? m4 - D3 : m4 + (6 - D3), M4);
            case a2:
            case d2:
              return $3(v3 + "Hours", 0);
            case u2:
              return $3(v3 + "Minutes", 1);
            case s2:
              return $3(v3 + "Seconds", 2);
            case i2:
              return $3(v3 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m3.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m3.$set = function(t3, e3) {
          var n3, o3 = b2.p(t3), f3 = "set" + (this.$u ? "UTC" : ""), l3 = (n3 = {}, n3[a2] = f3 + "Date", n3[d2] = f3 + "Date", n3[c2] = f3 + "Month", n3[h2] = f3 + "FullYear", n3[u2] = f3 + "Hours", n3[s2] = f3 + "Minutes", n3[i2] = f3 + "Seconds", n3[r2] = f3 + "Milliseconds", n3)[o3], $3 = o3 === a2 ? this.$D + (e3 - this.$W) : e3;
          if (o3 === c2 || o3 === h2) {
            var y3 = this.clone().set(d2, 1);
            y3.$d[l3]($3), y3.init(), this.$d = y3.set(d2, Math.min(this.$D, y3.daysInMonth())).$d;
          } else
            l3 && this.$d[l3]($3);
          return this.init(), this;
        }, m3.set = function(t3, e3) {
          return this.clone().$set(t3, e3);
        }, m3.get = function(t3) {
          return this[b2.p(t3)]();
        }, m3.add = function(r3, f3) {
          var d3, l3 = this;
          r3 = Number(r3);
          var $3 = b2.p(f3), y3 = function(t3) {
            var e3 = O2(l3);
            return b2.w(e3.date(e3.date() + Math.round(t3 * r3)), l3);
          };
          if ($3 === c2)
            return this.set(c2, this.$M + r3);
          if ($3 === h2)
            return this.set(h2, this.$y + r3);
          if ($3 === a2)
            return y3(1);
          if ($3 === o2)
            return y3(7);
          var M4 = (d3 = {}, d3[s2] = e2, d3[u2] = n2, d3[i2] = t2, d3)[$3] || 1, m4 = this.$d.getTime() + r3 * M4;
          return b2.w(m4, this);
        }, m3.subtract = function(t3, e3) {
          return this.add(-1 * t3, e3);
        }, m3.format = function(t3) {
          var e3 = this, n3 = this.$locale();
          if (!this.isValid())
            return n3.invalidDate || l2;
          var r3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i3 = b2.z(this), s3 = this.$H, u3 = this.$m, a3 = this.$M, o3 = n3.weekdays, c3 = n3.months, f3 = n3.meridiem, h3 = function(t4, n4, i4, s4) {
            return t4 && (t4[n4] || t4(e3, r3)) || i4[n4].slice(0, s4);
          }, d3 = function(t4) {
            return b2.s(s3 % 12 || 12, t4, "0");
          }, $3 = f3 || function(t4, e4, n4) {
            var r4 = t4 < 12 ? "AM" : "PM";
            return n4 ? r4.toLowerCase() : r4;
          };
          return r3.replace(y2, function(t4, r4) {
            return r4 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e3.$y).slice(-2);
                case "YYYY":
                  return b2.s(e3.$y, 4, "0");
                case "M":
                  return a3 + 1;
                case "MM":
                  return b2.s(a3 + 1, 2, "0");
                case "MMM":
                  return h3(n3.monthsShort, a3, c3, 3);
                case "MMMM":
                  return h3(c3, a3);
                case "D":
                  return e3.$D;
                case "DD":
                  return b2.s(e3.$D, 2, "0");
                case "d":
                  return String(e3.$W);
                case "dd":
                  return h3(n3.weekdaysMin, e3.$W, o3, 2);
                case "ddd":
                  return h3(n3.weekdaysShort, e3.$W, o3, 3);
                case "dddd":
                  return o3[e3.$W];
                case "H":
                  return String(s3);
                case "HH":
                  return b2.s(s3, 2, "0");
                case "h":
                  return d3(1);
                case "hh":
                  return d3(2);
                case "a":
                  return $3(s3, u3, true);
                case "A":
                  return $3(s3, u3, false);
                case "m":
                  return String(u3);
                case "mm":
                  return b2.s(u3, 2, "0");
                case "s":
                  return String(e3.$s);
                case "ss":
                  return b2.s(e3.$s, 2, "0");
                case "SSS":
                  return b2.s(e3.$ms, 3, "0");
                case "Z":
                  return i3;
              }
              return null;
            }(t4) || i3.replace(":", "");
          });
        }, m3.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m3.diff = function(r3, d3, l3) {
          var $3, y3 = this, M4 = b2.p(d3), m4 = O2(r3), v3 = (m4.utcOffset() - this.utcOffset()) * e2, g3 = this - m4, D3 = function() {
            return b2.m(y3, m4);
          };
          switch (M4) {
            case h2:
              $3 = D3() / 12;
              break;
            case c2:
              $3 = D3();
              break;
            case f2:
              $3 = D3() / 3;
              break;
            case o2:
              $3 = (g3 - v3) / 6048e5;
              break;
            case a2:
              $3 = (g3 - v3) / 864e5;
              break;
            case u2:
              $3 = g3 / n2;
              break;
            case s2:
              $3 = g3 / e2;
              break;
            case i2:
              $3 = g3 / t2;
              break;
            default:
              $3 = g3;
          }
          return l3 ? $3 : b2.a($3);
        }, m3.daysInMonth = function() {
          return this.endOf(c2).$D;
        }, m3.$locale = function() {
          return D2[this.$L];
        }, m3.locale = function(t3, e3) {
          if (!t3)
            return this.$L;
          var n3 = this.clone(), r3 = w2(t3, e3, true);
          return r3 && (n3.$L = r3), n3;
        }, m3.clone = function() {
          return b2.w(this.$d, this);
        }, m3.toDate = function() {
          return new Date(this.valueOf());
        }, m3.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m3.toISOString = function() {
          return this.$d.toISOString();
        }, m3.toString = function() {
          return this.$d.toUTCString();
        }, M3;
      }(), k2 = _2.prototype;
      return O2.prototype = k2, [["$ms", r2], ["$s", i2], ["$m", s2], ["$H", u2], ["$W", a2], ["$M", c2], ["$y", h2], ["$D", d2]].forEach(function(t3) {
        k2[t3[1]] = function(e3) {
          return this.$g(e3, t3[0], t3[1]);
        };
      }), O2.extend = function(t3, e3) {
        return t3.$i || (t3(e3, _2, O2), t3.$i = true), O2;
      }, O2.locale = w2, O2.isDayjs = S2, O2.unix = function(t3) {
        return O2(1e3 * t3);
      }, O2.en = D2[g2], O2.Ls = D2, O2.p = {}, O2;
    });
  })(dayjs_min);
  var dayjs_minExports = dayjs_min.exports;
  const dayjs = /* @__PURE__ */ getDefaultExportFromCjs(dayjs_minExports);
  const _sfc_main$1c = /* @__PURE__ */ vue.defineComponent({
    __name: "conversation-item-isRead",
    props: {
      conversation: { type: Object, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const p2pMsgReceiptVisible = uni.$UIKitStore.localOptions.p2pMsgReceiptVisible;
      const conversationType = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationType(
        props.conversation.conversationId
      );
      const p2pMsgRotateDeg = vue.computed(() => {
        var _a2, _b, _c, _d;
        return (((_a2 = props == null ? void 0 : props.conversation) == null ? void 0 : _a2.msgReceiptTime) || 0) >= (((_d = (_c = (_b = props == null ? void 0 : props.conversation) == null ? void 0 : _b.lastMessage) == null ? void 0 : _c.messageRefer) == null ? void 0 : _d.createTime) || 0) ? 360 : 0;
      });
      const __returned__ = { props, p2pMsgReceiptVisible, conversationType, p2pMsgRotateDeg, Icon, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1b(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P && $setup.p2pMsgReceiptVisible ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 0,
      class: "p2p-msg-receipt-wrapper"
    }, [
      $setup.p2pMsgRotateDeg == 360 ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "icon-read-wrapper"
      }, [
        vue.createVNode($setup["Icon"], {
          type: "icon-read",
          size: 16
        })
      ])) : (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: "sector"
      }, [
        vue.createElementVNode(
          "span",
          {
            class: "cover-1",
            style: vue.normalizeStyle(`transform: rotate(${$setup.p2pMsgRotateDeg}deg)`)
          },
          null,
          4
          /* STYLE */
        ),
        vue.createElementVNode(
          "span",
          {
            class: vue.normalizeClass($setup.p2pMsgRotateDeg >= 180 ? "cover-2 cover-3" : "cover-2")
          },
          null,
          2
          /* CLASS */
        )
      ]))
    ])) : vue.createCommentVNode("v-if", true);
  }
  const ConversationItemIsRead = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$1b], ["__scopeId", "data-v-3cc8a826"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Conversation/conversation-list/conversation-item-isRead.vue"]]);
  const EMOJI_ICON_MAP_CONFIG$1 = {
    "[大笑]": "icon-a-1",
    "[开心]": "icon-a-2",
    "[色]": "icon-a-3",
    "[酷]": "icon-a-4",
    "[奸笑]": "icon-a-5",
    "[亲]": "icon-a-6",
    "[伸舌头]": "icon-a-7",
    "[眯眼]": "icon-a-8",
    "[可爱]": "icon-a-9",
    "[鬼脸]": "icon-a-10",
    "[偷笑]": "icon-a-11",
    "[喜悦]": "icon-a-12",
    "[狂喜]": "icon-a-13",
    "[惊讶]": "icon-a-14",
    "[流泪]": "icon-a-15",
    "[流汗]": "icon-a-16",
    "[天使]": "icon-a-17",
    "[笑哭]": "icon-a-18",
    "[尴尬]": "icon-a-19",
    "[惊恐]": "icon-a-20",
    "[大哭]": "icon-a-21",
    "[烦躁]": "icon-a-22",
    "[恐怖]": "icon-a-23",
    "[两眼冒星]": "icon-a-24",
    "[害羞]": "icon-a-25",
    "[睡着]": "icon-a-26",
    "[冒星]": "icon-a-27",
    "[口罩]": "icon-a-28",
    "[OK]": "icon-a-29",
    "[好吧]": "icon-a-30",
    "[鄙视]": "icon-a-31",
    "[难受]": "icon-a-32",
    "[不屑]": "icon-a-33",
    "[不舒服]": "icon-a-34",
    "[愤怒]": "icon-a-35",
    "[鬼怪]": "icon-a-36",
    "[发怒]": "icon-a-37",
    "[生气]": "icon-a-38",
    "[不高兴]": "icon-a-39",
    "[皱眉]": "icon-a-40",
    "[心碎]": "icon-a-41",
    "[心动]": "icon-a-42",
    "[好的]": "icon-a-43",
    "[低级]": "icon-a-44",
    "[赞]": "icon-a-45",
    "[鼓掌]": "icon-a-46",
    "[给力]": "icon-a-47",
    "[打你]": "icon-a-48",
    "[阿弥陀佛]": "icon-a-49",
    "[拜拜]": "icon-a-50",
    "[第一]": "icon-a-51",
    "[拳头]": "icon-a-52",
    "[手掌]": "icon-a-53",
    "[剪刀]": "icon-a-54",
    "[招手]": "icon-a-55",
    "[不要]": "icon-a-56",
    "[举着]": "icon-a-57",
    "[思考]": "icon-a-58",
    "[猪头]": "icon-a-59",
    "[不听]": "icon-a-60",
    "[不看]": "icon-a-61",
    "[不说]": "icon-a-62",
    "[猴子]": "icon-a-63",
    "[炸弹]": "icon-a-64",
    "[睡觉]": "icon-a-65",
    "[筋斗云]": "icon-a-66",
    "[火箭]": "icon-a-67",
    "[救护车]": "icon-a-68",
    "[便便]": "icon-a-70"
  };
  const emojiMap = {
    [t$2("Laugh")]: "icon-a-1",
    [t$2("Happy")]: "icon-a-2",
    [t$2("Sexy")]: "icon-a-3",
    [t$2("Cool")]: "icon-a-4",
    [t$2("Mischievous")]: "icon-a-5",
    [t$2("Kiss")]: "icon-a-6",
    [t$2("Spit")]: "icon-a-7",
    [t$2("Squint")]: "icon-a-8",
    [t$2("Cute")]: "icon-a-9",
    [t$2("Grimace")]: "icon-a-10",
    [t$2("Snicker")]: "icon-a-11",
    [t$2("Joy")]: "icon-a-12",
    [t$2("Ecstasy")]: "icon-a-13",
    [t$2("Surprise")]: "icon-a-14",
    [t$2("Tears")]: "icon-a-15",
    [t$2("Sweat")]: "icon-a-16",
    [t$2("Angle")]: "icon-a-17",
    [t$2("Funny")]: "icon-a-18",
    [t$2("Awkward")]: "icon-a-19",
    [t$2("Thrill")]: "icon-a-20",
    [t$2("Cry")]: "icon-a-21",
    [t$2("Fretting")]: "icon-a-22",
    [t$2("Terrorist")]: "icon-a-23",
    [t$2("Halo")]: "icon-a-24",
    [t$2("Shame")]: "icon-a-25",
    [t$2("Sleep")]: "icon-a-26",
    [t$2("Tired")]: "icon-a-27",
    [t$2("Mask")]: "icon-a-28",
    [t$2("ok")]: "icon-a-29",
    [t$2("AllRight")]: "icon-a-30",
    [t$2("Despise")]: "icon-a-31",
    [t$2("Uncomfortable")]: "icon-a-32",
    [t$2("Disdain")]: "icon-a-33",
    [t$2("ill")]: "icon-a-34",
    [t$2("Mad")]: "icon-a-35",
    [t$2("Ghost")]: "icon-a-36",
    [t$2("Angry")]: "icon-a-37",
    [t$2("Angry")]: "icon-a-38",
    [t$2("Unhappy")]: "icon-a-39",
    [t$2("Frown")]: "icon-a-40",
    [t$2("Broken")]: "icon-a-41",
    [t$2("Beckoning")]: "icon-a-42",
    [t$2("Ok")]: "icon-a-43",
    [t$2("Low")]: "icon-a-44",
    [t$2("Nice")]: "icon-a-45",
    [t$2("Applause")]: "icon-a-46",
    [t$2("GoodJob")]: "icon-a-47",
    [t$2("Hit")]: "icon-a-48",
    [t$2("Please")]: "icon-a-49",
    [t$2("Bye")]: "icon-a-50",
    [t$2("First")]: "icon-a-51",
    [t$2("Fist")]: "icon-a-52",
    [t$2("GiveMeFive")]: "icon-a-53",
    [t$2("Knife")]: "icon-a-54",
    [t$2("Hi")]: "icon-a-55",
    [t$2("No")]: "icon-a-56",
    [t$2("Hold")]: "icon-a-57",
    [t$2("Think")]: "icon-a-58",
    [t$2("Pig")]: "icon-a-59",
    [t$2("NoListen")]: "icon-a-60",
    [t$2("NoLook")]: "icon-a-61",
    [t$2("NoWords")]: "icon-a-62",
    [t$2("Monkey")]: "icon-a-63",
    [t$2("Bomb")]: "icon-a-64",
    [t$2("Sleep")]: "icon-a-65",
    [t$2("Cloud")]: "icon-a-66",
    [t$2("Rocket")]: "icon-a-67",
    [t$2("Ambulance")]: "icon-a-68",
    [t$2("Poop")]: "icon-a-70"
  };
  const emojiRegExp = new RegExp(
    "(" + Object.keys(EMOJI_ICON_MAP_CONFIG$1).map((item) => {
      const left = `\\${item.slice(0, 1)}`;
      const right = `\\${item.slice(-1)}`;
      const mid = item.slice(1, -1);
      return `${left}${mid}${right}`;
    }).join("|") + ")",
    "g"
  );
  const events = {
    // 自己发出一条消息
    SEND_MSG: "sendMsg",
    // 发送消息失败
    SEND_MSG_FAILED: "sendMsgFailed",
    // 收到一条消息
    ON_MSG: "onMsg",
    // 加载更多
    ON_LOAD_MORE: "onLoadMore",
    // 首次进入聊天页并获取历史记录
    ON_CHAT_MOUNTED: "onChatMounted",
    // 重新编辑撤回消息
    ON_REEDIT_MSG: "onReEditMsg",
    // 页面触底
    ON_REACH_BOTTOM: "onReachBottom",
    // 页面触顶
    ON_REACH_TOP: "onReactTop",
    // 回复消息
    REPLY_MSG: "replyMsg",
    // input框聚焦
    ON_INPUT_FOCUS_CHANGE: "onInputFocusChange",
    // input框失焦
    ON_INPUT_BLUR: "onInputBlur",
    // 滚动到底部
    ON_SCROLL_BOTTOM: "onScrollBottom",
    // @群成员
    AIT_TEAM_MEMBER: "aitTeamMember",
    // 表情框弹起与收起变化
    EMOJI_AREA_CHANGE: "emojiAreaChange",
    // 获取历史消息
    GET_HISTORY_MSG: "getHistoryMsg",
    // 取消转发消息
    CANCEL_FORWARD_MSG: "cancelForwardMsg",
    // 确认转发消息
    CONFIRM_FORWARD_MSG: "confirmForwardMsg",
    // @消息  @群成员
    HANDLE_AIT_MEMBER: "handleAitMember",
    // 关闭@弹窗
    CLOSE_AIT_POPUP: "closeAitPopup",
    // 表情点击
    EMOJI_CLICK: "emojiClick",
    // 表情删除
    EMOJI_DELETE: "emojiDelete",
    // 表情发送
    EMOJI_SEND: "emojiSend",
    // 好友选择
    FRIEND_SELECT: "friendSelect",
    // 处理滚动穿透
    HANDLE_MOVE_THROUGH: "handleMoveThrough",
    // 关闭表情、语音面板
    CLOSE_PANEL: "closePanel",
    // 语音消息url改变
    AUDIO_URL_CHANGE: "audioUrlChange"
  };
  const HISTORY_LIMIT$1 = 15;
  const MSG_ID_FLAG = "message-item-";
  const AT_ALL_ACCOUNT$1 = "ait_all";
  const ALLOW_AT = "yxAllowAt";
  const REPLY_MSG_TYPE_MAP = {
    [Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE]: t$2("imgMsgText"),
    [Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO]: t$2("audioMsgText"),
    [Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO]: t$2("videoMsgText"),
    [Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE]: t$2("fileMsgText")
  };
  const STORAGE_KEY = "__yx_im_options__";
  const g2StatusMap = {
    1: t$2("callDurationText"),
    2: t$2("callCancelText"),
    3: t$2("callRejectedText"),
    4: t$2("callTimeoutText"),
    5: t$2("callBusyText")
  };
  const msgRecallTime = 2 * 60 * 1e3;
  const getUniPlatform = () => {
    return uni.getSystemInfoSync().uniPlatform;
  };
  const isAndroidApp = uni.getSystemInfoSync().platform == "android" && uni.getSystemInfoSync().uniPlatform == "app";
  uni.getSystemInfoSync().platform == "ios" && uni.getSystemInfoSync().uniPlatform == "app";
  const isHarmonyOs = uni.getSystemInfoSync().platform == "harmonyos" && uni.getSystemInfoSync().uniPlatform === "app";
  const isAndroidOrIosApp = uni.getSystemInfoSync().uniPlatform == "app" && (uni.getSystemInfoSync().platform == "android" || uni.getSystemInfoSync().platform == "ios");
  const isIosWeb = uni.getSystemInfoSync().uniPlatform === "web" && uni.getSystemInfoSync().platform === "ios";
  const isApp = uni.getSystemInfoSync().uniPlatform == "app";
  const isWxApp = uni.getSystemInfoSync().uniPlatform == "mp-weixin";
  const isWeb = uni.getSystemInfoSync().uniPlatform === "web";
  function stopAllAudio() {
    uni.$emit(events.AUDIO_URL_CHANGE, "");
  }
  const convertSecondsToTime = (seconds) => {
    if (!seconds) {
      return null;
    }
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds - hours * 3600) / 60);
    const remainingSeconds = seconds - hours * 3600 - minutes * 60;
    let timeString = "";
    const includeHours = seconds >= 3600;
    if (includeHours) {
      if (hours < 10) {
        timeString += "0";
      }
      timeString += hours.toString() + ":";
    }
    if (minutes < 10) {
      timeString += "0";
    }
    timeString += minutes.toString() + ":";
    if (remainingSeconds < 10) {
      timeString += "0";
    }
    timeString += remainingSeconds.toString();
    return timeString;
  };
  const startCall = (options) => {
    try {
      uni.$UIKitCallKit.toCallPage(
        {
          calledAccount: options.remoteUserAccid,
          // currentUserAccid: options.currentUserAccid,
          type: options.type,
          calledShowName: options.remoteShowName
        },
        () => {
          formatAppLog("log", "at utils/index.ts:151", "toCallPage: ", {
            remoteUserAccid: options.remoteUserAccid,
            currentUserAccid: options.currentUserAccid,
            type: options.type,
            remoteShowName: options.remoteShowName
          });
        }
      );
    } catch (error) {
      formatAppLog("log", "at utils/index.ts:160", "handleVideoCall error", error);
    }
  };
  const EMOJI_ICON_MAP_CONFIG = {
    "[大笑]": "icon-a-1",
    "[开心]": "icon-a-2",
    "[色]": "icon-a-3",
    "[酷]": "icon-a-4",
    "[奸笑]": "icon-a-5",
    "[亲]": "icon-a-6",
    "[伸舌头]": "icon-a-7",
    "[眯眼]": "icon-a-8",
    "[可爱]": "icon-a-9",
    "[鬼脸]": "icon-a-10",
    "[偷笑]": "icon-a-11",
    "[喜悦]": "icon-a-12",
    "[狂喜]": "icon-a-13",
    "[惊讶]": "icon-a-14",
    "[流泪]": "icon-a-15",
    "[流汗]": "icon-a-16",
    "[天使]": "icon-a-17",
    "[笑哭]": "icon-a-18",
    "[尴尬]": "icon-a-19",
    "[惊恐]": "icon-a-20",
    "[大哭]": "icon-a-21",
    "[烦躁]": "icon-a-22",
    "[恐怖]": "icon-a-23",
    "[两眼冒星]": "icon-a-24",
    "[害羞]": "icon-a-25",
    "[睡着]": "icon-a-26",
    "[冒星]": "icon-a-27",
    "[口罩]": "icon-a-28",
    "[OK]": "icon-a-29",
    "[好吧]": "icon-a-30",
    "[鄙视]": "icon-a-31",
    "[难受]": "icon-a-32",
    "[不屑]": "icon-a-33",
    "[不舒服]": "icon-a-34",
    "[愤怒]": "icon-a-35",
    "[鬼怪]": "icon-a-36",
    "[发怒]": "icon-a-37",
    "[生气]": "icon-a-38",
    "[不高兴]": "icon-a-39",
    "[皱眉]": "icon-a-40",
    "[心碎]": "icon-a-41",
    "[心动]": "icon-a-42",
    "[好的]": "icon-a-43",
    "[低级]": "icon-a-44",
    "[赞]": "icon-a-45",
    "[鼓掌]": "icon-a-46",
    "[给力]": "icon-a-47",
    "[打你]": "icon-a-48",
    "[阿弥陀佛]": "icon-a-49",
    "[拜拜]": "icon-a-50",
    "[第一]": "icon-a-51",
    "[拳头]": "icon-a-52",
    "[手掌]": "icon-a-53",
    "[剪刀]": "icon-a-54",
    "[招手]": "icon-a-55",
    "[不要]": "icon-a-56",
    "[举着]": "icon-a-57",
    "[思考]": "icon-a-58",
    "[猪头]": "icon-a-59",
    "[不听]": "icon-a-60",
    "[不看]": "icon-a-61",
    "[不说]": "icon-a-62",
    "[猴子]": "icon-a-63",
    "[炸弹]": "icon-a-64",
    "[睡觉]": "icon-a-65",
    "[筋斗云]": "icon-a-66",
    "[火箭]": "icon-a-67",
    "[救护车]": "icon-a-68",
    "[便便]": "icon-a-70"
  };
  function replaceEmoji(text, emojiMap2) {
    const defaultEmojiMap = {
      "[Laugh]": "[大笑]",
      "[Happy]": "[开心]",
      "[Sexy]": "[色]",
      "[Cool]": "[酷]",
      "[Mischievous]": "[奸笑]",
      "[Kiss]": "[亲]",
      "[Spit]": "[伸舌头]",
      "[Squint]": "[眯眼]",
      "[Cute]": "[可爱]",
      "[Grimace]": "[鬼脸]",
      "[Snicker]": "[偷笑]",
      "[Joy]": "[喜悦]",
      "[Ecstasy]": "[狂喜]",
      "[Surprise]": "[惊讶]",
      "[Tears]": "[流泪]",
      "[Sweat]": "[流汗]",
      "[Angle]": "[天使]",
      "[Funny]": "[笑哭]",
      "[Awkward]": "[尴尬]",
      "[Thrill]": "[惊恐]",
      "[Cry]": "[大哭]",
      "[Fretting]": "[烦躁]",
      "[Terrorist]": "[恐怖]",
      "[Halo]": "[两眼冒星]",
      "[Shame]": "[害羞]",
      "[Sleep]": "[睡着]",
      "[Tired]": "[睡觉]",
      "[Mask]": "[口罩]",
      "[Ok]": "[OK]",
      "[All right]": "[好吧]",
      "[Despise]": "[鄙视]",
      "[Uncomfortable]": "[难受]",
      "[Disdain]": "[不屑]",
      "[ill]": "[不舒服]",
      "[Mad]": "[愤怒]",
      "[Ghost]": "[鬼怪]",
      "[Huff]": "[发怒]",
      "[Angry]": "[生气]",
      "[Unhappy]": "[不高兴]",
      "[Frown]": "[皱眉]",
      "[Broken]": "[心碎]",
      "[Beckoning]": "[心动]",
      "[Low]": "[低级]",
      "[Nice]": "[赞]",
      "[Applause]": "[鼓掌]",
      "[Good job]": "[给力]",
      "[Hit]": "[打你]",
      "[Please]": "[阿弥陀佛]",
      "[Bye]": "[拜拜]",
      "[First]": "[第一]",
      "[Fist]": "[拳头]",
      "[Give me five]": "[招手]",
      "[Knife]": "[剪刀]",
      "[Hi]": "[招手]",
      "[No]": "[不要]",
      "[Hold]": "[举着]",
      "[Think]": "[思考]",
      "[Pig]": "[猪头]",
      "[No listen]": "[不听]",
      "[No look]": "[不看]",
      "[No words]": "[不说]",
      "[Monkey]": "[猴子]",
      "[Bomb]": "[炸弹]",
      "[Sleeping]": "[睡觉]",
      "[Cloud]": "[筋斗云]",
      "[Rocket]": "[火箭]",
      "[Ambulance]": "[救护车]",
      "[Poop]": "[便便]"
    };
    const emojiMapConfig = emojiMap2 || defaultEmojiMap;
    const emojiMapRegex = new RegExp(
      "(" + Object.keys(emojiMapConfig).map((item) => {
        const left = `\\${item.slice(0, 1)}`;
        const right = `\\${item.slice(-1)}`;
        const mid = item.slice(1, -1);
        return `${left}${mid}${right}`;
      }).join("|") + ")",
      "g"
    );
    return text.replace(emojiMapRegex, function(matched) {
      return emojiMapConfig[matched];
    });
  }
  new RegExp(
    "(" + Object.keys(EMOJI_ICON_MAP_CONFIG).map((item) => {
      const left = `\\${item.slice(0, 1)}`;
      const right = `\\${item.slice(-1)}`;
      const mid = item.slice(1, -1);
      return `${left}${mid}${right}`;
    }).join("|") + ")",
    "g"
  );
  const _sfc_main$1b = /* @__PURE__ */ vue.defineComponent({
    __name: "conversation-item-last-msg-content",
    props: {
      lastMessage: { type: Object, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const parseTextWithEmoji = (text) => {
        if (!text)
          return [];
        const matches = [];
        let match;
        const regexEmoji = emojiRegExp;
        while ((match = regexEmoji.exec(text)) !== null) {
          matches.push({
            type: "emoji",
            value: match[0],
            index: match.index
          });
          const fillText = " ".repeat(match[0].length);
          text = text.replace(match[0], fillText);
        }
        text = text.replace(regexEmoji, " ");
        if (text) {
          text.split(" ").filter((item) => item.trim()).map((item) => {
            const index = text == null ? void 0 : text.indexOf(item);
            matches.push({
              type: "text",
              value: item,
              index
            });
            const fillText = " ".repeat(item.length);
            text = text.replace(item, fillText);
          });
        }
        return matches.sort((a2, b2) => a2.index - b2.index);
      };
      const textArr = vue.computed(() => {
        return parseTextWithEmoji(props.lastMessage.text);
      });
      const translateMsg = (key) => {
        const text = {
          textMsgText: t$2("textMsgText"),
          customMsgText: t$2("customMsgText"),
          audioMsgText: t$2("audioMsgText"),
          videoMsgText: t$2("videoMsgText"),
          fileMsgText: t$2("fileMsgText"),
          callMsgText: t$2("callMsgText"),
          geoMsgText: t$2("geoMsgText"),
          imgMsgText: t$2("imgMsgText"),
          notiMsgText: t$2("notiMsgText"),
          robotMsgText: t$2("robotMsgText"),
          tipMsgText: t$2("tipMsgText"),
          unknowMsgText: t$2("unknowMsgText")
        }[key] || "";
        return `[${text}]`;
      };
      const __returned__ = { props, parseTextWithEmoji, textArr, translateMsg, Icon, get V2NIMConst() {
        return Ma;
      }, get t() {
        return t$2;
      }, get EMOJI_ICON_MAP_CONFIG() {
        return EMOJI_ICON_MAP_CONFIG$1;
      }, get isWxApp() {
        return isWxApp;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      $setup.props.lastMessage.lastMessageState === $setup.V2NIMConst.V2NIMLastMessageState.V2NIM_MESSAGE_STATUS_REVOKE ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 0 },
        vue.toDisplayString($setup.t("recall")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 1 },
        vue.toDisplayString($setup.t("conversationNotificationText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.sendingState === $setup.V2NIMConst.V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_FAILED ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 2 },
        vue.toDisplayString($setup.t("conversationSendFailText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 3 },
        vue.toDisplayString($setup.translateMsg("fileMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 4 },
        vue.toDisplayString($setup.translateMsg("imgMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 5 },
        vue.toDisplayString($setup.props.lastMessage.text || $setup.translateMsg("customMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 6 },
        vue.toDisplayString($setup.translateMsg("audioMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 7 },
        vue.toDisplayString($setup.translateMsg("callMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 8 },
        vue.toDisplayString($setup.translateMsg("geoMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_ROBOT ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 9 },
        vue.toDisplayString($setup.translateMsg("robotMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TIPS ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 10 },
        vue.toDisplayString($setup.translateMsg("tipMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO ? (vue.openBlock(), vue.createElementBlock(
        "div",
        { key: 11 },
        vue.toDisplayString($setup.translateMsg("videoMsgText")),
        1
        /* TEXT */
      )) : $setup.props.lastMessage.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 12,
        class: "msg-conversation-text-wrap"
      }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.textArr, (item) => {
            return vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              null,
              [
                item.type === "text" ? (vue.openBlock(), vue.createElementBlock(
                  "span",
                  {
                    key: 0,
                    class: "msg-conversation-text"
                  },
                  vue.toDisplayString(item.value),
                  1
                  /* TEXT */
                )) : item.type === "emoji" ? (vue.openBlock(), vue.createElementBlock(
                  "span",
                  {
                    key: 1,
                    class: vue.normalizeClass(
                      $setup.isWxApp ? "msg-conversation-text-emoji-wx" : "msg-conversation-text-emoji"
                    )
                  },
                  [
                    vue.createVNode($setup["Icon"], {
                      type: $setup.EMOJI_ICON_MAP_CONFIG[item.value],
                      size: 16
                    }, null, 8, ["type"])
                  ],
                  2
                  /* CLASS */
                )) : vue.createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            );
          }),
          256
          /* UNKEYED_FRAGMENT */
        ))
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const LastMsgContent = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$1a], ["__scopeId", "data-v-85a54179"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Conversation/conversation-list/conversation-item-last-msg-content.vue"]]);
  const max = 99;
  const _sfc_main$1a = /* @__PURE__ */ vue.defineComponent({
    __name: "conversation-item",
    props: {
      conversation: { type: Object, required: true },
      showMoreActions: { type: Boolean, required: false, default: false }
    },
    emits: ["click", "delete", "stickyToTop", "leftSlide"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const moreActions = vue.computed(() => {
        return [
          {
            name: props.conversation.stickTop ? t$2("deleteStickTopText") : t$2("addStickTopText"),
            class: "action-top",
            type: "action-top"
          },
          {
            name: t$2("deleteSessionText"),
            class: "action-delete",
            type: "action-delete"
          }
        ];
      });
      const handleClick = (type) => {
        if (type === "action-top") {
          emit("stickyToTop", props.conversation);
        } else {
          emit("delete", props.conversation);
        }
      };
      const teamAvatar = vue.computed(() => {
        if (props.conversation.type === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
          const { avatar } = props.conversation;
          return avatar;
        }
      });
      const sessionName = vue.computed(() => {
        if (props.conversation.name) {
          return props.conversation.name;
        }
        return props.conversation.conversationId;
      });
      const to2 = vue.computed(() => {
        const res = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationTargetId(
          props.conversation.conversationId
        );
        return res;
      });
      const date = vue.computed(() => {
        var _a2;
        const time = ((_a2 = props.conversation.lastMessage) == null ? void 0 : _a2.messageRefer.createTime) || props.conversation.updateTime;
        if (!time) {
          return "";
        }
        const _d = dayjs(time);
        const isCurrentDay = _d.isSame(dayjs(), "day");
        const isCurrentYear = _d.isSame(dayjs(), "year");
        return _d.format(
          isCurrentDay ? "HH:mm" : isCurrentYear ? "MM-DD HH:mm" : "YYYY-MM-DD HH:mm"
        );
      });
      const unread = vue.computed(() => {
        return props.conversation.unreadCount > 0 ? props.conversation.unreadCount > max ? `${max}+` : props.conversation.unreadCount + "" : "";
      });
      const isMute = vue.computed(() => {
        return !!props.conversation.mute;
      });
      const beMentioned = vue.computed(() => {
        var _a2;
        return !!((_a2 = props.conversation.aitMsgs) == null ? void 0 : _a2.length);
      });
      const showConversationUnread = vue.computed(() => {
        var _a2, _b, _c, _d, _e2, _f, _g, _h, _i2, _j;
        const myUserAccountId = uni.$UIKitNIM.V2NIMLoginService.getLoginUser();
        if (props.conversation.type === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) {
          return ((_b = (_a2 = props == null ? void 0 : props.conversation) == null ? void 0 : _a2.lastMessage) == null ? void 0 : _b.messageRefer.senderId) === myUserAccountId && ((_d = (_c = props == null ? void 0 : props.conversation) == null ? void 0 : _c.lastMessage) == null ? void 0 : _d.messageType) !== Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL && ((_f = (_e2 = props == null ? void 0 : props.conversation) == null ? void 0 : _e2.lastMessage) == null ? void 0 : _f.messageType) !== Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION && ((_h = (_g = props == null ? void 0 : props.conversation) == null ? void 0 : _g.lastMessage) == null ? void 0 : _h.sendingState) === Ma.V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED && ((_j = (_i2 = props == null ? void 0 : props.conversation) == null ? void 0 : _i2.lastMessage) == null ? void 0 : _j.lastMessageState) !== Ma.V2NIMLastMessageState.V2NIM_MESSAGE_STATUS_REVOKE;
        } else {
          return false;
        }
      });
      let startX = 0, startY = 0;
      function handleTouchStart(event) {
        startX = event.changedTouches[0].pageX;
        startY = event.changedTouches[0].pageY;
      }
      function handleTouchMove(event) {
        const moveEndX = event.changedTouches[0].pageX;
        const moveEndY = event.changedTouches[0].pageY;
        const X2 = moveEndX - startX + 20;
        const Y2 = moveEndY - startY;
        if (Math.abs(X2) > Math.abs(Y2) && X2 > 0) {
          emit("leftSlide", null);
        } else if (Math.abs(X2) > Math.abs(Y2) && X2 < 0) {
          emit("leftSlide", props.conversation);
        }
      }
      function handleConversationItemClick() {
        if (props.showMoreActions) {
          emit("leftSlide", null);
          return;
        }
        emit("click", props.conversation);
      }
      vue.onUpdated(() => {
        formatAppLog("log", "at pages/Conversation/conversation-list/conversation-item.vue:249", "onUpdated", props.conversation.unreadCount);
      });
      const __returned__ = { props, emit, moreActions, handleClick, teamAvatar, sessionName, to: to2, date, max, unread, isMute, beMentioned, showConversationUnread, get startX() {
        return startX;
      }, set startX(v2) {
        startX = v2;
      }, get startY() {
        return startY;
      }, set startY(v2) {
        startY = v2;
      }, handleTouchStart, handleTouchMove, handleConversationItemClick, Avatar, Appellation, Icon, get t() {
        return t$2;
      }, get V2NIMConst() {
        return Ma;
      }, ConversationItemIsRead, LastMsgContent };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "div",
      {
        class: vue.normalizeClass([
          "conversation-item-container",
          {
            "show-action-list": $props.showMoreActions,
            "stick-on-top": $props.conversation.stickTop
          }
        ]),
        onTouchstart: $setup.handleTouchStart,
        onTouchmove: $setup.handleTouchMove,
        onClick: _cache[0] || (_cache[0] = ($event) => $setup.handleConversationItemClick())
      },
      [
        vue.createElementVNode("div", { class: "conversation-item-content" }, [
          vue.createElementVNode("div", { class: "conversation-item-left" }, [
            $setup.unread ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: "unread"
            }, [
              $setup.isMute ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: "dot"
              })) : (vue.openBlock(), vue.createElementBlock(
                "div",
                {
                  key: 1,
                  class: "badge"
                },
                vue.toDisplayString($setup.unread),
                1
                /* TEXT */
              ))
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["Avatar"], {
              account: $setup.to,
              avatar: $setup.teamAvatar
            }, null, 8, ["account", "avatar"])
          ]),
          vue.createElementVNode("div", { class: "conversation-item-right" }, [
            vue.createElementVNode("div", { class: "conversation-item-top" }, [
              $props.conversation.type === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P ? (vue.openBlock(), vue.createBlock($setup["Appellation"], {
                key: 0,
                class: "conversation-item-title",
                account: $setup.to
              }, null, 8, ["account"])) : (vue.openBlock(), vue.createElementBlock(
                "span",
                {
                  key: 1,
                  class: "conversation-item-title"
                },
                vue.toDisplayString($setup.sessionName),
                1
                /* TEXT */
              )),
              vue.createElementVNode(
                "span",
                { class: "conversation-item-time" },
                vue.toDisplayString($setup.date),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("div", { class: "conversation-item-desc" }, [
              $setup.beMentioned ? (vue.openBlock(), vue.createElementBlock(
                "span",
                {
                  key: 0,
                  class: "beMentioned"
                },
                vue.toDisplayString("[" + $setup.t("someoneText") + "@" + $setup.t("meText") + "]"),
                1
                /* TEXT */
              )) : vue.createCommentVNode("v-if", true),
              $setup.showConversationUnread ? (vue.openBlock(), vue.createBlock($setup["ConversationItemIsRead"], {
                key: 1,
                conversation: $setup.props.conversation
              }, null, 8, ["conversation"])) : vue.createCommentVNode("v-if", true),
              $setup.props.conversation.lastMessage ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 2,
                class: "conversation-item-desc-content"
              }, [
                vue.createVNode($setup["LastMsgContent"], {
                  lastMessage: $setup.props.conversation.lastMessage
                }, null, 8, ["lastMessage"])
              ])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("span", { class: "conversation-item-desc-ait" }, [
                $setup.isMute ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
                  key: 0,
                  iconClassName: "conversation-item-desc-state",
                  type: "icon-xiaoximiandarao",
                  color: "#ccc"
                })) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ])
        ]),
        vue.createElementVNode("div", { class: "right-action-list" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.moreActions, (action2) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                key: action2.type,
                class: vue.normalizeClass(["right-action-item", action2.class]),
                onClick: () => $setup.handleClick(action2.type)
              }, vue.toDisplayString(action2.name), 11, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ],
      34
      /* CLASS, NEED_HYDRATION */
    );
  }
  const ConversationItem = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$19], ["__scopeId", "data-v-e7083c59"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Conversation/conversation-list/conversation-item.vue"]]);
  const translate = (key) => {
    const text = {
      textMsgText: t$2("textMsgText"),
      customMsgText: t$2("customMsgText"),
      audioMsgText: t$2("audioMsgText"),
      videoMsgText: t$2("videoMsgText"),
      fileMsgText: t$2("fileMsgText"),
      callMsgText: t$2("callMsgText"),
      geoMsgText: t$2("geoMsgText"),
      imgMsgText: t$2("imgMsgText"),
      notiMsgText: t$2("notiMsgText"),
      robotMsgText: t$2("robotMsgText"),
      tipMsgText: t$2("tipMsgText"),
      unknowMsgText: t$2("unknowMsgText")
    }[key] || "";
    return `[${text}]`;
  };
  const getMsgContentTipByType = (msg) => {
    const { messageType, text } = msg;
    switch (messageType) {
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT:
        return text || translate("textMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE:
        return translate("fileMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE:
        return translate("imgMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM:
        return text || translate("customMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO:
        return translate("audioMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL:
        return translate("callMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_LOCATION:
        return translate("geoMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION:
        return translate("notiMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_ROBOT:
        return translate("robotMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TIPS:
        return translate("tipMsgText");
      case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO:
        return translate("videoMsgText");
      default:
        return translate("unknowMsgText");
    }
  };
  const setTabUnread = () => {
    var _a2, _b, _c;
    const routes = getCurrentPages();
    const curRoute = routes[routes.length - 1].route;
    const tabPaths = [
      "pages/user-card/my/index",
      "pages/Contact/index",
      "pages/Conversation/index"
    ];
    if (curRoute && !tabPaths.includes(curRoute)) {
      return;
    }
    const store = uni.$UIKitStore;
    const enableV2CloudConversation = (_a2 = store == null ? void 0 : store.sdkOptions) == null ? void 0 : _a2.enableV2CloudConversation;
    const unread = (enableV2CloudConversation ? (_b = store == null ? void 0 : store.conversationStore) == null ? void 0 : _b.totalUnreadCount : (_c = store == null ? void 0 : store.localConversationStore) == null ? void 0 : _c.totalUnreadCount) || 0;
    if (unread === 0) {
      uni.hideTabBarRedDot({
        //隐藏数字
        index: 0
        //tabbar下标
      });
    } else {
      uni.showTabBarRedDot({
        index: 0
        //tabbar下标
      });
    }
  };
  const setContactTabUnread = () => {
    var _a2, _b;
    const routes = getCurrentPages();
    const curRoute = routes[routes.length - 1].route;
    const tabPaths = [
      "pages/user-card/my/index",
      "pages/Contact/index",
      "pages/Conversation/index"
    ];
    if (curRoute && !tabPaths.includes(curRoute)) {
      return;
    }
    const unread = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sysMsgStore) == null ? void 0 : _b.getTotalUnreadMsgsCount();
    if (unread === 0) {
      uni.hideTabBarRedDot({
        //隐藏数字
        index: 1
        //tabbar下标
      });
    } else {
      uni.showTabBarRedDot({
        index: 1
        //tabbar下标
      });
    }
  };
  const _sfc_main$19 = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const conversationList = vue.ref([]);
      const addDropdownVisible = vue.ref(false);
      const currentMoveSessionId = vue.ref("");
      let buttonClass = "button-box";
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      const handleSessionItemLeftSlide = (conversation) => {
        if (conversation) {
          currentMoveSessionId.value = conversation.conversationId;
        } else {
          currentMoveSessionId.value = "";
        }
      };
      let flag = false;
      const handleSessionItemClick = async (conversation) => {
        var _a3, _b2;
        if (flag)
          return;
        currentMoveSessionId.value = "";
        try {
          flag = true;
          if (conversation.type === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM || conversation.type === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_SUPER_TEAM) {
            if (enableV2CloudConversation) {
              await ((_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.markConversationReadActive(
                conversation.conversationId
              ));
            } else {
              await ((_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.markConversationReadActive(
                conversation.conversationId
              ));
            }
          }
          await uni.$UIKitStore.uiStore.selectConversation(
            conversation.conversationId
          );
          customNavigateTo({
            url: "/pages/Chat/index"
          });
        } catch {
          uni.showToast({
            title: t$2("selectSessionFailText"),
            icon: "error"
          });
        } finally {
          flag = false;
        }
      };
      const handleSessionItemDeleteClick = async (conversation) => {
        var _a3, _b2;
        try {
          if (enableV2CloudConversation) {
            await ((_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.deleteConversationActive(
              conversation.conversationId
            ));
          } else {
            await ((_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.deleteConversationActive(
              conversation.conversationId
            ));
          }
          currentMoveSessionId.value = "";
        } catch {
          uni.showToast({
            title: t$2("deleteSessionFailText"),
            icon: "error"
          });
        }
      };
      const handleSessionItemStickTopChange = async (conversation) => {
        var _a3, _b2, _c, _d, _e2, _f, _g, _h;
        if (conversation.stickTop) {
          try {
            if (enableV2CloudConversation) {
              await ((_b2 = (_a3 = uni.$UIKitStore) == null ? void 0 : _a3.conversationStore) == null ? void 0 : _b2.stickTopConversationActive(
                conversation.conversationId,
                false
              ));
            } else {
              await ((_d = (_c = uni.$UIKitStore) == null ? void 0 : _c.localConversationStore) == null ? void 0 : _d.stickTopConversationActive(
                conversation.conversationId,
                false
              ));
            }
          } catch {
            uni.showToast({
              title: t$2("deleteStickTopFailText"),
              icon: "error"
            });
          }
        } else {
          try {
            if (enableV2CloudConversation) {
              await ((_f = (_e2 = uni.$UIKitStore) == null ? void 0 : _e2.conversationStore) == null ? void 0 : _f.stickTopConversationActive(
                conversation.conversationId,
                true
              ));
            } else {
              await ((_h = (_g = uni.$UIKitStore) == null ? void 0 : _g.localConversationStore) == null ? void 0 : _h.stickTopConversationActive(
                conversation.conversationId,
                true
              ));
            }
          } catch {
            uni.showToast({
              title: t$2("addStickTopFailText"),
              icon: "error"
            });
          }
        }
      };
      const showAddDropdown = () => {
        addDropdownVisible.value = true;
      };
      const hideAddDropdown = () => {
        addDropdownVisible.value = false;
      };
      const onDropdownClick = (urlType) => {
        const urlMap2 = {
          // 添加好友
          addFriend: "/pages/Friend/add-friend/index",
          // 创建群聊
          createGroup: "/pages/Group/group-create/index"
        };
        addDropdownVisible.value = false;
        customNavigateTo({
          url: urlMap2[urlType]
        });
      };
      const goToSearchPage = () => {
        customNavigateTo({
          url: "/pages/Conversation/conversation-search/index"
        });
      };
      onHide(() => {
        addDropdownVisible.value = false;
      });
      const conversationListWatch = autorun(() => {
        var _a3, _b2, _c, _d;
        const _conversationList = enableV2CloudConversation ? (_b2 = (_a3 = uni.$UIKitStore) == null ? void 0 : _a3.uiStore) == null ? void 0 : _b2.conversations : (_d = (_c = uni.$UIKitStore) == null ? void 0 : _c.uiStore) == null ? void 0 : _d.localConversations;
        conversationList.value = _conversationList == null ? void 0 : _conversationList.map(
          (conversation) => {
            return {
              ...conversation,
              renderKey: conversation.conversationId
            };
          }
        ).sort(
          (a2, b2) => b2.sortOrder - a2.sortOrder
        );
        setTabUnread();
      });
      const getTotalUnreadMsgsCountWatch = autorun(() => {
        var _a3, _b2;
        (_b2 = (_a3 = uni.$UIKitStore) == null ? void 0 : _a3.sysMsgStore) == null ? void 0 : _b2.getTotalUnreadMsgsCount();
        setContactTabUnread();
      });
      vue.onUnmounted(() => {
        conversationListWatch();
        getTotalUnreadMsgsCountWatch();
      });
      const __returned__ = { conversationList, addDropdownVisible, currentMoveSessionId, get buttonClass() {
        return buttonClass;
      }, set buttonClass(v2) {
        buttonClass = v2;
      }, enableV2CloudConversation, handleSessionItemLeftSlide, get flag() {
        return flag;
      }, set flag(v2) {
        flag = v2;
      }, handleSessionItemClick, handleSessionItemDeleteClick, handleSessionItemStickTopChange, showAddDropdown, hideAddDropdown, onDropdownClick, goToSearchPage, conversationListWatch, getTotalUnreadMsgsCountWatch, Icon, NetworkAlert, Empty, ConversationItem, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "conversation-wrapper" }, [
      $setup.addDropdownVisible ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "dropdown-mark",
          onTouchstart: $setup.hideAddDropdown
        },
        null,
        32
        /* NEED_HYDRATION */
      )) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("div", { class: "navigation-bar" }, [
        vue.createElementVNode("div", { class: "logo-box" }, [
          vue.createElementVNode("image", {
            src: "https://yx-web-nosdn.netease.im/common/bbcd9929e31bfee02663fc0bcdabe1c5/yx-logo.png",
            class: "logo-img"
          }),
          vue.createElementVNode(
            "div",
            null,
            vue.toDisplayString($setup.t("appText")),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode(
          "div",
          {
            class: vue.normalizeClass($setup.buttonClass)
          },
          [
            vue.createElementVNode("div", {
              class: "button-icon-add",
              onClick: $setup.showAddDropdown
            }, [
              vue.createVNode($setup["Icon"], { type: "icon-More" })
            ]),
            $setup.addDropdownVisible ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: "dropdown-container"
            }, [
              vue.createElementVNode("div", { class: "add-menu-list" }, [
                vue.createElementVNode("div", {
                  class: "add-menu-item",
                  onClick: _cache[0] || (_cache[0] = ($event) => $setup.onDropdownClick("addFriend"))
                }, [
                  vue.createVNode($setup["Icon"], {
                    type: "icon-tianjiahaoyou",
                    style: { marginRight: "5px" }
                  }),
                  vue.createTextVNode(
                    " " + vue.toDisplayString($setup.t("addFriendText")),
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode("div", {
                  class: "add-menu-item",
                  onClick: _cache[1] || (_cache[1] = ($event) => $setup.onDropdownClick("createGroup"))
                }, [
                  vue.createVNode($setup["Icon"], {
                    type: "icon-chuangjianqunzu",
                    style: { marginRight: "5px" }
                  }),
                  vue.createTextVNode(
                    " " + vue.toDisplayString($setup.t("createTeamText")),
                    1
                    /* TEXT */
                  )
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        )
      ]),
      vue.createElementVNode("div", { class: "block" }),
      vue.createVNode($setup["NetworkAlert"]),
      !$setup.conversationList || $setup.conversationList.length === 0 ? (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
        vue.createElementVNode("div", { class: "security-tip" }, [
          vue.createElementVNode(
            "div",
            null,
            vue.toDisplayString($setup.t("securityTipText")),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode("div", {
          class: "conversation-search",
          onClick: $setup.goToSearchPage
        }, [
          vue.createElementVNode("div", { class: "search-input-wrapper" }, [
            vue.createElementVNode("div", { class: "search-icon-wrapper" }, [
              vue.createVNode($setup["Icon"], {
                iconClassName: "search-icon",
                size: 16,
                color: "#A6ADB6",
                type: "icon-sousuo"
              })
            ]),
            vue.createElementVNode(
              "div",
              { class: "search-input" },
              vue.toDisplayString($setup.t("searchText")),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createCommentVNode(" 页面初始化的过程中，sessionList编译到小程序和h5出现sessionList为undefined的情况，即使给了默认值为空数组，故在此处进行判断 "),
        !$setup.conversationList || $setup.conversationList.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
          key: 0,
          text: $setup.t("conversationEmptyText")
        }, null, 8, ["text"])) : vue.createCommentVNode("v-if", true)
      ])) : (vue.openBlock(), vue.createElementBlock("div", {
        key: 2,
        class: "conversation-list-wrapper"
      }, [
        vue.createElementVNode("div", { class: "security-tip" }, [
          vue.createElementVNode(
            "div",
            null,
            vue.toDisplayString($setup.t("securityTipText")),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode("div", {
          class: "conversation-search",
          onClick: $setup.goToSearchPage
        }, [
          vue.createElementVNode("div", { class: "search-input-wrapper" }, [
            vue.createElementVNode("div", { class: "search-icon-wrapper" }, [
              vue.createVNode($setup["Icon"], {
                iconClassName: "search-icon",
                size: 16,
                color: "#A6ADB6",
                type: "icon-sousuo"
              })
            ]),
            vue.createElementVNode(
              "div",
              { class: "search-input" },
              vue.toDisplayString($setup.t("searchText")),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createCommentVNode(" 此处的key如果用session.id，会在ios上渲染存在问题，会出现会话列表显示undefined "),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.conversationList, (conversation) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              key: conversation.renderKey
            }, [
              (vue.openBlock(), vue.createBlock($setup["ConversationItem"], {
                key: conversation.renderKey,
                showMoreActions: $setup.currentMoveSessionId === conversation.conversationId,
                conversation,
                onDelete: $setup.handleSessionItemDeleteClick,
                onStickyToTop: $setup.handleSessionItemStickTopChange,
                onClick: $setup.handleSessionItemClick,
                onLeftSlide: $setup.handleSessionItemLeftSlide
              }, null, 8, ["showMoreActions", "conversation"]))
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]))
    ]);
  }
  const ConversationList = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$18], ["__scopeId", "data-v-bfabc8bd"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Conversation/conversation-list/index.vue"]]);
  var eventemitter3 = { exports: {} };
  (function(module2) {
    var has2 = Object.prototype.hasOwnProperty, prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn2, context, once2) {
      this.fn = fn2;
      this.context = context;
      this.once = once2 || false;
    }
    function addListener(emitter, event, fn2, context, once2) {
      if (typeof fn2 !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn2, context || emitter, once2), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events2, name2;
      if (this._eventsCount === 0)
        return names;
      for (name2 in events2 = this._events) {
        if (has2.call(events2, name2))
          names.push(prefix ? name2.slice(1) : name2);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events2));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i2 = 0, l2 = handlers.length, ee2 = new Array(l2); i2 < l2; i2++) {
        ee2[i2] = handlers[i2].fn;
      }
      return ee2;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i2;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i2 = 1, args = new Array(len - 1); i2 < len; i2++) {
          args[i2 - 1] = arguments[i2];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j2;
        for (i2 = 0; i2 < length; i2++) {
          if (listeners[i2].once)
            this.removeListener(event, listeners[i2].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i2].fn.call(listeners[i2].context);
              break;
            case 2:
              listeners[i2].fn.call(listeners[i2].context, a1);
              break;
            case 3:
              listeners[i2].fn.call(listeners[i2].context, a1, a2);
              break;
            case 4:
              listeners[i2].fn.call(listeners[i2].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j2 = 1, args = new Array(len - 1); j2 < len; j2++) {
                  args[j2 - 1] = arguments[j2];
                }
              listeners[i2].fn.apply(listeners[i2].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on2(event, fn2, context) {
      return addListener(this, event, fn2, context, false);
    };
    EventEmitter2.prototype.once = function once2(event, fn2, context) {
      return addListener(this, event, fn2, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn2, context, once2) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn2) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn2 && (!once2 || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i2 = 0, events2 = [], length = listeners.length; i2 < length; i2++) {
          if (listeners[i2].fn !== fn2 || once2 && !listeners[i2].once || context && listeners[i2].context !== context) {
            events2.push(listeners[i2]);
          }
        }
        if (events2.length)
          this._events[evt] = events2.length === 1 ? events2[0] : events2;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    {
      module2.exports = EventEmitter2;
    }
  })(eventemitter3);
  var eventemitter3Exports = eventemitter3.exports;
  const EventEmitter = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports);
  var axios$3 = { exports: {} };
  var bind$2 = function bind2(fn2, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);
      for (var i2 = 0; i2 < args.length; i2++) {
        args[i2] = arguments[i2];
      }
      return fn2.apply(thisArg, args);
    };
  };
  var bind$1 = bind$2;
  var toString = Object.prototype.toString;
  var kindOf = /* @__PURE__ */ function(cache) {
    return function(thing) {
      var str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    };
  }(/* @__PURE__ */ Object.create(null));
  function kindOfTest(type) {
    type = type.toLowerCase();
    return function isKindOf(thing) {
      return kindOf(thing) === type;
    };
  }
  function isArray$1(val) {
    return Array.isArray(val);
  }
  function isUndefined(val) {
    return typeof val === "undefined";
  }
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  function isString$1(val) {
    return typeof val === "string";
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isObject(val) {
    return val !== null && typeof val === "object";
  }
  function isPlainObject$1(val) {
    if (kindOf(val) !== "object") {
      return false;
    }
    var prototype2 = Object.getPrototypeOf(val);
    return prototype2 === null || prototype2 === Object.prototype;
  }
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  function isFunction(val) {
    return toString.call(val) === "[object Function]";
  }
  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }
  function isFormData(thing) {
    var pattern = "[object FormData]";
    return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
  }
  var isURLSearchParams = kindOfTest("URLSearchParams");
  function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
  }
  function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
      return false;
    }
    return typeof window !== "undefined" && typeof document !== "undefined";
  }
  function forEach(obj, fn2) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray$1(obj)) {
      for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
        fn2.call(null, obj[i2], i2, obj);
      }
    } else {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn2.call(null, obj[key], key, obj);
        }
      }
    }
  }
  function merge() {
    var result = {};
    function assignValue(val, key) {
      if (isPlainObject$1(result[key]) && isPlainObject$1(val)) {
        result[key] = merge(result[key], val);
      } else if (isPlainObject$1(val)) {
        result[key] = merge({}, val);
      } else if (isArray$1(val)) {
        result[key] = val.slice();
      } else {
        result[key] = val;
      }
    }
    for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
      forEach(arguments[i2], assignValue);
    }
    return result;
  }
  function extend(a2, b2, thisArg) {
    forEach(b2, function assignValue(val, key) {
      if (thisArg && typeof val === "function") {
        a2[key] = bind$1(val, thisArg);
      } else {
        a2[key] = val;
      }
    });
    return a2;
  }
  function stripBOM(content) {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  }
  function inherits(constructor, superConstructor, props, descriptors2) {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    props && Object.assign(constructor.prototype, props);
  }
  function toFlatObject(sourceObj, destObj, filter) {
    var props;
    var i2;
    var prop;
    var merged = {};
    destObj = destObj || {};
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i2 = props.length;
      while (i2-- > 0) {
        prop = props[i2];
        if (!merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = Object.getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  }
  function endsWith(str, searchString, position) {
    str = String(str);
    if (position === void 0 || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    var lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  }
  function toArray(thing) {
    if (!thing)
      return null;
    var i2 = thing.length;
    if (isUndefined(i2))
      return null;
    var arr = new Array(i2);
    while (i2-- > 0) {
      arr[i2] = thing[i2];
    }
    return arr;
  }
  var isTypedArray = /* @__PURE__ */ function(TypedArray) {
    return function(thing) {
      return TypedArray && thing instanceof TypedArray;
    };
  }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
  var utils$b = {
    isArray: isArray$1,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString: isString$1,
    isNumber,
    isObject,
    isPlainObject: isPlainObject$1,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isFunction,
    isStream,
    isURLSearchParams,
    isStandardBrowserEnv,
    forEach,
    merge,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    isTypedArray,
    isFileList
  };
  var utils$a = utils$b;
  function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  var buildURL$1 = function buildURL2(url, params, paramsSerializer) {
    if (!params) {
      return url;
    }
    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils$a.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];
      utils$a.forEach(params, function serialize2(val, key) {
        if (val === null || typeof val === "undefined") {
          return;
        }
        if (utils$a.isArray(val)) {
          key = key + "[]";
        } else {
          val = [val];
        }
        utils$a.forEach(val, function parseValue(v2) {
          if (utils$a.isDate(v2)) {
            v2 = v2.toISOString();
          } else if (utils$a.isObject(v2)) {
            v2 = JSON.stringify(v2);
          }
          parts.push(encode(key) + "=" + encode(v2));
        });
      });
      serializedParams = parts.join("&");
    }
    if (serializedParams) {
      var hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  };
  var utils$9 = utils$b;
  function InterceptorManager$1() {
    this.handlers = [];
  }
  InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  };
  InterceptorManager$1.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };
  InterceptorManager$1.prototype.forEach = function forEach2(fn2) {
    utils$9.forEach(this.handlers, function forEachHandler(h2) {
      if (h2 !== null) {
        fn2(h2);
      }
    });
  };
  var InterceptorManager_1 = InterceptorManager$1;
  var utils$8 = utils$b;
  var normalizeHeaderName$1 = function normalizeHeaderName2(headers, normalizedName) {
    utils$8.forEach(headers, function processHeader(value, name2) {
      if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name2];
      }
    });
  };
  var utils$7 = utils$b;
  function AxiosError$2(message, code, config, request2, response) {
    Error.call(this);
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request2 && (this.request = request2);
    response && (this.response = response);
  }
  utils$7.inherits(AxiosError$2, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });
  var prototype = AxiosError$2.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED"
    // eslint-disable-next-line func-names
  ].forEach(function(code) {
    descriptors[code] = { value: code };
  });
  Object.defineProperties(AxiosError$2, descriptors);
  Object.defineProperty(prototype, "isAxiosError", { value: true });
  AxiosError$2.from = function(error, code, config, request2, response, customProps) {
    var axiosError = Object.create(prototype);
    utils$7.toFlatObject(error, axiosError, function filter(obj) {
      return obj !== Error.prototype;
    });
    AxiosError$2.call(axiosError, error.message, code, config, request2, response);
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_1 = AxiosError$2;
  var transitional = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };
  var utils$6 = utils$b;
  function toFormData$1(obj, formData) {
    formData = formData || new FormData();
    var stack = [];
    function convertValue(value) {
      if (value === null)
        return "";
      if (utils$6.isDate(value)) {
        return value.toISOString();
      }
      if (utils$6.isArrayBuffer(value) || utils$6.isTypedArray(value)) {
        return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function build(data2, parentKey) {
      if (utils$6.isPlainObject(data2) || utils$6.isArray(data2)) {
        if (stack.indexOf(data2) !== -1) {
          throw Error("Circular reference detected in " + parentKey);
        }
        stack.push(data2);
        utils$6.forEach(data2, function each(value, key) {
          if (utils$6.isUndefined(value))
            return;
          var fullKey = parentKey ? parentKey + "." + key : key;
          var arr;
          if (value && !parentKey && typeof value === "object") {
            if (utils$6.endsWith(key, "{}")) {
              value = JSON.stringify(value);
            } else if (utils$6.endsWith(key, "[]") && (arr = utils$6.toArray(value))) {
              arr.forEach(function(el) {
                !utils$6.isUndefined(el) && formData.append(fullKey, convertValue(el));
              });
              return;
            }
          }
          build(value, fullKey);
        });
        stack.pop();
      } else {
        formData.append(parentKey, convertValue(data2));
      }
    }
    build(obj);
    return formData;
  }
  var toFormData_1 = toFormData$1;
  var settle;
  var hasRequiredSettle;
  function requireSettle() {
    if (hasRequiredSettle)
      return settle;
    hasRequiredSettle = 1;
    var AxiosError2 = AxiosError_1;
    settle = function settle2(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError2(
          "Request failed with status code " + response.status,
          [AxiosError2.ERR_BAD_REQUEST, AxiosError2.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
    return settle;
  }
  var cookies;
  var hasRequiredCookies;
  function requireCookies() {
    if (hasRequiredCookies)
      return cookies;
    hasRequiredCookies = 1;
    var utils2 = utils$b;
    cookies = utils2.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      /* @__PURE__ */ function standardBrowserEnv() {
        return {
          write: function write(name2, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name2 + "=" + encodeURIComponent(value));
            if (utils2.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils2.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils2.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name2) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name2) {
            this.write(name2, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
    return cookies;
  }
  var isAbsoluteURL$1 = function isAbsoluteURL2(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  };
  var combineURLs$1 = function combineURLs2(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  };
  var isAbsoluteURL = isAbsoluteURL$1;
  var combineURLs = combineURLs$1;
  var buildFullPath$1 = function buildFullPath2(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  };
  var parseHeaders;
  var hasRequiredParseHeaders;
  function requireParseHeaders() {
    if (hasRequiredParseHeaders)
      return parseHeaders;
    hasRequiredParseHeaders = 1;
    var utils2 = utils$b;
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    parseHeaders = function parseHeaders2(headers) {
      var parsed = {};
      var key;
      var val;
      var i2;
      if (!headers) {
        return parsed;
      }
      utils2.forEach(headers.split("\n"), function parser(line) {
        i2 = line.indexOf(":");
        key = utils2.trim(line.substr(0, i2)).toLowerCase();
        val = utils2.trim(line.substr(i2 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
    return parseHeaders;
  }
  var isURLSameOrigin;
  var hasRequiredIsURLSameOrigin;
  function requireIsURLSameOrigin() {
    if (hasRequiredIsURLSameOrigin)
      return isURLSameOrigin;
    hasRequiredIsURLSameOrigin = 1;
    var utils2 = utils$b;
    isURLSameOrigin = utils2.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          var parsed = utils2.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    return isURLSameOrigin;
  }
  var CanceledError_1;
  var hasRequiredCanceledError;
  function requireCanceledError() {
    if (hasRequiredCanceledError)
      return CanceledError_1;
    hasRequiredCanceledError = 1;
    var AxiosError2 = AxiosError_1;
    var utils2 = utils$b;
    function CanceledError2(message) {
      AxiosError2.call(this, message == null ? "canceled" : message, AxiosError2.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils2.inherits(CanceledError2, AxiosError2, {
      __CANCEL__: true
    });
    CanceledError_1 = CanceledError2;
    return CanceledError_1;
  }
  var parseProtocol;
  var hasRequiredParseProtocol;
  function requireParseProtocol() {
    if (hasRequiredParseProtocol)
      return parseProtocol;
    hasRequiredParseProtocol = 1;
    parseProtocol = function parseProtocol2(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
    return parseProtocol;
  }
  var xhr;
  var hasRequiredXhr;
  function requireXhr() {
    if (hasRequiredXhr)
      return xhr;
    hasRequiredXhr = 1;
    var utils2 = utils$b;
    var settle2 = requireSettle();
    var cookies2 = requireCookies();
    var buildURL2 = buildURL$1;
    var buildFullPath2 = buildFullPath$1;
    var parseHeaders2 = requireParseHeaders();
    var isURLSameOrigin2 = requireIsURLSameOrigin();
    var transitionalDefaults2 = transitional;
    var AxiosError2 = AxiosError_1;
    var CanceledError2 = requireCanceledError();
    var parseProtocol2 = requireParseProtocol();
    xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils2.isFormData(requestData) && utils2.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request2 = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath2(config.baseURL, config.url);
        request2.open(config.method.toUpperCase(), buildURL2(fullPath, config.params, config.paramsSerializer), true);
        request2.timeout = config.timeout;
        function onloadend() {
          if (!request2) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders2(request2.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
          var response = {
            data: responseData,
            status: request2.status,
            statusText: request2.statusText,
            headers: responseHeaders,
            config,
            request: request2
          };
          settle2(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request2 = null;
        }
        if ("onloadend" in request2) {
          request2.onloadend = onloadend;
        } else {
          request2.onreadystatechange = function handleLoad() {
            if (!request2 || request2.readyState !== 4) {
              return;
            }
            if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request2.onabort = function handleAbort() {
          if (!request2) {
            return;
          }
          reject(new AxiosError2("Request aborted", AxiosError2.ECONNABORTED, config, request2));
          request2 = null;
        };
        request2.onerror = function handleError() {
          reject(new AxiosError2("Network Error", AxiosError2.ERR_NETWORK, config, request2, request2));
          request2 = null;
        };
        request2.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional2 = config.transitional || transitionalDefaults2;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError2(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError2.ETIMEDOUT : AxiosError2.ECONNABORTED,
            config,
            request2
          ));
          request2 = null;
        };
        if (utils2.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin2(fullPath)) && config.xsrfCookieName ? cookies2.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request2) {
          utils2.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request2.setRequestHeader(key, val);
            }
          });
        }
        if (!utils2.isUndefined(config.withCredentials)) {
          request2.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request2.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request2.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request2.upload) {
          request2.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request2) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError2() : cancel);
            request2.abort();
            request2 = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol2(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError2("Unsupported protocol " + protocol + ":", AxiosError2.ERR_BAD_REQUEST, config));
          return;
        }
        request2.send(requestData);
      });
    };
    return xhr;
  }
  var _null;
  var hasRequired_null;
  function require_null() {
    if (hasRequired_null)
      return _null;
    hasRequired_null = 1;
    _null = null;
    return _null;
  }
  var utils$5 = utils$b;
  var normalizeHeaderName = normalizeHeaderName$1;
  var AxiosError$1 = AxiosError_1;
  var transitionalDefaults = transitional;
  var toFormData = toFormData_1;
  var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
  };
  function setContentTypeIfUnset(headers, value) {
    if (!utils$5.isUndefined(headers) && utils$5.isUndefined(headers["Content-Type"])) {
      headers["Content-Type"] = value;
    }
  }
  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") {
      adapter = requireXhr();
    } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
      adapter = requireXhr();
    }
    return adapter;
  }
  function stringifySafely(rawValue, parser, encoder) {
    if (utils$5.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils$5.trim(rawValue);
      } catch (e2) {
        if (e2.name !== "SyntaxError") {
          throw e2;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults$3 = {
    transitional: transitionalDefaults,
    adapter: getDefaultAdapter(),
    transformRequest: [function transformRequest(data2, headers) {
      normalizeHeaderName(headers, "Accept");
      normalizeHeaderName(headers, "Content-Type");
      if (utils$5.isFormData(data2) || utils$5.isArrayBuffer(data2) || utils$5.isBuffer(data2) || utils$5.isStream(data2) || utils$5.isFile(data2) || utils$5.isBlob(data2)) {
        return data2;
      }
      if (utils$5.isArrayBufferView(data2)) {
        return data2.buffer;
      }
      if (utils$5.isURLSearchParams(data2)) {
        setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
        return data2.toString();
      }
      var isObjectPayload = utils$5.isObject(data2);
      var contentType = headers && headers["Content-Type"];
      var isFileList2;
      if ((isFileList2 = utils$5.isFileList(data2)) || isObjectPayload && contentType === "multipart/form-data") {
        var _FormData = this.env && this.env.FormData;
        return toFormData(isFileList2 ? { "files[]": data2 } : data2, _FormData && new _FormData());
      } else if (isObjectPayload || contentType === "application/json") {
        setContentTypeIfUnset(headers, "application/json");
        return stringifySafely(data2);
      }
      return data2;
    }],
    transformResponse: [function transformResponse(data2) {
      var transitional2 = this.transitional || defaults$3.transitional;
      var silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      var forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
      if (strictJSONParsing || forcedJSONParsing && utils$5.isString(data2) && data2.length) {
        try {
          return JSON.parse(data2);
        } catch (e2) {
          if (strictJSONParsing) {
            if (e2.name === "SyntaxError") {
              throw AxiosError$1.from(e2, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e2;
          }
        }
      }
      return data2;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: require_null()
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    }
  };
  utils$5.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
    defaults$3.headers[method] = {};
  });
  utils$5.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    defaults$3.headers[method] = utils$5.merge(DEFAULT_CONTENT_TYPE);
  });
  var defaults_1 = defaults$3;
  var utils$4 = utils$b;
  var defaults$2 = defaults_1;
  var transformData$1 = function transformData2(data2, headers, fns) {
    var context = this || defaults$2;
    utils$4.forEach(fns, function transform(fn2) {
      data2 = fn2.call(context, data2, headers);
    });
    return data2;
  };
  var isCancel$1;
  var hasRequiredIsCancel;
  function requireIsCancel() {
    if (hasRequiredIsCancel)
      return isCancel$1;
    hasRequiredIsCancel = 1;
    isCancel$1 = function isCancel2(value) {
      return !!(value && value.__CANCEL__);
    };
    return isCancel$1;
  }
  var utils$3 = utils$b;
  var transformData = transformData$1;
  var isCancel = requireIsCancel();
  var defaults$1 = defaults_1;
  var CanceledError = requireCanceledError();
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError();
    }
  }
  var dispatchRequest$1 = function dispatchRequest2(config) {
    throwIfCancellationRequested(config);
    config.headers = config.headers || {};
    config.data = transformData.call(
      config,
      config.data,
      config.headers,
      config.transformRequest
    );
    config.headers = utils$3.merge(
      config.headers.common || {},
      config.headers[config.method] || {},
      config.headers
    );
    utils$3.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      function cleanHeaderConfig(method) {
        delete config.headers[method];
      }
    );
    var adapter = config.adapter || defaults$1.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(
        config,
        response.data,
        response.headers,
        config.transformResponse
      );
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            reason.response.data,
            reason.response.headers,
            config.transformResponse
          );
        }
      }
      return Promise.reject(reason);
    });
  };
  var utils$2 = utils$b;
  var mergeConfig$2 = function mergeConfig2(config1, config2) {
    config2 = config2 || {};
    var config = {};
    function getMergedValue(target, source) {
      if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
        return utils$2.merge(target, source);
      } else if (utils$2.isPlainObject(source)) {
        return utils$2.merge({}, source);
      } else if (utils$2.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(prop) {
      if (!utils$2.isUndefined(config2[prop])) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (!utils$2.isUndefined(config1[prop])) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    function valueFromConfig2(prop) {
      if (!utils$2.isUndefined(config2[prop])) {
        return getMergedValue(void 0, config2[prop]);
      }
    }
    function defaultToConfig2(prop) {
      if (!utils$2.isUndefined(config2[prop])) {
        return getMergedValue(void 0, config2[prop]);
      } else if (!utils$2.isUndefined(config1[prop])) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    function mergeDirectKeys(prop) {
      if (prop in config2) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        return getMergedValue(void 0, config1[prop]);
      }
    }
    var mergeMap = {
      "url": valueFromConfig2,
      "method": valueFromConfig2,
      "data": valueFromConfig2,
      "baseURL": defaultToConfig2,
      "transformRequest": defaultToConfig2,
      "transformResponse": defaultToConfig2,
      "paramsSerializer": defaultToConfig2,
      "timeout": defaultToConfig2,
      "timeoutMessage": defaultToConfig2,
      "withCredentials": defaultToConfig2,
      "adapter": defaultToConfig2,
      "responseType": defaultToConfig2,
      "xsrfCookieName": defaultToConfig2,
      "xsrfHeaderName": defaultToConfig2,
      "onUploadProgress": defaultToConfig2,
      "onDownloadProgress": defaultToConfig2,
      "decompress": defaultToConfig2,
      "maxContentLength": defaultToConfig2,
      "maxBodyLength": defaultToConfig2,
      "beforeRedirect": defaultToConfig2,
      "transport": defaultToConfig2,
      "httpAgent": defaultToConfig2,
      "httpsAgent": defaultToConfig2,
      "cancelToken": defaultToConfig2,
      "socketPath": defaultToConfig2,
      "responseEncoding": defaultToConfig2,
      "validateStatus": mergeDirectKeys
    };
    utils$2.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
      var merge2 = mergeMap[prop] || mergeDeepProperties;
      var configValue = merge2(prop);
      utils$2.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  };
  var data;
  var hasRequiredData;
  function requireData() {
    if (hasRequiredData)
      return data;
    hasRequiredData = 1;
    data = {
      "version": "0.27.2"
    };
    return data;
  }
  var VERSION = requireData().version;
  var AxiosError = AxiosError_1;
  var validators$1 = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i2) {
    validators$1[type] = function validator2(thing) {
      return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
    };
  });
  var deprecatedWarnings = {};
  validators$1.transitional = function transitional2(validator2, version2, message) {
    function formatMessage2(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return function(value, opt, opts) {
      if (validator2 === false) {
        throw new AxiosError(
          formatMessage2(opt, " has been removed" + (version2 ? " in " + version2 : "")),
          AxiosError.ERR_DEPRECATED
        );
      }
      if (version2 && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        formatAppLog(
          "warn",
          "at node_modules/axios/lib/helpers/validator.js:41",
          formatMessage2(
            opt,
            " has been deprecated since v" + version2 + " and will be removed in the near future"
          )
        );
      }
      return validator2 ? validator2(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
    }
    var keys = Object.keys(options);
    var i2 = keys.length;
    while (i2-- > 0) {
      var opt = keys[i2];
      var validator2 = schema[opt];
      if (validator2) {
        var value = options[opt];
        var result = value === void 0 || validator2(value, opt, options);
        if (result !== true) {
          throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
      }
    }
  }
  var validator$1 = {
    assertOptions,
    validators: validators$1
  };
  var utils$1 = utils$b;
  var buildURL = buildURL$1;
  var InterceptorManager = InterceptorManager_1;
  var dispatchRequest = dispatchRequest$1;
  var mergeConfig$1 = mergeConfig$2;
  var buildFullPath = buildFullPath$1;
  var validator = validator$1;
  var validators = validator.validators;
  function Axios$1(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  Axios$1.prototype.request = function request2(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig$1(this.defaults, config);
    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = "get";
    }
    var transitional2 = config.transitional;
    if (transitional2 !== void 0) {
      validator.assertOptions(transitional2, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
      var chain = [dispatchRequest, void 0];
      Array.prototype.unshift.apply(chain, requestInterceptorChain);
      chain = chain.concat(responseInterceptorChain);
      promise = Promise.resolve(config);
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    }
    var newConfig = config;
    while (requestInterceptorChain.length) {
      var onFulfilled = requestInterceptorChain.shift();
      var onRejected = requestInterceptorChain.shift();
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected(error);
        break;
      }
    }
    try {
      promise = dispatchRequest(newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    while (responseInterceptorChain.length) {
      promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    }
    return promise;
  };
  Axios$1.prototype.getUri = function getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    var fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  };
  utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
    Axios$1.prototype[method] = function(url, config) {
      return this.request(mergeConfig$1(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  });
  utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data2, config) {
        return this.request(mergeConfig$1(config || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url,
          data: data2
        }));
      };
    }
    Axios$1.prototype[method] = generateHTTPMethod();
    Axios$1.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  var Axios_1 = Axios$1;
  var CancelToken_1;
  var hasRequiredCancelToken;
  function requireCancelToken() {
    if (hasRequiredCancelToken)
      return CancelToken_1;
    hasRequiredCancelToken = 1;
    var CanceledError2 = requireCanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i2;
        var l2 = token._listeners.length;
        for (i2 = 0; i2 < l2; i2++) {
          token._listeners[i2](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError2(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c2) {
        cancel = c2;
      });
      return {
        token,
        cancel
      };
    };
    CancelToken_1 = CancelToken;
    return CancelToken_1;
  }
  var spread;
  var hasRequiredSpread;
  function requireSpread() {
    if (hasRequiredSpread)
      return spread;
    hasRequiredSpread = 1;
    spread = function spread2(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
    return spread;
  }
  var isAxiosError;
  var hasRequiredIsAxiosError;
  function requireIsAxiosError() {
    if (hasRequiredIsAxiosError)
      return isAxiosError;
    hasRequiredIsAxiosError = 1;
    var utils2 = utils$b;
    isAxiosError = function isAxiosError2(payload) {
      return utils2.isObject(payload) && payload.isAxiosError === true;
    };
    return isAxiosError;
  }
  var utils = utils$b;
  var bind = bind$2;
  var Axios = Axios_1;
  var mergeConfig = mergeConfig$2;
  var defaults = defaults_1;
  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    utils.extend(instance, Axios.prototype, context);
    utils.extend(instance, context);
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  var axios$2 = createInstance(defaults);
  axios$2.Axios = Axios;
  axios$2.CanceledError = requireCanceledError();
  axios$2.CancelToken = requireCancelToken();
  axios$2.isCancel = requireIsCancel();
  axios$2.VERSION = requireData().version;
  axios$2.toFormData = toFormData_1;
  axios$2.AxiosError = AxiosError_1;
  axios$2.Cancel = axios$2.CanceledError;
  axios$2.all = function all(promises) {
    return Promise.all(promises);
  };
  axios$2.spread = requireSpread();
  axios$2.isAxiosError = requireIsAxiosError();
  axios$3.exports = axios$2;
  axios$3.exports.default = axios$2;
  var axiosExports = axios$3.exports;
  var axios = axiosExports;
  const axios$1 = /* @__PURE__ */ getDefaultExportFromCjs(axios);
  var request$1$1 = function(_a2) {
    var _b = _a2.method, method = _b === void 0 ? "POST" : _b, url = _a2.url, data2 = _a2.data, headers = _a2.headers;
    return new Promise(function(resolve, reject) {
      uni.request({
        url,
        method,
        data: data2,
        header: headers,
        success: function(res) {
          var data3 = res.data;
          if (data3.code !== 200) {
            return reject(data3.msg);
          }
          resolve(data3);
        },
        fail: function(err) {
          reject(err);
        }
      });
    });
  };
  var uniappRequestHelper = request$1$1;
  var extendStatics$1 = function(d2, b2) {
    extendStatics$1 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d3[p2] = b3[p2];
    };
    return extendStatics$1(d2, b2);
  };
  function __extends$1(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics$1(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  }
  var __assign$2 = function() {
    __assign$2 = Object.assign || function __assign2(t2) {
      for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign$2.apply(this, arguments);
  };
  function __awaiter$3(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator$2(thisArg, body) {
    var _2 = { label: 0, sent: function() {
      if (t2[0] & 1)
        throw t2[1];
      return t2[1];
    }, trys: [], ops: [] }, f2, y2, t2, g2;
    return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n2) {
      return function(v2) {
        return step([n2, v2]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (g2 && (g2 = 0, op[0] && (_2 = 0)), _2)
        try {
          if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
            return t2;
          if (y2 = 0, t2)
            op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _2.label++;
              return { value: op[1], done: false };
            case 5:
              _2.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t2[1]) {
                _2.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _2.label < t2[2]) {
                _2.label = t2[2];
                _2.ops.push(op);
                break;
              }
              if (t2[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e2) {
          op = [6, e2];
          y2 = 0;
        } finally {
          f2 = t2 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values$2(o2) {
    var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
    if (m2)
      return m2.call(o2);
    if (o2 && typeof o2.length === "number")
      return {
        next: function() {
          if (o2 && i2 >= o2.length)
            o2 = void 0;
          return { value: o2 && o2[i2++], done: !o2 };
        }
      };
    throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e2 = new Error(message);
    return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
  };
  var request$2 = uniappRequestHelper;
  var url$1$1 = "https://statistic.live.126.net/statics/report/xkit/action";
  var EventTracking$2 = (
    /** @class */
    function() {
      function EventTracking2(_a2) {
        var appKey = _a2.appKey, version2 = _a2.version, component = _a2.component, nertcVersion = _a2.nertcVersion, imVersion = _a2.imVersion, _b = _a2.platform, platform = _b === void 0 ? "Web" : _b, _c = _a2.channel, channel = _c === void 0 ? "netease" : _c;
        this.platform = platform;
        this.appKey = appKey;
        this.version = version2;
        this.component = component;
        this.nertcVersion = nertcVersion;
        this.imVersion = imVersion;
        this.channel = channel;
      }
      EventTracking2.prototype.track = function(reportType, data2) {
        return __awaiter$3(this, void 0, void 0, function() {
          var _a2, appKey, version2, component, nertcVersion, imVersion, platform, channel, timeStamp;
          return __generator$2(this, function(_c) {
            switch (_c.label) {
              case 0:
                _a2 = this, appKey = _a2.appKey, version2 = _a2.version, component = _a2.component, nertcVersion = _a2.nertcVersion, imVersion = _a2.imVersion, platform = _a2.platform, channel = _a2.channel;
                timeStamp = Date.now();
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [4, request$2({
                  method: "POST",
                  url: url$1$1,
                  data: {
                    appKey,
                    version: version2,
                    component,
                    timeStamp,
                    nertcVersion,
                    imVersion,
                    platform,
                    reportType,
                    data: data2,
                    channel
                  }
                })];
              case 2:
                _c.sent();
                return [3, 4];
              case 3:
                _c.sent();
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      return EventTracking2;
    }()
  );
  var EventTracking$1$1 = EventTracking$2;
  (function(_super) {
    __extends$1(VisibilityObserver, _super);
    function VisibilityObserver(options) {
      var _this = _super.call(this) || this;
      _this.visibilityState = document.visibilityState;
      _this.entries = [];
      _this._visibilitychange = function() {
        _this.visibilityState = document.visibilityState;
        _this._trigger();
      };
      _this.intersectionObserver = new IntersectionObserver(_this._intersectionObserverHandler.bind(_this), options);
      document.addEventListener("visibilitychange", _this._visibilitychange);
      return _this;
    }
    VisibilityObserver.prototype.observe = function(target) {
      return this.intersectionObserver.observe(target);
    };
    VisibilityObserver.prototype.unobserve = function(target) {
      return this.intersectionObserver.unobserve(target);
    };
    VisibilityObserver.prototype.destroy = function() {
      this.intersectionObserver.disconnect();
      document.removeEventListener("visibilitychange", this._visibilitychange);
      this.entries = [];
    };
    VisibilityObserver.prototype._intersectionObserverHandler = function(entries, observer) {
      this.entries = entries;
      this._trigger();
    };
    VisibilityObserver.prototype._trigger = function() {
      var _this = this;
      this.entries.forEach(function(item) {
        if (_this.visibilityState !== "visible" || item.intersectionRatio <= 0) {
          _this.emit("visibleChange", {
            visible: false,
            target: item.target
          });
          return;
        }
        _this.emit("visibleChange", {
          visible: true,
          target: item.target
        });
      });
    };
    return VisibilityObserver;
  })(EventEmitter);
  var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule$2(fn2, module2) {
    return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
  }
  createCommonjsModule$2(function(module2) {
    (function(root, definition) {
      if (module2.exports) {
        module2.exports = definition();
      } else {
        root.log = definition();
      }
    })(commonjsGlobal$1, function() {
      var noop2 = function() {
      };
      var undefinedType = "undefined";
      var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
      var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ];
      function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === "function") {
          return method.bind(obj);
        } else {
          try {
            return Function.prototype.bind.call(method, obj);
          } catch (e2) {
            return function() {
              return Function.prototype.apply.apply(method, [obj, arguments]);
            };
          }
        }
      }
      function traceForIE() {
        if (console.log) {
          if (console.log.apply) {
            console.log.apply(console, arguments);
          } else {
            Function.prototype.apply.apply(console.log, [console, arguments]);
          }
        }
        if (console.trace)
          console.trace();
      }
      function realMethod(methodName) {
        if (methodName === "debug") {
          methodName = "log";
        }
        if (typeof console === undefinedType) {
          return false;
        } else if (methodName === "trace" && isIE) {
          return traceForIE;
        } else if (console[methodName] !== void 0) {
          return bindMethod(console, methodName);
        } else if (console.log !== void 0) {
          return bindMethod(console, "log");
        } else {
          return noop2;
        }
      }
      function replaceLoggingMethods(level, loggerName) {
        for (var i2 = 0; i2 < logMethods.length; i2++) {
          var methodName = logMethods[i2];
          this[methodName] = i2 < level ? noop2 : this.methodFactory(methodName, level, loggerName);
        }
        this.log = this.debug;
      }
      function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function() {
          if (typeof console !== undefinedType) {
            replaceLoggingMethods.call(this, level, loggerName);
            this[methodName].apply(this, arguments);
          }
        };
      }
      function defaultMethodFactory(methodName, level, loggerName) {
        return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
      }
      function Logger2(name2, defaultLevel, factory) {
        var self2 = this;
        var currentLevel;
        defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;
        var storageKey = "loglevel";
        if (typeof name2 === "string") {
          storageKey += ":" + name2;
        } else if (typeof name2 === "symbol") {
          storageKey = void 0;
        }
        function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || "silent").toUpperCase();
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            window.localStorage[storageKey] = levelName;
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {
          }
        }
        function getPersistedLevel() {
          var storedLevel;
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            storedLevel = window.localStorage[storageKey];
          } catch (ignore) {
          }
          if (typeof storedLevel === undefinedType) {
            try {
              var cookie = window.document.cookie;
              var location = cookie.indexOf(
                encodeURIComponent(storageKey) + "="
              );
              if (location !== -1) {
                storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
              }
            } catch (ignore) {
            }
          }
          if (self2.levels[storedLevel] === void 0) {
            storedLevel = void 0;
          }
          return storedLevel;
        }
        function clearPersistedLevel() {
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            window.localStorage.removeItem(storageKey);
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {
          }
        }
        self2.name = name2;
        self2.levels = {
          "TRACE": 0,
          "DEBUG": 1,
          "INFO": 2,
          "WARN": 3,
          "ERROR": 4,
          "SILENT": 5
        };
        self2.methodFactory = factory || defaultMethodFactory;
        self2.getLevel = function() {
          return currentLevel;
        };
        self2.setLevel = function(level, persist) {
          if (typeof level === "string" && self2.levels[level.toUpperCase()] !== void 0) {
            level = self2.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self2.levels.SILENT) {
            currentLevel = level;
            if (persist !== false) {
              persistLevelIfPossible(level);
            }
            replaceLoggingMethods.call(self2, level, name2);
            if (typeof console === undefinedType && level < self2.levels.SILENT) {
              return "No console available for logging";
            }
          } else {
            throw "log.setLevel() called with invalid level: " + level;
          }
        };
        self2.setDefaultLevel = function(level) {
          defaultLevel = level;
          if (!getPersistedLevel()) {
            self2.setLevel(level, false);
          }
        };
        self2.resetLevel = function() {
          self2.setLevel(defaultLevel, false);
          clearPersistedLevel();
        };
        self2.enableAll = function(persist) {
          self2.setLevel(self2.levels.TRACE, persist);
        };
        self2.disableAll = function(persist) {
          self2.setLevel(self2.levels.SILENT, persist);
        };
        var initialLevel = getPersistedLevel();
        if (initialLevel == null) {
          initialLevel = defaultLevel;
        }
        self2.setLevel(initialLevel, false);
      }
      var defaultLogger = new Logger2();
      var _loggersByName = {};
      defaultLogger.getLogger = function getLogger(name2) {
        if (typeof name2 !== "symbol" && typeof name2 !== "string" || name2 === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }
        var logger2 = _loggersByName[name2];
        if (!logger2) {
          logger2 = _loggersByName[name2] = new Logger2(
            name2,
            defaultLogger.getLevel(),
            defaultLogger.methodFactory
          );
        }
        return logger2;
      };
      var _log = typeof window !== undefinedType ? window.log : void 0;
      defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType && window.log === defaultLogger) {
          window.log = _log;
        }
        return defaultLogger;
      };
      defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
      };
      defaultLogger["default"] = defaultLogger;
      return defaultLogger;
    });
  });
  var EventPriority$1;
  (function(EventPriority2) {
    EventPriority2[EventPriority2["LOW"] = 0] = "LOW";
    EventPriority2[EventPriority2["NORMAL"] = 1] = "NORMAL";
    EventPriority2[EventPriority2["HIGH"] = 2] = "HIGH";
  })(EventPriority$1 || (EventPriority$1 = {}));
  var ReportEvent$1 = (
    /** @class */
    function() {
      function ReportEvent2(options) {
        this.appKey = "";
        this.component = "";
        this.data = {};
        this.framework = "";
        this.version = "";
        this.startTime = 0;
        this.endTime = 0;
        this.duration = 0;
        this.data.startTime = (/* @__PURE__ */ new Date()).getTime();
        this.data.timeStamp = this.data.startTime;
        this.eventId = options.eventId;
        this.priority = options.priority;
      }
      ReportEvent2.prototype.end = function() {
        if (this.data.endTime && this.data.duration) {
          return;
        }
        this.data.endTime = this.data.endTime || (/* @__PURE__ */ new Date()).getTime();
        this.data.duration = this.data.duration || this.data.endTime - this.data.startTime;
      };
      ReportEvent2.prototype.setAppInfo = function(appInfo) {
        this.appKey = appInfo.appKey;
        this.component = appInfo.component;
        this.version = appInfo.version;
        if (appInfo.framework) {
          this.framework = appInfo.framework;
        }
      };
      ReportEvent2.prototype.endWith = function(data2) {
        var code = data2.code, msg = data2.msg, requestId = data2.requestId, serverCost = data2.serverCost;
        if (typeof code != "number") {
          this.data.code = -2;
        } else {
          this.data.code = code;
        }
        this.data.message = msg;
        this.data.requestId = requestId;
        this.data.serverCost = serverCost;
        this.end();
      };
      ReportEvent2.prototype.endWithSuccess = function(data2) {
        if (data2) {
          var requestId = data2.requestId, serverCost = data2.serverCost;
          this.data.requestId = requestId;
          this.data.serverCost = serverCost;
        }
        this.data.code = 0;
        this.data.message = "success";
        this.end();
      };
      ReportEvent2.prototype.endWithFailure = function(data2) {
        if (data2) {
          var requestId = data2.requestId, serverCost = data2.serverCost;
          this.data.requestId = requestId;
          this.data.serverCost = serverCost;
        }
        this.data.code = -1;
        this.data.message = "failure";
        this.end();
      };
      ReportEvent2.prototype.setParams = function(params) {
        this.data.params = __assign$2({}, params);
        return this;
      };
      ReportEvent2.prototype.addParams = function(params) {
        this.data.params = __assign$2(__assign$2({}, this.data.params), params);
        return this;
      };
      ReportEvent2.prototype.setData = function(data2) {
        this.data = __assign$2(__assign$2({}, this.data), data2);
      };
      ReportEvent2.prototype.setUserId = function(userId) {
        this.data.userId = userId;
      };
      return ReportEvent2;
    }()
  );
  var EventStep$1 = (
    /** @class */
    function(_super) {
      __extends$1(EventStep2, _super);
      function EventStep2(options) {
        return _super.call(this, options) || this;
      }
      return EventStep2;
    }(ReportEvent$1)
  );
  (function(_super) {
    __extends$1(IntervalEvent, _super);
    function IntervalEvent(options) {
      var _this = _super.call(this, options) || this;
      _this._stepMap = /* @__PURE__ */ new Map();
      return _this;
    }
    IntervalEvent.prototype.beginStep = function(name2) {
      if (this._stepMap.has(name2)) {
        return this._stepMap[name2];
      }
      var step = new EventStep$1({ eventId: name2, priority: this.priority });
      step.setData({ step: name2 });
      this._stepMap.set(name2, step);
      return step;
    };
    IntervalEvent.prototype.addStep = function(data2) {
      this._stepMap.set(data2.eventId, data2);
    };
    IntervalEvent.prototype.removeStep = function(eventId) {
      this._stepMap.delete(eventId);
    };
    IntervalEvent.prototype.endWith = function(data2) {
      _super.prototype.endWith.call(this, data2);
      this.end();
    };
    IntervalEvent.prototype.endWithSuccess = function(data2) {
      _super.prototype.endWithSuccess.call(this, data2);
      this.end();
    };
    IntervalEvent.prototype.endWithFailure = function(data2) {
      _super.prototype.endWithFailure.call(this, data2);
      this.end();
    };
    IntervalEvent.prototype.end = function() {
      var e_1, _a2;
      var steps = [];
      _super.prototype.end.call(this);
      try {
        for (var _b = __values$2(this._stepMap.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var step = _c.value;
          step.data.index = steps.length;
          steps.push(step.data);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (steps.length > 0) {
        this.data.steps = steps;
      }
    };
    return IntervalEvent;
  })(EventStep$1);
  const name$2 = "nim-web-sdk-ng";
  const version$2 = "10.8.11";
  const sdk$1 = {
    version: 100811,
    versionFormat: "10.8.11"
  };
  const description$2 = "Yunxin IM SDK next generation";
  const main$2 = "./dist/v2/NIM_BROWSER_SDK.js";
  const types$1 = "./dist/v2/NIM_BROWSER_SDK/index.d.ts";
  const scripts$2 = {
    test: "jest --maxWorkers 1 --silent",
    lint: "npx eslint ./src",
    dev: "cd pages/ && npm run dev",
    clean: "rm -rf ./dist",
    emitTypes: "tsc --emitDeclarationOnly --declaration --declarationDir temp/types",
    "build:esm": "npm run emitTypes && rollup --config ./build/esm.config.js",
    build: "npm run clean && npm run emitTypes && node script/copyPlugin.js && rollup --config ./build/v1.config.js && rollup --config ./build/v2.config.js && rollup --config ./build/esm.config.js",
    analyze: 'npm run clean && npx rollup --config ./build/analyze.config.js && ls -lhR dist | grep ".js"',
    "pages:build": "cd pages/ && npm install && npm run build && cp -rf dist/ ../dist/",
    api: "npm run translate && node script/buildApi.js",
    translate: "rm -rf ./apidocs && multilingual-tool convert --indir=src/typings --outdir=apidocs --includes=ts",
    "api-diff": "multilingual-tool diff --dir=src/typings --receiver=3070898 --exclude=DS_Store",
    updateVerInNdp: "node ./script/updateVerInNdp.js"
  };
  const repository$1 = {
    type: "git",
    url: "ssh://git@g.hz.netease.com:22222/yunxin/im/sdk.git"
  };
  const keywords$1 = [
    "im",
    "sdk"
  ];
  const author$2 = "yunxin";
  const license$2 = "ISC";
  const eslintIgnore$1 = [
    "dist/"
  ];
  const files$2 = [
    "README.md",
    "CHANGELOG.md",
    "dist/v1/CHATROOM*",
    "dist/v1/QCHAT*",
    "dist/v2/NIM*",
    "dist/v2/CHATROOM*",
    "dist/esm/*"
  ];
  const devDependencies$2 = {
    "@babel/core": "^7.13.15",
    "@babel/plugin-proposal-class-properties": "^7.13.0",
    "@babel/plugin-transform-block-scoping": "^7.23.4",
    "@babel/plugin-transform-runtime": "^7.13.15",
    "@babel/preset-env": "^7.13.15",
    "@babel/preset-typescript": "^7.13.0",
    "@babel/runtime": "^7.13.10",
    "@babel/runtime-corejs3": "^7.13.10",
    "@microsoft/api-extractor": "^7.19.4",
    "@rollup/plugin-babel": "^5.3.0",
    "@rollup/plugin-commonjs": "^18.0.0",
    "@rollup/plugin-json": "^4.1.0",
    "@rollup/plugin-node-resolve": "^11.2.1",
    "@rollup/plugin-replace": "^3.0.0",
    "@rollup/plugin-typescript": "^8.3.0",
    "@types/backo2": "^1.0.1",
    "@types/jest": "^27.4.1",
    "@types/lodash": "^4.14.177",
    "@types/platform": "^1.3.3",
    "@typescript-eslint/eslint-plugin": "^5.12.0",
    "@typescript-eslint/parser": "^5.12.0",
    "@yxfe/multilingual-tool": "^1.0.30",
    "@yxfe/nim-log-reporter": "^1.0.3",
    "@yxfe/nos-uploader": "^1.0.28",
    "@yxfe/request": "^0.2.12",
    backo2: "^1.0.2",
    "browser-md5-file": "^1.1.1",
    "core-js": "^3.10.1",
    "cross-env": "^7.0.3",
    eslint: "^8.9.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.0.0",
    eventemitter3: "^4.0.7",
    husky: "^7.0.4",
    jest: "^27.5.1",
    "lodash-es": "^4.17.21",
    "neroom-web-sdk": "1.7.0",
    platform: "^1.3.6",
    "pre-commit": "^1.2.2",
    prettier: "^2.6.1",
    "react-native": "^0.75.2",
    rollup: "^2.45.2",
    "rollup-plugin-banner": "^0.2.1",
    "rollup-plugin-banner2": "^1.2.2",
    "rollup-plugin-copy": "^3.4.0",
    "rollup-plugin-insert": "^1.3.2",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-visualizer": "^5.12.0",
    "ts-jest": "^27.1.4",
    tslib: "^2.3.1",
    typedoc: "^0.22.11",
    typescript: "^4.5.4"
  };
  const imPkg = {
    name: name$2,
    version: version$2,
    sdk: sdk$1,
    description: description$2,
    main: main$2,
    types: types$1,
    scripts: scripts$2,
    repository: repository$1,
    keywords: keywords$1,
    author: author$2,
    license: license$2,
    eslintIgnore: eslintIgnore$1,
    files: files$2,
    devDependencies: devDependencies$2
  };
  const trackInit = (component) => {
    var _a2, _b;
    if ((_b = (_a2 = uni.$UIKitNIM) == null ? void 0 : _a2.options) == null ? void 0 : _b.appkey) {
      const eventTracking = new EventTracking$1$1({
        appKey: uni.$UIKitNIM.options.appkey,
        version: "10.3.0",
        component,
        imVersion: imPkg.version,
        platform: "UniApp"
      });
      eventTracking.track("init", "");
    }
  };
  const _sfc_main$18 = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      trackInit("ConversationUIKit");
      onShow(() => {
        var _a2, _b, _c;
        (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.uiStore.selectConversation("");
        const enableV2CloudConversation = (_c = (_b = uni.$UIKitStore) == null ? void 0 : _b.sdkOptions) == null ? void 0 : _c.enableV2CloudConversation;
        setTimeout(() => {
          var _a3, _b2, _c2, _d;
          const unread = enableV2CloudConversation ? (_b2 = (_a3 = uni.$UIKitNIM) == null ? void 0 : _a3.V2NIMConversationService) == null ? void 0 : _b2.getTotalUnreadCount() : (_d = (_c2 = uni.$UIKitNIM) == null ? void 0 : _c2.V2NIMLocalConversationService) == null ? void 0 : _d.getTotalUnreadCount();
          if (unread === 0) {
            uni.hideTabBarRedDot({
              //隐藏数字
              index: 0
              //tabbar下标
            });
          } else {
            uni.showTabBarRedDot({
              index: 0
              //tabbar下标
            });
          }
        }, 800);
      });
      const __returned__ = { ConversationList };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock($setup["ConversationList"]);
  }
  const PagesConversationIndex = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$17], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Conversation/index.vue"]]);
  const _sfc_main$17 = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const onLogin = () => {
        customRedirectTo({ url: "/pages/Login/index" });
      };
      const __returned__ = { onLogin };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("swiper", {
      class: "swiper",
      "indicator-dots": "true",
      onClick: $setup.onLogin
    }, [
      vue.createElementVNode("swiper-item", null, [
        vue.createElementVNode("image", {
          class: "banner",
          src: "https://yx-web-nosdn.netease.im/common/7eb2a4dd70884b5d29391966413b42f9/主页面@3x.png"
        })
      ]),
      vue.createElementVNode("swiper-item", null, [
        vue.createElementVNode("image", {
          class: "banner",
          src: "https://yx-web-nosdn.netease.im/common/0fa19ad5fb6c6d34e9388c571756b061/消息列表@3x.png"
        })
      ]),
      vue.createElementVNode("swiper-item", null, [
        vue.createElementVNode("image", {
          class: "banner",
          src: "https://yx-web-nosdn.netease.im/common/53a96ae3bb75547da8d54299b839f80e/我的@3x.png"
        })
      ])
    ]);
  }
  const PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$16], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/index/index.vue"]]);
  const _sfc_main$16 = /* @__PURE__ */ vue.defineComponent({
    __name: "NavBar",
    props: {
      title: { type: String, required: true },
      subTitle: { type: String, required: false, default: "" },
      backgroundColor: { type: String, required: false, default: "" },
      showLeft: { type: Boolean, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const isWeixinApp = getUniPlatform() === "mp-weixin";
      const back = () => {
        uni.navigateBack({
          delta: 1
        });
      };
      const __returned__ = { isWeixinApp, back, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(" 样式兼容微信小程序  "),
        vue.createElementVNode("div", null, [
          vue.createElementVNode(
            "div",
            {
              class: "nav-bar-wrapper",
              style: vue.normalizeStyle({
                backgroundColor: $props.backgroundColor || "#ffffff",
                backgroundImage: `url(${$props.title})`,
                height: $setup.isWeixinApp ? "55px" : "40px",
                alignItems: $setup.isWeixinApp ? "flex-end" : "center"
              })
            },
            [
              $props.showLeft ? vue.renderSlot(_ctx.$slots, "left", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createElementBlock("div", {
                key: 1,
                onClick: $setup.back
              }, [
                vue.createVNode($setup["Icon"], {
                  type: "icon-zuojiantou",
                  size: 22
                })
              ])),
              vue.createElementVNode("div", { class: "title-container" }, [
                vue.createElementVNode(
                  "div",
                  { class: "title" },
                  vue.toDisplayString($props.title),
                  1
                  /* TEXT */
                ),
                $props.subTitle ? (vue.openBlock(), vue.createElementBlock(
                  "div",
                  {
                    key: 0,
                    class: "subTitle"
                  },
                  vue.toDisplayString($props.subTitle),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true),
                vue.renderSlot(_ctx.$slots, "icon", {}, void 0, true)
              ]),
              vue.createElementVNode("div", null, [
                vue.renderSlot(_ctx.$slots, "right", {}, void 0, true)
              ])
            ],
            4
            /* STYLE */
          ),
          vue.createElementVNode(
            "div",
            {
              class: vue.normalizeClass($setup.isWeixinApp ? "block-wx" : "block")
            },
            null,
            2
            /* CLASS */
          )
        ])
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    );
  }
  const NavBar$1 = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$15], ["__scopeId", "data-v-2202255b"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/NavBar.vue"]]);
  const _sfc_main$15 = /* @__PURE__ */ vue.defineComponent({
    __name: "search-result-item",
    props: {
      item: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const props = __props;
      const teamAvatar = vue.computed(() => {
        if (props.item.teamId) {
          return props.item.avatar;
        }
      });
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      const to2 = vue.computed(() => {
        if (props.item.teamId) {
          return props.item.teamId;
        }
        return props.item.accountId;
      });
      const isTeam = vue.computed(() => {
        return !!props.item.teamId;
      });
      const teamName = vue.computed(() => {
        if (props.item.teamId) {
          return props.item.name;
        }
        return "";
      });
      let flag = false;
      const handleItemClick = async () => {
        var _a3, _b2;
        if (flag)
          return;
        try {
          flag = true;
          let conversationType;
          let receiverId;
          let item = props.item;
          if (item.accountId) {
            conversationType = Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P;
            receiverId = item.accountId;
          } else if (item.teamId) {
            conversationType = Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM;
            receiverId = item.teamId;
          } else {
            throw Error("unknow scene");
          }
          if (enableV2CloudConversation) {
            await ((_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.insertConversationActive(
              conversationType,
              receiverId
            ));
          } else {
            await ((_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.insertConversationActive(
              conversationType,
              receiverId
            ));
          }
          customNavigateTo({
            url: "/pages/Chat/index"
          });
        } catch {
          uni.showToast({
            title: t$2("selectSessionFailText"),
            icon: "error"
          });
        } finally {
          flag = false;
        }
      };
      const __returned__ = { props, teamAvatar, enableV2CloudConversation, to: to2, isTeam, teamName, get flag() {
        return flag;
      }, set flag(v2) {
        flag = v2;
      }, handleItemClick, Avatar, Appellation };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: "search-result-list-item",
      onClick: $setup.handleItemClick
    }, [
      vue.createElementVNode("div", { class: "result-item-avatar" }, [
        vue.createVNode($setup["Avatar"], {
          account: $setup.to,
          avatar: $setup.teamAvatar
        }, null, 8, ["account", "avatar"])
      ]),
      !$setup.isTeam ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "result-item-title"
      }, [
        vue.createVNode($setup["Appellation"], { account: $setup.to }, null, 8, ["account"]),
        vue.createElementVNode(
          "div",
          { class: "result-item-account" },
          vue.toDisplayString($setup.to),
          1
          /* TEXT */
        )
      ])) : (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 1,
          class: "result-item-title"
        },
        vue.toDisplayString($setup.teamName),
        1
        /* TEXT */
      ))
    ]);
  }
  const SearchResultItem = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$14], ["__scopeId", "data-v-affcaba2"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Conversation/conversation-search/search-result-item.vue"]]);
  const _sfc_main$14 = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const inputFocus = vue.ref(false);
      const searchText = vue.ref("");
      const searchList = vue.ref([]);
      const searchListWatch = autorun(() => {
        const friends = uni.$UIKitStore.uiStore.friends.filter(
          (item) => !uni.$UIKitStore.relationStore.blacklist.includes(item.accountId)
        ).map((item) => {
          const user = uni.$UIKitStore.userStore.users.get(item.accountId) || {
            accountId: "",
            name: "",
            createTime: Date.now()
          };
          return {
            ...item,
            ...user
          };
        }) || [];
        const teamList = uni.$UIKitStore.uiStore.teamList || [];
        searchList.value = [
          {
            id: "friends",
            list: friends
          },
          {
            id: "groups",
            list: teamList
          }
        ].filter((item) => !!item.list.length);
      });
      const searchResult = vue.computed(() => {
        const res = [];
        if (searchText.value) {
          const finalSections = searchList.value.map((item) => {
            var _a2, _b;
            if (item.id === "friends") {
              return {
                ...item,
                list: (_a2 = item.list) == null ? void 0 : _a2.filter((item2) => {
                  var _a3, _b2, _c;
                  return ((_a3 = item2.alias) == null ? void 0 : _a3.includes(searchText.value)) || ((_b2 = item2.name) == null ? void 0 : _b2.includes(searchText.value)) || ((_c = item2.accountId) == null ? void 0 : _c.includes(searchText.value));
                })
              };
            }
            if (item.id === "groups") {
              return {
                ...item,
                list: (_b = item.list) == null ? void 0 : _b.filter((item2) => {
                  return (item2.name || item2.teamId).includes(searchText.value);
                })
              };
            }
            return { ...item };
          }).filter((item) => {
            var _a2;
            return !!((_a2 = item.list) == null ? void 0 : _a2.length);
          });
          finalSections.forEach((item) => {
            if (item.id === "friends") {
              res.push({
                title: "friends",
                renderKey: "friends"
              });
              item.list.forEach((item2) => {
                res.push({
                  ...item2,
                  renderKey: item2.accountId
                });
              });
            } else if (item.id === "groups") {
              res.push({
                title: "groups",
                renderKey: "groups"
              });
              item.list.forEach((item2) => {
                res.push({
                  ...item2,
                  renderKey: item2.teamId
                });
              });
            }
          });
        }
        return res;
      });
      const onInputBlur = () => {
        inputFocus.value = false;
      };
      const onInputFocus = () => {
        inputFocus.value = true;
      };
      const onInput = (event) => {
        searchText.value = event.detail.value;
      };
      const clearInput = () => {
        inputFocus.value = true;
        searchText.value = "";
      };
      vue.onMounted(() => {
        inputFocus.value = true;
      });
      vue.onUnmounted(() => {
        searchListWatch();
      });
      const __returned__ = { inputFocus, searchText, searchList, searchListWatch, searchResult, onInputBlur, onInputFocus, onInput, clearInput, get t() {
        return t$2;
      }, NavBar: NavBar$1, Icon, SearchResultItem, Empty };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("searchTitleText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "search-wrapper" }, [
        vue.createElementVNode("div", { class: "input-wrapper" }, [
          vue.createElementVNode("div", { class: "search-icon-wrapper" }, [
            vue.createVNode($setup["Icon"], {
              iconClassName: "search-icon",
              size: 16,
              color: "#A6ADB6",
              type: "icon-sousuo"
            })
          ]),
          vue.createElementVNode("input", {
            class: "input",
            value: $setup.searchText,
            onInput: $setup.onInput,
            focus: $setup.inputFocus,
            onFocus: $setup.onInputFocus,
            onBlur: $setup.onInputBlur,
            placeholder: $setup.t("searchText")
          }, null, 40, ["value", "focus", "placeholder"]),
          $setup.searchText ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: "clear-icon",
            onClick: _cache[0] || (_cache[0] = ($event) => $setup.clearInput())
          }, [
            vue.createVNode($setup["Icon"], {
              type: "icon-shandiao",
              size: 16
            })
          ])) : vue.createCommentVNode("v-if", true)
        ])
      ]),
      $setup.searchResult.length > 0 ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "search-result-wrapper"
      }, [
        vue.createElementVNode("div", { class: "search-result-list" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.searchResult, (item) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                key: item.renderKey
              }, [
                item.title == "friends" ? (vue.openBlock(), vue.createElementBlock(
                  "div",
                  {
                    key: 0,
                    class: "result-title"
                  },
                  vue.toDisplayString($setup.t("friendText")),
                  1
                  /* TEXT */
                )) : item.title == "groups" ? (vue.openBlock(), vue.createElementBlock(
                  "div",
                  {
                    key: 1,
                    class: "result-title"
                  },
                  vue.toDisplayString($setup.t("teamText")),
                  1
                  /* TEXT */
                )) : (vue.openBlock(), vue.createElementBlock("div", { key: 2 }, [
                  vue.createVNode($setup["SearchResultItem"], { item }, null, 8, ["item"])
                ]))
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ])) : vue.createCommentVNode("v-if", true),
      $setup.searchResult.length == 0 && $setup.searchText ? (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
        vue.createVNode($setup["Empty"], {
          text: $setup.t("searchResultNullText")
        }, null, 8, ["text"])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesConversationConversationSearchIndex = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$13], ["__scopeId", "data-v-46c6393d"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Conversation/conversation-search/index.vue"]]);
  const i18n = {
    loginTips: "未注册的手机号验证码通过后将自动注册",
    mobilePlaceholder: "请输入手机号",
    smsCodePlaceholder: "请输入验证码",
    loginBtnTitle: "登录",
    loginTitle: "验证码登录",
    smsCodeBtnTitle: "获取验证码",
    smsCodeBtnTitleCount: "秒后重新获取",
    mobileErrorMsg: "请输入正确的手机号",
    smsErrorMsg: "请输入正确验证码",
    mobileOrSmsCodeErrorMsg: "手机号或验证码错误",
    smsCodeFailMsg: "验证码获取失败",
    loginFailMsg: "登录失败",
    smsCodeNetworkErrorMsg: "获取失败，当前网络不可用，请检查你的网络设置",
    loginNetworkErrorMsg: "登陆失败，当前网络不可用，请检查你的网络设置"
  };
  const baseUrl = "https://yiyong-user-center.netease.im";
  const loginByCodeHeader = {
    appKey: "3e215d27b6a6a9e27dad7ef36dd5b65c",
    parentScope: 2,
    scope: 7
  };
  const urlMap = {
    getLoginSmsCode: "/userCenter/v1/auth/sendLoginSmsCode",
    loginRegisterByCode: "/userCenter/v1/auth/loginRegisterByCode",
    loginRegisterByToken: "/userCenter/v1/auth/loginByToken",
    logout: "/userCenter/v1/auth/logout"
  };
  const getLoginSmsCode = (data2) => {
    const url = baseUrl + urlMap.getLoginSmsCode;
    return new Promise((resolve, reject) => {
      uni.request({
        url,
        header: loginByCodeHeader,
        method: "POST",
        data: data2,
        success: (res) => {
          const responseData = res.data;
          if (responseData.code !== 200) {
            reject(responseData);
          }
          resolve(responseData.data);
        },
        fail: (err) => {
          reject(err);
        }
      });
    });
  };
  const loginRegisterByCode = (data2) => {
    const url = baseUrl + urlMap.loginRegisterByCode;
    return new Promise((resolve, reject) => {
      uni.request({
        url,
        header: loginByCodeHeader,
        method: "POST",
        data: data2,
        success: (res) => {
          const responseData = res.data;
          if (responseData.code !== 200) {
            reject(responseData);
          }
          resolve(responseData.data);
        },
        fail: (err) => {
          reject(err);
        }
      });
    });
  };
  const _sfc_main$13 = /* @__PURE__ */ vue.defineComponent({
    __name: "form-input",
    props: {
      className: {
        type: String,
        default: ""
      },
      type: {
        type: String,
        default: "text"
      },
      value: {
        type: String,
        default: ""
      },
      placeholder: {
        type: String,
        default: ""
      },
      allowClear: {
        type: Boolean,
        default: false
      },
      rule: {
        type: Object,
        default: null
      }
    },
    emits: ["updateModelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const emit = __emit;
      const props = __props;
      const inputFocus = vue.ref(false);
      const inputError = vue.ref(false);
      const inputClass = vue.computed(() => {
        return [props.className, "form-input-item", { "focus": inputFocus.value, "error": inputError.value }];
      });
      const handleInput = (event) => {
        let value = event.detail.value;
        if (props.type === "tel") {
          value = value.replace(/\D/g, "");
        }
        emit("updateModelValue", value);
      };
      const handleBlur = () => {
        inputFocus.value = false;
        if (props.rule && props.rule.trigger === "blur") {
          inputError.value = !props.rule.reg.test(props.value || "");
        }
      };
      const clearInput = () => {
        emit("updateModelValue", null);
        inputFocus.value = true;
      };
      const __returned__ = { emit, props, inputFocus, inputError, inputClass, handleInput, handleBlur, clearInput };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createElementVNode(
        "div",
        {
          class: vue.normalizeClass($setup.inputClass)
        },
        [
          vue.renderSlot(_ctx.$slots, "addonBefore", {}, void 0, true),
          vue.createElementVNode("input", {
            class: "input",
            type: $props.type,
            value: $props.value,
            onInput: $setup.handleInput,
            focus: $setup.inputFocus,
            onFocus: _cache[0] || (_cache[0] = ($event) => $setup.inputFocus = true),
            onBlur: $setup.handleBlur,
            placeholder: $props.placeholder
          }, null, 40, ["type", "value", "focus", "placeholder"]),
          vue.withDirectives(vue.createElementVNode(
            "icon",
            {
              type: "clear",
              size: "16",
              onClick: _cache[1] || (_cache[1] = ($event) => $setup.clearInput())
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vShow, $props.value && $props.allowClear]
          ]),
          vue.renderSlot(_ctx.$slots, "addonAfter", {}, void 0, true)
        ],
        2
        /* CLASS */
      ),
      $setup.inputError && $props.rule ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "error-tips"
        },
        vue.toDisplayString($props.rule.message),
        1
        /* TEXT */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const FormInput$1 = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$12], ["__scopeId", "data-v-536d96fe"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Login/components/form-input.vue"]]);
  const _sfc_main$12 = /* @__PURE__ */ vue.defineComponent({
    __name: "login-form",
    setup(__props, { expose: __expose }) {
      __expose();
      const mobileInputRule = {
        reg: /^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$/,
        message: i18n.mobileErrorMsg,
        trigger: "blur"
      };
      const smsCodeInputRule = {
        reg: /^\d+$/,
        message: i18n.smsErrorMsg,
        trigger: "blur"
      };
      const smsCount = vue.ref(60);
      const loginTabs = vue.reactive({
        active: 0,
        list: [
          { key: 0, title: i18n.loginTitle }
        ]
      });
      const loginForm = vue.reactive({
        mobile: "",
        smsCode: ""
      });
      const smsText = vue.computed(() => {
        if (smsCount.value > 0 && smsCount.value < 60) {
          return smsCount.value + i18n.smsCodeBtnTitleCount;
        } else {
          return i18n.smsCodeBtnTitle;
        }
      });
      async function startSmsCount() {
        if (!mobileInputRule.reg.test(loginForm.mobile)) {
          uni.showToast({
            title: i18n.mobileErrorMsg,
            icon: "none"
          });
          return;
        }
        try {
          await getLoginSmsCode({ mobile: loginForm.mobile });
        } catch (error) {
          let msg = error.errMsg || error.msg || error.message || i18n.smsCodeFailMsg;
          if (msg.startsWith("request:fail")) {
            msg = i18n.smsCodeNetworkErrorMsg;
          }
          uni.showToast({
            title: msg,
            icon: "none"
          });
          return;
        }
        if (smsCount.value > 0 && smsCount.value < 60) {
          return;
        }
        smsCount.value--;
        const timer = setInterval(() => {
          if (smsCount.value > 0) {
            smsCount.value--;
          } else {
            clearInterval(timer);
            smsCount.value = 60;
          }
        }, 1e3);
      }
      async function submitLoginForm() {
        if (!mobileInputRule.reg.test(loginForm.mobile) || !smsCodeInputRule.reg.test(loginForm.smsCode)) {
          uni.showToast({
            title: i18n.mobileOrSmsCodeErrorMsg,
            icon: "none"
          });
          return;
        }
        try {
          const res = await loginRegisterByCode(loginForm);
          const app = getApp();
          app.initNim({ account: res.imAccid, token: res.imToken });
        } catch (error) {
          let msg = error.errMsg || error.msg || error.message || i18n.smsCodeFailMsg;
          if (msg.startsWith("request:fail")) {
            msg = i18n.loginNetworkErrorMsg;
          }
          uni.showToast({
            title: msg,
            icon: "none"
          });
        }
      }
      const __returned__ = { mobileInputRule, smsCodeInputRule, smsCount, loginTabs, loginForm, smsText, startSmsCount, submitLoginForm, get i18n() {
        return i18n;
      }, FormInput: FormInput$1 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createElementVNode("div", { class: "navigation-bar" }),
      vue.createElementVNode("div", { class: "login-form-container" }, [
        vue.createElementVNode("div", { class: "login-tabs" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.loginTabs.list, (item) => {
              return vue.openBlock(), vue.createElementBlock("span", {
                key: item.key,
                class: vue.normalizeClass(["login-tab", { active: $setup.loginTabs.active === item.key }]),
                onClick: ($event) => $setup.loginTabs.active = item.key
              }, [
                vue.createElementVNode(
                  "span",
                  null,
                  vue.toDisplayString(item.title),
                  1
                  /* TEXT */
                )
              ], 10, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue.createElementVNode(
          "div",
          { class: "login-tips" },
          vue.toDisplayString($setup.i18n.loginTips),
          1
          /* TEXT */
        ),
        vue.createElementVNode("div", { class: "login-form" }, [
          vue.createVNode($setup["FormInput"], {
            className: "login-form-input",
            type: "tel",
            value: $setup.loginForm.mobile,
            onUpdateModelValue: _cache[0] || (_cache[0] = (val) => $setup.loginForm.mobile = val),
            placeholder: $setup.i18n.mobilePlaceholder,
            "allow-clear": true,
            rule: $setup.mobileInputRule
          }, {
            addonBefore: vue.withCtx(() => [
              vue.createElementVNode("span", { class: "phone-addon-before" }, "+86")
            ]),
            _: 1
            /* STABLE */
          }, 8, ["value", "placeholder"]),
          vue.createVNode($setup["FormInput"], {
            className: "login-form-input",
            type: "tel",
            value: $setup.loginForm.smsCode,
            onUpdateModelValue: _cache[2] || (_cache[2] = (val) => $setup.loginForm.smsCode = val),
            placeholder: $setup.i18n.smsCodePlaceholder,
            rule: $setup.smsCodeInputRule
          }, {
            addonAfter: vue.withCtx(() => [
              vue.createElementVNode(
                "span",
                {
                  class: vue.normalizeClass(["sms-addon-after", { "disabled": $setup.smsCount > 0 && $setup.smsCount < 60 }]),
                  onClick: _cache[1] || (_cache[1] = ($event) => $setup.startSmsCount())
                },
                vue.toDisplayString($setup.smsText),
                3
                /* TEXT, CLASS */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["value", "placeholder"])
        ])
      ]),
      vue.createElementVNode(
        "button",
        {
          class: "login-btn",
          onClick: _cache[3] || (_cache[3] = ($event) => $setup.submitLoginForm())
        },
        vue.toDisplayString($setup.i18n.loginBtnTitle),
        1
        /* TEXT */
      )
    ]);
  }
  const LoginForm = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$11], ["__scopeId", "data-v-1bc14737"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Login/components/login-form.vue"]]);
  const _sfc_main$11 = /* @__PURE__ */ vue.defineComponent({
    __name: "welcome",
    setup(__props, { expose: __expose }) {
      __expose();
      const onClick = () => {
        uni.$emit("login");
      };
      const __returned__ = { onClick };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createElementVNode("image", {
        src: "https://yx-web-nosdn.netease.im/common/da126b0fcc419b142224ced81456e179/yx-welcome.png",
        class: "welcome-img"
      }),
      vue.createElementVNode("button", {
        class: "login-btn",
        onClick: $setup.onClick
      }, "注册/登录"),
      vue.createElementVNode("div", { class: "bottom-box" }, [
        vue.createElementVNode("image", {
          src: "https://yx-web-nosdn.netease.im/common/9303d9be2ea5f90c48397326ae5dfd45/welcome-bottom.png",
          class: "welcome-img-bottom"
        })
      ])
    ]);
  }
  const Welcome = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$10], ["__scopeId", "data-v-861c7e6f"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Login/components/welcome.vue"]]);
  const _sfc_main$10 = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const step = vue.ref(0);
      onLoad(() => {
        uni.$on("login", () => {
          step.value = 1;
        });
      });
      onUnload(() => {
        uni.$off("login");
      });
      const __returned__ = { step, LoginForm, Welcome };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.withDirectives(vue.createElementVNode(
        "div",
        null,
        [
          vue.createVNode($setup["Welcome"])
        ],
        512
        /* NEED_PATCH */
      ), [
        [vue.vShow, $setup.step === 0]
      ]),
      vue.withDirectives(vue.createElementVNode(
        "div",
        null,
        [
          vue.createVNode($setup["LoginForm"])
        ],
        512
        /* NEED_PATCH */
      ), [
        [vue.vShow, $setup.step === 1]
      ])
    ]);
  }
  const PagesLoginIndex = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$$], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Login/index.vue"]]);
  var t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
  function createCommonjsModule$1(t2) {
    var o2 = { exports: {} };
    return t2(o2, o2.exports), o2.exports;
  }
  var o, a, m, u, h, g, I, _, E, M, T, S, C, N, O, b, R, A, V, k, P, L, w, D, U, x, B, j, $, G, q, H, Y, z, K, W, J, X, Q, Z, ee, te, re, ie, oe, ne, se, ae, ce = createCommonjsModule$1(function(t2) {
    var o2 = Object.prototype.hasOwnProperty, a2 = "~";
    function Events() {
    }
    function EE(t3, o3, a3) {
      this.fn = t3, this.context = o3, this.once = a3 || false;
    }
    function addListener(t3, o3, m2, u2, h2) {
      if ("function" != typeof m2)
        throw new TypeError("The listener must be a function");
      var g2 = new EE(m2, u2 || t3, h2), I2 = a2 ? a2 + o3 : o3;
      return t3._events[I2] ? t3._events[I2].fn ? t3._events[I2] = [t3._events[I2], g2] : t3._events[I2].push(g2) : (t3._events[I2] = g2, t3._eventsCount++), t3;
    }
    function clearEvent(t3, o3) {
      0 == --t3._eventsCount ? t3._events = new Events() : delete t3._events[o3];
    }
    function EventEmitter2() {
      this._events = new Events(), this._eventsCount = 0;
    }
    Object.create && (Events.prototype = /* @__PURE__ */ Object.create(null), new Events().__proto__ || (a2 = false)), EventEmitter2.prototype.eventNames = function eventNames() {
      var t3, m2, u2 = [];
      if (0 === this._eventsCount)
        return u2;
      for (m2 in t3 = this._events)
        o2.call(t3, m2) && u2.push(a2 ? m2.slice(1) : m2);
      return Object.getOwnPropertySymbols ? u2.concat(Object.getOwnPropertySymbols(t3)) : u2;
    }, EventEmitter2.prototype.listeners = function listeners(t3) {
      var o3 = a2 ? a2 + t3 : t3, m2 = this._events[o3];
      if (!m2)
        return [];
      if (m2.fn)
        return [m2.fn];
      for (var u2 = 0, h2 = m2.length, g2 = new Array(h2); u2 < h2; u2++)
        g2[u2] = m2[u2].fn;
      return g2;
    }, EventEmitter2.prototype.listenerCount = function listenerCount(t3) {
      var o3 = a2 ? a2 + t3 : t3, m2 = this._events[o3];
      return m2 ? m2.fn ? 1 : m2.length : 0;
    }, EventEmitter2.prototype.emit = function emit(t3, o3, m2, u2, h2, g2) {
      var I2 = a2 ? a2 + t3 : t3;
      if (!this._events[I2])
        return false;
      var _2, E2, M2 = this._events[I2], T2 = arguments.length;
      if (M2.fn) {
        switch (M2.once && this.removeListener(t3, M2.fn, void 0, true), T2) {
          case 1:
            return M2.fn.call(M2.context), true;
          case 2:
            return M2.fn.call(M2.context, o3), true;
          case 3:
            return M2.fn.call(M2.context, o3, m2), true;
          case 4:
            return M2.fn.call(M2.context, o3, m2, u2), true;
          case 5:
            return M2.fn.call(M2.context, o3, m2, u2, h2), true;
          case 6:
            return M2.fn.call(M2.context, o3, m2, u2, h2, g2), true;
        }
        for (E2 = 1, _2 = new Array(T2 - 1); E2 < T2; E2++)
          _2[E2 - 1] = arguments[E2];
        M2.fn.apply(M2.context, _2);
      } else {
        var S2, C2 = M2.length;
        for (E2 = 0; E2 < C2; E2++)
          switch (M2[E2].once && this.removeListener(t3, M2[E2].fn, void 0, true), T2) {
            case 1:
              M2[E2].fn.call(M2[E2].context);
              break;
            case 2:
              M2[E2].fn.call(M2[E2].context, o3);
              break;
            case 3:
              M2[E2].fn.call(M2[E2].context, o3, m2);
              break;
            case 4:
              M2[E2].fn.call(M2[E2].context, o3, m2, u2);
              break;
            default:
              if (!_2)
                for (S2 = 1, _2 = new Array(T2 - 1); S2 < T2; S2++)
                  _2[S2 - 1] = arguments[S2];
              M2[E2].fn.apply(M2[E2].context, _2);
          }
      }
      return true;
    }, EventEmitter2.prototype.on = function on2(t3, o3, a3) {
      return addListener(this, t3, o3, a3, false);
    }, EventEmitter2.prototype.once = function once2(t3, o3, a3) {
      return addListener(this, t3, o3, a3, true);
    }, EventEmitter2.prototype.removeListener = function removeListener(t3, o3, m2, u2) {
      var h2 = a2 ? a2 + t3 : t3;
      if (!this._events[h2])
        return this;
      if (!o3)
        return clearEvent(this, h2), this;
      var g2 = this._events[h2];
      if (g2.fn)
        g2.fn !== o3 || u2 && !g2.once || m2 && g2.context !== m2 || clearEvent(this, h2);
      else {
        for (var I2 = 0, _2 = [], E2 = g2.length; I2 < E2; I2++)
          (g2[I2].fn !== o3 || u2 && !g2[I2].once || m2 && g2[I2].context !== m2) && _2.push(g2[I2]);
        _2.length ? this._events[h2] = 1 === _2.length ? _2[0] : _2 : clearEvent(this, h2);
      }
      return this;
    }, EventEmitter2.prototype.removeAllListeners = function removeAllListeners(t3) {
      var o3;
      return t3 ? (o3 = a2 ? a2 + t3 : t3, this._events[o3] && clearEvent(this, o3)) : (this._events = new Events(), this._eventsCount = 0), this;
    }, EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener, EventEmitter2.prototype.addListener = EventEmitter2.prototype.on, EventEmitter2.prefixed = a2, EventEmitter2.EventEmitter = EventEmitter2, t2.exports = EventEmitter2;
  }), de = createCommonjsModule$1(function(t2, o2) {
    t2.exports = function() {
      function _regeneratorRuntime() {
        /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
        _regeneratorRuntime = function() {
          return t4;
        };
        var t4 = {}, o4 = Object.prototype, a3 = o4.hasOwnProperty, m3 = "function" == typeof Symbol ? Symbol : {}, u3 = m3.iterator || "@@iterator", h2 = m3.asyncIterator || "@@asyncIterator", g2 = m3.toStringTag || "@@toStringTag";
        function define(t5, o5, a4) {
          return Object.defineProperty(t5, o5, { value: a4, enumerable: true, configurable: true, writable: true }), t5[o5];
        }
        try {
          define({}, "");
        } catch (t5) {
          define = function(t6, o5, a4) {
            return t6[o5] = a4;
          };
        }
        function wrap(t5, o5, a4, m4) {
          var u4 = o5 && o5.prototype instanceof Generator ? o5 : Generator, h3 = Object.create(u4.prototype), g3 = new Context(m4 || []);
          return h3._invoke = /* @__PURE__ */ function(t6, o6, a5) {
            var m5 = "suspendedStart";
            return function(u5, h4) {
              if ("executing" === m5)
                throw new Error("Generator is already running");
              if ("completed" === m5) {
                if ("throw" === u5)
                  throw h4;
                return doneResult();
              }
              for (a5.method = u5, a5.arg = h4; ; ) {
                var g4 = a5.delegate;
                if (g4) {
                  var _3 = maybeInvokeDelegate(g4, a5);
                  if (_3) {
                    if (_3 === I2)
                      continue;
                    return _3;
                  }
                }
                if ("next" === a5.method)
                  a5.sent = a5._sent = a5.arg;
                else if ("throw" === a5.method) {
                  if ("suspendedStart" === m5)
                    throw m5 = "completed", a5.arg;
                  a5.dispatchException(a5.arg);
                } else
                  "return" === a5.method && a5.abrupt("return", a5.arg);
                m5 = "executing";
                var E3 = tryCatch(t6, o6, a5);
                if ("normal" === E3.type) {
                  if (m5 = a5.done ? "completed" : "suspendedYield", E3.arg === I2)
                    continue;
                  return { value: E3.arg, done: a5.done };
                }
                "throw" === E3.type && (m5 = "completed", a5.method = "throw", a5.arg = E3.arg);
              }
            };
          }(t5, a4, g3), h3;
        }
        function tryCatch(t5, o5, a4) {
          try {
            return { type: "normal", arg: t5.call(o5, a4) };
          } catch (t6) {
            return { type: "throw", arg: t6 };
          }
        }
        t4.wrap = wrap;
        var I2 = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var _2 = {};
        define(_2, u3, function() {
          return this;
        });
        var E2 = Object.getPrototypeOf, M2 = E2 && E2(E2(values([])));
        M2 && M2 !== o4 && a3.call(M2, u3) && (_2 = M2);
        var T2 = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(_2);
        function defineIteratorMethods(t5) {
          ["next", "throw", "return"].forEach(function(o5) {
            define(t5, o5, function(t6) {
              return this._invoke(o5, t6);
            });
          });
        }
        function AsyncIterator(t5, o5) {
          function invoke(m5, u4, h3, g3) {
            var I3 = tryCatch(t5[m5], t5, u4);
            if ("throw" !== I3.type) {
              var _3 = I3.arg, E3 = _3.value;
              return E3 && "object" == typeof E3 && a3.call(E3, "__await") ? o5.resolve(E3.__await).then(function(t6) {
                invoke("next", t6, h3, g3);
              }, function(t6) {
                invoke("throw", t6, h3, g3);
              }) : o5.resolve(E3).then(function(t6) {
                _3.value = t6, h3(_3);
              }, function(t6) {
                return invoke("throw", t6, h3, g3);
              });
            }
            g3(I3.arg);
          }
          var m4;
          this._invoke = function(t6, a4) {
            function callInvokeWithMethodAndArg() {
              return new o5(function(o6, m5) {
                invoke(t6, a4, o6, m5);
              });
            }
            return m4 = m4 ? m4.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          };
        }
        function maybeInvokeDelegate(t5, o5) {
          var a4 = t5.iterator[o5.method];
          if (void 0 === a4) {
            if (o5.delegate = null, "throw" === o5.method) {
              if (t5.iterator.return && (o5.method = "return", o5.arg = void 0, maybeInvokeDelegate(t5, o5), "throw" === o5.method))
                return I2;
              o5.method = "throw", o5.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return I2;
          }
          var m4 = tryCatch(a4, t5.iterator, o5.arg);
          if ("throw" === m4.type)
            return o5.method = "throw", o5.arg = m4.arg, o5.delegate = null, I2;
          var u4 = m4.arg;
          return u4 ? u4.done ? (o5[t5.resultName] = u4.value, o5.next = t5.nextLoc, "return" !== o5.method && (o5.method = "next", o5.arg = void 0), o5.delegate = null, I2) : u4 : (o5.method = "throw", o5.arg = new TypeError("iterator result is not an object"), o5.delegate = null, I2);
        }
        function pushTryEntry(t5) {
          var o5 = { tryLoc: t5[0] };
          1 in t5 && (o5.catchLoc = t5[1]), 2 in t5 && (o5.finallyLoc = t5[2], o5.afterLoc = t5[3]), this.tryEntries.push(o5);
        }
        function resetTryEntry(t5) {
          var o5 = t5.completion || {};
          o5.type = "normal", delete o5.arg, t5.completion = o5;
        }
        function Context(t5) {
          this.tryEntries = [{ tryLoc: "root" }], t5.forEach(pushTryEntry, this), this.reset(true);
        }
        function values(t5) {
          if (t5) {
            var o5 = t5[u3];
            if (o5)
              return o5.call(t5);
            if ("function" == typeof t5.next)
              return t5;
            if (!isNaN(t5.length)) {
              var m4 = -1, h3 = function next() {
                for (; ++m4 < t5.length; )
                  if (a3.call(t5, m4))
                    return next.value = t5[m4], next.done = false, next;
                return next.value = void 0, next.done = true, next;
              };
              return h3.next = h3;
            }
          }
          return { next: doneResult };
        }
        function doneResult() {
          return { value: void 0, done: true };
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(T2, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, g2, "GeneratorFunction"), t4.isGeneratorFunction = function(t5) {
          var o5 = "function" == typeof t5 && t5.constructor;
          return !!o5 && (o5 === GeneratorFunction || "GeneratorFunction" === (o5.displayName || o5.name));
        }, t4.mark = function(t5) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(t5, GeneratorFunctionPrototype) : (t5.__proto__ = GeneratorFunctionPrototype, define(t5, g2, "GeneratorFunction")), t5.prototype = Object.create(T2), t5;
        }, t4.awrap = function(t5) {
          return { __await: t5 };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, h2, function() {
          return this;
        }), t4.AsyncIterator = AsyncIterator, t4.async = function(o5, a4, m4, u4, h3) {
          void 0 === h3 && (h3 = Promise);
          var g3 = new AsyncIterator(wrap(o5, a4, m4, u4), h3);
          return t4.isGeneratorFunction(a4) ? g3 : g3.next().then(function(t5) {
            return t5.done ? t5.value : g3.next();
          });
        }, defineIteratorMethods(T2), define(T2, g2, "Generator"), define(T2, u3, function() {
          return this;
        }), define(T2, "toString", function() {
          return "[object Generator]";
        }), t4.keys = function(t5) {
          var o5 = [];
          for (var a4 in t5)
            o5.push(a4);
          return o5.reverse(), function next() {
            for (; o5.length; ) {
              var a5 = o5.pop();
              if (a5 in t5)
                return next.value = a5, next.done = false, next;
            }
            return next.done = true, next;
          };
        }, t4.values = values, Context.prototype = { constructor: Context, reset: function(t5) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !t5)
            for (var o5 in this)
              "t" === o5.charAt(0) && a3.call(this, o5) && !isNaN(+o5.slice(1)) && (this[o5] = void 0);
        }, stop: function() {
          this.done = true;
          var t5 = this.tryEntries[0].completion;
          if ("throw" === t5.type)
            throw t5.arg;
          return this.rval;
        }, dispatchException: function(t5) {
          if (this.done)
            throw t5;
          var o5 = this;
          function handle(a4, m5) {
            return h3.type = "throw", h3.arg = t5, o5.next = a4, m5 && (o5.method = "next", o5.arg = void 0), !!m5;
          }
          for (var m4 = this.tryEntries.length - 1; m4 >= 0; --m4) {
            var u4 = this.tryEntries[m4], h3 = u4.completion;
            if ("root" === u4.tryLoc)
              return handle("end");
            if (u4.tryLoc <= this.prev) {
              var g3 = a3.call(u4, "catchLoc"), I3 = a3.call(u4, "finallyLoc");
              if (g3 && I3) {
                if (this.prev < u4.catchLoc)
                  return handle(u4.catchLoc, true);
                if (this.prev < u4.finallyLoc)
                  return handle(u4.finallyLoc);
              } else if (g3) {
                if (this.prev < u4.catchLoc)
                  return handle(u4.catchLoc, true);
              } else {
                if (!I3)
                  throw new Error("try statement without catch or finally");
                if (this.prev < u4.finallyLoc)
                  return handle(u4.finallyLoc);
              }
            }
          }
        }, abrupt: function(t5, o5) {
          for (var m4 = this.tryEntries.length - 1; m4 >= 0; --m4) {
            var u4 = this.tryEntries[m4];
            if (u4.tryLoc <= this.prev && a3.call(u4, "finallyLoc") && this.prev < u4.finallyLoc) {
              var h3 = u4;
              break;
            }
          }
          h3 && ("break" === t5 || "continue" === t5) && h3.tryLoc <= o5 && o5 <= h3.finallyLoc && (h3 = null);
          var g3 = h3 ? h3.completion : {};
          return g3.type = t5, g3.arg = o5, h3 ? (this.method = "next", this.next = h3.finallyLoc, I2) : this.complete(g3);
        }, complete: function(t5, o5) {
          if ("throw" === t5.type)
            throw t5.arg;
          return "break" === t5.type || "continue" === t5.type ? this.next = t5.arg : "return" === t5.type ? (this.rval = this.arg = t5.arg, this.method = "return", this.next = "end") : "normal" === t5.type && o5 && (this.next = o5), I2;
        }, finish: function(t5) {
          for (var o5 = this.tryEntries.length - 1; o5 >= 0; --o5) {
            var a4 = this.tryEntries[o5];
            if (a4.finallyLoc === t5)
              return this.complete(a4.completion, a4.afterLoc), resetTryEntry(a4), I2;
          }
        }, catch: function(t5) {
          for (var o5 = this.tryEntries.length - 1; o5 >= 0; --o5) {
            var a4 = this.tryEntries[o5];
            if (a4.tryLoc === t5) {
              var m4 = a4.completion;
              if ("throw" === m4.type) {
                var u4 = m4.arg;
                resetTryEntry(a4);
              }
              return u4;
            }
          }
          throw new Error("illegal catch attempt");
        }, delegateYield: function(t5, o5, a4) {
          return this.delegate = { iterator: values(t5), resultName: o5, nextLoc: a4 }, "next" === this.method && (this.arg = void 0), I2;
        } }, t4;
      }
      function _typeof(t4) {
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
          return typeof t5;
        } : function(t5) {
          return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
        }, _typeof(t4);
      }
      function _classCallCheck(t4, o4) {
        if (!(t4 instanceof o4))
          throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties2(t4, o4) {
        for (var a3 = 0; a3 < o4.length; a3++) {
          var m3 = o4[a3];
          m3.enumerable = m3.enumerable || false, m3.configurable = true, "value" in m3 && (m3.writable = true), Object.defineProperty(t4, m3.key, m3);
        }
      }
      function _createClass2(t4, o4, a3) {
        return o4 && _defineProperties2(t4.prototype, o4), a3 && _defineProperties2(t4, a3), Object.defineProperty(t4, "prototype", { writable: false }), t4;
      }
      function __awaiter2(t4, o4, a3, m3) {
        function adopt(t5) {
          return t5 instanceof a3 ? t5 : new a3(function(o5) {
            o5(t5);
          });
        }
        return new (a3 || (a3 = Promise))(function(a4, u3) {
          function fulfilled(t5) {
            try {
              step(m3.next(t5));
            } catch (t6) {
              u3(t6);
            }
          }
          function rejected(t5) {
            try {
              step(m3.throw(t5));
            } catch (t6) {
              u3(t6);
            }
          }
          function step(t5) {
            t5.done ? a4(t5.value) : adopt(t5.value).then(fulfilled, rejected);
          }
          step((m3 = m3.apply(t4, o4 || [])).next());
        });
      }
      var t3 = { isDataReportEnable: true, maxSize: 100, msgListMaxSize: 1e3, cacheMaxSize: 1e3, maxDelay: 3e5, maxInterval: 3e4, minInterval: 1e4, timeout: 5e3, autoStart: true, loginFailIgnoreInterval: 72e5 }, o3 = 12, a2 = 8e3, m2 = function emptyFn() {
      }, u2 = function() {
        function Reporter(o4) {
          _classCallCheck(this, Reporter), this.isUploadEnable = true, this.serverAllowUpload = false, this.initConfigLoaded = false, this.loading = false, this.isDestroyed = false, this.reportConfig = t3, this.configPath = "dispatcher/req", this.dataReportPath = "statics/report/common/form", this.traceMsgCache = {}, this.reqRetryCount = 0, this.highPriorityMsgList = [], this.msgList = [], this.lowPriorityMsgList = [], this.cacheMsgList = [], this.lastReportTime = Date.now(), this.timer = null, this.endedAsyncMsgByModule = {}, this.lastFailLogin = {}, this.setConfig(o4), this.reportConfig.isDataReportEnable && this.reportConfig.autoStart && this.initUploadConfig();
        }
        return _createClass2(Reporter, [{ key: "setConfig", value: function setConfig(t4) {
          var o4 = Object.assign({}, this.reportConfig.common, t4.common);
          this.reportConfig = Object.assign({}, this.reportConfig, t4), this.reportConfig.common = o4, this.reportConfig.common.sdk_type || (this.reportConfig.common.sdk_type = "im");
        } }, { key: "reportImmediately", value: function reportImmediately(t4, o4) {
          var a3 = this;
          this.reportConfig.isDataReportEnable && this.reportConfig.request(t4, Object.assign({ dataType: "json", method: "POST", timeout: this.reportConfig.timeout }, o4)).catch(function(t5) {
            var o5, m3;
            null === (m3 = null === (o5 = a3.reportConfig) || void 0 === o5 ? void 0 : o5.logger) || void 0 === m3 || m3.warn("Reporter immediately upload failed", t5);
          });
        } }, { key: "report", value: function report(o4, a3) {
          var m3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if (m3.priority || (m3.priority = this.getEventPriority(o4, a3)), this.reportConfig.isDataReportEnable && o4) {
            if ("login" === o4 && false === a3.succeed && a3.process_id) {
              var u3 = this.lastFailLogin[a3.process_id] || 0;
              if (a3.start_time - u3 < t3.loginFailIgnoreInterval)
                return;
              this.lastFailLogin[a3.process_id] = a3.start_time;
            }
            var h2 = Date.now();
            "HIGH" === m3.priority ? this.highPriorityMsgList.push({ module: o4, msg: a3, createTime: h2 }) : "NORMAL" === m3.priority ? this.msgList.push({ module: o4, msg: a3, createTime: h2 }) : "LOW" === m3.priority && this.lowPriorityMsgList.push({ module: o4, msg: a3, createTime: h2 }), this.highPriorityMsgList.length > this.reportConfig.msgListMaxSize && this.highPriorityMsgList.shift(), this.msgList.length > this.reportConfig.msgListMaxSize && this.msgList.shift(), this.lowPriorityMsgList.length > this.reportConfig.msgListMaxSize && this.lowPriorityMsgList.shift(), this.doReport();
          }
        } }, { key: "reportTraceStart", value: function reportTraceStart(t4, o4) {
          if (this.reportConfig.isDataReportEnable && t4 && !this.traceMsgCache[t4]) {
            var a3 = Object.assign(Object.assign({ start_time: Date.now() }, o4), { extension: [] });
            this.traceMsgCache[t4] = a3;
          }
        } }, { key: "reportTraceUpdate", value: function reportTraceUpdate(t4) {
        } }, { key: "reportTraceUpdateV2", value: function reportTraceUpdateV2(t4, o4, a3) {
          var m3, u3 = this;
          if (this.reportConfig.isDataReportEnable && this.traceMsgCache[t4]) {
            var h2 = this.traceMsgCache[t4].extension, g2 = h2.length, I2 = (/* @__PURE__ */ new Date()).getTime();
            0 === g2 ? o4.duration = I2 - this.traceMsgCache[t4].start_time : h2[g2 - 1].end_time ? o4.duration = I2 - h2[g2 - 1].end_time : o4.duration = I2 - this.traceMsgCache[t4].start_time, h2.push(Object.assign({ end_time: I2 }, o4));
            var _2 = h2.length - 1;
            (null == a3 ? void 0 : a3.asyncParams) && ((m3 = this.traceMsgCache[t4]).asyncPromiseArray || (m3.asyncPromiseArray = []), this.traceMsgCache[t4].asyncPromiseArray.push(a3.asyncParams.then(function(o5) {
              u3.traceMsgCache[t4] && u3.traceMsgCache[t4].extension[_2] && Object.assign(u3.traceMsgCache[t4].extension[_2], o5);
            })));
          }
        } }, { key: "reportTraceEnd", value: function reportTraceEnd(t4) {
          var o4, a3 = this, m3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this.reportConfig.isDataReportEnable && this.traceMsgCache[t4])
            if ("nos" !== t4 || false === m3) {
              "boolean" == typeof m3 ? this.traceMsgCache[t4].succeed = !!m3 : this.traceMsgCache[t4].state = m3, this.traceMsgCache[t4].duration = Date.now() - this.traceMsgCache[t4].start_time, this.traceMsgCache[t4].extension.forEach(function(t5) {
                delete t5.end_time;
              });
              var u3 = this.traceMsgCache[t4];
              if (this.traceMsgCache[t4] = null, u3.asyncPromiseArray) {
                (o4 = this.endedAsyncMsgByModule)[t4] || (o4[t4] = []), this.endedAsyncMsgByModule[t4].push(u3);
                var h2 = function asyncCallback() {
                  a3.endedAsyncMsgByModule[t4] && a3.endedAsyncMsgByModule[t4].includes(u3) && (delete u3.asyncPromiseArray, a3.report(t4, u3, { priority: a3.getEventPriority(t4, u3) }));
                };
                Promise.all(u3.asyncPromiseArray).then(h2).catch(h2);
              } else
                this.report(t4, u3, { priority: this.getEventPriority(t4, u3) });
            } else
              this.traceMsgCache[t4] = null;
        } }, { key: "getEventPriority", value: function getEventPriority(t4, o4) {
          if ("exceptions" === t4) {
            if (0 === o4.action)
              return "HIGH";
            if (2 === o4.action)
              return "HIGH";
            if (1 === o4.action && 0 !== o4.exception_service)
              return "HIGH";
          } else {
            if ("msgReceive" === t4)
              return "LOW";
            if ("nim_api_trace" === t4)
              return "LOW";
          }
          return "NORMAL";
        } }, { key: "reportTraceCancel", value: function reportTraceCancel(t4) {
          this.reportConfig.isDataReportEnable && (this.endedAsyncMsgByModule[t4] = [], this.traceMsgCache[t4] = null);
        } }, { key: "pause", value: function pause() {
          this.reportConfig.isDataReportEnable && (this.isUploadEnable = false);
        } }, { key: "restore", value: function restore() {
          this.reportConfig.isDataReportEnable && (this.isUploadEnable = true, this.initConfigLoaded || this.initUploadConfig());
        } }, { key: "destroy", value: function destroy() {
          var t4 = this;
          this.reportConfig.isDataReportEnable && (Object.keys(this.traceMsgCache).forEach(function(o4) {
            t4.reportTraceEnd(o4, 1);
          }), null !== this.timer && clearTimeout(this.timer), this.setConfig = m2, this.report = m2, this.reportTraceStart = m2, this.reportTraceUpdate = m2, this.reportTraceEnd = m2, this.pause = m2, this.restore = m2, this.destroy = m2, this.reqRetryCount = 0, this.cacheMsgList = [], this.traceMsgCache = {}, this.lowPriorityMsgList = [], this.msgList = [], this.highPriorityMsgList = [], this.reportConfig = {}, this.isDestroyed = true);
        } }, { key: "initUploadConfig", value: function initUploadConfig() {
          var t4, m3;
          return __awaiter2(this, void 0, void 0, _regeneratorRuntime().mark(function _callee() {
            var u3, h2, g2, I2, _2, E2 = this;
            return _regeneratorRuntime().wrap(function _callee$(M2) {
              for (; ; )
                switch (M2.prev = M2.next) {
                  case 0:
                    if (!this.loading) {
                      M2.next = 2;
                      break;
                    }
                    return M2.abrupt("return");
                  case 2:
                    this.loading = true, u3 = this.reportConfig.common || {}, h2 = this.reportConfig.compassDataEndpoint.split(",").map(function(t5) {
                      return "".concat(t5, "/").concat(E2.configPath);
                    }), g2 = _regeneratorRuntime().mark(function _loop(g3) {
                      return _regeneratorRuntime().wrap(function _loop$(I3) {
                        for (; ; )
                          switch (I3.prev = I3.next) {
                            case 0:
                              if (!E2.initConfigLoaded && !E2.isDestroyed) {
                                I3.next = 2;
                                break;
                              }
                              return I3.abrupt("return", "break");
                            case 2:
                              return I3.prev = 2, I3.next = 5, E2.reportConfig.request(h2[g3], { method: "GET", dataType: "json", params: { deviceId: u3.dev_id, sdkVer: u3.sdk_ver, platform: u3.platform, appkey: u3.app_key }, timeout: E2.reportConfig.timeout }).then(function(t5) {
                                var o4, a3;
                                if (!E2.isDestroyed) {
                                  if (200 === t5.status && t5.data && 200 === t5.data.code) {
                                    E2.initConfigLoaded = true;
                                    var m4 = t5.data.data || {};
                                    E2.reportConfig.maxSize = m4.maxSize > 1e3 ? 1e3 : m4.maxSize, E2.reportConfig.maxInterval = m4.maxInterval > 1e4 ? 1e4 : m4.maxInterval, E2.reportConfig.maxInterval = m4.maxInterval < 10 ? 10 : m4.maxInterval, E2.reportConfig.minInterval = m4.minInterval < 2 ? 2 : m4.minInterval, E2.reportConfig.maxDelay = m4.maxDelay || 300, E2.reportConfig.maxInterval = 1e3 * E2.reportConfig.maxInterval, E2.reportConfig.minInterval = 1e3 * E2.reportConfig.minInterval, E2.reportConfig.maxDelay = 1e3 * E2.reportConfig.maxDelay, m4.endpoint ? E2.dataReportEndpoint = m4.endpoint : E2.dataReportEndpoint = h2[g3], E2.serverAllowUpload = true, E2.loading = false, E2.reportHeartBeat();
                                  } else
                                    200 === t5.status && (E2.initConfigLoaded = true);
                                  null === (a3 = null === (o4 = E2.reportConfig) || void 0 === o4 ? void 0 : o4.logger) || void 0 === a3 || a3.log("Get reporter upload config success");
                                }
                              }).catch(function(t5) {
                                var m4, u4;
                                E2.isDestroyed || (E2.loading = false, null === (u4 = null === (m4 = E2.reportConfig) || void 0 === m4 ? void 0 : m4.logger) || void 0 === u4 || u4.error("Get reporter upload config failed", t5), E2.reqRetryCount < o3 && (E2.reqRetryCount++, setTimeout(function() {
                                  E2.isDestroyed || E2.initUploadConfig();
                                }, a2)));
                              });
                            case 5:
                              I3.next = 14;
                              break;
                            case 7:
                              if (I3.prev = 7, I3.t0 = I3.catch(2), !E2.isDestroyed) {
                                I3.next = 11;
                                break;
                              }
                              return I3.abrupt("return", { v: void 0 });
                            case 11:
                              E2.loading = false, null === (m3 = null === (t4 = E2.reportConfig) || void 0 === t4 ? void 0 : t4.logger) || void 0 === m3 || m3.error("Exec reporter request failed", I3.t0), E2.reqRetryCount < o3 && (E2.reqRetryCount++, setTimeout(function() {
                                E2.isDestroyed || E2.initUploadConfig();
                              }, a2));
                            case 14:
                            case "end":
                              return I3.stop();
                          }
                      }, _loop, null, [[2, 7]]);
                    }), I2 = 0;
                  case 7:
                    if (!(I2 < h2.length)) {
                      M2.next = 17;
                      break;
                    }
                    return M2.delegateYield(g2(I2), "t0", 9);
                  case 9:
                    if ("break" !== (_2 = M2.t0)) {
                      M2.next = 12;
                      break;
                    }
                    return M2.abrupt("break", 17);
                  case 12:
                    if ("object" !== _typeof(_2)) {
                      M2.next = 14;
                      break;
                    }
                    return M2.abrupt("return", _2.v);
                  case 14:
                    I2++, M2.next = 7;
                    break;
                  case 17:
                  case "end":
                    return M2.stop();
                }
            }, _callee, this);
          }));
        } }, { key: "reportHeartBeat", value: function reportHeartBeat() {
          var t4 = this;
          this.isDestroyed || (this.timer = setTimeout(function() {
            t4.reportHeartBeat();
          }, this.reportConfig.minInterval), this.doReport());
        } }, { key: "doReport", value: function doReport() {
          if (!this.isDestroyed) {
            var t4 = this.highPriorityMsgList.length + this.msgList.length + this.lowPriorityMsgList.length + this.cacheMsgList.length > 2 * this.reportConfig.maxSize ? this.reportConfig.minInterval : this.reportConfig.maxInterval;
            Date.now() - this.lastReportTime >= t4 && this.upload();
          }
        } }, { key: "getUploadMsg", value: function getUploadMsg() {
          var t4 = this, o4 = {}, a3 = Date.now();
          this.highPriorityMsgList = this.highPriorityMsgList.filter(function(o5) {
            return a3 - o5.createTime < t4.reportConfig.maxDelay;
          }), this.msgList = this.msgList.filter(function(o5) {
            return a3 - o5.createTime < t4.reportConfig.maxDelay;
          }), this.lowPriorityMsgList = this.lowPriorityMsgList.filter(function(o5) {
            return a3 - o5.createTime < t4.reportConfig.maxDelay;
          }), this.cacheMsgList = this.cacheMsgList.filter(function(o5) {
            return a3 - o5.createTime < t4.reportConfig.maxDelay;
          });
          var m3 = this.highPriorityMsgList.slice(0, this.reportConfig.maxSize);
          if (this.highPriorityMsgList = this.highPriorityMsgList.slice(m3.length), m3.length < this.reportConfig.maxSize) {
            var u3 = this.reportConfig.maxSize - m3.length;
            m3 = m3.concat(this.msgList.slice(0, u3)), this.msgList = this.msgList.slice(u3);
          }
          if (m3.length < this.reportConfig.maxSize) {
            var h2 = this.reportConfig.maxSize - m3.length;
            m3 = m3.concat(this.lowPriorityMsgList.slice(0, h2)), this.lowPriorityMsgList = this.lowPriorityMsgList.slice(h2);
          }
          if (m3.length < this.reportConfig.maxSize) {
            var g2 = this.reportConfig.maxSize - m3.length;
            m3 = m3.concat(this.cacheMsgList.slice(0, g2)), this.cacheMsgList = this.cacheMsgList.slice(g2);
          }
          return m3.forEach(function(t5) {
            o4[t5.module] ? o4[t5.module].push(t5.msg) : o4[t5.module] = [t5.msg];
          }), { uploadMsgArr: m3, uploadMsg: o4 };
        } }, { key: "upload", value: function upload() {
          var t4, o4, a3 = this;
          if (this.isUploadEnable && this.serverAllowUpload && !(this.lastReportTime && Date.now() - this.lastReportTime < this.reportConfig.minInterval)) {
            var m3 = this.getUploadMsg(), u3 = m3.uploadMsgArr, h2 = m3.uploadMsg;
            if (u3.length) {
              this.lastReportTime = Date.now();
              try {
                var g2 = "".concat(this.dataReportEndpoint, "/").concat(this.dataReportPath);
                this.reportConfig.request(g2, { dataType: "json", method: "POST", data: { common: this.reportConfig.common, event: h2 }, headers: { sdktype: "im" }, timeout: this.reportConfig.timeout }).catch(function(t5) {
                  var o5, m4;
                  a3.cacheMsgList = a3.cacheMsgList.concat(u3).slice(0, a3.reportConfig.cacheMaxSize), null === (m4 = null === (o5 = a3.reportConfig) || void 0 === o5 ? void 0 : o5.logger) || void 0 === m4 || m4.warn("Reporter upload failed", t5);
                });
              } catch (a4) {
                null === (o4 = null === (t4 = this.reportConfig) || void 0 === t4 ? void 0 : t4.logger) || void 0 === o4 || o4.warn("Exec reporter request failed", a4);
              }
              clearTimeout(this.timer), this.reportHeartBeat();
            }
          }
        } }]), Reporter;
      }();
      return u2;
    }();
  });
  !function(t2) {
    t2[t2.V2NIM_DATA_SYNC_TYPE_LEVEL_FULL = 0] = "V2NIM_DATA_SYNC_TYPE_LEVEL_FULL", t2[t2.V2NIM_DATA_SYNC_TYPE_LEVEL_BASIC = 1] = "V2NIM_DATA_SYNC_TYPE_LEVEL_BASIC";
  }(o || (o = {})), function(t2) {
    t2[t2.V2NIM_DATA_SYNC_TYPE_MAIN = 1] = "V2NIM_DATA_SYNC_TYPE_MAIN", t2[t2.V2NIM_DATA_SYNC_TYPE_TEAM_MEMBER = 2] = "V2NIM_DATA_SYNC_TYPE_TEAM_MEMBER", t2[t2.V2NIM_DATA_SYNC_TYPE_SUPER_TEAM_MEMBER = 3] = "V2NIM_DATA_SYNC_TYPE_SUPER_TEAM_MEMBER";
  }(a || (a = {})), function(t2) {
    t2[t2.V2NIM_DATA_SYNC_STATE_WAITING = 1] = "V2NIM_DATA_SYNC_STATE_WAITING", t2[t2.V2NIM_DATA_SYNC_STATE_SYNCING = 2] = "V2NIM_DATA_SYNC_STATE_SYNCING", t2[t2.V2NIM_DATA_SYNC_STATE_COMPLETED = 3] = "V2NIM_DATA_SYNC_STATE_COMPLETED";
  }(m || (m = {})), function(t2) {
    t2[t2.V2NIM_CONVERSATION_TYPE_UNKNOWN = 0] = "V2NIM_CONVERSATION_TYPE_UNKNOWN", t2[t2.V2NIM_CONVERSATION_TYPE_P2P = 1] = "V2NIM_CONVERSATION_TYPE_P2P", t2[t2.V2NIM_CONVERSATION_TYPE_TEAM = 2] = "V2NIM_CONVERSATION_TYPE_TEAM", t2[t2.V2NIM_CONVERSATION_TYPE_SUPER_TEAM = 3] = "V2NIM_CONVERSATION_TYPE_SUPER_TEAM";
  }(u || (u = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_STATUS_DEFAULT = 0] = "V2NIM_MESSAGE_STATUS_DEFAULT", t2[t2.V2NIM_MESSAGE_STATUS_REVOKE = 1] = "V2NIM_MESSAGE_STATUS_REVOKE", t2[t2.V2NIM_MESSAGE_STATUS_BACKFILL = 2] = "V2NIM_MESSAGE_STATUS_BACKFILL";
  }(h || (h = {})), function(t2) {
    t2[t2.V2NIM_FRIEND_MODE_TYPE_ADD = 1] = "V2NIM_FRIEND_MODE_TYPE_ADD", t2[t2.V2NIM_FRIEND_MODE_TYPE_APPLY = 2] = "V2NIM_FRIEND_MODE_TYPE_APPLY";
  }(g || (g = {})), function(t2) {
    t2[t2.V2NIM_FRIEND_ADD_APPLICATION_TYPE_RECEIVED = 1] = "V2NIM_FRIEND_ADD_APPLICATION_TYPE_RECEIVED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_TYPE_REJECTED = 2] = "V2NIM_FRIEND_ADD_APPLICATION_TYPE_REJECTED";
  }(I || (I = {})), function(t2) {
    t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT = 0] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED = 1] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED = 2] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED = 3] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_EXPIRED", t2[t2.V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD = 4] = "V2NIM_FRIEND_ADD_APPLICATION_STATUS_DIRECT_ADD";
  }(_ || (_ = {})), function(t2) {
    t2[t2.V2NIM_FRIEND_DELETION_TYPE_BY_SELF = 1] = "V2NIM_FRIEND_DELETION_TYPE_BY_SELF", t2[t2.V2NIM_FRIEND_DELETION_TYPE_BY_PEER = 2] = "V2NIM_FRIEND_DELETION_TYPE_BY_PEER";
  }(E || (E = {})), function(t2) {
    t2[t2.V2NIM_FRIEND_VERIFY_TYPE_ADD = 1] = "V2NIM_FRIEND_VERIFY_TYPE_ADD", t2[t2.V2NIM_FRIEND_VERIFY_TYPE_APPLY = 2] = "V2NIM_FRIEND_VERIFY_TYPE_APPLY", t2[t2.V2NIM_FRIEND_VERIFY_TYPE_ACCEPT = 3] = "V2NIM_FRIEND_VERIFY_TYPE_ACCEPT", t2[t2.V2NIM_FRIEND_VERIFY_TYPE_REJECT = 4] = "V2NIM_FRIEND_VERIFY_TYPE_REJECT";
  }(M || (M = {})), function(t2) {
    t2[t2.V2NIM_LOGIN_AUTH_TYPE_DEFAULT = 0] = "V2NIM_LOGIN_AUTH_TYPE_DEFAULT", t2[t2.V2NIM_LOGIN_AUTH_TYPE_DYNAMIC_TOKEN = 1] = "V2NIM_LOGIN_AUTH_TYPE_DYNAMIC_TOKEN", t2[t2.V2NIM_LOGIN_AUTH_TYPE_THIRD_PARTY = 2] = "V2NIM_LOGIN_AUTH_TYPE_THIRD_PARTY";
  }(T || (T = {})), function(t2) {
    t2[t2.V2NIM_LOGIN_STATUS_LOGOUT = 0] = "V2NIM_LOGIN_STATUS_LOGOUT", t2[t2.V2NIM_LOGIN_STATUS_LOGINED = 1] = "V2NIM_LOGIN_STATUS_LOGINED", t2[t2.V2NIM_LOGIN_STATUS_LOGINING = 2] = "V2NIM_LOGIN_STATUS_LOGINING", t2[t2.V2NIM_LOGIN_STATUS_UNLOGIN = 3] = "V2NIM_LOGIN_STATUS_UNLOGIN";
  }(S || (S = {})), function(t2) {
    t2[t2.V2NIM_LOGIN_CLIENT_TYPE_UNKNOWN = 0] = "V2NIM_LOGIN_CLIENT_TYPE_UNKNOWN", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_ANDROID = 1] = "V2NIM_LOGIN_CLIENT_TYPE_ANDROID", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_IOS = 2] = "V2NIM_LOGIN_CLIENT_TYPE_IOS", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_PC = 4] = "V2NIM_LOGIN_CLIENT_TYPE_PC", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_WP = 8] = "V2NIM_LOGIN_CLIENT_TYPE_WP", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_WEB = 16] = "V2NIM_LOGIN_CLIENT_TYPE_WEB", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_RESTFUL = 32] = "V2NIM_LOGIN_CLIENT_TYPE_RESTFUL", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_MAC_OS = 64] = "V2NIM_LOGIN_CLIENT_TYPE_MAC_OS", t2[t2.V2NIM_LOGIN_CLIENT_TYPE_HARMONY_OS = 65] = "V2NIM_LOGIN_CLIENT_TYPE_HARMONY_OS";
  }(C || (C = {})), function(t2) {
    t2[t2.V2NIM_KICKED_OFFLINE_REASON_CLIENT_EXCLUSIVE = 1] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT_EXCLUSIVE", t2[t2.V2NIM_KICKED_OFFLINE_REASON_SERVER = 2] = "V2NIM_KICKED_OFFLINE_REASON_SERVER", t2[t2.V2NIM_KICKED_OFFLINE_REASON_CLIENT = 3] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT", t2[t2.V2NIM_KICKED_OFFLINE_REASON_CLIENT_QUIETLY = 4] = "V2NIM_KICKED_OFFLINE_REASON_CLIENT_QUIETLY";
  }(N || (N = {})), function(t2) {
    t2[t2.V2NIM_LOGIN_CLIENT_CHANGE_LIST = 1] = "V2NIM_LOGIN_CLIENT_CHANGE_LIST", t2[t2.V2NIM_LOGIN_CLIENT_CHANGE_LOGIN = 2] = "V2NIM_LOGIN_CLIENT_CHANGE_LOGIN", t2[t2.V2NIM_LOGIN_CLIENT_CHANGE_LOGOUT = 3] = "V2NIM_LOGIN_CLIENT_CHANGE_LOGOUT";
  }(O || (O = {})), function(t2) {
    t2[t2.V2NIM_CONNECT_STATUS_DISCONNECTED = 0] = "V2NIM_CONNECT_STATUS_DISCONNECTED", t2[t2.V2NIM_CONNECT_STATUS_CONNECTED = 1] = "V2NIM_CONNECT_STATUS_CONNECTED", t2[t2.V2NIM_CONNECT_STATUS_CONNECTING = 2] = "V2NIM_CONNECT_STATUS_CONNECTING", t2[t2.V2NIM_CONNECT_STATUS_WAITING = 3] = "V2NIM_CONNECT_STATUS_WAITING";
  }(b || (b = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_AI_STATUS_UNKNOW = 0] = "V2NIM_MESSAGE_AI_STATUS_UNKNOW", t2[t2.V2NIM_MESSAGE_AI_STATUS_AT = 1] = "V2NIM_MESSAGE_AI_STATUS_AT", t2[t2.V2NIM_MESSAGE_AI_STATUS_RESPONSE = 2] = "V2NIM_MESSAGE_AI_STATUS_RESPONSE";
  }(R || (R = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_TYPE_INVALID = -1] = "V2NIM_MESSAGE_TYPE_INVALID", t2[t2.V2NIM_MESSAGE_TYPE_TEXT = 0] = "V2NIM_MESSAGE_TYPE_TEXT", t2[t2.V2NIM_MESSAGE_TYPE_IMAGE = 1] = "V2NIM_MESSAGE_TYPE_IMAGE", t2[t2.V2NIM_MESSAGE_TYPE_AUDIO = 2] = "V2NIM_MESSAGE_TYPE_AUDIO", t2[t2.V2NIM_MESSAGE_TYPE_VIDEO = 3] = "V2NIM_MESSAGE_TYPE_VIDEO", t2[t2.V2NIM_MESSAGE_TYPE_LOCATION = 4] = "V2NIM_MESSAGE_TYPE_LOCATION", t2[t2.V2NIM_MESSAGE_TYPE_NOTIFICATION = 5] = "V2NIM_MESSAGE_TYPE_NOTIFICATION", t2[t2.V2NIM_MESSAGE_TYPE_FILE = 6] = "V2NIM_MESSAGE_TYPE_FILE", t2[t2.V2NIM_MESSAGE_TYPE_AVCHAT = 7] = "V2NIM_MESSAGE_TYPE_AVCHAT", t2[t2.V2NIM_MESSAGE_TYPE_TIPS = 10] = "V2NIM_MESSAGE_TYPE_TIPS", t2[t2.V2NIM_MESSAGE_TYPE_ROBOT = 11] = "V2NIM_MESSAGE_TYPE_ROBOT", t2[t2.V2NIM_MESSAGE_TYPE_CALL = 12] = "V2NIM_MESSAGE_TYPE_CALL", t2[t2.V2NIM_MESSAGE_TYPE_CUSTOM = 100] = "V2NIM_MESSAGE_TYPE_CUSTOM";
  }(A || (A = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_UNDEFINED = -1] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_UNDEFINED", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE = 0] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK = 1] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE = 2] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO = 3] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_DISMISS = 4] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_DISMISS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS = 5] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER = 6] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER = 7] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER = 8] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT = 9] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_BANNED_TEAM_MEMBER = 10] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_BANNED_TEAM_MEMBER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE = 401] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_KICK = 402] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_KICK", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_LEAVE = 403] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_LEAVE", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_UPDATE_TINFO = 404] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_UPDATE_TINFO", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_DISMISS = 405] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_DISMISS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_APPLY_PASS = 410] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_APPLY_PASS", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_OWNER_TRANSFER = 406] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_OWNER_TRANSFER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_ADD_MANAGER = 407] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_ADD_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_REMOVE_MANAGER = 408] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_REMOVE_MANAGER", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE_ACCEPT = 411] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_INVITE_ACCEPT", t2[t2.V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_BANNED_TEAM_MEMBER = 409] = "V2NIM_MESSAGE_NOTIFICATION_TYPE_SUPER_TEAM_BANNED_TEAM_MEMBER";
  }(V || (V = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UNKNOWN = 0] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UNKNOWN", t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS = 1] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_SUCCESS", t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_FAILED = 2] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_FAILED", t2[t2.V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UPLOADING = 3] = "V2NIM_MESSAGE_ATTACHMENT_UPLOAD_STATE_UPLOADING";
  }(k || (k = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_SENDING_STATE_UNKNOWN = 0] = "V2NIM_MESSAGE_SENDING_STATE_UNKNOWN", t2[t2.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED = 1] = "V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED", t2[t2.V2NIM_MESSAGE_SENDING_STATE_FAILED = 2] = "V2NIM_MESSAGE_SENDING_STATE_FAILED", t2[t2.V2NIM_MESSAGE_SENDING_STATE_SENDING = 3] = "V2NIM_MESSAGE_SENDING_STATE_SENDING";
  }(P || (P = {})), function(t2) {
    t2[t2.V2NIM_QUERY_DIRECTION_DESC = 0] = "V2NIM_QUERY_DIRECTION_DESC", t2[t2.V2NIM_QUERY_DIRECTION_ASC = 1] = "V2NIM_QUERY_DIRECTION_ASC";
  }(L || (L = {})), function(t2) {
    t2[t2.V2NIM_CLEAR_HISTORY_MODE_ALL = 0] = "V2NIM_CLEAR_HISTORY_MODE_ALL", t2[t2.V2NIM_CLEAR_HISTORY_MODE_LOCAL = 1] = "V2NIM_CLEAR_HISTORY_MODE_LOCAL";
  }(w || (w = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_UNDEFINED = 0] = "V2NIM_MESSAGE_REVOKE_TYPE_UNDEFINED", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY = 1] = "V2NIM_MESSAGE_REVOKE_TYPE_P2P_BOTHWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY = 2] = "V2NIM_MESSAGE_REVOKE_TYPE_TEAM_BOTHWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY = 3] = "V2NIM_MESSAGE_REVOKE_TYPE_SUPERTEAM_BOTHWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_P2P_ONEWAY = 4] = "V2NIM_MESSAGE_REVOKE_TYPE_P2P_ONEWAY", t2[t2.V2NIM_MESSAGE_REVOKE_TYPE_TEAM_ONEWAY = 5] = "V2NIM_MESSAGE_REVOKE_TYPE_TEAM_ONEWAY";
  }(D || (D = {})), function(t2) {
    t2[t2.V2NIM_MESSAGE_PIN_STATE_NOT_PINNED = 0] = "V2NIM_MESSAGE_PIN_STATE_NOT_PINNED", t2[t2.V2NIM_MESSAGE_PIN_STATE_PINNED = 1] = "V2NIM_MESSAGE_PIN_STATE_PINNED", t2[t2.V2NIM_MESSAGE_PIN_STATE_UPDATED = 2] = "V2NIM_MESSAGE_PIN_STATE_UPDATED";
  }(U || (U = {})), function(t2) {
    t2[t2.V2NIM_QUICK_COMMENT_STATE_ADD = 1] = "V2NIM_QUICK_COMMENT_STATE_ADD", t2[t2.V2NIM_QUICK_COMMENT_STATE_REMOVE = 2] = "V2NIM_QUICK_COMMENT_STATE_REMOVE";
  }(x || (x = {})), function(t2) {
    t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_NONE = 0] = "V2NIM_CLIENT_ANTISPAM_OPERATE_NONE", t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE = 1] = "V2NIM_CLIENT_ANTISPAM_OPERATE_REPLACE", t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD = 2] = "V2NIM_CLIENT_ANTISPAM_OPERATE_CLIENT_SHIELD", t2[t2.V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD = 3] = "V2NIM_CLIENT_ANTISPAM_OPERATE_SERVER_SHIELD";
  }(B || (B = {})), function(t2) {
    t2[t2.V2NIM_SORT_ORDER_DESC = 0] = "V2NIM_SORT_ORDER_DESC", t2[t2.V2NIM_SORT_ORDER_ASC = 1] = "V2NIM_SORT_ORDER_ASC";
  }(j || (j = {})), function(t2) {
    t2[t2.P2P_DELETE_MSG = 7] = "P2P_DELETE_MSG", t2[t2.TEAM_DELETE_MSG = 8] = "TEAM_DELETE_MSG", t2[t2.SUPERTEAM_DELETE_MSG = 12] = "SUPERTEAM_DELETE_MSG", t2[t2.P2P_ONE_WAY_DELETE_MSG = 13] = "P2P_ONE_WAY_DELETE_MSG", t2[t2.TEAM_ONE_WAY_DELETE_MSG = 14] = "TEAM_ONE_WAY_DELETE_MSG", t2[t2.CUSTOM_P2P_MSG = 100] = "CUSTOM_P2P_MSG", t2[t2.CUSTOM_TEAM_MSG = 101] = "CUSTOM_TEAM_MSG", t2[t2.CUSTOM_SUPERTEAM_MSG = 103] = "CUSTOM_SUPERTEAM_MSG";
  }($ || ($ = {})), function(t2) {
    t2[t2.V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF = 0] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF", t2[t2.V2NIM_TEAM_MESSAGE_MUTE_MODE_ON = 1] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_ON", t2[t2.V2NIM_TEAM_MESSAGE_MUTE_MODE_NORMAL_ON = 2] = "V2NIM_TEAM_MESSAGE_MUTE_MODE_NORMAL_ON";
  }(G || (G = {})), function(t2) {
    t2[t2.V2NIM_P2P_MESSAGE_MUTE_MODE_OFF = 0] = "V2NIM_P2P_MESSAGE_MUTE_MODE_OFF", t2[t2.V2NIM_P2P_MESSAGE_MUTE_MODE_ON = 1] = "V2NIM_P2P_MESSAGE_MUTE_MODE_ON";
  }(q || (q = {})), function(t2) {
    t2[t2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL = 0] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_ALL", t2[t2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_NORMAL = 1] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_NORMAL", t2[t2.V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_MANAGER = 2] = "V2NIM_TEAM_MEMBER_ROLE_QUERY_TYPE_MANAGER";
  }(H || (H = {})), function(t2) {
    t2[t2.V2NIM_TEAM_TYPE_INVALID = 0] = "V2NIM_TEAM_TYPE_INVALID", t2[t2.V2NIM_TEAM_TYPE_ADVANCED = 1] = "V2NIM_TEAM_TYPE_ADVANCED", t2[t2.V2NIM_TEAM_TYPE_SUPER = 2] = "V2NIM_TEAM_TYPE_SUPER";
  }(Y || (Y = {})), function(t2) {
    t2[t2.V2NIM_TEAM_JOIN_MODE_FREE = 0] = "V2NIM_TEAM_JOIN_MODE_FREE", t2[t2.V2NIM_TEAM_JOIN_MODE_APPLY = 1] = "V2NIM_TEAM_JOIN_MODE_APPLY", t2[t2.V2NIM_TEAM_JOIN_MODE_INVITE = 2] = "V2NIM_TEAM_JOIN_MODE_INVITE";
  }(z || (z = {})), function(t2) {
    t2[t2.V2NIM_TEAM_AGREE_MODE_AUTH = 0] = "V2NIM_TEAM_AGREE_MODE_AUTH", t2[t2.V2NIM_TEAM_AGREE_MODE_NO_AUTH = 1] = "V2NIM_TEAM_AGREE_MODE_NO_AUTH";
  }(K || (K = {})), function(t2) {
    t2[t2.V2NIM_TEAM_INVITE_MODE_MANAGER = 0] = "V2NIM_TEAM_INVITE_MODE_MANAGER", t2[t2.V2NIM_TEAM_INVITE_MODE_ALL = 1] = "V2NIM_TEAM_INVITE_MODE_ALL";
  }(W || (W = {})), function(t2) {
    t2[t2.V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER = 0] = "V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER", t2[t2.V2NIM_TEAM_UPDATE_INFO_MODE_ALL = 1] = "V2NIM_TEAM_UPDATE_INFO_MODE_ALL";
  }(J || (J = {})), function(t2) {
    t2[t2.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN = 0] = "V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN", t2[t2.V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_NORMAL = 1] = "V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_NORMAL", t2[t2.V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_ALL = 3] = "V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_ALL";
  }(X || (X = {})), function(t2) {
    t2[t2.V2NIM_TEAM_UPDATE_EXTENSION_MODE_MANAGER = 0] = "V2NIM_TEAM_UPDATE_EXTENSION_MODE_MANAGER", t2[t2.V2NIM_TEAM_UPDATE_EXTENSION_MODE_ALL = 1] = "V2NIM_TEAM_UPDATE_EXTENSION_MODE_ALL";
  }(Q || (Q = {})), function(t2) {
    t2[t2.V2NIM_TEAM_MEMBER_ROLE_NORMAL = 0] = "V2NIM_TEAM_MEMBER_ROLE_NORMAL", t2[t2.V2NIM_TEAM_MEMBER_ROLE_OWNER = 1] = "V2NIM_TEAM_MEMBER_ROLE_OWNER", t2[t2.V2NIM_TEAM_MEMBER_ROLE_MANAGER = 2] = "V2NIM_TEAM_MEMBER_ROLE_MANAGER";
  }(Z || (Z = {})), function(t2) {
    t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_APPLICATION = 0] = "V2NIM_TEAM_JOIN_ACTION_TYPE_APPLICATION", t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_APPLICATION = 1] = "V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_APPLICATION", t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_INVITATION = 2] = "V2NIM_TEAM_JOIN_ACTION_TYPE_INVITATION", t2[t2.V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_INVITATION = 3] = "V2NIM_TEAM_JOIN_ACTION_TYPE_REJECT_INVITATION";
  }(ee || (ee = {})), function(t2) {
    t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_INIT = 0] = "V2NIM_TEAM_JOIN_ACTION_STATUS_INIT", t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED = 1] = "V2NIM_TEAM_JOIN_ACTION_STATUS_AGREED", t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED = 2] = "V2NIM_TEAM_JOIN_ACTION_STATUS_REJECTED", t2[t2.V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED = 3] = "V2NIM_TEAM_JOIN_ACTION_STATUS_EXPIRED";
  }(te || (te = {})), function(t2) {
    t2[t2.teamApply = 0] = "teamApply", t2[t2.teamApplyReject = 1] = "teamApplyReject", t2[t2.teamInvite = 2] = "teamInvite", t2[t2.teamInviteReject = 3] = "teamInviteReject", t2[t2.tlistUpdate = 4] = "tlistUpdate", t2[t2.superTeamApply = 15] = "superTeamApply", t2[t2.superTeamApplyReject = 16] = "superTeamApplyReject", t2[t2.superTeamInvite = 17] = "superTeamInvite", t2[t2.superTeamInviteReject = 18] = "superTeamInviteReject";
  }(re || (re = {})), function(t2) {
    t2[t2.V2NIM_AI_MODEL_TYPE_UNKNOW = 0] = "V2NIM_AI_MODEL_TYPE_UNKNOW", t2[t2.V2NIM_AI_MODEL_TYPE_QWEN = 1] = "V2NIM_AI_MODEL_TYPE_QWEN", t2[t2.V2NIM_AI_MODEL_TYPE_AZURE = 2] = "V2NIM_AI_MODEL_TYPE_AZURE", t2[t2.V2NIM_AI_MODEL_TYPE_PRIVATE = 3] = "V2NIM_AI_MODEL_TYPE_PRIVATE";
  }(ie || (ie = {})), function(t2) {
    t2.V2NIM_AI_MODEL_ROLE_TYPE_SYSTEM = "system", t2.V2NIM_AI_MODEL_ROLE_TYPE_USER = "user", t2.V2NIM_AI_MODEL_ROLE_TYPE_ASSISTANT = "assistant";
  }(oe || (oe = {})), function(t2) {
    t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_UNKNOWN = 0] = "V2NIM_SIGNALLING_EVENT_TYPE_UNKNOWN", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_CLOSE = 1] = "V2NIM_SIGNALLING_EVENT_TYPE_CLOSE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_JOIN = 2] = "V2NIM_SIGNALLING_EVENT_TYPE_JOIN", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_INVITE = 3] = "V2NIM_SIGNALLING_EVENT_TYPE_INVITE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_CANCEL_INVITE = 4] = "V2NIM_SIGNALLING_EVENT_TYPE_CANCEL_INVITE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_REJECT = 5] = "V2NIM_SIGNALLING_EVENT_TYPE_REJECT", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_ACCEPT = 6] = "V2NIM_SIGNALLING_EVENT_TYPE_ACCEPT", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_LEAVE = 7] = "V2NIM_SIGNALLING_EVENT_TYPE_LEAVE", t2[t2.V2NIM_SIGNALLING_EVENT_TYPE_CONTROL = 8] = "V2NIM_SIGNALLING_EVENT_TYPE_CONTROL";
  }(ne || (ne = {})), function(t2) {
    t2[t2.V2NIM_SIGNALLING_CHANNEL_TYPE_AUDIO = 1] = "V2NIM_SIGNALLING_CHANNEL_TYPE_AUDIO", t2[t2.V2NIM_SIGNALLING_CHANNEL_TYPE_VIDEO = 2] = "V2NIM_SIGNALLING_CHANNEL_TYPE_VIDEO", t2[t2.V2NIM_SIGNALLING_CHANNEL_TYPE_CUSTOM = 3] = "V2NIM_SIGNALLING_CHANNEL_TYPE_CUSTOM";
  }(se || (se = {})), function(t2) {
    t2[t2.V2NIM_USER_STATUS_TYPE_UNKNOWN = 0] = "V2NIM_USER_STATUS_TYPE_UNKNOWN", t2[t2.V2NIM_USER_STATUS_TYPE_LOGIN = 1] = "V2NIM_USER_STATUS_TYPE_LOGIN", t2[t2.V2NIM_USER_STATUS_TYPE_LOGOUT = 2] = "V2NIM_USER_STATUS_TYPE_LOGOUT", t2[t2.V2NIM_USER_STATUS_TYPE_DISCONNECT = 3] = "V2NIM_USER_STATUS_TYPE_DISCONNECT";
  }(ae || (ae = {}));
  var le = { V2NIM_ERROR_CODE_UNKNOWN: { code: 0, message: "unknown error" }, V2NIM_ERROR_CODE_SUCCESS: { code: 200, message: "success" }, V2NIM_ERROR_CODE_HANDSHAKE: { code: 201, message: "handshake error" }, V2NIM_ERROR_CODE_REQUEST_TEMPERARY_FORBIDDEN: { code: 398, message: "request temprary forbidden" }, V2NIM_ERROR_CODE_SERVER_UNIT_ERROR: { code: 399, message: "server unit error" }, V2NIM_ERROR_CODE_FORBIDDEN: { code: 403, message: "forbidden" }, V2NIM_ERROR_CODE_NOT_FOUND: { code: 404, message: "not found" }, V2NIM_ERROR_CODE_PARAMETER_ERROR: { code: 414, message: "parameter error" }, V2NIM_ERROR_CODE_RATE_LIMIT_REACHED: { code: 416, message: "rate limit reached" }, V2NIM_ERROR_CODE_MULTI_LOGIN_FORBIDDEN: { code: 417, message: "multi login forbidden" }, V2NIM_ERROR_CODE_SERVER_INTERNAL_ERROR: { code: 500, message: "server internal error" }, V2NIM_ERROR_CODE_SERVER_BUSY: { code: 503, message: "server busy" }, V2NIM_ERROR_CODE_APP_UNREACHABLE: { code: 511, message: "app server unreachable" }, V2NIM_ERROR_CODE_SERVICE_UNAVAILABLE: { code: 514, message: "service unavailable" }, V2NIM_ERROR_CODE_PROTOCOL_BLACKHOLE_FILTERED: { code: 599, message: "protocol filtered by blackhole rule" }, V2NIM_ERROR_CODE_NO_PERMISSION: { code: 997, message: "appid has no permission to call the protocol" }, V2NIM_ERROR_CODE_UNPACK_ERROR: { code: 998, message: "unpack error" }, V2NIM_ERROR_CODE_PACK_ERROR: { code: 999, message: "pack error" }, V2NIM_ERROR_CODE_IM_DISABLED: { code: 101301, message: "IM disabled" }, V2NIM_ERROR_CODE_SERVICE_ADDRESS_INVALID: { code: 101302, message: "service address invalid" }, V2NIM_ERROR_CODE_APPKEY_NOT_EXIST: { code: 101303, message: "appkey not exist" }, V2NIM_ERROR_CODE_BUNDLEID_CHECK_FAILED: { code: 101304, message: "bundleid check failed" }, V2NIM_ERROR_CODE_APPKEY_BLOCKED: { code: 101403, message: "appkey blocked" }, V2NIM_ERROR_CODE_INVALID_TOKEN: { code: 102302, message: "invalid token" }, V2NIM_ERROR_CODE_ROBOT_NOT_ALLOWED: { code: 102303, message: "robot not allowed" }, V2NIM_ERROR_CODE_ACCOUNT_NOT_EXIST: { code: 102404, message: "account not exist" }, V2NIM_ERROR_CODE_ACCOUNT_CHAT_BANNED: { code: 102421, message: "account chat banned" }, V2NIM_ERROR_CODE_ACCOUNT_BANNED: { code: 102422, message: "account banned" }, V2NIM_ERROR_CODE_ACCOUNT_IN_BLOCK_LIST: { code: 102426, message: "account in block list" }, V2NIM_ERROR_CODE_USER_PROFILE_NOT_EXIST: { code: 103404, message: "user profile not exist" }, V2NIM_ERROR_CODE_USER_PROFILE_HIT_ANTISPAM: { code: 103451, message: "user profile hit antispam" }, V2NIM_ERROR_CODE_PEER_FRIEND_LIMIT: { code: 104301, message: "peer friend limit" }, V2NIM_ERROR_CODE_FRIEND_APPLICATION_NOT_EXIST: { code: 104302, message: "friend application not exist" }, V2NIM_ERROR_CODE_FRIEND_NOT_EXIST: { code: 104404, message: "friend not exist" }, V2NIM_ERROR_CODE_FRIEND_ALREADY_EXIST: { code: 104405, message: "friend already exist" }, V2NIM_ERROR_CODE_SELF_FRIEND_OPERATION_NOT_ALLOWED: { code: 104429, message: "self friend operation not allowed" }, V2NIM_ERROR_CODE_FRIEND_LIMIT: { code: 104435, message: "friend limit" }, V2NIM_ERROR_CODE_FRIEND_OPERATION_RATE_LIMIT: { code: 104449, message: "friend operation rate limit" }, V2NIM_ERROR_CODE_FRIEND_HIT_ANTISPAM: { code: 104451, message: "friend hit antispam" }, V2NIM_ERROR_CODE_SELF_MUTE_OPERATION_NOT_ALLOWED: { code: 105429, message: "self mute operation not allowed" }, V2NIM_ERROR_CODE_MUTE_LIST_LIMIT: { code: 105435, message: "mute list limit" }, V2NIM_ERROR_CODE_SELF_BLOCK_LIST_OPERATION_NOT_ALLOWED: { code: 106429, message: "self block list operation not allowed" }, V2NIM_ERROR_CODE_BLOCK_LIST_LIMIT: { code: 106435, message: "block list limit" }, V2NIM_ERROR_CODE_REVOKE_THIRD_PARTY_MESSAGE_NOT_ALLOWED: { code: 107301, message: "revoke third party message not allowed" }, V2NIM_ERROR_CODE_SHORT_TO_LONG_URL_FAILED: { code: 107307, message: "short to long URL failed" }, V2NIM_ERROR_CODE_URL_INVALID: { code: 107308, message: "URL invalid" }, V2NIM_ERROR_CODE_DURATION_OUT_OF_RANGE: { code: 107309, message: "duration out of range" }, V2NIM_ERROR_CODE_GET_FILE_META_INFO_FAILED: { code: 107310, message: "get file meta info failed" }, V2NIM_ERROR_CODE_AUDIO_FILE_SIZE_LIMIT: { code: 107311, message: "audio file size limit" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_TIMEOUT: { code: 107312, message: "voice to text timeout" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_FAILED: { code: 107313, message: "voice to text failed" }, V2NIM_ERROR_CODE_REVOKE_EXCEED_TIME_LIMIT: { code: 107314, message: "revoke message exceed time limit" }, V2NIM_ERROR_CODE_REVOKE_MESSAGE_NOT_ALLOWED: { code: 107315, message: "revoke specific message not allowed" }, V2NIM_ERROR_CODE_FORCE_PUSH_LIST_LIMIT: { code: 107316, message: "force push list limit" }, V2NIM_ERROR_CODE_TEAM_MESSAGE_RECEIPT_RATE_LIMIT: { code: 107317, message: "team message receipt rate limit" }, V2NIM_ERROR_CODE_SNAPSHOT_NOT_EXIST: { code: 107318, message: "snapshot not exist" }, V2NIM_ERROR_CODE_PIN_LIMIT: { code: 107319, message: "pin limit" }, V2NIM_ERROR_CODE_PIN_NOT_EXIST: { code: 107320, message: "pin not exist" }, V2NIM_ERROR_CODE_QUICK_COMMENT_LIMIT: { code: 107321, message: "quick comment limit" }, V2NIM_ERROR_CODE_PIN_ALREADY_EXIST: { code: 107322, message: "pin already exist" }, V2NIM_ERROR_CODE_VOICE_TO_TEXT_FUNCTION_DISABLED: { code: 107333, message: "voice to text function disabled" }, V2NIM_ERROR_CODE_CLOUD_SEARCH_FUNCTION_DISABLED: { code: 107334, message: "cloud search function disabled" }, V2NIM_ERROR_CODE_ONE_WAY_DELETE_FUNCTION_DISABLED: { code: 107335, message: "one-way delete function disabled" }, V2NIM_ERRPR_CODE_ONEWAY_DELETION_NOT_ALLOW_FOR_TARGET_MESSAGES: { code: 107338, message: "one-way deletion is not allowed for target messages" }, V2NIM_ERRPR_CODE_SENDER_CANNOT_INCLUDED_IN_TARGET_LIST: { code: 107339, message: "The message sender cannot be included in the target list" }, V2NIM_ERROR_CODE_ROBOT_CANNOT_SEND_TARGET_MESSAGE: { code: 107340, message: "Robot can not send target message" }, V2NIM_ERROR_CODE_PIN_TARGET_MESSAGE_NOT_ALLOWED: { code: 107345, message: "Pin target message is not allowed" }, V2NIM_ERROR_CODE_TARGET_MESSAGE_NOT_ALLOWED_REPLY: { code: 107346, message: "Target message not allowed reply" }, V2NIM_ERROR_CODE_TARGET_MESSAGE_NOT_ALLOWED_QUICK_COMMENT: { code: 107347, message: "Target message not allowed quick comment" }, V2NIM_ERROR_CODE_REVOKE_MESSAGE_TO_SELF_NOT_ALLOWED: { code: 107429, message: "revoke message to self not allowed" }, V2NIM_ERROR_CODE_APP_CHAT_BANNED: { code: 107410, message: "app chat banned" }, V2NIM_ERROR_CODE_QUICK_COMMENT_FUNCTION_DISABLED: { code: 107326, message: "quick comment function disabled" }, V2NIM_ERROR_CODE_PIN_FUNCTION_DISABLED: { code: 107327, message: "PIN function disabled" }, V2NIM_ERROR_CODE_TEAM_READ_RECEIPT_FUNCTION_DISABLED: { code: 107324, message: "read receipt for team messages function disabled" }, V2NIM_ERROR_CODE_P2P_READ_RECEIPT_FUNCTION_DISABLED: { code: 107325, message: "read receipt for p2p messages function disabled" }, V2NIM_ERROR_CODE_RATE_LIMIT_FOR_MESSAGING_REACHED: { code: 107323, message: "rate limit for messaging reached" }, V2NIM_ERROR_CODE_MESSAGE_HIT_ANTISPAM: { code: 107451, message: "message hit antispam" }, V2NIM_ERROR_CODE_MESSAGE_NOT_EXIST: { code: 107404, message: "message not exist" }, V2NIM_ERROR_CODE_UNSENDING_MESSAGE_EXPIRED: { code: 107406, message: "unsending message expired" }, V2NIM_ERROR_CODE_TEAM_MARK_READ_FAILED: { code: 107302, message: "sending message failed for marking message read failed for too many team members" }, V2NIM_ERROR_CODE_SENDER_OR_MANAGER_PERMISSION_ONLY_REVOKE: { code: 107303, message: "only sender or manager can revoke message" }, V2NIM_ERROR_CODE_DELETE_SELF_MESSAGE_NOT_ALLOWED: { code: 107328, message: "delete self message not allowed" }, V2NIM_ERROR_CODE_NOT_CHATBOT_ACCOUNT: { code: 107329, message: "is not chatbot account" }, V2NIM_ERROR_CODE_MESSAGE_SENSE_REQUIRED: { code: 107330, message: "sender or receiver must sense message" }, V2NIM_ERROR_CODE_HIGH_PRIORITY_MESSAGE_RATE_LIMIT: { code: 107304, message: "rate limit of high-priority messages exceeded" }, ACK_MESSAGE_BE_HIGH_PRIORITY: { code: 107305, message: "ack message should be high-priority" }, V2NIM_ERROR_CODE_DUPLICATE_CLIENT_MESSAGE_ID: { code: 107306, message: "duplicate client message ID" }, V2NIM_ERROR_CODE_INVALID_TIME_RANGE: { code: 107439, message: "invalid time range" }, V2NIM_ERROR_CODE_NOT_ADVANCED_TEAM: { code: 108302, message: "not advanced team" }, V2NIM_ERROR_CODE_TEAM_MANAGER_LIMIT: { code: 108303, message: "team manager limit" }, V2NIM_ERROR_CODE_JOINED_TEAM_LIMIT: { code: 108305, message: "joined team limit" }, V2NIM_ERROR_CODE_TEAM_NORMAL_MEMBER_CHAT_BANNED: { code: 108306, message: "team normal member chat banned" }, V2NIM_ERROR_CODE_INVITED_ACCOUNT_NOT_FRIEND: { code: 108307, message: "invited account not friend" }, V2NIM_ERROR_CODE_REJECT_ALL_TEAM_APPLICATIONS: { code: 108308, message: "reject all team applications" }, V2NIM_ERROR_CODE_TARGETING_MESSAGE_FOR_TEAM_DISABLED: { code: 108318, message: "Targeting messages for group chat is disabled" }, V2NIM_ERROR_CODE_INCLUSIVE_AS_FALSE_NOT_ALLOWED_FOR_SUPER_TEAM: { code: 108319, message: 'Setting "inclusive" to false for super teams is not allowed' }, V2NIM_ERROR_CODE_CANNOT_MAKE_SUPER_TEAM_MESSAGE_VISIBLE_TO_NEW_MEMBERS: { code: 108320, message: "Cannot make super team targeted messages visible to new members" }, V2NIM_ERROR_CODE_CANNOT_ALLOW_TARGETED_MESSAGES_INCLUSIVE_TO_NEW_MEMBERS: { code: 108321, message: "Cannot allow targeted messages inclusive to new members" }, V2NIM_ERROR_CODE_TEAM_NOT_EXIST: { code: 108404, message: "team not exist" }, V2NIM_ERROR_CODE_TEAM_ALREADY_CHAT_BANNED: { code: 108420, message: "team already chat banned" }, V2NIM_ERROR_CODE_ALL_TEAM_MEMBER_CHAT_BANNED: { code: 108423, message: "all team member chat banned" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_LIMIT: { code: 108434, message: "extended super team limit" }, V2NIM_ERROR_CODE_CREATED_TEAM_LIMIT: { code: 108435, message: "created team limit" }, V2NIM_ERROR_CODE_TEAM_INVITATION_LIMIT: { code: 108437, message: "team invitation limit" }, V2NIM_ERROR_CODE_TEAM_HIT_ANTISPAM: { code: 108451, message: "team hit antispam" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_LIMIT_NOT_CONFIGURED: { code: 108304, message: "extended super team limit not configured" }, V2NIM_ERROR_CODE_SUPER_TEAM_SERVICE_DISABLED: { code: 108311, message: "super team service disabled" }, V2NIM_ERROR_CODE_TEAM_READ_RECEIPT_RECORD_NOT_FOUND: { code: 108301, message: "read receipt record for the team message not found" }, V2NIM_ERROR_CODE_NOT_MANAGER: { code: 108430, message: "unable to assign owner manager" }, V2NIM_ERROR_CODE_ONLINE_MEMBER_COUNT_DISABLED: { code: 108406, message: "number of online users service disabled" }, V2NIM_ERROR_CODE_TRANSFER_DISABLED: { code: 108310, message: "unable to transfer the ownership to owner" }, V2NIM_ERROR_CODE_CREATE_TEAM_DISABLED: { code: 108309, message: "unable to create team with more than %s people" }, V2NIM_ERROR_CODE_EXTENDED_SUPER_TEAM_CREATE_FAILED: { code: 108313, message: "/ extended super team creation failed，use open api to create the team" }, V2NIM_ERROR_CODE_TEAM_MESSAGE_READ_RECEIPT_DISABLED: { code: 108312, message: "read receipt for team messages function disabled" }, V2NIM_ERROR_CODE_RETRY: { code: 108449, message: "an error occurred, try again" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_NOT_TEAM_MEMBER: { code: 109301, message: "list of chat banned users contains non team members" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_OPERATOR: { code: 109303, message: "list of chat banned users contains the operator" }, V2NIM_ERROR_CODE_CHAT_BAN_LIST_CONTAIN_TEAM_OWNER: { code: 109304, message: "list of chat banned users contains the team owner" }, V2NIM_ERROR_CODE_OPERATION_ON_TEAM_MANAGER_NOT_ALLOWED: { code: 109305, message: "operation on team manager not allowed" }, V2NIM_ERROR_CODE_NO_TEAM_INVITE_PERMISSION: { code: 109306, message: "no team invite permission" }, V2NIM_ERROR_CODE_TEAM_OWNER_QUIT_NOT_ALLOWED: { code: 109307, message: "team owner quit not allowed" }, V2NIM_ERROR_CODE_TEAM_OWNER_IN_KICK_LIST: { code: 109308, message: "list of kicked user contains the team owner" }, V2NIM_ERROR_CODE_INVITE_ROBOT_ACCOUNT_NOT_ALLOWED: { code: 109309, message: "invite robot account not allowed" }, V2NIM_ERROR_CODE_KICK_OPERATOR_NOT_ALLOWED: { code: 109310, message: "kick operator not allowed" }, V2NIM_ERROR_CODE_TEAM_MEMBER_ALREADY_EXIST: { code: 109311, message: "team member already exist" }, V2NIM_ERROR_CODE_TEAM_INVITATION_OR_APPLICATION_NOT_EXIST: { code: 109313, message: "team invitation or application not exist" }, V2NIM_ERROR_CODE_OPERATION_ON_TEAM_OWNER_NOT_ALLOWED: { code: 109314, message: "operation on team owner not allowed" }, V2NIM_ERROR_CODE_FORCED_PUSH_LIST_INCLUDES_NON_TARGETED_ACCOUNTS: { code: 109318, message: "The forced push list includes non-targeted accounts" }, V2NIM_ERROR_CODE_TEAM_MEMBER_NOT_EXIST: { code: 109404, message: "team member not exist" }, V2NIM_ERROR_CODE_TEAM_MEMBER_CHAT_BANNED: { code: 109424, message: "team member chat banned" }, V2NIM_ERROR_CODE_TEAM_OWNER_OPERATION_PERMISSION_REQUIRED: { code: 109427, message: "team owner operation permission required" }, V2NIM_ERROR_CODE_TEAM_OWNER_OR_MANAGER_OPERATION_PERMISSION_REQUIRED: { code: 109432, message: "team owner or manager operation permission required" }, V2NIM_ERROR_CODE_TEAM_MEMBER_CONCURRENT_OPERATION_FAILED: { code: 109449, message: "team member concurrent operation failed" }, V2NIM_ERROR_CODE_TEAM_MEMBER_HIT_ANTISPAM: { code: 109451, message: "team member hit antispam" }, V2NIM_ERROR_CODE_CONVERSATION_AND_ACCOUNT_MISMATCH: { code: 110302, message: "conversation and account mismatch" }, V2NIM_ERROR_CODE_CONVERSATION_STICK_TOP_LIMIT: { code: 110303, message: "conversation stick top limit" }, V2NIM_ERROR_CODE_CONVERSATION_BELONGED_GROUP_LIMIT: { code: 110304, message: "conversation belonged group limit" }, V2NIM_ERROR_CODE_CONVERSATION_IS_NOT_STICK_TOP: { code: 110305, message: "conversation is not stick top" }, V2NIM_ERROR_CODE_STICK_TOP_DISABLED: { code: 110306, message: "conversation stick top disabled" }, V2NIM_ERROR_CODE_CONVERSATION_NOT_EXIST: { code: 110404, message: "conversation not exist" }, V2NIM_ERROR_CODE_CHATROOM_LINK_UNAVAILABLE: { code: 113304, message: "chatroom link unavailable" }, V2NIM_ERROR_CODE_IM_CONNECTION_ABNORMAL: { code: 113305, message: "IM connection abnormal" }, V2NIM_ERROR_CODE_CHATROOM_NOT_EXIST: { code: 113404, message: "chatroom not exist" }, V2NIM_ERROR_CODE_CHATROOM_CLOSED: { code: 113406, message: "chatroom closed" }, V2NIM_ERROR_CODE_CHATROOM_REPEATED_OPERATION: { code: 113409, message: "chatroom repeated operation" }, V2NIM_ERROR_CODE_CHATROOM_DISABLED: { code: 113410, message: "chatroom disabled" }, V2NIM_ERROR_CODE_ALL_CHATROOM_MEMBER_CHAT_BANNED: { code: 113423, message: "all chatroom member chat banned" }, V2NIM_ERROR_CODE_CHATROOM_HIT_ANTISPAM: { code: 113451, message: "chatroom hit antispam" }, V2NIM_ERROR_CODE_ANONYMOUS_MEMBER_FORBIDDEN: { code: 114303, message: "anonymous member forbidden" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_NOT_EXIST: { code: 114404, message: "chatroom member not exist" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_REPEATED_OPERATION: { code: 114405, message: "chatroom member repeated operation" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_CHAT_BANNED: { code: 114421, message: "chatroom member chat banned" }, V2NIM_ERROR_CODE_ACCOUNT_IN_CHATROOM_BLOCK_LIST: { code: 114426, message: "account in chatroom block list" }, V2NIM_ERROR_CODE_CHATROOM_OWNER_OPERATION_PERMISSION_REQUIRED: { code: 114427, message: "chatroom owner operation permission required" }, V2NIM_ERROR_CODE_SELF_IN_CHATROOM_MEMBER_OPERATION_LIST: { code: 114429, message: "self in chatroom member operation list" }, V2NIM_ERROR_CODE_CHATROOM_OWNER_OR_MANAGER_OPERATION_PERMISSION_REQUIRED: { code: 114432, message: "chatroom owner or manager operation permission required" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_LIMIT: { code: 114437, message: "chatroom member limit" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_CONCURRENT_OPERATION_FAILED: { code: 114449, message: "chatroom member concurrent operation failed" }, V2NIM_ERROR_CODE_CHATROOM_MEMBER_HIT_ANTISPAM: { code: 114451, message: "chatroom member hit antispam" }, V2NIM_ERROR_CODE_CONVERSATION_GROUP_NOT_EXIST: { code: 116404, message: "conversation group not exist" }, V2NIM_ERROR_CODE_CONVERSATION_GROUP_LIMIT: { code: 116435, message: "conversation group limit" }, V2NIM_ERROR_CODE_CONVERSATIONS_IN_GROUP_LIMIT: { code: 116437, message: "conversations in group limit" }, V2NIM_ERROR_CODE_COLLECTION_LIMIT: { code: 189301, message: "collection limit" }, V2NIM_ERROR_CODE_COLLECTION_NOT_EXIST: { code: 189302, message: "collection not exist" }, V2NIM_ERROR_CODE_COLLECTION_CONCURRENT_OPERATION_FAILED: { code: 189449, message: "collection concurrent operation failed" }, V2NIM_ERROR_CODE_INTERNAL: { code: 190001, message: "internal error" }, V2NIM_ERROR_CODE_ILLEGAL_STATE: { code: 190002, message: "illegal state" }, V2NIM_ERROR_CODE_MISUSE: { code: 191001, message: "misuse" }, V2NIM_ERROR_CODE_CANCELLED: { code: 191002, message: "operation cancelled" }, V2NIM_ERROR_CODE_CALLBACK_FAILED: { code: 191003, message: "callback failed" }, V2NIM_ERROR_CODE_INVALID_PARAMETER: { code: 191004, message: "invalid parameter" }, V2NIM_ERROR_CODE_TIMEOUT: { code: 191005, message: "timeout" }, V2NIM_ERROR_CODE_RESOURCE_NOT_EXIST: { code: 191006, message: "resource not exist" }, V2NIM_ERROR_CODE_RESOURCE_ALREADY_EXIST: { code: 191007, message: "resource already exist" }, V2NIM_ERROR_CODE_CONNECT_FAILED: { code: 192001, message: "connect failed" }, V2NIM_ERROR_CODE_CONNECT_TIMEOUT: { code: 192002, message: "connect timeout" }, V2NIM_ERROR_CODE_DISCONNECT: { code: 192003, message: "disconnect" }, V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT: { code: 192004, message: "protocol timeout" }, V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED: { code: 192005, message: "protocol send failed" }, V2NIM_ERROR_CODE_REQUEST_FAILED: { code: 192006, message: "request failed" }, V2NIM_ERROR_CODE_FILE_NOT_FOUND: { code: 194001, message: "file not found" }, V2NIM_ERROR_CODE_FILE_CREATE_FAILED: { code: 194002, message: "file create failed" }, V2NIM_ERROR_CODE_FILE_OPEN_FAILED: { code: 194003, message: "file open failed" }, V2NIM_ERROR_CODE_FILE_WRITE_FAILED: { code: 194004, message: "file write failed" }, V2NIM_ERROR_CODE_FILE_READ_FAILED: { code: 194005, message: "file read failed" }, V2NIM_ERROR_CODE_FILE_UPLOAD_FAILED: { code: 194006, message: "file upload failed" }, V2NIM_ERROR_CODE_FILE_DOWNLOAD_FAILED: { code: 194007, message: "file download failed" }, V2NIM_ERROR_CODE_CLIENT_ANTISPAM: { code: 195001, message: "client anti-spam" }, V2NIM_ERROR_CODE_SERVER_ANTISPAM: { code: 195002, message: "server anti-spam" } }, pe = Object.keys(le), me = pe.reduce(function(t2, o2) {
    var a2 = le[o2];
    return t2[o2] = a2.code, t2;
  }, {}), ue = pe.reduce(function(t2, o2) {
    var a2 = le[o2];
    return t2[a2.code] = a2.message, t2;
  }, {}), he = Object.freeze({ __proto__: null, V2NIMErrorCode: me, V2NIMErrorDesc: ue, get V2NIMDataSyncLevel() {
    return o;
  }, get V2NIMDataSyncType() {
    return a;
  }, get V2NIMDataSyncState() {
    return m;
  }, get V2NIMConversationType() {
    return u;
  }, get V2NIMLastMessageState() {
    return h;
  }, get V2NIMFriendAddMode() {
    return g;
  }, get V2NIMFriendAddApplicationType() {
    return I;
  }, get V2NIMFriendAddApplicationStatus() {
    return _;
  }, get V2NIMFriendDeletionType() {
    return E;
  }, get V2NIMFriendVerifyType() {
    return M;
  }, get V2NIMLoginAuthType() {
    return T;
  }, get V2NIMLoginStatus() {
    return S;
  }, get V2NIMLoginClientType() {
    return C;
  }, get V2NIMKickedOfflineReason() {
    return N;
  }, get V2NIMLoginClientChange() {
    return O;
  }, get V2NIMConnectStatus() {
    return b;
  }, get V2NIMMessageType() {
    return A;
  }, get V2NIMMessageNotificationType() {
    return V;
  }, get V2NIMMessageAttachmentUploadState() {
    return k;
  }, get V2NIMMessageSendingState() {
    return P;
  }, get V2NIMQueryDirection() {
    return L;
  }, get V2NIMMessageRevokeType() {
    return D;
  }, get V2NIMMessagePinState() {
    return U;
  }, get V2NIMMessageQuickCommentType() {
    return x;
  }, get V2NIMClientAntispamOperateType() {
    return B;
  }, get V2NIMSortOrder() {
    return j;
  }, get V2NIMSystemMessageType() {
    return $;
  }, get V2NIMTeamMessageMuteMode() {
    return G;
  }, get V2NIMP2PMessageMuteMode() {
    return q;
  }, get V2NIMTeamMemberRoleQueryType() {
    return H;
  }, get V2NIMTeamType() {
    return Y;
  }, get V2NIMTeamJoinMode() {
    return z;
  }, get V2NIMTeamAgreeMode() {
    return K;
  }, get V2NIMTeamInviteMode() {
    return W;
  }, get V2NIMTeamUpdateInfoMode() {
    return J;
  }, get V2NIMTeamChatBannedMode() {
    return X;
  }, get V2NIMTeamUpdateExtensionMode() {
    return Q;
  }, get V2NIMTeamJoinActionType() {
    return ee;
  }, get V2NIMTeamJoinActionStatus() {
    return te;
  }, get V2NIMTeamNotificationType() {
    return re;
  }, get V2NIMTeamMemberRole() {
    return Z;
  }, get V2NIMAIModelRoleType() {
    return oe;
  }, get V2NIMAIModelType() {
    return ie;
  }, get V2NIMSignallingChannelType() {
    return se;
  }, get V2NIMSignallingEventType() {
    return ne;
  }, get V2NIMUserStatusType() {
    return ae;
  } });
  class V2NIMErrorImpl extends Error {
    constructor(t2) {
      super(t2.desc), this.name = "V2NIMError", this.code = t2.code || 0, this.desc = t2.desc || ue[this.code] || ge[this.code] || "", this.message = this.desc, this.detail = t2.detail || {};
    }
    toString() {
      var t2, o2 = `${this.name}
 code: ${this.code}
 message: "${this.message}"
 detail: ${this.detail ? JSON.stringify(this.detail) : ""}`;
      return (null === (t2 = null == this ? void 0 : this.detail) || void 0 === t2 ? void 0 : t2.rawError) && (o2 += `
 rawError: ${this.detail.rawError.message}`), o2;
    }
  }
  class ValidateError extends V2NIMErrorImpl {
    constructor(t2, o2 = {}, a2) {
      super({ code: me.V2NIM_ERROR_CODE_PARAMETER_ERROR, detail: { reason: t2, rules: a2, data: o2 } }), this.name = "validateError", this.message = this.message + "\n" + JSON.stringify(this.detail, null, 2), this.data = o2, this.rules = a2;
    }
  }
  class ValidateErrorV2 extends V2NIMErrorImpl {
    constructor(t2) {
      var o2, a2, m2;
      super({ code: me.V2NIM_ERROR_CODE_INVALID_PARAMETER, detail: { reason: null === (o2 = t2.detail) || void 0 === o2 ? void 0 : o2.reason, rules: null === (a2 = t2.detail) || void 0 === a2 ? void 0 : a2.rules, data: null === (m2 = t2.detail) || void 0 === m2 ? void 0 : m2.data } }), this.name = "ValidateErrorV2";
    }
  }
  var ge = { 200: null, 406: null, 808: null, 810: null, 302: "The user name or password is incorrect.", 405: "Parameter length too long", 408: "Client request timed out", 415: "Client network unavailable", 422: "Account disabled", 508: "Expiration date", 509: "Invalid", 7101: "Be pulled black", 700: "Partial failure of batch operation", 801: "The number of people in the team has reached the upper limit", 802: "No permission", 803: "The team does not exist or has not changed", 804: "The user is not in the team", 805: "Team type mismatch", 806: "The number of teams created has reached the limit", 807: "Team member not valid", 809: "Already in the team", 811: "The number of accounts in the forced push list exceeds the limit", 812: "The team is muted", 813: "Due to the limited number of team, some pull people successfully", 814: "Disable team message read service", 815: "Maximum number of team administrators", 816: "Batch operation partial failure", 9102: "Channel failure", 9103: "This call has been answered / rejected at another end", 10201: "Signaling: target NIM client is offline", 10202: "Signaling: push is unreachable", 10404: "Signaling: channel not exists", 10405: "Signaling: channel already exists", 10406: "Signaling: member of channel not exists", 10407: "Signaling: member of channel already exists", 10408: "Signaling: the invitation request does not exist or has expired", 10409: "Signaling: the invitation request has been rejected", 10410: "Signaling: the invitation request has been accepted", 10414: "Signaling: request parameter error", 10417: "Signaling: uid conflict", 10419: "Signaling: the number of members of channel exceed the limit", 10420: "Signaling: member is already in the channel on other client", 10700: "Signaling: phased success", 13002: "Abnormal chatroom status", 13003: "In the blacklist", 13004: "In the mute list", 13006: "All members are muted, and only the administrator can speak" };
  function replacer(t2, o2) {
    return o2 instanceof RegExp ? "__REGEXP " + o2.toString() : o2;
  }
  function validate(t2, o2 = {}, a2, m2 = false) {
    var u2 = {};
    return Object.keys(t2).forEach((h2) => {
      var g2 = t2[h2].type, I2 = a2 ? `In ${a2}, ` : "";
      if (null == o2) {
        var _2 = `${I2}param is null or undefined`;
        throw m2 ? new ValidateErrorV2({ detail: { reason: _2, data: { key: h2 }, rules: "required" } }) : new ValidateError(_2, { key: h2 }, "required");
      }
      if (void 0 === o2[h2]) {
        if (false === t2[h2].required)
          return void (u2[h2] = o2[h2]);
        var E2 = `${I2}param '${h2}' is required`;
        throw m2 ? new ValidateErrorV2({ detail: { reason: E2, data: { key: h2 }, rules: "required" } }) : new ValidateError(E2, { key: h2 }, "required");
      }
      var M2 = ve[g2];
      if (M2 && !M2(o2, h2, t2[h2], m2)) {
        var T2 = `${I2}param '${h2}' unexpected`, S2 = { key: h2, value: o2[h2] };
        throw m2 ? new ValidateErrorV2({ detail: { reason: T2, data: S2, rules: JSON.stringify(t2[h2], replacer) } }) : new ValidateError(T2, S2, JSON.stringify(t2[h2], replacer));
      }
      u2[h2] = o2[h2];
    }), u2;
  }
  var ve = { string: function(t2, o2, a2) {
    var { allowEmpty: m2, max: u2, min: h2, regExp: g2 } = a2, I2 = t2[o2];
    return "string" == typeof I2 && ((false !== m2 || "" !== I2) && (!("number" == typeof u2 && I2.length > u2) && (!("number" == typeof h2 && I2.length < h2) && !(function isRegExp2(t3) {
      return "[object RegExp]" === Object.prototype.toString.call(t3);
    }(g2) && !g2.test(I2)))));
  }, number: function(t2, o2, a2) {
    var { min: m2, max: u2 } = a2, h2 = t2[o2];
    return "number" == typeof h2 && (!("number" == typeof m2 && h2 < m2) && !("number" == typeof u2 && h2 > u2));
  }, boolean: function(t2, o2) {
    return "boolean" == typeof t2[o2];
  }, file: function(t2, o2) {
    return true;
  }, enum: function(t2, o2, a2) {
    var { values: m2 } = a2, u2 = t2[o2];
    return !m2 || m2.indexOf(u2) > -1;
  }, jsonstr: function(t2, o2) {
    try {
      var a2 = JSON.parse(t2[o2]);
      return "object" == typeof a2 && null !== a2;
    } catch (t3) {
      return false;
    }
  }, func: function(t2, o2) {
    return "function" == typeof t2[o2];
  }, array: function(t2, o2, a2, m2 = false) {
    var { itemType: u2, itemRules: h2, rules: g2, min: I2, max: _2, values: E2 } = a2, M2 = t2[o2];
    if (!Array.isArray(M2))
      return false;
    if ("number" == typeof _2 && M2.length > _2)
      return false;
    if ("number" == typeof I2 && M2.length < I2)
      return false;
    if (h2)
      M2.forEach((t3, a3) => {
        validate({ [a3]: h2 }, { [a3]: t3 }, `${o2}[${a3}]`, m2);
      });
    else if (g2)
      M2.forEach((t3, a3) => validate(g2, t3, `${o2}[${a3}]`, m2));
    else if ("enum" === u2) {
      if (E2 && function difference(t3, o3) {
        return o3 = o3 || [], (t3 = t3 || []).filter((t4) => -1 === o3.indexOf(t4));
      }(M2, E2).length)
        return false;
    } else if (u2 && !M2.every((t3) => typeof t3 === u2))
      return false;
    return true;
  }, object: function(t2, o2, a2, m2 = false) {
    var { rules: u2, allowEmpty: h2 } = a2, g2 = t2[o2];
    if ("object" != typeof g2 || null === g2)
      return false;
    if (u2) {
      var I2 = Object.keys(u2), _2 = Object.keys(g2).filter((t3) => I2.indexOf(t3) > -1);
      if (false === h2 && 0 === _2.length)
        return false;
      validate(u2, g2, o2, m2);
    }
    return true;
  } };
  class TimerManager {
    constructor() {
      this.timerList = [], this.id = 1, this.timer = null, this.timeout = 0;
    }
    addTimer(t2, o2 = 0, a2 = 1) {
      var m2 = (/* @__PURE__ */ new Date()).getTime(), u2 = this.id;
      return this.timerList.push({ id: u2, loop: a2, count: 0, timeout: m2 + o2, interval: o2, callback: t2 }), this.id++, this.checkTimer(m2), u2;
    }
    checkTimer(t2 = (/* @__PURE__ */ new Date()).getTime()) {
      if (this.removeFinished(), 0 !== this.timerList.length || null == this.timer) {
        var o2 = 0;
        for (var a2 of this.timerList)
          (0 === o2 || o2 > a2.timeout) && (o2 = a2.timeout);
        0 !== this.timerList.length && (null === this.timer || o2 < this.timeout || this.timeout < t2) && (this.timer = setTimeout(this.nowTime.bind(this), o2 - t2), this.timeout = o2);
      }
    }
    nowTime() {
      var t2 = (/* @__PURE__ */ new Date()).getTime();
      for (var o2 of this.timerList)
        t2 >= o2.timeout && (o2.callback(), o2.count++, o2.timeout = t2 + o2.interval);
      this.clerTime(), this.checkTimer(t2);
    }
    clerTime() {
      null !== this.timer && (clearTimeout(this.timer), this.timer = null);
    }
    deleteTimer(t2) {
      for (var o2 = this.timerList.length - 1; o2 >= 0; o2--) {
        this.timerList[o2].id === t2 && this.timerList.splice(o2, 1);
      }
    }
    removeFinished() {
      for (var t2 = this.timerList.length - 1; t2 >= 0; t2--) {
        var o2 = this.timerList[t2];
        o2.loop >= 0 && o2.count >= o2.loop && this.timerList.splice(t2, 1);
      }
    }
    destroy() {
      this.clerTime(), this.timerList = [], this.id = 1, this.timer = null;
    }
  }
  function __rest$1(t2, o2) {
    var a2 = {};
    for (var m2 in t2)
      Object.prototype.hasOwnProperty.call(t2, m2) && o2.indexOf(m2) < 0 && (a2[m2] = t2[m2]);
    if (null != t2 && "function" == typeof Object.getOwnPropertySymbols) {
      var u2 = 0;
      for (m2 = Object.getOwnPropertySymbols(t2); u2 < m2.length; u2++)
        o2.indexOf(m2[u2]) < 0 && Object.prototype.propertyIsEnumerable.call(t2, m2[u2]) && (a2[m2[u2]] = t2[m2[u2]]);
    }
    return a2;
  }
  function __awaiter$2(t2, o2, a2, m2) {
    return new (a2 || (a2 = Promise))(function(u2, h2) {
      function fulfilled(t3) {
        try {
          step(m2.next(t3));
        } catch (t4) {
          h2(t4);
        }
      }
      function rejected(t3) {
        try {
          step(m2.throw(t3));
        } catch (t4) {
          h2(t4);
        }
      }
      function step(t3) {
        t3.done ? u2(t3.value) : function adopt(t4) {
          return t4 instanceof a2 ? t4 : new a2(function(o3) {
            o3(t4);
          });
        }(t3.value).then(fulfilled, rejected);
      }
      step((m2 = m2.apply(t2, o2 || [])).next());
    });
  }
  function isPlainObject(t2) {
    return null != t2 && "object" == typeof t2 && Object.getPrototypeOf(t2) == Object.prototype;
  }
  var fe = { getNetworkStatus: () => Promise.resolve({ net_type: 0, net_connect: true }), onNetworkStatusChange(t2) {
  }, offNetworkStatusChange() {
  } };
  var Ie = { setLogger: function(t2) {
    throw new Error("setLogger not implemented.");
  }, platform: "", WebSocket: class AdapterSocket {
    constructor(t2, o2) {
      throw this.CONNECTING = 0, this.OPEN = 1, this.CLOSING = 2, this.CLOSED = 3, this.binaryType = "", new Error("Method not implemented.");
    }
    close(t2, o2) {
      throw new Error("Method not implemented.");
    }
    send(t2) {
      throw new Error("Method not implemented.");
    }
    onclose(t2) {
      throw new Error("Method not implemented.");
    }
    onerror(t2) {
      throw new Error("Method not implemented.");
    }
    onmessage(t2) {
      throw new Error("Method not implemented.");
    }
    onopen(t2) {
      throw new Error("Method not implemented.");
    }
  }, localStorage: {}, request: function(t2, o2) {
    throw new Error("request not implemented.");
  }, uploadFile: function(t2) {
    throw new Error("uploadFile not implemented.");
  }, getSystemInfo: function() {
    throw new Error("getSystemInfo not implemented.");
  }, getFileUploadInformation(t2) {
    throw new Error("getFileUploadInformation not implemented.");
  }, envPayload: {}, net: fe, logStorage: class AdapterLogStorageImpl {
    constructor(t2) {
    }
    open() {
      return Promise.resolve();
    }
    close() {
    }
    addLogs(t2) {
      return Promise.resolve();
    }
    extractLogs() {
      return Promise.resolve();
    }
  } };
  var ye = ["error", "warn", "log", "debug"], emptyFunc$1 = function() {
  }, _e = ["off", "error", "warn", "log", "debug"];
  class Logger {
    constructor(t2, o2 = {}) {
      this.storageArr = [], this.debugLevel = "off", this.timer = 0, this.strategies = { debug: { name: "debg", func: console.log }, log: { name: "info", func: console.log }, warn: { name: "warn", func: console.warn }, error: { name: "erro", func: console.error } }, this.debug = emptyFunc$1, this.log = emptyFunc$1, this.warn = emptyFunc$1, this.error = emptyFunc$1, this.iid = Math.round(1e3 * Math.random()), this.debugLevel = _e.includes(t2) ? t2 : "off", o2.debugLevel && (this.debugLevel = _e.includes(o2.debugLevel) ? o2.debugLevel : this.debugLevel), this.logStorage = false === o2.storageEnable ? null : new Ie.logStorage(null == o2 ? void 0 : o2.storageName), this.setOptions(o2), this.setLogFunc(this.debugLevel), this.setTimer(), this.open();
    }
    getDebugMode() {
      return "debug" === this.debugLevel;
    }
    open(t2) {
      this.logStorage && this.logStorage.open(t2).then(() => {
        this.log("Logger::open success");
      }).catch((t3) => {
        this.warn("Logger::open failed", t3);
      });
    }
    setOptions(t2) {
      if (t2 && t2.logFunc) {
        var o2 = t2.logFunc;
        for (var a2 in o2) {
          var m2 = a2, u2 = o2[m2];
          u2 && (this.strategies[m2].func = u2);
        }
      }
    }
    setLogFunc(t2, o2 = "log") {
      var a2 = ye.findIndex((o3) => o3 === t2), m2 = ye.findIndex((t3) => t3 === o2);
      ye.forEach((t3, o3) => {
        this[t3] = function() {
          if (!(o3 > a2 && o3 > m2)) {
            var u2 = Array.prototype.slice.call(arguments), h2 = this.strategies[t3], g2 = this.formatArgs(u2, h2.name);
            o3 <= m2 && this.logStorage && this.prepareSaveLog(g2, t3), o3 <= a2 && h2.func(g2);
          }
        };
      });
    }
    extractLogs() {
      var t2;
      return this.logStorage ? null === (t2 = this.logStorage) || void 0 === t2 ? void 0 : t2.extractLogs() : Promise.resolve("");
    }
    prepareSaveLog(t2, o2) {
      this.storageArr.push({ text: t2, level: o2, time: Date.now(), iid: this.iid }), this.timer || this.setTimer(), this.storageArr.length >= 100 && (this.triggerTimer(), this.storageArr = []);
    }
    saveLogs() {
      return __awaiter$2(this, void 0, void 0, function* () {
        if (this.logStorage) {
          var t2 = this.storageArr;
          this.storageArr = [];
          try {
            yield this.logStorage.addLogs(t2);
          } catch (t3) {
          }
        }
      });
    }
    clearTimer() {
      this.timer && clearTimeout(this.timer), this.timer = 0;
    }
    setTimer() {
      this.clearTimer(), this.timer = setTimeout(this.triggerTimer.bind(this), 5e3);
    }
    triggerTimer() {
      this.clearTimer(), this.saveLogs();
    }
    formatArgs(t2, o2) {
      var a2 = /* @__PURE__ */ new Date();
      return `[NIM ${this.iid} ${o2} ${`${a2.getMonth() + 1}-${a2.getDate()} ${a2.getHours()}:${a2.getMinutes()}:${a2.getSeconds()}:${a2.getMilliseconds()}`}] ` + t2.map((t3) => t3 instanceof V2NIMErrorImpl ? t3.toString() : t3 instanceof Error ? t3 && t3.message ? t3.message : t3 : "object" == typeof t3 ? JSON.stringify(t3) : t3).join(" ");
    }
    destroy() {
      this.debug = emptyFunc$1, this.log = emptyFunc$1, this.warn = emptyFunc$1, this.error = emptyFunc$1, this.saveLogs(), this.clearTimer(), this.storageArr = [], this.logStorage && this.logStorage.close();
    }
  }
  var Ee, Me = (Ee = function() {
    return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
  }, function() {
    return Ee() + Ee() + Ee() + Ee() + Ee() + Ee() + Ee() + Ee();
  });
  function getMiniappEnv() {
    return "undefined" != typeof tt && tt.getSystemInfo ? "TT" : "undefined" != typeof swan && swan.getSystemInfo ? "BAIDU" : "undefined" != typeof my && my.getSystemInfo ? "ALI" : "undefined" != typeof wx && wx.getSystemInfo ? "WX" : "unknow environment";
  }
  function assignOptions(t2, o2) {
    return function assignWith(t3, o3, a2, m2) {
      for (var u2 in t3 = t3 || {}, a2 = a2 || {}, m2 = m2 || (() => {
      }), o3 = o3 || {}) {
        var h2 = m2(t3[u2], o3[u2]);
        t3[u2] = void 0 === h2 ? o3[u2] : h2;
      }
      for (var g2 in a2) {
        var I2 = m2(t3[g2], a2[g2]);
        t3[g2] = void 0 === I2 ? a2[g2] : I2;
      }
      return t3;
    }({}, t2, o2, function(t3, o3) {
      return void 0 === o3 ? t3 : o3;
    });
  }
  function emptyFuncWithPromise() {
    return Promise.resolve();
  }
  function emptyFunc() {
  }
  class CoreAdapters {
    constructor(t2) {
      this.lastSuccUploadHost = "", this.core = t2;
    }
    getFileUploadInformation(t2) {
      return Ie.getFileUploadInformation(t2);
    }
    request(t2, o2, a2) {
      var m2 = (/* @__PURE__ */ new Date()).getTime(), u2 = (null == a2 ? void 0 : a2.exception_service) || 0;
      return Ie.request(t2, o2).catch((a3) => {
        var h2, g2, I2, _2, E2 = a3;
        throw this.core.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account || (null === (g2 = null === (h2 = this.core) || void 0 === h2 ? void 0 : h2.auth) || void 0 === g2 ? void 0 : g2.account), trace_id: null === (_2 = null === (I2 = this.core.clientSocket) || void 0 === I2 ? void 0 : I2.socket) || void 0 === _2 ? void 0 : _2.sessionId, start_time: m2, action: 1, exception_service: u2 }), this.core.reporter.reportTraceUpdateV2("exceptions", { code: "number" == typeof E2.code ? E2.code : 0, description: E2.message || `${E2.code}`, operation_type: 0, target: t2, context: o2 ? JSON.stringify(o2) : "" }, { asyncParams: Ie.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1), a3;
      });
    }
    uploadFile(t2) {
      var o2, a2, m2, u2;
      return __awaiter$2(this, void 0, void 0, function* () {
        for (var h2 = "BROWSER" === Ie.platform, g2 = h2 ? t2.chunkUploadHostBackupList : t2.commonUploadHostBackupList, I2 = h2 ? t2.chunkUploadHost : t2.commonUploadHost, _2 = g2.indexOf(I2), E2 = -1 === _2 ? [I2, ...g2] : [I2, ...g2.slice(0, _2), ...g2.slice(_2 + 1)], M2 = Math.max(E2.indexOf(this.lastSuccUploadHost), 0), T2 = null, S2 = 0; S2 < E2.length; S2++) {
          var C2 = (/* @__PURE__ */ new Date()).getTime(), N2 = E2[(S2 + M2) % E2.length];
          try {
            var O2 = yield Ie.uploadFile(Object.assign(Object.assign({}, t2), h2 ? { chunkUploadHost: N2 } : { commonUploadHost: N2 }));
            return this.lastSuccUploadHost = N2, O2;
          } catch (t3) {
            this.core.cloudStorage.nos.nosErrorCount--, T2 = t3;
            var b2 = t3;
            if (this.core.reporter.reportTraceStart("exceptions", { user_id: this.core.options.account || (null === (a2 = null === (o2 = this.core) || void 0 === o2 ? void 0 : o2.auth) || void 0 === a2 ? void 0 : a2.account), trace_id: null === (u2 = null === (m2 = this.core.clientSocket) || void 0 === m2 ? void 0 : m2.socket) || void 0 === u2 ? void 0 : u2.sessionId, start_time: C2, action: 1, exception_service: 3 }), this.core.reporter.reportTraceUpdateV2("exceptions", { code: "number" == typeof b2.code ? b2.code : 0, description: b2.message || `${b2.code}`, operation_type: 1, target: N2 }, { asyncParams: Ie.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1), t3 && (t3.code === me.V2NIM_ERROR_CODE_CANCELLED || 10499 === t3.errCode))
              throw t3;
          }
        }
        throw T2;
      });
    }
  }
  var Te = "https://abt-online.netease.im/v1/api/abt/client/getExperimentInfo";
  class ABTest {
    constructor(t2, o2) {
      this.abtInfo = {}, this.core = t2, this.config = assignOptions({ isAbtestEnable: true, abtestUrl: Te, abtestProjectKey: "imElite_sdk_abtest_web" }, o2);
    }
    setOptions(t2) {
      this.config = assignOptions(this.config, t2);
    }
    abtRequest() {
      var t2, o2;
      return __awaiter$2(this, void 0, void 0, function* () {
        if (this.config.isAbtestEnable && !this.abtInfo.experiments && this.config.abtestUrl) {
          var a2;
          try {
            a2 = yield this.core.adapters.request(this.config.abtestUrl, { method: "POST", dataType: "json", headers: { sdktype: "ABTest" }, data: { clientInfo: { projectKey: this.config.abtestProjectKey, appKey: this.core.options.appkey, osType: "Web", sdkVersion: "10.8.11", deviceId: this.core.config.deviceId }, useLocalCache: true } }, { exception_service: 7 });
          } catch (t3) {
            this.core.logger.warn("ABTest request failed");
          }
          this.abtInfo = (null === (o2 = null === (t2 = null == a2 ? void 0 : a2.data) || void 0 === t2 ? void 0 : t2.data) || void 0 === o2 ? void 0 : o2.abtInfo) || {};
        }
      });
    }
  }
  class PromiseManager {
    constructor() {
      this.abortFns = [];
    }
    add(t2) {
      var o2 = function getPromiseWithAbort(t3) {
        var o3 = {}, a2 = new Promise(function(t4, a3) {
          o3.abort = a3;
        });
        return o3.promise = Promise.race([t3, a2]), o3;
      }(t2);
      return this.abortFns.push(o2.abort), o2.promise;
    }
    clear(t2) {
      this.abortFns.forEach((o2) => o2(t2 || new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_CANCELLED, detail: { reason: "Aborted" } }))), this.abortFns = [];
    }
    destroy() {
      this.clear();
    }
  }
  function get(t2, o2) {
    if ("object" != typeof t2 || null === t2)
      return t2;
    for (var a2 = (o2 = o2 || "").split("."), m2 = 0; m2 < a2.length; m2++) {
      var u2 = a2[m2], h2 = t2[u2], g2 = u2.indexOf("["), I2 = u2.indexOf("]");
      if (-1 !== g2 && -1 !== I2 && g2 < I2) {
        var _2 = u2.slice(0, g2), E2 = parseInt(u2.slice(g2 + 1, I2));
        h2 = t2[_2], h2 = Array.isArray(h2) ? h2[E2] : void 0;
      }
      if (null == h2)
        return h2;
      t2 = h2;
    }
    return t2;
  }
  var Se = { tolerantRTT: 3e3, bestRTT: 100, maxChances: 5, enable: true }, Ce = { timestamp: 0, rtt: 0, baseClock: 0, baseTime: 0 };
  class TimeOrigin {
    constructor(t2, o2, a2 = "getServerTime") {
      this.serverOrigin = Ce, this.config = Se, this.isSettingNTP = false, this.currentChance = 0, this.failedDelay = 2e3, this.successDelay = 3e5, this.timer = 0, this.cmdName = "getServerTime", this.core = t2, this.logger = t2.logger, this.promiseManager = new PromiseManager(), this.cmdName = a2, o2 && this.setOptions(o2);
    }
    setOptions(t2) {
      this.config = Object.assign({}, Se, this.config, t2);
    }
    reset() {
      this.timer && clearTimeout(this.timer), this.promiseManager.clear(), this.serverOrigin = Ce, this.currentChance = 0;
    }
    setOriginTimetick() {
      return __awaiter$2(this, void 0, void 0, function* () {
        if (this.config.enable && !(this.isSettingNTP || this.currentChance >= this.config.maxChances)) {
          var t2 = get(this.core, "auth.status"), o2 = get(this.core, "status"), a2 = get(this.core, "V2NIMLoginService.lifeCycle.loginStatus");
          if ("logined" === t2 || "logined" === o2 || 1 === a2) {
            this.isSettingNTP = true, this.currentChance++, this.timer && clearTimeout(this.timer), this.timer = 0;
            var m2, u2 = "TimeOrigin::setOriginTimetick:", h2 = Date.now();
            this.core.logger.debug(`${u2} getServerTime start, times ${this.currentChance}`);
            try {
              m2 = get(yield this.promiseManager.add(this.core.sendCmd(this.cmdName)), "content.time"), this.isSettingNTP = false;
            } catch (t3) {
              var g2 = t3;
              return this.isSettingNTP = false, this.logger.warn(`${u2} Calculate Delay time, getServerTime error`, g2), void (g2.code !== me.V2NIM_ERROR_CODE_CANCELLED && (this.timer = setTimeout(this.setOriginTimetick.bind(this), this.failedDelay)));
            }
            if (!m2)
              return this.core.logger.warn(`${u2} Calculate Delay time incorrect format`), void (this.config.enable = false);
            var I2 = Date.now() - h2;
            this.doSet(m2, I2);
          }
        }
      });
    }
    doSet(t2, o2) {
      var a2 = "TimeOrigin::setOriginTimetick:";
      o2 > this.config.tolerantRTT ? (this.logger.warn(`${a2} Denied, cause of exceeding the maximum tolerance range of RTT: ${o2}`), this.timer = setTimeout(this.setOriginTimetick.bind(this), this.failedDelay)) : o2 > this.config.bestRTT ? (this.serverOrigin.rtt && o2 >= this.serverOrigin.rtt ? this.logger.warn(`${a2} Denied, cause of current.RTT >= serverOrigin.RTT: ${o2}`) : (this.setServerOrigin(o2, t2), this.logger.log(`${a2} Accept within maximum tolerance range of RTT: ${o2}, ntpTimestamp: ${this.serverOrigin.timestamp}, localClock: ${this.serverOrigin.baseClock}, localTime: ${this.serverOrigin.baseTime}`)), this.timer = setTimeout(this.setOriginTimetick.bind(this), this.failedDelay)) : (this.setServerOrigin(o2, t2), this.logger.debug(`${a2} Accept within best RTT: ${o2}, ntpTimestamp: ${this.serverOrigin.timestamp}, localClock: ${this.serverOrigin.baseClock}, localTime: ${this.serverOrigin.baseTime}`), this.currentChance = 0, this.timer = setTimeout(this.setOriginTimetick.bind(this), this.successDelay));
    }
    getNTPTime(t2) {
      if (void 0 === t2 && (t2 = this.getTimeNode()), this.checkNodeReliable(t2)) {
        var o2 = Math.floor(t2.time - this.serverOrigin.baseTime);
        return this.serverOrigin.timestamp + o2;
      }
      return Date.now();
    }
    checkNodeReliable(t2) {
      if (void 0 === t2 && (t2 = this.getTimeNode()), this.serverOrigin.timestamp) {
        if (0 === this.serverOrigin.baseClock)
          return true;
        var o2 = t2.clock - this.serverOrigin.baseClock, a2 = t2.time - this.serverOrigin.baseTime;
        return Math.abs(a2 - o2) < 500;
      }
      return false;
    }
    checkPerformance() {
      return "BROWSER" === Ie.platform;
    }
    static checkPerformance() {
      return "BROWSER" === Ie.platform;
    }
    getTimeNode() {
      return { clock: this.checkPerformance() ? performance.now() : 0, time: Date.now() };
    }
    static getTimeNode() {
      return { clock: 0, time: Date.now() };
    }
    setServerOrigin(t2, o2) {
      this.serverOrigin = { timestamp: o2 + Math.floor(t2 / 2), rtt: t2, baseClock: this.checkPerformance() ? performance.now() : 0, baseTime: Date.now() };
    }
  }
  var Ne = { user_id: "", trace_id: "", action: 7, exception_service: 6, duration: 0, start_time: 0, state: 1, extension: [] };
  class ReporterHookLinkKeep {
    constructor(t2, o2) {
      this.traceData = Ne, this.core = t2, this.traceData = Object.assign({}, Ne, o2), this.traceData.extension = [];
    }
    reset() {
      this.traceData = Object.assign({}, Ne), this.traceData.extension = [];
    }
    start() {
      var t2, o2;
      this.reset(), this.traceData.user_id = this.core.account, this.traceData.trace_id = (null === (o2 = null === (t2 = this.core.clientSocket) || void 0 === t2 ? void 0 : t2.socket) || void 0 === o2 ? void 0 : o2.sessionId) || "", this.traceData.start_time = (/* @__PURE__ */ new Date()).getTime();
    }
    update(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        var { net_type: o2, net_connect: a2 } = yield Ie.net.getNetworkStatus();
        this.traceData.extension.push(Object.assign({ code: 0, foreground: true, foreg_backg_switch: false, net_type: o2, net_connect: a2 }, t2));
      });
    }
    end(t2) {
      var o2 = this.traceData.extension[0], a2 = this.traceData.extension[1];
      if (o2 && 0 === o2.operation_type && a2 && 1 === a2.operation_type) {
        var m2 = o2.net_type !== a2.net_type || o2.net_connect !== a2.net_connect;
        if (t2 || !m2)
          return this.traceData.duration = (/* @__PURE__ */ new Date()).getTime() - this.traceData.start_time, this.core.reporter.report("exceptions", this.traceData), void this.reset();
        this.reset();
      } else
        this.reset();
    }
  }
  var Oe = { user_id: "", trace_id: "", net_connect: true, net_type: 0, duration: 0, start_time: 0, history: [], succeed: false };
  class ReporterHookLBS {
    constructor(t2) {
      this.traceData = Oe, this.core = t2, this.reset();
    }
    reset() {
      this.traceData = Object.assign({}, Oe), this.traceData.history = [];
    }
    start(t2) {
      this.reset(), this.traceData.user_id = t2, this.traceData.start_time = Date.now();
    }
    updateBegin(t2) {
      this.traceData.history.push(Object.assign({ head: "", body: "", start_time: Date.now(), httpdns: false, index: 0 }, t2));
    }
    updateComplete(t2) {
      this.traceData.history.forEach((o2) => {
        o2.target === t2.target && (Object.assign(o2, t2), o2.duration = Date.now() - o2.start_time);
      });
    }
    end(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        if (this.traceData.succeed = t2, this.traceData.history = this.traceData.history.filter((t3) => void 0 !== t3.code), 0 !== this.traceData.history.length) {
          this.traceData.duration = Date.now() - this.traceData.start_time;
          var { net_type: o2, net_connect: a2 } = yield Ie.net.getNetworkStatus();
          this.traceData.net_type = o2, this.traceData.net_connect = a2, this.core.reporter.report("nim_sdk_lbs_records", this.traceData), this.reset();
        } else
          this.reset();
      });
    }
  }
  function getIsDataReportEnable(t2) {
    var o2, a2, m2 = true;
    return "boolean" == typeof (null === (o2 = null == t2 ? void 0 : t2.reporterConfig) || void 0 === o2 ? void 0 : o2.enableCompass) ? m2 = t2.reporterConfig.enableCompass : "boolean" == typeof (null === (a2 = null == t2 ? void 0 : t2.reporterConfig) || void 0 === a2 ? void 0 : a2.isDataReportEnable) && (m2 = t2.reporterConfig.isDataReportEnable), m2;
  }
  var be = { user_id: "", trace_id: "", action: 0, state: 0, duration: 0, start_time: 0, offset: 0, full_size: 0, transferred_size: 0, operation_type: 0, remote_addr: "" }, Re = "ReporterHook::setMonitorForResources:";
  class ReporterHookCloudStorage {
    constructor(t2, o2) {
      this.traceData = be, this.core = t2, this.traceData = Object.assign({}, be, o2);
    }
    reset() {
      this.traceData = Object.assign({}, be);
    }
    start() {
      var t2, o2;
      this.reset(), this.traceData.user_id = this.core.account, this.traceData.trace_id = (null === (o2 = null === (t2 = this.core.clientSocket) || void 0 === t2 ? void 0 : t2.socket) || void 0 === o2 ? void 0 : o2.sessionId) || "", this.traceData.start_time = "timeOrigin" in this.core ? this.core.timeOrigin.getNTPTime() : Date.now();
    }
    update(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this.traceData.user_id && (this.core.logger.log(`${Re} upload update`, t2), Object.assign(this.traceData, t2));
      });
    }
    end(t2) {
      this.traceData.user_id && (this.core.logger.log(`${Re} upload end cause of ${t2}`), this.traceData.state = t2, this.traceData.duration = ("timeOrigin" in this.core ? this.core.timeOrigin.getNTPTime() : Date.now()) - this.traceData.start_time, this.core.reporter.report("nim_sdk_resources", this.traceData), this.traceData = be);
    }
  }
  var Ae = {}, Ve = {}, ke = {}, Pe = { apiVersion: "v1", debugLevel: "off", needReconnect: true, reconnectionAttempts: Number.MAX_SAFE_INTEGER, lbsUrls: ["https://lbs.netease.im/lbs/webconf.jsp"], linkUrl: "weblink.netease.im:443", abtestUrl: Te, isAbtestEnable: true };
  class NIM$1 extends ce {
    constructor(t2, o2 = {}) {
      if (super(), this.instanceName = "NIM", this.pluginMap = {}, this.eventBus = new ce(), this.options = {}, this.V2NIMConversationIdUtil = {}, this.V2NIMMessageCreator = {}, this.V2NIMMessageAttachmentCreator = {}, this.V2NIMClientAntispamUtil = {}, this.DataStructureConverter = {}, this.V2NIMMessageConverter = {}, this.V2NIMMessageLogUtil = {}, this.V2NIMMessageExtendUtil = {}, this.V2NIMStorageUtil = {}, this.V2NIMNotificationService = {}, this.V2NIMStorageService = {}, this.auth = {}, this.V1NIMLoginService = {}, this.V2NIMLoginService = {}, this.clientSocket = {}, this.V2NIMSyncService = {}, this.V2NIMLocalConversationService = {}, this.V2NIMConversationService = {}, this.V2NIMConversationGroupService = {}, this.V2NIMMessageService = {}, this.V2NIMTeamService = {}, this.V2NIMUserService = {}, this.V2NIMFriendService = {}, this.V2NIMSettingService = {}, this.V2NIMAIService = {}, this.V2NIMSignallingService = {}, this.V2NIMSubscriptionService = {}, this.V2NIMPassthroughService = {}, this.YSFService = {}, this.offlinePush = {}, this.sync = {}, this.msg = {}, this.msgLog = {}, this.session = {}, this.cloudSession = {}, this.misc = {}, this.user = {}, this.friend = {}, this.systemMessage = {}, this.team = {}, this.event = {}, this.msgExtend = {}, this.cloudStorage = {}, this.passThrough = {}, this.superTeam = {}, this.plugin = {}, this.signaling = {}, this.qchatChannel = {}, this.qchatMedia = {}, this.qchatMsg = {}, this.qchatRole = {}, this.qchatServer = {}, this.pluginMap = ke, this.logger = new Logger(t2.debugLevel, o2.loggerConfig), o2.privateConf) {
        var { authConfig: a2, cloudStorageConfig: m2, reporterConfig: u2 } = this.getConfigFromPrivate(o2.privateConf);
        Object.assign(t2, a2), this.setInitOptions(t2), this.otherOptions = Object.assign(Object.assign({}, o2), { cloudStorageConfig: Object.assign(Object.assign({ storageKeyPrefix: "NIM" }, o2.cloudStorageConfig), m2), reporterConfig: Object.assign(Object.assign({}, o2.reporterConfig), u2), V1NIMLoginServiceConfig: Object.assign(Object.assign(Object.assign({}, t2), o2.V1NIMLoginServiceConfig), a2), V2NIMLoginServiceConfig: Object.assign(Object.assign({}, o2.V2NIMLoginServiceConfig), a2) });
      } else
        this.setInitOptions(t2), this.otherOptions = Object.assign(Object.assign({}, o2), { V1NIMLoginServiceConfig: Object.assign(Object.assign({}, t2), o2.V1NIMLoginServiceConfig), cloudStorageConfig: Object.assign({ storageKeyPrefix: "NIM" }, o2.cloudStorageConfig) });
      this.timerManager = new TimerManager(), this.timeOrigin = new TimeOrigin(this), this.adapters = new CoreAdapters(this), this.abtest = new ABTest(this, Object.assign(Object.assign({ isAbtestEnable: this.options.isAbtestEnable, abtestUrl: this.options.abtestUrl }, this.otherOptions.abtestConfig), { abtestProjectKey: "imElite_sdk_abtest_web" }));
      var h2 = Ie.getSystemInfo(), g2 = function getCompassDataEndpoint(t3, o3) {
        var a3, m3, u3 = null === (a3 = null == o3 ? void 0 : o3.reporterConfig) || void 0 === a3 ? void 0 : a3.compassDataEndpoint, h3 = null === (m3 = null == o3 ? void 0 : o3.reporterConfig) || void 0 === m3 ? void 0 : m3.reportConfigUrl;
        if (u3)
          return u3;
        if (h3) {
          var g3 = h3.match(/^https:\/\/([^/]+)\/*/);
          return Array.isArray(g3) && g3.length >= 1 ? `https://${g3[1]}` : (t3.error(`Invalid reportConfigUrl: ${h3}`), "https://statistic.live.126.net,https://statistic-overseas.yunxinfw.com");
        }
        return "https://statistic.live.126.net,https://statistic-overseas.yunxinfw.com";
      }(this.logger, this.otherOptions);
      this.reporter = new de(Object.assign(Object.assign({}, g2 ? { compassDataEndpoint: g2 } : {}), { isDataReportEnable: getIsDataReportEnable(this.otherOptions), common: { app_key: t2.appkey, dev_id: "", platform: "Web", sdk_ver: "10.8.11", env: "online", os_name: h2.os, os_ver: h2.osVer, lib_env: h2.libEnv, host_env: h2.hostEnv, host_env_ver: h2.hostEnvVer, manufactor: h2.manufactor, model: h2.model, v2: "v1" !== this.options.apiVersion }, request: Ie.request, logger: this.logger, autoStart: true })), this.reporterHookLinkKeep = new ReporterHookLinkKeep(this), this.reporterHookCloudStorage = new ReporterHookCloudStorage(this), this.reporterHookLBS = new ReporterHookLBS(this), Ie.setLogger(this.logger), this.getServiceKeys(Object.keys(Ae)).forEach((t3) => {
        if (!this[t3] || !this[t3].name) {
          var o3 = Ae[t3];
          this[t3] = new o3(this);
        }
      }), Object.keys(Ae).forEach((t3) => {
        this.callSetOptions(t3);
      }), Object.keys(Ve).forEach((t3) => {
        var o3 = Ve[t3];
        void 0 !== o3 && (this[t3] = new o3(this));
      }), NIM$1.instance = this, this.logger.log(`NIM init, version:10.8.11, sdk version:100811, appkey:${t2.appkey}`);
    }
    getServiceKeys(t2) {
      var o2 = t2.findIndex((t3) => "V1NIMLoginService" === t3);
      if (o2 > -1) {
        var a2 = t2[o2];
        t2.splice(o2, 1), "v1" === this.options.apiVersion && t2.unshift(a2);
      }
      var m2 = t2.findIndex((t3) => "V2NIMLoginService" === t3);
      if (m2 > -1) {
        var u2 = t2[m2];
        t2.splice(m2, 1), "v2" === this.options.apiVersion && t2.unshift(u2);
      }
      var h2 = t2.findIndex((t3) => "sync" === t3);
      if (h2 > -1) {
        var g2 = t2[h2];
        t2.splice(h2, 1), "v1" === this.options.apiVersion && t2.push(g2);
      }
      var I2 = t2.findIndex((t3) => "V2NIMSyncService" === t3);
      if (I2 > -1) {
        var _2 = t2[I2];
        t2.splice(I2, 1), "v2" === this.options.apiVersion && t2.push(_2);
      }
      return t2;
    }
    static getInstance(t2, o2) {
      if (!NIM$1.instance) {
        if (t2)
          return new NIM$1(t2, o2);
        throw new Error("Instance not exist, please input options");
      }
      if (t2) {
        if (NIM$1.instance.options.account === t2.account && NIM$1.instance.options.appkey === t2.appkey)
          return NIM$1.instance.setOptions(t2), NIM$1.instance;
        throw new Error("Unexpected login");
      }
      return NIM$1.instance;
    }
    setInitOptions(t2) {
      validate({ appkey: { type: "string" }, apiVersion: { type: "enum", values: ["v1", "v2"], required: false }, binaryWebsocket: { type: "boolean", required: false }, needReconnect: { type: "boolean", required: false }, reconnectionAttempts: { type: "number", required: false }, customClientType: { type: "number", min: 1, required: false }, authType: { type: "number", min: 0, max: 2, required: false }, lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, t2), this.options = Object.assign(Object.assign({}, Pe), t2);
    }
    getConfigFromPrivate(t2) {
      var o2;
      return t2 ? { authConfig: JSON.parse(JSON.stringify({ appkey: t2.appkey || void 0, lbsUrls: t2.weblbsUrl ? [t2.weblbsUrl] : void 0, linkUrl: t2.link_web || void 0, linkSSL: null !== (o2 = t2.websdkSsl) && void 0 !== o2 ? o2 : void 0 })), cloudStorageConfig: JSON.parse(JSON.stringify({ chunkUploadHost: t2.nos_uploader || void 0, commonUploadHost: t2.nos_uploader || void 0, commonUploadHostBackupList: t2.nos_uploader ? [t2.nos_uploader] : void 0, chunkUploadHostBackupList: t2.nos_uploader ? [t2.nos_uploader] : void 0, uploadReplaceFormat: t2.nos_downloader_v2 ? `${t2.nosSsl ? "https://" : "http://"}${t2.nos_downloader_v2}` : void 0, downloadUrl: void 0 !== t2.nos_accelerate ? t2.nos_accelerate : void 0, downloadHostList: "" === t2.nos_accelerate_host ? [] : "string" == typeof t2.nos_accelerate_host ? [t2.nos_accelerate_host] : Array.isArray(t2.nos_accelerate_host) ? t2.nos_accelerate_host : void 0 })), reporterConfig: JSON.parse(JSON.stringify({ enableCompass: "boolean" == typeof t2.enableCompass ? t2.enableCompass : void 0, compassDataEndpoint: t2.compassDataEndpoint || void 0 })) } : { authConfig: {}, cloudStorageConfig: {}, reporterConfig: {} };
    }
    connect(t2 = {}) {
      return this.V1NIMLoginService.login(t2);
    }
    setOptions(t2) {
      if ("object" == typeof t2 && null !== t2) {
        if (Object.prototype.hasOwnProperty.call(t2, "account") && t2.account !== this.options.account || Object.prototype.hasOwnProperty.call(t2, "appkey") && t2.appkey !== this.options.appkey)
          throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions account and appkey is not allowed to reset" } });
        if (Object.prototype.hasOwnProperty.call(t2, "apiVersion") && t2.apiVersion !== this.options.apiVersion)
          throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions apiVersion is not allowed to reset" } });
        if (Object.prototype.hasOwnProperty.call(t2, "binaryWebsocket") && t2.binaryWebsocket !== this.options.binaryWebsocket)
          throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_MISUSE, detail: { reason: "NIM::setOptions binaryWebsocket is not allowed to reset" } });
        validate({ token: { type: "string", required: false }, needReconnect: { type: "boolean", required: false }, reconnectionAttempts: { type: "number", required: false }, customClientType: { type: "number", min: 1, required: false }, authType: { type: "number", min: 0, max: 2, required: false }, lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, t2), this.logger.log("NIM::setOptions options is", t2), this.options = Object.assign(Object.assign({}, this.options), t2), this.V1NIMLoginService.setOptions && this.V1NIMLoginService.setOptions(this.options);
      }
    }
    getOptions() {
      return this.options;
    }
    disconnect() {
      return this.V1NIMLoginService.logout();
    }
    _disconnect() {
      return "v1" === this.options.apiVersion ? this.V1NIMLoginService.logout() : "v2" === this.options.apiVersion ? 0 === get(this.V2NIMLoginService, "lifeCycle.connectStatus") && 0 === get(this.V2NIMLoginService, "lifeCycle.loginStatus") ? Promise.resolve() : this.V2NIMLoginService.logout() : Promise.resolve();
    }
    destroy() {
      return NIM$1.instance = void 0, this._disconnect().then(() => {
        this.status = "destroyed", this.removeAllListeners(), this.eventBus.removeAllListeners(), this.logger.destroy(), this.reporter.destroy(), this.timerManager.destroy(), this._clearModuleData("destroy"), this._removeAllModuleListeners(), this.connect = emptyFuncWithPromise, this.disconnect = emptyFuncWithPromise, this._disconnect = emptyFuncWithPromise, this.destroy = emptyFuncWithPromise;
      });
    }
    _clearModuleData(t2 = "logout") {
      Object.values(this).forEach((o2) => {
        o2 && "function" == typeof o2.reset && o2.reset(t2);
      });
    }
    _removeAllModuleListeners() {
      Object.values(this).forEach((t2) => {
        t2 && "function" == typeof t2.removeAllListeners && t2.removeAllListeners();
      });
    }
    kick(t2) {
      return this.V1NIMLoginService.kick(t2);
    }
    sendCmd(t2, o2, a2) {
      return this.clientSocket.sendCmd(t2, o2, a2);
    }
    emit(t2, ...o2) {
      try {
        var a2 = Date.now(), m2 = super.emit(t2, ...o2), u2 = Date.now() - a2;
        return u2 >= 10 && this.logger.warn(`Core::emit event: ${t2} process takes: ${u2}ms`), m2;
      } catch (o3) {
        return this.logger.error(`Core::emit event: ${t2}. Error: ${o3}`), setTimeout(() => {
          throw this.logger.error(`Core::emit throw error in setTimeout. event: ${t2}. Error: ${o3}`), o3;
        }, 0), false;
      }
    }
    get account() {
      return this.auth.account;
    }
    get status() {
      return this.V1NIMLoginService.status;
    }
    set status(t2) {
      this.V1NIMLoginService.status = t2;
    }
    get config() {
      return { timeout: 8e3, deviceId: this.auth.deviceId };
    }
    _registerDep(t2, o2) {
      this[o2] && this[o2].name || (this[o2] = new t2(this), this.callSetOptions(o2));
    }
    callSetOptions(t2) {
      var o2 = `${t2}Config`, a2 = `${t2}Options`, m2 = this.otherOptions[o2] || this.otherOptions[a2] || {}, u2 = get(this, `${t2}.setOptions`);
      "function" == typeof u2 && ("cloudStorage" === t2 && (m2 = this.otherOptions[o2] || this.otherOptions.serverConfig || {}), u2.call(this[t2], m2));
    }
    static registerService(t2, o2) {
      Ae[o2] = t2;
    }
    static registerPrivateService(t2, o2) {
      Ve[o2] = t2;
    }
    static registerPlugin(t2, o2) {
      ke[o2] = t2;
    }
  }
  NIM$1.sdkVersion = 100811, NIM$1.sdkVersionFormat = "10.8.11";
  var Le = {}, we = {};
  function createCmd(t2, o2, a2, m2) {
    var u2 = Le[t2];
    if (!u2)
      return a2.error("createCmd:: can not find cmd config: ", t2), null;
    var h2 = { SER: o2, SID: u2.sid, CID: u2.cid, Q: [] };
    return u2.params && m2 && u2.params.forEach(function(t3) {
      var o3 = m2[t3.name];
      if (null != o3) {
        var a3 = t3.type, { reflectMapper: u3, select: g2 } = t3;
        switch (t3.type) {
          case "PropertyArray":
            a3 = "ArrayMable", o3 = o3.map((t4) => ({ t: "Property", v: u3 ? serialize(t4, u3, g2) : t4 }));
            break;
          case "Property":
            o3 = u3 ? serialize(o3, u3, g2) : o3;
            break;
          case "Bool":
            o3 = o3 ? "true" : "false";
        }
        h2.Q.push({ t: a3, v: o3 });
      }
    }), { packet: h2, hasPacketResponse: "boolean" != typeof u2.hasPacketResponse || u2.hasPacketResponse, hasPacketTimer: "boolean" != typeof u2.hasPacketTimer || u2.hasPacketTimer };
  }
  function parseCmd(t2, o2) {
    var a2;
    try {
      a2 = JSON.parse(t2);
    } catch (a3) {
      return void o2.error(`Parse command error:"${t2}"`);
    }
    var m2 = a2.sid + "_" + a2.cid, u2 = a2.r;
    if (["4_1", "4_2", "4_10", "4_11"].includes(m2)) {
      var h2 = a2.r[1].headerPacket;
      m2 = `${h2.sid}_${h2.cid}`, a2.sid = h2.sid, a2.cid = h2.cid, u2 = a2.r[1].body;
    }
    var g2 = we[m2], I2 = [];
    if (g2) {
      for (var _2 of g2)
        I2.push(parseEachCmd(a2, _2.config, _2.cmd, u2, o2));
      return I2;
    }
    o2.error("parseCmd:: mapper not exist", m2, a2.code);
  }
  function parseEachCmd(t2, o2, a2, m2, u2) {
    var h2, g2 = { cmd: a2, raw: t2, error: null, service: null == o2 ? void 0 : o2.service, content: {}, __receiveTimeNode: TimeOrigin.getTimeNode() };
    if (!a2 || !o2)
      return g2.notFound = true, g2;
    (18 === o2.sid || o2.sid >= 26 && o2.sid < 100) && (t2.code = function toReadableCode(t3) {
      if ("number" != typeof t3 || t3 != t3)
        throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "Read code failed", rawData: `${t3}` } });
      if (t3 < 0 || t3 >= 0 && t3 < 1e3 || t3 >= 2e4 && t3 <= 20099)
        return t3;
      var o3 = (65535 & t3) >> 9;
      o3 -= o3 <= 38 ? 1 : 2;
      return 1e5 + 1e3 * o3 + (511 & t3);
    }(t2.code));
    var I2 = function genCmdError(t3, o3) {
      var a3 = ue[t3], m3 = ge[t3];
      return null === m3 ? null : new V2NIMErrorImpl({ code: t3, desc: a3 || m3 || t3, detail: { cmd: o3, timetag: Date.now() } });
    }(t2.code, a2);
    if (g2.error = I2, g2.error) {
      if (g2.error.detail.cmd = a2, !(null === (h2 = null == o2 ? void 0 : o2.ignoreErrCodes) || void 0 === h2 ? void 0 : h2.includes(t2.code)))
        return g2;
      u2.warn("parseCmd:: ignore error ", g2.error), g2.error.detail.ignore = true;
    }
    return o2.response && o2.response.forEach((t3, o3) => {
      var a3 = m2[o3], u3 = t3.type, h3 = t3.name, I3 = t3.reflectMapper;
      if (void 0 !== a3)
        switch (u3) {
          case "Property":
            g2.content[h3] = I3 ? deserialize(a3, I3) : a3;
            break;
          case "PropertyArray":
            g2.content[h3] = a3.map((t4) => I3 ? deserialize(t4, I3) : t4);
            break;
          case "Int":
          case "Long":
          case "Byte":
            g2.content[h3] = +a3;
            break;
          case "Bool":
            g2.content[h3] = "true" === a3 || true === a3 || 1 === a3;
            break;
          default:
            g2.content[h3] = a3;
        }
    }), g2;
  }
  function serialize(t2, o2, a2) {
    var m2 = {};
    for (var u2 in t2 = function flattenObjByMapper(t3, o3) {
      var a3 = {};
      for (var m3 in o3) {
        var u3 = o3[m3], h3 = "number" == typeof u3 ? m3 : u3.access ? u3.access : m3, g3 = h3.split("."), I3 = t3;
        for (var _2 of g3) {
          if (void 0 === I3[_2] || null === I3[_2]) {
            I3 = void 0;
            break;
          }
          I3 = I3[_2];
        }
        void 0 !== I3 && (a3[h3] = I3);
      }
      return a3;
    }(t2, o2), o2) {
      var h2 = o2[u2], g2 = "number" == typeof h2 ? u2 : h2.access ? h2.access : u2;
      if (!a2 || a2.includes(u2))
        if (g2 in t2) {
          if ("number" == typeof h2)
            m2[h2] = t2[g2];
          else if ("object" == typeof h2)
            if (h2.converter) {
              var I2 = h2.converter(t2[g2], t2);
              void 0 !== I2 && (m2[h2.id] = I2);
            } else
              m2[h2.id] = t2[g2];
        } else
          "object" == typeof h2 && h2.def && ("function" == typeof h2.def ? m2[h2.id] = h2.def(t2) : m2[h2.id] = h2.def);
    }
    return m2;
  }
  function deserialize(t2, o2) {
    var a2 = {};
    for (var m2 in t2) {
      var u2 = o2[m2];
      if ("string" == typeof u2)
        a2[u2] = t2[m2];
      else if ("object" == typeof u2 && "prop" in u2) {
        var h2 = u2.access ? u2.access : u2.prop;
        if (u2.converter) {
          var g2 = u2.converter(t2[m2], t2);
          void 0 !== g2 && (a2[h2] = g2);
        } else
          u2.type && "number" === u2.type ? a2[h2] = +t2[m2] : u2.type && "boolean" === u2.type ? a2[h2] = !("0" === t2[m2] || !t2[m2]) : a2[h2] = t2[m2];
      }
    }
    for (var I2 in o2) {
      var _2 = o2[I2];
      if (_2 && void 0 !== _2.def) {
        var E2 = _2.access ? _2.access : _2.prop;
        E2 in a2 || ("function" == typeof _2.def ? a2[E2] = _2.def(t2) : a2[E2] = _2.def);
      }
    }
    return a2 = function unflattenObj(t3) {
      var o3 = {}, _loop = function(a4) {
        var m3 = a4.split(".");
        m3.reduce(function(o4, u3, h3) {
          return o4[u3] || (o4[u3] = isNaN(Number(m3[h3 + 1])) ? m3.length - 1 == h3 ? t3[a4] : {} : []);
        }, o3);
      };
      for (var a3 in t3)
        _loop(a3);
      return o3;
    }(a2), a2;
  }
  function registerParser(t2) {
    for (var o2 in Object.assign(Le, t2.cmdConfig), t2.cmdMap) {
      var a2 = t2.cmdMap[o2], m2 = t2.cmdConfig[a2];
      if (m2)
        if (Array.isArray(we[o2])) {
          var u2 = false;
          for (var h2 of we[o2])
            if (h2.cmd === a2 && h2.config.service === m2.service) {
              u2 = true;
              break;
            }
          u2 || we[o2].push({ config: m2, cmd: a2 });
        } else
          we[o2] = [{ config: m2, cmd: a2 }];
    }
  }
  function invertSerializeItem(t2) {
    var o2 = {};
    for (var a2 in t2) {
      var m2 = t2[a2];
      "number" == typeof m2 ? o2[m2] = a2 : "object" == typeof m2 && (o2[m2.id] = { prop: a2, type: m2.retType, access: m2.retAccess ? m2.retAccess : m2.access ? m2.access : a2, def: m2.retDef, converter: m2.retConverter });
    }
    return o2;
  }
  function boolToInt(t2) {
    return t2 ? 1 : 0;
  }
  function objectToJSONString(t2) {
    if (t2 && "object" == typeof t2)
      try {
        return JSON.stringify(t2);
      } catch (t3) {
        return;
      }
  }
  function stringToJSONObject(t2) {
    if (t2 && "string" == typeof t2)
      try {
        return JSON.parse(t2);
      } catch (t3) {
        return;
      }
  }
  function format(t2, o2) {
    if (!isPlainObject(o2))
      return {};
    var a2 = JSON.parse(JSON.stringify(o2)), m2 = doFormat(t2, a2);
    return JSON.parse(JSON.stringify(Object.assign(Object.assign({}, a2), m2)));
  }
  function doFormat(t2, o2) {
    if (!isPlainObject(o2))
      return {};
    var a2 = {};
    return Object.keys(t2).forEach((m2) => {
      var u2 = t2[m2].type;
      if ("string" != typeof u2) {
        var h2 = doFormat(t2[m2], o2);
        Object.keys(h2).length > 0 && (a2[m2] = h2);
      } else {
        var g2 = t2[m2], I2 = g2.rawKey || m2, _2 = De[u2](o2, I2, g2);
        void 0 !== _2 && (o2[I2] = void 0, a2[m2] = _2);
      }
    }), a2;
  }
  var De = { number: function(t2, o2) {
    if (void 0 !== t2[o2])
      return +t2[o2];
  }, string: function(t2, o2) {
    if (void 0 !== t2[o2])
      return t2[o2];
  }, boolean: function(t2, o2) {
    return +t2[o2] > 0 || 0 != +t2[o2] && void 0;
  }, enum: function(t2, o2, a2) {
    return a2.values[t2[o2]];
  }, object: function(t2, o2) {
    if (void 0 !== t2[o2])
      try {
        return JSON.parse(t2[o2]);
      } catch (t3) {
        return {};
      }
  } };
  function formatLoginInfo(t2) {
    return format({ type: { type: "number" }, port: { type: "number" }, customClientType: { type: "number" }, timestamp: { type: "number" }, loginType: { type: "number" } }, t2);
  }
  function invert(t2) {
    t2 = t2 || {};
    var o2 = {};
    for (var a2 in t2)
      o2[t2[a2]] = a2;
    return o2;
  }
  var Ue = { "26_3": "v2Login", "26_5": "v2Logout", "26_8": "v2KickOffline", "26_9": "v2BeKicked", "26_10": "v2LoginClientChange", "36_1": "v2GetChatroomLinkAddress" }, xe = { "1_2": "heartbeat", "2_7": "nimLoginClientChange", "24_8": "qchatLoginClientChange" }, Fe = { webLoginReqTag: { clientType: 3, os: 4, sdkVersion: 6, appLogin: 8, protocolVersion: 9, pushTokenName: 10, pushToken: 11, clientId: 13, appkey: 18, account: 19, browser: 24, clientSession: 26, deviceInfo: 32, isReactNative: 112, customTag: 38, customClientType: 39, sdkHumanVersion: 40, hostEnv: 41, userAgent: 42, libEnv: 44, authType: 115, thirdPartyExtension: 116, token: 1e3 }, mixAuthRepTag: { clientId: 1, consid: 2, clientIP: 3, port: 4, type: 5, customClientType: 6, timestamp: 7, customTag: 8, os: 9, pushType: 10, hasTokenPreviously: 11, loginType: 12 }, nimAuthRepTag: { type: 3, os: 4, mac: 5, clientId: 13, account: 19, deviceInfo: 32, customTag: 38, customClientType: 39, consid: 102, clientIP: 103, port: 104, timestamp: 109, pushType: 110, hasTokenPreviously: 111 }, qchatAuthRepTag: { clientId: 8, consid: 102, clientIP: 103, port: 104, type: 6, customClientType: 13, timestamp: 105, os: 30, pushType: 100, hasTokenPreviously: 101 } }, Be = { v2Login: { sid: 26, cid: 3, service: "auth", params: [{ type: "Property", name: "tag", reflectMapper: Fe.webLoginReqTag }], response: [{ type: "Property", name: "data", reflectMapper: invert(Fe.mixAuthRepTag) }, { type: "PropertyArray", name: "loginClients", reflectMapper: invert(Fe.mixAuthRepTag) }] }, v2Logout: { sid: 26, cid: 5, service: "auth" }, v2KickOffline: { sid: 26, cid: 8, service: "auth", params: [{ type: "StrArray", name: "clientIds" }], response: [{ type: "StrArray", name: "clientIds" }] }, v2BeKicked: { sid: 26, cid: 9, service: "auth", response: [{ type: "Int", name: "clientType" }, { type: "Int", name: "reason" }, { type: "String", name: "reasonDesc" }, { type: "Int", name: "customClientType" }] }, v2LoginClientChange: { sid: 26, cid: 10, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "PropertyArray", name: "datas", reflectMapper: invert(Fe.mixAuthRepTag) }] }, v2GetChatroomLinkAddress: { sid: 36, cid: 1, service: "auth", params: [{ type: "Long", name: "roomId" }, { type: "Bool", name: "miniProgram" }], response: [{ type: "StrArray", name: "linkAddress" }] } }, je = { heartbeat: { sid: 1, cid: 2, service: "auth" }, nimLoginClientChange: { sid: 2, cid: 7, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "PropertyArray", name: "datas", reflectMapper: invert(Fe.nimAuthRepTag) }] }, qchatLoginClientChange: { sid: 24, cid: 8, service: "auth", response: [{ type: "Byte", name: "state" }, { type: "Property", name: "data", reflectMapper: invert(Fe.qchatAuthRepTag) }] } }, $e = Backoff;
  function Backoff(t2) {
    t2 = t2 || {}, this.ms = t2.min || 100, this.max = t2.max || 1e4, this.factor = t2.factor || 2, this.jitter = t2.jitter > 0 && t2.jitter <= 1 ? t2.jitter : 0, this.attempts = 0;
  }
  Backoff.prototype.duration = function() {
    var t2 = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var o2 = Math.random(), a2 = Math.floor(o2 * this.jitter * t2);
      t2 = 0 == (1 & Math.floor(10 * o2)) ? t2 - a2 : t2 + a2;
    }
    return 0 | Math.min(t2, this.max);
  }, Backoff.prototype.reset = function() {
    this.attempts = 0;
  }, Backoff.prototype.setMin = function(t2) {
    this.ms = t2;
  }, Backoff.prototype.setMax = function(t2) {
    this.max = t2;
  }, Backoff.prototype.setJitter = function(t2) {
    this.jitter = t2;
  };
  var abs = function(t2) {
    var o2;
    if (void 0 !== t2)
      return (o2 = BigNumber(t2)).sign = 1, o2;
  }, isArray = function(t2) {
    return "[object Array]" === Object.prototype.toString.call(t2);
  }, isValidType = function(t2) {
    return ["number" == typeof t2, "string" == typeof t2 && t2.length > 0, isArray(t2) && t2.length > 0, t2 instanceof BigNumber].some(function(t3) {
      return true === t3;
    });
  }, Ge = "Invalid Number", qe = "Invalid Number - Division By Zero";
  function BigNumber(t2) {
    var o2;
    if (!(this instanceof BigNumber))
      return new BigNumber(t2);
    if (this.number = [], this.sign = 1, this.rest = 0, isValidType(t2)) {
      if (isArray(t2)) {
        for ((t2.length && "-" === t2[0] || "+" === t2[0]) && (this.sign = "+" === t2[0] ? 1 : -1, t2.shift(0)), o2 = t2.length - 1; o2 >= 0; o2--)
          if (!this.addDigit(t2[o2]))
            return;
      } else
        for ("-" !== (t2 = t2.toString()).charAt(0) && "+" !== t2.charAt(0) || (this.sign = "+" === t2.charAt(0) ? 1 : -1, t2 = t2.substring(1)), o2 = t2.length - 1; o2 >= 0; o2--)
          if (!this.addDigit(parseInt(t2.charAt(o2), 10)))
            return;
    } else
      this.number = Ge;
  }
  BigNumber.prototype.addDigit = function(t2) {
    return function(t3) {
      return /^\d$/.test(t3);
    }(t2) ? (this.number.push(t2), this) : (this.number = Ge, false);
  }, BigNumber.prototype._compare = function(t2) {
    var o2, a2;
    if (!isValidType(t2))
      return null;
    if (o2 = BigNumber(t2), this.sign !== o2.sign)
      return this.sign;
    if (this.number.length > o2.number.length)
      return this.sign;
    if (this.number.length < o2.number.length)
      return -1 * this.sign;
    for (a2 = this.number.length - 1; a2 >= 0; a2--) {
      if (this.number[a2] > o2.number[a2])
        return this.sign;
      if (this.number[a2] < o2.number[a2])
        return -1 * this.sign;
    }
    return 0;
  }, BigNumber.prototype.gt = function(t2) {
    return this._compare(t2) > 0;
  }, BigNumber.prototype.gte = function(t2) {
    return this._compare(t2) >= 0;
  }, BigNumber.prototype.equals = function(t2) {
    return 0 === this._compare(t2);
  }, BigNumber.prototype.lte = function(t2) {
    return this._compare(t2) <= 0;
  }, BigNumber.prototype.lt = function(t2) {
    return this._compare(t2) < 0;
  }, BigNumber.prototype.subtract = function(t2) {
    var o2;
    return void 0 === t2 ? this : (o2 = BigNumber(t2), this.sign !== o2.sign ? (this.number = BigNumber._add(this, o2), this) : (this.sign = this.lt(o2) ? -1 : 1, this.number = abs(this).lt(abs(o2)) ? BigNumber._subtract(o2, this) : BigNumber._subtract(this, o2), this));
  }, BigNumber._add = function(t2, o2) {
    var a2, m2 = 0, u2 = Math.max(t2.number.length, o2.number.length);
    for (a2 = 0; a2 < u2 || m2 > 0; a2++)
      t2.number[a2] = (m2 += (t2.number[a2] || 0) + (o2.number[a2] || 0)) % 10, m2 = Math.floor(m2 / 10);
    return t2.number;
  }, BigNumber._subtract = function(t2, o2) {
    var a2, m2 = 0, u2 = t2.number.length;
    for (a2 = 0; a2 < u2; a2++)
      t2.number[a2] -= (o2.number[a2] || 0) + m2, t2.number[a2] += 10 * (m2 = t2.number[a2] < 0 ? 1 : 0);
    for (a2 = 0, u2 = t2.number.length - 1; 0 === t2.number[u2 - a2] && u2 - a2 > 0; )
      a2++;
    return a2 > 0 && t2.number.splice(-a2), t2.number;
  }, BigNumber.prototype.multiply = function(t2) {
    if (void 0 === t2)
      return this;
    var o2, a2, m2 = BigNumber(t2), u2 = 0, h2 = [];
    if (this.isZero() || m2.isZero())
      return BigNumber(0);
    for (this.sign *= m2.sign, o2 = 0; o2 < this.number.length; o2++)
      for (u2 = 0, a2 = 0; a2 < m2.number.length || u2 > 0; a2++)
        h2[o2 + a2] = (u2 += (h2[o2 + a2] || 0) + this.number[o2] * (m2.number[a2] || 0)) % 10, u2 = Math.floor(u2 / 10);
    return this.number = h2, this;
  }, BigNumber.prototype.divide = function(t2) {
    if (void 0 === t2)
      return this;
    var o2, a2, m2 = BigNumber(t2), u2 = [], h2 = BigNumber(0);
    if (m2.isZero())
      return this.number = qe, this;
    if (this.isZero())
      return this.rest = BigNumber(0), this;
    if (this.sign *= m2.sign, m2.sign = 1, 1 === m2.number.length && 1 === m2.number[0])
      return this.rest = BigNumber(0), this;
    for (o2 = this.number.length - 1; o2 >= 0; o2--)
      for (h2.multiply(10), h2.number[0] = this.number[o2], u2[o2] = 0; m2.lte(h2); )
        u2[o2]++, h2.subtract(m2);
    for (o2 = 0, a2 = u2.length - 1; 0 === u2[a2 - o2] && a2 - o2 > 0; )
      o2++;
    return o2 > 0 && u2.splice(-o2), this.rest = h2, this.number = u2, this;
  }, BigNumber.prototype.mod = function(t2) {
    return this.divide(t2).rest;
  }, BigNumber.prototype.isZero = function() {
    var t2;
    for (t2 = 0; t2 < this.number.length; t2++)
      if (0 !== this.number[t2])
        return false;
    return true;
  }, BigNumber.prototype.toString = function() {
    var t2, o2 = "";
    if ("string" == typeof this.number)
      return this.number;
    for (t2 = this.number.length - 1; t2 >= 0; t2--)
      o2 += this.number[t2];
    return this.sign > 0 ? o2 : "-" + o2;
  };
  var He, Ye = Math.pow(2, 32);
  function varintToBytes(t2) {
    for (var o2 = new Uint8Array(5), a2 = new DataView(o2.buffer), m2 = 0; 0 != (4294967168 & t2); )
      a2.setUint8(m2++, 127 & t2 | 128), t2 >>>= 7;
    return a2.setUint8(m2++, 127 & t2), o2.slice(0, m2);
  }
  function decodeText(t2) {
    return "function" == typeof TextDecoder ? new TextDecoder("utf-8").decode(t2) : function textDecoder(t3) {
      for (var o2 = "", a2 = 0; a2 < t3.length; ) {
        var m2 = t3[a2], u2 = 0, h2 = 0;
        if (m2 <= 127 ? (u2 = 0, h2 = 255 & m2) : m2 <= 223 ? (u2 = 1, h2 = 31 & m2) : m2 <= 239 ? (u2 = 2, h2 = 15 & m2) : m2 <= 244 && (u2 = 3, h2 = 7 & m2), t3.length - a2 - u2 > 0)
          for (var g2 = 0; g2 < u2; )
            h2 = h2 << 6 | 63 & (m2 = t3[a2 + g2 + 1]), g2 += 1;
        else
          h2 = 65533, u2 = t3.length - a2;
        o2 += String.fromCodePoint(h2), a2 += u2 + 1;
      }
      return o2;
    }(t2);
  }
  class Unpack {
    constructor(t2) {
      this.offset = 0, this.buffer = new Uint8Array(t2), this.view = new DataView(t2);
    }
    checkBufferBoundaryAccess() {
      return this.offset >= this.buffer.byteLength;
    }
    length() {
      var t2;
      return (null === (t2 = this.view) || void 0 === t2 ? void 0 : t2.byteLength) || 0;
    }
    getBuffer() {
      return this.view.buffer;
    }
    getOffset() {
      return this.offset;
    }
    popRaw(t2) {
      try {
        var o2 = this.buffer.slice(this.offset, this.offset + t2);
        return this.offset += t2, o2;
      } catch (t3) {
        throw new Error(`UnpackException raw ${t3 && t3.message}`);
      }
    }
    popByte() {
      try {
        var t2 = this.view.getUint8(this.offset);
        return this.offset += 1, t2;
      } catch (t3) {
        throw new Error(`UnpackException byte ${t3 && t3.message}`);
      }
    }
    popVarbin() {
      return this.popRaw(this.popVarInt());
    }
    popString() {
      try {
        return decodeText(this.popVarbin());
      } catch (t2) {
        throw new Error(`UnpackException string ${t2 && t2.message}`);
      }
    }
    popInt() {
      try {
        var t2 = this.view.getUint32(this.offset, true);
        return this.offset += 4, t2;
      } catch (t3) {
        throw new Error(`UnpackException int ${t3 && t3.message}`);
      }
    }
    popVarInt() {
      var t2 = 1, o2 = 0, a2 = 0, m2 = 0;
      do {
        if (o2 += (127 & (a2 = this.popByte())) * t2, t2 *= 128, (m2 += 1) > 5)
          throw new Error("Variable length quantity is too long");
      } while (0 != (128 & a2));
      return o2;
    }
    popLong() {
      try {
        var t2 = function getBigUint64(t3, o2 = false) {
          var a2 = new DataView(t3.buffer), [m2, u2] = o2 ? [4, 0] : [0, 4], h2 = a2.getUint32(m2, o2), g2 = a2.getUint32(u2, o2);
          return h2 > 0 ? h2 * Ye + g2 : g2;
        }(this.buffer.slice(this.offset, this.offset + 8), true);
        return this.offset += 8, Number(t2);
      } catch (t3) {
        throw new Error(`UnpackException long ${t3 && t3.message}`);
      }
    }
    popShort() {
      try {
        var t2 = this.view.getUint16(this.offset, true);
        return this.offset += 2, t2;
      } catch (t3) {
        throw new Error(`UnpackException short ${t3 && t3.message}`);
      }
    }
    popBoolean() {
      return this.popByte() > 0;
    }
    toString() {
      return Array.from(new Uint8Array(this.buffer)).toString();
    }
    reset() {
      this.offset = 0, this.buffer = null, this.view = null;
    }
  }
  class PacketDecoder {
    constructor(t2) {
      this.packetLength = 0, this.serviceId = 0, this.commandId = 0, this.serialId = 0, this.tag = 0, this.resCode = 200, this.innerHeader = null, this.msgId = 0, this.bodyArr = [], this.unpack = new Unpack(t2);
    }
    reset() {
      this.innerHeader = null, this.bodyArr = [], this.unpack.reset();
    }
    getBodyDetail() {
      return this.bodyArr.join("");
    }
    unmarshalHeader() {
      var t2 = this._unmarshalHeader();
      this.packetLength = t2.packetLength, this.serviceId = t2.serviceId, this.commandId = t2.commandId, this.serialId = t2.serialId, this.tag = t2.tag, this.resCode = t2.resCode, 4 === t2.serviceId && [1, 2, 10, 11].includes(t2.commandId) && (this.msgId = this.unmarshalLong(), this.innerHeader = this._unmarshalHeader());
    }
    _unmarshalHeader() {
      var t2 = this.unpack.popVarInt(), o2 = this.unpack.popByte(), a2 = this.unpack.popByte(), m2 = this.unpack.popShort(), u2 = this.unpack.popByte(), h2 = 200;
      return this.hasRescode(u2) && (h2 = this.unpack.popShort()), { packetLength: t2, serviceId: o2, commandId: a2, serialId: m2, tag: u2, resCode: h2 };
    }
    hasRescode(t2) {
      return 0 != ((t2 = t2 || this.tag) & PacketDecoder.RES_CODE);
    }
    getHeader() {
      return { packetLength: this.packetLength, sid: this.serviceId, cid: this.commandId, ser: this.serialId, code: this.resCode };
    }
    getInnerHeader() {
      return this.innerHeader ? { sid: this.innerHeader.serviceId, cid: this.innerHeader.commandId } : null;
    }
    unmarshalProperty() {
      var t2 = this.unpack.popVarInt(), o2 = {};
      this.bodyArr.push(`
Property(${t2}) {`);
      for (var a2 = 0; a2 < t2; a2++) {
        var m2 = this.unpack.popVarInt();
        this.bodyArr.push(`${m2}:`);
        var u2 = this.unpack.popString();
        this.bodyArr.push(`"${u2.length} ${this.unpack.getOffset()}",`), o2[m2] = u2;
      }
      return this.bodyArr.push("},"), o2;
    }
    unmarshalPropertyArray() {
      var t2 = this.unpack.popVarInt(), o2 = [];
      this.bodyArr.push(`
PropertyArray(${t2}) [`);
      for (var a2 = 0; a2 < t2; a2++)
        o2.push(this.unmarshalProperty());
      return this.bodyArr.push("],"), o2;
    }
    unmarshalLong() {
      var t2 = this.unpack.popLong();
      return this.bodyArr.push(`
Long:${t2}`), t2;
    }
    unmarshalLongArray() {
      var t2 = this.unpack.popVarInt(), o2 = [];
      this.bodyArr.push(`
LongArray ${t2}:`);
      for (var a2 = 0; a2 < t2; a2++) {
        var m2 = this.unpack.popLong();
        this.bodyArr.push(`${m2},`), o2.push(m2);
      }
      return o2;
    }
    unmarshalStrArray() {
      var t2 = this.unpack.popVarInt(), o2 = [];
      this.bodyArr.push(`
StrArray ${t2}:`);
      for (var a2 = 0; a2 < t2; a2++) {
        var m2 = this.unpack.popString();
        this.bodyArr.push(`${m2},`), o2.push(m2);
      }
      return o2;
    }
    unmarshalStrLongMap() {
      var t2 = this.unpack.popVarInt(), o2 = {};
      this.bodyArr.push(`
StrLongMap ${t2}:`);
      for (var a2 = 0; a2 < t2; a2++) {
        var m2 = this.unpack.popString();
        this.bodyArr.push(`${m2},`);
        var u2 = this.unpack.popLong();
        this.bodyArr.push(`${u2};`), o2[m2] = u2;
      }
      return o2;
    }
    unmarshalStrStrMap() {
      var t2 = this.unpack.popVarInt(), o2 = {};
      this.bodyArr.push(`
StrStrMap ${t2}:`);
      for (var a2 = 0; a2 < t2; a2++) {
        var m2 = this.unpack.popString();
        this.bodyArr.push(`${m2},`);
        var u2 = this.unpack.popString();
        this.bodyArr.push(`${u2};`), o2[m2] = u2;
      }
      return o2;
    }
    unmarshalLongLongMap() {
      var t2 = this.unpack.popVarInt(), o2 = {};
      this.bodyArr.push(`
StrLongLongMap ${t2}:`);
      for (var a2 = 0; a2 < t2; a2++) {
        var m2 = this.unpack.popLong();
        this.bodyArr.push(`${m2},`);
        var u2 = this.unpack.popLong();
        this.bodyArr.push(`${u2};`), o2[m2] = u2;
      }
      return { m_map: o2 };
    }
    unmarshalKVArray() {
      var t2 = this.unpack.popVarInt(), o2 = [];
      this.bodyArr.push(`
KVArray ${t2}:`);
      for (var a2 = 0; a2 < t2; a2++)
        o2.push(this.unmarshalStrStrMap());
      return o2;
    }
    unmarshal(t2) {
      var o2 = Object.assign(Object.assign({}, this.getHeader()), { r: [] });
      if (this.innerHeader && (o2.r[0] = this.msgId, o2.r[1] = { body: [], headerPacket: this.getInnerHeader() }), ![200, 406, 808, 810, 7101].includes(o2.code))
        return JSON.stringify(o2);
      if (this.packetLength > 0 && this.packetLength > this.unpack.length())
        throw new Error(`UnpackException packetLength(${this.packetLength}) greater than bufferLength(${this.unpack.length()})`);
      var a2 = [];
      return t2 && t2.forEach((t3) => {
        if (!this.unpack.checkBufferBoundaryAccess())
          switch (t3.type) {
            case "PropertyArray":
              a2.push(this.unmarshalPropertyArray());
              break;
            case "Property":
              a2.push(this.unmarshalProperty());
              break;
            case "Byte":
              a2.push(this.unpack.popByte());
              break;
            case "Int":
              a2.push(this.unpack.popInt());
              break;
            case "Bool":
              a2.push(this.unpack.popBoolean());
              break;
            case "Long":
              a2.push(this.unmarshalLong());
              break;
            case "LongArray":
              a2.push(this.unmarshalLongArray());
              break;
            case "String":
              a2.push(this.unpack.popString());
              break;
            case "StrArray":
              a2.push(this.unmarshalStrArray());
              break;
            case "StrStrMap":
              a2.push(this.unmarshalStrStrMap());
              break;
            case "StrLongMap":
              a2.push(this.unmarshalStrLongMap());
              break;
            case "LongLongMap":
              a2.push(this.unmarshalLongLongMap());
              break;
            case "KVArray":
              a2.push(this.unmarshalKVArray());
          }
      }), this.innerHeader ? o2.r[1].body = a2 : o2.r = a2, JSON.stringify(o2);
    }
  }
  PacketDecoder.RES_CODE = 2;
  class Pack {
    constructor() {
      this.offset = 0, this.pageSize = 1024, this.capacity = 1048576, this.buffer = new Uint8Array(this.pageSize), this.view = new DataView(this.buffer.buffer);
    }
    reset() {
      this.offset = 0, this.buffer = null, this.view = null;
    }
    size() {
      return this.offset;
    }
    getBuffer() {
      return this.buffer.slice(0, this.offset).buffer;
    }
    ensureCapacity(t2) {
      var o2 = this.offset + t2;
      if (o2 > this.capacity)
        throw new Error("PackException over limit");
      if (o2 > this.buffer.byteLength) {
        var a2 = Math.ceil(o2 / this.pageSize) * this.pageSize, m2 = new Uint8Array(a2);
        m2.set(this.buffer), this.buffer = m2, this.view = new DataView(this.buffer.buffer);
      }
    }
    putRaw(t2) {
      this.ensureCapacity(t2.length);
      try {
        this.buffer.set(t2, this.offset), this.offset += t2.length;
      } catch (t3) {
        throw new Error("PackException raw");
      }
    }
    putByte(t2) {
      this.ensureCapacity(1);
      try {
        this.view.setUint8(this.offset++, t2);
      } catch (t3) {
        throw new Error("PackException byte");
      }
    }
    putString(t2) {
      try {
        var o2 = function encodeText(t3) {
          if ("function" == typeof TextEncoder)
            return new TextEncoder().encode(t3);
          var o3 = function textEncoder(t4) {
            for (var o4 = [], a2 = t4.length, m2 = 0; m2 < a2; ) {
              var u2 = t4.codePointAt(m2), h2 = 0, g2 = 0;
              for (u2 <= 127 ? (h2 = 0, g2 = 0) : u2 <= 2047 ? (h2 = 6, g2 = 192) : u2 <= 65535 ? (h2 = 12, g2 = 224) : u2 <= 2097151 && (h2 = 18, g2 = 240), o4.push(g2 | u2 >> h2), h2 -= 6; h2 >= 0; )
                o4.push(128 | u2 >> h2 & 63), h2 -= 6;
              m2 += u2 >= 65536 ? 2 : 1;
            }
            return o4;
          }(t3);
          return new Uint8Array(o3);
        }(t2);
        this.putVarbin(o2);
      } catch (t3) {
        throw new Error("PackException string");
      }
    }
    putInt(t2) {
      this.ensureCapacity(4);
      try {
        this.view.setInt32(this.offset, t2, true), this.offset += 4;
      } catch (t3) {
        throw new Error("PackException int");
      }
    }
    putVarInt(t2) {
      var o2 = varintToBytes(t2);
      this.putRaw(o2);
    }
    putBoolean(t2) {
      this.ensureCapacity(1);
      try {
        this.view.setUint8(this.offset++, t2 ? 1 : 0);
      } catch (t3) {
        throw new Error("PackException boolean");
      }
    }
    putLong(t2) {
      this.ensureCapacity(8);
      try {
        var o2 = function setBigUint64(t3, o3 = false) {
          var a2 = new Uint8Array(8), m2 = new DataView(a2.buffer), u2 = Number(t3 > Ye - 1 ? t3 / Ye : 0), h2 = Number(4294967295 & t3), [g2, I2] = o3 ? [4, 0] : [0, 4];
          return m2.setUint32(g2, u2, o3), m2.setUint32(I2, h2, o3), a2;
        }(t2, true);
        this.buffer.set(o2, this.offset), this.offset += 8;
      } catch (t3) {
        throw new Error("PackException long");
      }
    }
    putStringAsLong(t2) {
      this.ensureCapacity(8);
      try {
        var o2 = function setBigUint64ForNumberOverflow(t3, o3 = false) {
          var a2 = new Uint8Array(8), m2 = new DataView(a2.buffer), u2 = BigNumber(t3).divide(Ye).number.reverse().join(""), h2 = BigNumber(t3).mod(Ye).number.reverse().join(""), g2 = Number(u2), I2 = Number(h2), [_2, E2] = o3 ? [4, 0] : [0, 4];
          return m2.setUint32(_2, g2, o3), m2.setUint32(E2, I2, o3), a2;
        }(t2, true);
        this.buffer.set(o2, this.offset), this.offset += 8;
      } catch (t3) {
        throw new Error("PackException stringAsLong");
      }
    }
    putShort(t2) {
      this.ensureCapacity(2);
      try {
        this.view.setInt16(this.offset, t2, true), this.offset += 2;
      } catch (t3) {
        throw new Error("PackException short");
      }
    }
    putVarbin(t2) {
      if (!t2)
        return this.ensureCapacity(1), this.putVarInt(0);
      if (t2.byteLength > Math.pow(2, 31) - 2)
        throw new Error("PackException varbin. too long");
      var o2 = varintToBytes(t2.length);
      this.ensureCapacity(o2.length + t2.length);
      try {
        this.buffer.set(o2, this.offset), this.offset += o2.length, this.buffer.set(t2, this.offset), this.offset += t2.length;
      } catch (t3) {
        throw new Error("PackException varbin");
      }
    }
  }
  function isConvertibleToNumber(t2) {
    if ("number" != typeof t2) {
      if (null == t2)
        return false;
      t2 = Number(t2);
    }
    if (isNaN(t2))
      throw new Error("Number type conversion error");
    return true;
  }
  function isUndefinedOrNull(t2) {
    return null == t2;
  }
  class PacketEncoder {
    constructor(t2, o2, a2) {
      this.pack = new Pack(), this.packetLength = 0, this.serviceId = 0, this.commandId = 0, this.serialId = 0, this.tag = 0, this.serviceId = t2, this.commandId = o2, this.serialId = a2;
    }
    marshalHeader() {
      this.pack.putVarInt(this.packetLength), this.pack.putByte(this.serviceId), this.pack.putByte(this.commandId), this.pack.putShort(this.serialId), this.pack.putByte(this.tag);
    }
    marshalProperty(t2) {
      var o2 = Object.keys(t2).filter((t3) => !isUndefinedOrNull(t3));
      this.pack.putVarInt(o2.length), o2.forEach((o3) => {
        this.pack.putVarInt(Number(o3)), Array.isArray(t2[o3]) || "[object Object]" === Object.prototype.toString.call(t2[o3]) ? this.pack.putString(JSON.stringify(t2[o3])) : this.pack.putString(String(t2[o3]));
      });
    }
    marshalPropertyArray(t2) {
      var o2 = t2.length;
      this.pack.putVarInt(o2), t2.forEach((t3) => {
        this.marshalProperty(null == t3 ? void 0 : t3.v);
      });
    }
    marshalStrArray(t2) {
      var o2 = t2.filter((t3) => !isUndefinedOrNull(t3)), a2 = o2.length;
      this.pack.putVarInt(a2), o2.forEach((t3) => {
        this.pack.putString(String(t3));
      });
    }
    marshalLongArray(t2) {
      var o2 = t2.filter((t3) => isConvertibleToNumber(t3)), a2 = o2.length;
      this.pack.putVarInt(a2), o2.forEach((t3) => {
        this.putLong(t3);
      });
    }
    marshalStrStrMap(t2) {
      var o2 = Object.keys(t2).filter((o3) => !isUndefinedOrNull(t2[o3]) && !isUndefinedOrNull(o3));
      this.pack.putVarInt(o2.length), o2.forEach((o3) => {
        this.pack.putString(String(o3)), this.pack.putString(String(t2[o3]));
      });
    }
    marshalStrLongMap(t2) {
      var o2 = Object.keys(t2).filter((o3) => isConvertibleToNumber(t2[o3]) && !isUndefinedOrNull(o3));
      this.pack.putVarInt(o2.length), o2.forEach((o3) => {
        this.pack.putString(String(o3)), this.putLong(t2[o3]);
      });
    }
    marshalLongLongMap(t2) {
      var o2 = Object.keys(t2).filter((o3) => {
        var a2 = Number(o3);
        return isConvertibleToNumber(a2) && isConvertibleToNumber(t2[a2]);
      });
      this.pack.putVarInt(o2.length), o2.forEach((o3) => {
        var a2 = Number(o3);
        this.putLong(a2), this.putLong(t2[a2]);
      });
    }
    marshalKVArray(t2) {
      var o2 = t2.length;
      this.pack.putVarInt(o2), t2.forEach((t3) => {
        this.marshalStrStrMap(t3);
      });
    }
    putLong(t2) {
      "string" == typeof t2 && t2.length > 15 ? this.pack.putStringAsLong(t2) : this.pack.putLong(Number(t2));
    }
    marshal(t2, o2) {
      return this.marshalHeader(), o2 && o2.forEach((o3, a2) => {
        var m2, u2 = o3.type, h2 = null === (m2 = t2[a2]) || void 0 === m2 ? void 0 : m2.v;
        if (!isUndefinedOrNull(h2))
          switch (u2) {
            case "PropertyArray":
              this.marshalPropertyArray(h2);
              break;
            case "Property":
              this.marshalProperty(h2);
              break;
            case "Byte":
              if (!isConvertibleToNumber(h2))
                return;
              this.pack.putByte(Number(h2));
              break;
            case "Int":
              if (!isConvertibleToNumber(h2))
                return;
              this.pack.putInt(Number(h2));
              break;
            case "Bool":
              "false" === h2 ? h2 = false : "true" === h2 && (h2 = true), this.pack.putBoolean(h2);
              break;
            case "Long":
              if (!isConvertibleToNumber(h2))
                return;
              this.putLong(h2);
              break;
            case "LongArray":
              this.marshalLongArray(h2);
              break;
            case "String":
              this.pack.putString(String(h2));
              break;
            case "StrArray":
              this.marshalStrArray(h2);
              break;
            case "StrStrMap":
              this.marshalStrStrMap(h2);
              break;
            case "StrLongMap":
              this.marshalStrLongMap(h2);
              break;
            case "LongLongMap":
              this.marshalLongLongMap(h2);
              break;
            case "KVArray":
              this.marshalKVArray(h2);
          }
      }), this.pack.getBuffer();
    }
    reset() {
      this.pack.reset();
    }
  }
  class BaseWebsocket$1 extends ce {
    constructor(t2, o2, a2) {
      super(), this.websocket = null, this.socketConnectTimer = 0, this.linkSSL = true, this.url = "", this.core = t2, this.url = o2, this.linkSSL = a2, this.status = "disconnected", this.logger = t2.logger, this.connect();
    }
    connect() {
      "connecting" !== this.status && "connected" !== this.status ? (this.status = "connecting", this._createWebsocket(`${this.linkSSL ? "wss" : "ws"}://${this.url}/websocket`)) : this.logger.warn("imsocket::socket is connecting or connected", this.status);
    }
    close() {
      if (this.status = "disconnected", this.websocket) {
        this.logger.log("imsocket:: close websocket");
        try {
          this.websocket.close();
        } catch (t2) {
          this.logger.warn("imsocket::attempt to close websocket error", t2);
        }
        this.clean(), this.emit("disconnect");
      }
    }
    clean() {
      this.status = "disconnected", clearTimeout(this.socketConnectTimer), this.websocket && (this.socketUrl = void 0, this.websocket.onmessage = null, this.websocket.onopen = null, this.websocket.onerror = null, this.websocket.onclose = null, this.websocket = null);
    }
    onConnect() {
      this.status = "connected", this.emit("connect"), clearTimeout(this.socketConnectTimer);
    }
    _createWebsocket(t2) {
      this.socketConnectTimer = setTimeout(() => {
        this.logger.error("imsocket::Websocket connect timeout. url: ", t2), this.emit("connectFailed", new V2NIMErrorImpl({ code: "v2" === get(this.core, "options.apiVersion") ? me.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : 415, detail: { reason: `imsocket::Websocket connect timeout. url: ${t2}` } }));
      }, this.core.options.socketConnectTimeout || 8e3), this.socketUrl = t2, this.websocket = new Ie.WebSocket(t2), this.websocket.binaryType = "arraybuffer", this.websocket.onmessage = this.onMessage.bind(this), this.websocket.onclose = (t3) => {
        t3 = t3 || {}, this.logger.log(`imsocket::Websocket onclose done ${t3.wasClean}/${t3.code}/${t3.reason}`), "connected" === this.status ? (this.clean(), this.emit("disconnect")) : (this.clean(), this.emit("connectFailed", new V2NIMErrorImpl({ code: "v2" === get(this.core, "options.apiVersion") ? me.V2NIM_ERROR_CODE_CONNECT_FAILED : 414, detail: { reason: "imsocket::Websocket onclose done" } })));
      }, this.websocket.onerror = (t3) => {
        this.logger.error("imsocket::Websocket onerror", t3), "connected" === this.status ? (this.clean(), this.emit("disconnect")) : (this.clean(), this.emit("connectFailed", new V2NIMErrorImpl({ code: "v2" === get(this.core, "options.apiVersion") ? me.V2NIM_ERROR_CODE_CONNECT_FAILED : 414, detail: { reason: "imsocket::Websocket onerror." } })));
      }, this.websocket.onopen = () => {
        this.onConnect();
      };
    }
    onMessage(t2) {
      if (t2.data) {
        var o2 = new PacketDecoder(t2.data), a2 = { sid: -1, cid: -1, ser: -1, packetLength: -1 }, m2 = null;
        try {
          o2.unmarshalHeader(), a2 = o2.getHeader(), m2 = o2.getInnerHeader();
        } catch (o3) {
          this.reportBinaryError({ err: o3, sid: m2 ? m2.sid : null == a2 ? void 0 : a2.sid, cid: m2 ? m2.cid : null == a2 ? void 0 : a2.cid, rawBuf: t2.data, type: "decode" });
        }
        var u2 = m2 ? m2.sid : a2.sid, h2 = m2 ? m2.cid : a2.cid, g2 = `${u2}_${h2}`, I2 = we[g2];
        if (I2 && I2.length > 0) {
          var _2, E2 = I2[0].config;
          try {
            _2 = o2.unmarshal(E2.response);
          } catch (m3) {
            var M2 = o2.getBodyDetail();
            this.reportBinaryError({ err: m3, rawBuf: t2.data, sid: u2, cid: h2, parseDetail: M2, type: "decode" }), o2.reset();
            var T2 = Object.assign(Object.assign({}, a2), { sid: u2, cid: h2, code: me.V2NIM_ERROR_CODE_UNPACK_ERROR });
            return this.logger.error(`imsocket::onMessage "${T2.sid}_${T2.cid}", ser ${T2.ser}, packetLength ${T2.packetLength} unmarshal error. ${M2} 
`, m3), void this.emit("message", JSON.stringify(T2));
          }
          this.emit("message", _2);
        } else
          this.core.logger.warn("imsocket::onMessage cmd not found", g2);
        o2.reset();
      }
    }
    send(t2, o2, a2, m2, u2) {
      var h2, g2, I2 = new PacketEncoder(t2, o2, a2), _2 = Le[m2], E2 = "";
      try {
        E2 = JSON.stringify(u2), g2 = I2.marshal(JSON.parse(E2), _2.params);
      } catch (m3) {
        throw this.reportBinaryError({ err: m3, sid: t2, cid: o2, rawStr: E2, type: "encode" }), I2.reset(), new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_PACK_ERROR, detail: { reason: `${t2}-${o2}, ser ${a2} marshal error`, rawError: m3 } });
      }
      null === (h2 = this.websocket) || void 0 === h2 || h2.send(g2), I2.reset();
    }
    reportBinaryError(t2) {
      var o2, a2, m2, { err: u2, rawStr: h2, sid: g2, cid: I2, type: _2, parseDetail: E2 } = t2, M2 = t2.rawBuf;
      if (M2) {
        try {
          m2 = function arrayBufferToBase64(t3) {
            if ("function" != typeof btoa)
              return "";
            for (var o3 = "", a3 = new Uint8Array(t3), m3 = a3.byteLength, u3 = 0; u3 < m3; u3++)
              o3 += String.fromCharCode(a3[u3]);
            return a3 = null, btoa(o3);
          }(M2);
        } catch (t3) {
          m2 = `reportBinaryError::arrayBufferToBase64 parsing failed, error: ${null == t3 ? void 0 : t3.message}, sid: ${g2}, cid: ${I2}`, this.core.logger.error(m2);
        }
        M2 = null;
      }
      this.core.reporter.reportTraceStart("exceptions", { user_id: null === (o2 = this.core.auth) || void 0 === o2 ? void 0 : o2.account, trace_id: null === (a2 = this.core.clientSocket.socket) || void 0 === a2 ? void 0 : a2.sessionId, start_time: Date.now(), action: 2, exception_service: 9 });
      var T2 = u2 ? (`${u2.message};;;` || `${u2.code};;;`) + (E2 ? `parseDetail: ${E2};;;` : "") + (h2 ? ` rawStr: ${h2}` : "") + (m2 ? ` rawBuf: ${m2}` : "") : "";
      this.core.reporter.reportTraceUpdateV2("exceptions", { code: "encode" === _2 ? me.V2NIM_ERROR_CODE_PACK_ERROR : me.V2NIM_ERROR_CODE_UNPACK_ERROR, description: T2, operation_type: "encode" === _2 ? 3 : 4, target: `${g2}-${I2}` }, { asyncParams: Ie.net.getNetworkStatus() }), this.core.reporter.reportTraceEnd("exceptions", 1);
    }
  }
  !function(t2) {
    t2[t2.ACTIVE = 1] = "ACTIVE", t2[t2.KICKED = 2] = "KICKED", t2[t2.OFFLINE = 3] = "OFFLINE";
  }(He || (He = {}));
  class V2BinaryClientSocket {
    constructor(t2) {
      this.isReconnect = false, this.packetTimeout = 8e3, this.linkSSL = true, this.packetSer = 1, this.backoff = new $e({ max: 8e3, min: 1600, jitter: 0.01 }), this.sendingCmdMap = /* @__PURE__ */ new Map(), this.pingTimer = 0, this.hasNetworkListener = false, this.core = t2, this.auth = t2.auth, this.logger = t2.logger, this.reporter = t2.reporter, this.timerManager = t2.timerManager, this.eventBus = t2.eventBus, this.setListener();
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.isReconnect = true;
      });
    }
    setSessionId(t2) {
      this.socket && (this.socket.sessionId = t2);
    }
    setLinkSSL(t2) {
      this.linkSSL = t2;
    }
    connect(t2, o2 = false) {
      var a2, m2;
      return __awaiter$2(this, void 0, void 0, function* () {
        this.isReconnect = o2;
        var u2 = this.core.auth.getConnectStatus();
        if (1 === u2) {
          var h2 = `clientSocket::connect status is ${u2}, and would not repeat connect`, g2 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: h2 } });
          return this.logger.warn(h2), Promise.reject(g2);
        }
        this.auth.lifeCycle.processEvent("connect");
        try {
          yield this.auth.doLoginStepsManager.add(this.doConnect(t2)), this.logger.log(`clientSocketV2:: connect success with link url: ${t2}, isReconnect: ${o2}`), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t2, code: 200, mixlink: true, succeed: true }, { asyncParams: Ie.net.getNetworkStatus() }), this.auth.lifeCycle.processEvent("connectSucc");
        } catch (o3) {
          var I2 = o3;
          if (this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t2, code: I2.code || 0, description: `connectFailed:${I2.message}`, mixlink: true, succeed: false }, { asyncParams: Ie.net.getNetworkStatus() }), I2.code === me.V2NIM_ERROR_CODE_CANCELLED || I2.code === me.V2NIM_ERROR_CODE_TIMEOUT)
            throw null === (a2 = this.socket) || void 0 === a2 || a2.close(), null === (m2 = this.socket) || void 0 === m2 || m2.removeAllListeners(), this.socket = void 0, o3;
          throw this.logger.warn(`clientSocketV2::connect failed with link url: ${t2}`, I2), this.auth.lifeCycle.processEvent("connectFail", I2), o3;
        }
      });
    }
    doConnect(t2) {
      var o2 = false;
      return new Promise((a2, m2) => {
        this.socket = new BaseWebsocket$1(this.core, t2, this.linkSSL), this.socket.on("connect", () => {
          this.logger.log("clientSocketV2::socket on connect", t2), this.core.reporterHookLinkKeep.start(), this.core.reporterHookLinkKeep.update({ code: 0, description: "connection begin", operation_type: 0, target: t2 }), o2 = true, a2();
        }), this.socket.on("message", this.onMessage.bind(this)), this.socket.on("disconnect", (a3) => __awaiter$2(this, void 0, void 0, function* () {
          o2 = true, this.logger.log(`clientSocketV2::socket on disconnect ${t2}`, a3), yield this.core.reporterHookLinkKeep.update({ code: (null == a3 ? void 0 : a3.code) || 0, description: (null == a3 ? void 0 : a3.reason) || "socket on disconnect", operation_type: 1, target: t2 }), this.core.reporterHookLinkKeep.end(false), this.doDisconnect(He.OFFLINE, "SocketOnDisconnect");
        })), this.socket.on("connectFailed", (a3) => {
          o2 ? this.ping() : (this.logger.error(`clientSocketV2::connectFailed:${t2}, reason:${a3 && a3.message}`), this.cleanSocket()), o2 = true, m2(a3);
        });
      });
    }
    cleanSocket() {
      this.socket && ("function" == typeof this.socket.removeAllListeners && this.socket.removeAllListeners(), "function" == typeof this.socket.close && this.socket.close(), this.socket = void 0);
    }
    resetSocketConfig() {
      this.backoff.reset(), this.initOnlineListener();
    }
    doDisconnect(t2, o2) {
      if (this.logger.log(`clientSocketV2::doDisconnect: type ${t2}, reason `, o2), 0 !== this.core.auth.getConnectStatus()) {
        var a2 = { 1: "close", 2: "kicked", 3: "broken" }[t2] || "";
        this.markAllCmdInvaild(new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "Packet timeout due to instance disconnect", disconnect_reason: a2 } })), this.timerManager.destroy(), clearTimeout(this.pingTimer), this.cleanSocket(), t2 === He.ACTIVE || t2 === He.KICKED ? this.destroyOnlineListener() : t2 === He.OFFLINE && (this.auth.lifeCycle.processEvent("connectionBroken", new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "connection broken due to internal reasons" } })), this.logger.log(`clientSocketV2::doDisconnect: pending reconnect ${this.isReconnect}`), this.isReconnect && this.auth.lifeCycle.processEvent("waiting"));
      } else
        this.logger.warn("clientSocketV2::doDisconnect: already disconnected");
    }
    sendCmd(t2, o2, a2) {
      var m2 = this.core.auth.getLoginStatus(), u2 = { cmd: t2 };
      if (1 !== m2 && !["v2Login", "login", "chatroomLogin", "v2ChatroomLogin"].includes(t2))
        return this.logger.warn(`clientSocketV2::NIM login status is ${m2}, so can not sendCmd ${t2}`), Promise.reject(new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: Object.assign({ reason: "Can not sendCmd due to no logined" }, u2) }));
      var h2 = "heartbeat" !== t2, g2 = h2 ? this.packetSer++ : 0, I2 = createCmd(t2, g2, this.logger, o2);
      if (!I2) {
        var _2 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_INTERNAL, detail: Object.assign(Object.assign({}, u2), { reason: `SendCmd::createCmd error: ${g2} ${t2}` }) });
        return this.logger.error(_2), Promise.reject(_2);
      }
      var { packet: E2, hasPacketResponse: M2, hasPacketTimer: T2 } = I2, S2 = JSON.stringify(E2);
      h2 && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::sendCmd: ${E2.SID}_${E2.CID},${t2},ser:${g2}`, S2) : this.logger.log(`clientSocketV2::sendCmd: ${E2.SID}_${E2.CID},${t2},ser:${g2}`));
      var C2 = (/* @__PURE__ */ new Date()).getTime();
      return new Promise((m3, h3) => {
        M2 && this.sendingCmdMap.set(g2, { cmd: t2, params: o2, callback: [m3, h3], timer: T2 ? setTimeout(() => {
          var o3 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, detail: Object.assign({ ser: g2, reason: `Packet Timeout: ser ${g2} cmd ${t2}`, timetag: (/* @__PURE__ */ new Date()).getTime() }, u2) });
          this.markCmdInvalid(g2, o3, t2);
        }, a2 && a2.timeout ? a2.timeout : this.packetTimeout) : null });
        try {
          this.socket.send(E2.SID, E2.CID, g2, t2, E2.Q), M2 || m3(E2);
        } catch (o3) {
          var I3 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED, detail: Object.assign({ ser: g2, reason: "Unable to send packet" + (o3 && o3.message ? ": " + o3.message : ""), timetag: (/* @__PURE__ */ new Date()).getTime(), rawError: o3 }, u2) });
          this.markCmdInvalid(g2, I3, t2), h3(I3);
        }
      }).catch((t3) => __awaiter$2(this, void 0, void 0, function* () {
        var o3 = t3;
        return [me.V2NIM_ERROR_CODE_DISCONNECT, me.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, me.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED].includes(o3.code) ? (this.reportSendCmdFailed(o3, { sid: E2.SID, cid: E2.CID, ser: g2 }, C2), Promise.reject(o3)) : Promise.reject(o3);
      }));
    }
    reportSendCmdFailed(t2, o2, a2) {
      var m2;
      this.reporter.reportTraceStart("exceptions", { user_id: this.core.auth.getLoginUser(), trace_id: null === (m2 = this.socket) || void 0 === m2 ? void 0 : m2.sessionId, start_time: a2, action: 2, exception_service: 6 });
      var u2 = get(t2, "detail.disconnect_reason") || "", h2 = t2.code === me.V2NIM_ERROR_CODE_DISCONNECT ? JSON.stringify({ disconnect_reason: u2 }) : t2.detail.reason;
      this.reporter.reportTraceUpdateV2("exceptions", { code: t2.code, description: h2, operation_type: 1, target: `${o2.sid}-${o2.cid}`, context: `${o2.ser}` }, { asyncParams: Ie.net.getNetworkStatus() }), this.reporter.reportTraceEnd("exceptions", 1);
    }
    onMessage(t2) {
      var o2 = parseCmd(t2, this.logger);
      if (o2) {
        var a2 = o2[0], m2 = a2.raw.ser;
        for (var u2 of ("heartbeat" !== a2.cmd && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::recvCmd ${a2.raw.sid}_${a2.raw.cid},${a2.cmd},ser:${m2}`, t2) : this.logger.log(`clientSocketV2::recvCmd ${a2.raw.sid}_${a2.raw.cid},${a2.cmd},ser:${m2},code:${a2.raw.code}`)), o2)) {
          if (u2.error && this.logger.error("clientSocketV2::onMessage packet error", `${u2.raw.sid}_${u2.raw.cid}, ser:${m2},`, u2.error), u2.notFound)
            return void this.logger.warn("clientSocketV2::onMessage packet not found", `${u2.raw.sid}_${u2.raw.cid}, ser:${m2}`);
          this.packetHandler(u2);
        }
      }
    }
    packetHandler(t2) {
      var o2, a2, m2, u2;
      if (t2) {
        var h2 = t2.raw.ser, g2 = this.sendingCmdMap.get(h2);
        if (g2 && g2.cmd === t2.cmd) {
          var { callback: I2, timer: _2, params: E2 } = g2;
          if (clearTimeout(_2), t2.params = E2, this.sendingCmdMap.delete(h2), "heartbeat" === t2.cmd)
            return void I2[0]();
          var M2 = null === (a2 = null === (o2 = this.core[t2.service]) || void 0 === o2 ? void 0 : o2.process) || void 0 === a2 ? void 0 : a2.call(o2, t2);
          M2 && "function" == typeof M2.then ? M2.then((t3) => {
            I2[0](t3);
          }).catch((t3) => {
            I2[1](t3);
          }) : (this.logger.log("clientSocketV2::handlerFn without promise", t2.service, t2.cmd), I2[0](t2));
        } else {
          var T2 = null === (u2 = null === (m2 = this.core[t2.service]) || void 0 === m2 ? void 0 : m2.process) || void 0 === u2 ? void 0 : u2.call(m2, t2);
          T2 && "function" == typeof T2.then && T2.catch((t3) => {
            this.logger.error("clientSocketV2::no obj cache, no process handler", t3);
          });
        }
      }
    }
    markCmdInvalid(t2, o2, a2) {
      var m2 = this.sendingCmdMap.get(t2);
      if (m2) {
        var { callback: u2, timer: h2 } = m2;
        h2 && clearTimeout(h2), this.sendingCmdMap.delete(t2), this.logger.warn(`clientSocketV2::packet ${t2}, ${a2} is invalid:`, o2), u2[1](o2);
      }
    }
    markAllCmdInvaild(t2) {
      this.logger.log("markAllCmdInvaild", t2), this.sendingCmdMap.forEach((o2) => {
        var { callback: a2, timer: m2, cmd: u2 } = o2;
        this.logger.log(`clientSocketV2::markAllCmdInvaild:cmd ${u2}`), m2 && clearTimeout(m2), a2[1](t2);
      }), this.sendingCmdMap.clear();
    }
    ping() {
      var t2;
      return __awaiter$2(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        try {
          yield this.sendCmd("heartbeat");
        } catch (o2) {
          if (o2.code === me.V2NIM_ERROR_CODE_DISCONNECT)
            return;
          if (yield this.testHeartBeat5Timeout())
            return yield this.core.reporterHookLinkKeep.update({ code: 0, description: "Heartbeat-discovered link failure", operation_type: 1, target: null === (t2 = this.socket) || void 0 === t2 ? void 0 : t2.url }), this.core.reporterHookLinkKeep.end(true), void this.doDisconnect(He.OFFLINE, "PingError");
        }
        this.pingTimer = setTimeout(() => {
          this.ping();
        }, 3e4);
      });
    }
    testHeartBeat5Timeout() {
      return __awaiter$2(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        for (var t2 = 0; t2 < 5; t2++)
          try {
            return yield this.sendCmd("heartbeat", {}, { timeout: 3e3 }), false;
          } catch (o2) {
            this.logger.log(`clientSocketV2::test heartbeat ${t2} Timeout`);
          }
        return true;
      });
    }
    initOnlineListener() {
      this.hasNetworkListener || (this.logger.log("clientSocketV2::onlineListener:init"), this.hasNetworkListener = true, Ie.net.onNetworkStatusChange((t2) => {
        this.logger.log("clientSocketV2::onlineListener:network change", t2);
        var o2 = this.auth.getConnectStatus(), a2 = this.auth.getLoginStatus();
        t2.isConnected && 1 === a2 ? this.ping() : t2.isConnected && 3 === o2 ? (this.logger.log("clientSocketV2::onlineListener:online and connectStatus is waiting, do reLogin"), this.auth.reconnect.clearReconnectTimer(), this.auth.reconnect.doReLogin()) : t2.isConnected || this.doDisconnect(He.OFFLINE, "OfflineListener");
      }));
    }
    destroyOnlineListener() {
      this.logger.log("clientSocketV2::onlineListener:destroy"), this.hasNetworkListener = false;
    }
  }
  var ze, Ke = ["disconnect", "connect", "heartbeat", "message", "json", "event", "ack", "error", "noop"], We = ["transport not supported", "client not handshaken", "unauthorized"], Je = ["reconnect"];
  class BaseWebsocket extends ce {
    constructor(t2, o2, a2) {
      super(), this.websocket = null, this.socketConnectTimer = 0, this.url = "", this.linkSSL = true, this.core = t2, this.url = o2, this.linkSSL = a2, this.status = "disconnected", this.logger = t2.logger, this.connect();
    }
    connect() {
      "connecting" !== this.status && "connected" !== this.status ? (this.status = "connecting", this.core.adapters.request(`${this.linkSSL ? "https" : "http"}://${this.url}/socket.io/1/?t=${Date.now()}`, { method: "GET", dataType: "text", timeout: this.core.options.xhrConnectTimeout || 8e3 }, { exception_service: 6 }).then((t2) => {
        if ("connecting" === this.status) {
          var [o2, a2] = t2.data.split(":");
          return this.sessionId = o2, this.logger.log(`imsocket::XHR success. status ${this.status}, ${"connecting" === this.status ? "continue websocket connection" : "stop websocket connection"}`), this._createWebsocket(`${this.linkSSL ? "wss" : "ws"}://${this.url}/socket.io/1/websocket/${o2}`);
        }
      }).catch((t2) => {
        if ("connecting" === this.status) {
          var o2 = `imsocket::XHR fail. raw message: "${(t2 = t2 || {}).message}", code: "${t2.code}"`, a2 = t2.code;
          a2 = "v2" === get(this.core, "options.apiVersion") ? t2.code === me.V2NIM_ERROR_CODE_CONNECT_TIMEOUT ? me.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : me.V2NIM_ERROR_CODE_CONNECT_FAILED : 408 === t2.code ? 408 : 415;
          var m2 = new V2NIMErrorImpl({ code: a2, detail: { reason: o2, rawError: t2 } });
          this.logger.error(o2), this.status = "disconnected", this.emit("handshakeFailed", m2);
        }
      })) : this.logger.warn("imsocket::socket is connecting or connected", this.status);
    }
    close() {
      if (this.status = "disconnected", this.websocket) {
        this.logger.log("imsocket:: close websocket");
        try {
          this.websocket.send(this.encodePacket({ type: "disconnect" }));
        } catch (t2) {
          this.logger.warn("imsocket::attempt to send encodePacket error", t2);
        }
        try {
          this.websocket.close();
        } catch (t2) {
          this.logger.warn("imsocket::attempt to close websocket error", t2);
        }
        this.clean(), this.emit("disconnect", { code: 0, reason: "Active close websocket" });
      }
    }
    clean() {
      this.status = "disconnected", clearTimeout(this.socketConnectTimer), this.websocket && (this.socketUrl = void 0, this.websocket.onmessage = null, this.websocket.onopen = null, this.websocket.onerror = null, this.websocket.onclose = null, this.websocket = null);
    }
    onConnect() {
      this.status = "connected", this.emit("connect"), clearTimeout(this.socketConnectTimer);
    }
    _createWebsocket(t2) {
      this.socketConnectTimer = setTimeout(() => {
        this.logger.error("imsocket::Websocket connect timeout. url: ", this.socketUrl), this.emit("handshakeFailed", new V2NIMErrorImpl({ code: "v2" === get(this.core, "options.apiVersion") ? me.V2NIM_ERROR_CODE_CONNECT_TIMEOUT : 415, detail: { reason: `imsocket::Websocket connect timeout. url: ${this.socketUrl}` } }));
      }, this.core.options.socketConnectTimeout || 8e3), this.socketUrl = t2, this.websocket = new Ie.WebSocket(t2), this.websocket.onmessage = this.onMessage.bind(this), this.websocket.onclose = (t3) => {
        t3 = t3 || {}, this.logger.log(`imsocket::Websocket onclose done ${t3.wasClean}/${t3.code}/${t3.reason}`), this.clean(), this.emit("disconnect", { code: t3.code || 0, reason: t3.reason });
      }, this.websocket.onerror = (t3) => {
        this.logger.error("imsocket::Websocket onerror", t3), "logined" === this.core.status && this.core.clientSocket.ping();
      };
    }
    onMessage(t2) {
      var o2, a2 = this.decodePacket(t2.data);
      if (a2)
        switch (a2.type) {
          case "connect":
            this.onConnect();
            break;
          case "disconnect":
            this.close(), this.emit("disconnect", { code: 0, reason: "MessageEvent type disconnect" });
            break;
          case "message":
          case "json":
            this.emit("message", a2.data);
            break;
          case "event":
            a2.name && this.emit(a2.name, a2.args);
            break;
          case "error":
            "unauthorized" === a2.reason ? this.emit("connect_failed", a2.reason) : this.emit("error", a2.reason), this.logger.error("imsocket::Websocket connect failed, onmessage type error. url: ", this.socketUrl), clearTimeout(this.socketConnectTimer), this.emit("handshakeFailed", new V2NIMErrorImpl({ code: "v2" === get(this.core, "options.apiVersion") ? me.V2NIM_ERROR_CODE_CONNECT_FAILED : 408, detail: { reason: `imsocket::Websocket connect failed, onMessage socket error. url: ${this.socketUrl}` } }));
            break;
          case "heartbeat":
            null === (o2 = this.websocket) || void 0 === o2 || o2.send(this.encodePacket({ type: "heartbeat" }));
            break;
          default:
            this.logger.warn("imsocket::Websocket no handler type", a2.type);
        }
    }
    encodePacket(t2) {
      var o2, a2, { type: m2, id: u2 = "", endpoint: h2 = "", ack: g2 } = t2, I2 = null;
      if (!m2)
        return "";
      switch (m2) {
        case "error":
          o2 = t2.reason ? We.indexOf(t2.reason) : "", a2 = t2.advice ? Je.indexOf(t2.advice) : "", "" === o2 && "" === a2 || (I2 = o2 + ("" !== a2 ? "+" + a2 : ""));
          break;
        case "message":
          "" !== t2.data && (I2 = t2.data);
          break;
        case "event":
          o2 = { name: t2.name }, o2 = t2.args && t2.args.length ? { name: t2.name, args: t2.args } : { name: t2.name }, I2 = JSON.stringify(o2);
          break;
        case "json":
          I2 = JSON.stringify(t2.data);
          break;
        case "connect":
          t2.qs && (I2 = t2.qs);
          break;
        case "ack":
          I2 = t2.ackId + (t2.args && t2.args.length ? "+" + JSON.stringify(t2.args) : "");
      }
      var _2 = [Ke.indexOf(m2), u2 + ("data" === g2 ? "+" : ""), h2];
      return null != I2 && _2.push(I2), _2.join(":");
    }
    decodePacket(t2) {
      if (t2)
        if ("�" != t2.charAt(0)) {
          var o2 = t2.match(/([^:]+):([0-9]+)?(\+)?:([^:]+)?:?([\s\S]*)?/);
          if (o2) {
            var a2, [, m2, u2, h2, g2, I2] = o2, _2 = { type: Ke[+m2], endpoint: g2 };
            switch (u2 && (_2.id = u2, _2.ack = !h2 || "data"), _2.type) {
              case "error":
                a2 = I2.split("+"), _2.reason = We[+a2[0]] || "";
                break;
              case "message":
                _2.data = I2 || "";
                break;
              case "connect":
                _2.qs = I2 || "";
                break;
              case "event":
                try {
                  var E2 = JSON.parse(I2);
                  _2.name = E2.name, _2.args = E2.args;
                } catch (t3) {
                  this.logger.error("imsocket::parseData::type::event error", t3);
                }
                _2.args = _2.args || [];
                break;
              case "json":
                try {
                  _2.data = JSON.parse(I2);
                } catch (t3) {
                  this.logger.error("imsocket::parseData::type::json error", t3);
                }
                break;
              case "ack":
                if ((a2 = I2.match(/^([0-9]+)(\+)?(.*)/)) && (_2.ackId = a2[1], _2.args = [], a2[3]))
                  try {
                    _2.args = a2[3] ? JSON.parse(a2[3]) : [];
                  } catch (t3) {
                    this.logger.error("imsocket::parseData::type::ack error", t3);
                  }
            }
            return _2;
          }
        } else
          this.logger.error("imsocket::unrecognize dataStr", t2.slice(0, 20));
    }
    send(t2) {
      var o2, a2 = { data: t2, type: "message", endpoint: "" };
      null === (o2 = this.websocket) || void 0 === o2 || o2.send(this.encodePacket(a2));
    }
  }
  !function(t2) {
    t2[t2.ACTIVE = 1] = "ACTIVE", t2[t2.KICKED = 2] = "KICKED", t2[t2.OFFLINE = 3] = "OFFLINE";
  }(ze || (ze = {}));
  class V2ClientSocket {
    constructor(t2) {
      this.isReconnect = false, this.packetTimeout = 8e3, this.linkSSL = true, this.packetSer = 1, this.backoff = new $e({ max: 8e3, min: 1600, jitter: 0.01 }), this.sendingCmdMap = /* @__PURE__ */ new Map(), this.pingTimer = 0, this.hasNetworkListener = false, this.core = t2, this.auth = t2.auth, this.logger = t2.logger, this.reporter = t2.reporter, this.timerManager = t2.timerManager, this.eventBus = t2.eventBus, this.setListener();
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.isReconnect = true;
      });
    }
    setSessionId(t2) {
      this.socket && (this.socket.sessionId = t2);
    }
    setLinkSSL(t2) {
      this.linkSSL = t2;
    }
    connect(t2, o2 = false) {
      var a2, m2;
      return __awaiter$2(this, void 0, void 0, function* () {
        this.isReconnect = o2;
        var u2 = this.core.auth.getConnectStatus();
        if (1 === u2) {
          var h2 = `clientSocket::connect status is ${u2}, and would not repeat connect`, g2 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: h2 } });
          return this.logger.warn(h2), Promise.reject(g2);
        }
        this.auth.lifeCycle.processEvent("connect");
        try {
          yield this.auth.doLoginStepsManager.add(this.doConnect(t2)), this.logger.log(`clientSocketV2:: connect success with link url: ${t2}, isReconnect: ${o2}`), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t2, code: 200, mixlink: true, succeed: true }, { asyncParams: Ie.net.getNetworkStatus() }), this.auth.lifeCycle.processEvent("connectSucc");
        } catch (o3) {
          var I2 = o3;
          if (this.core.reporter.reportTraceUpdateV2("login", { operation_type: "TCP", target: t2, code: I2.code || 0, description: `connectFailed:${I2.message}`, mixlink: true, succeed: false }, { asyncParams: Ie.net.getNetworkStatus() }), I2.code === me.V2NIM_ERROR_CODE_CANCELLED || I2.code === me.V2NIM_ERROR_CODE_TIMEOUT)
            throw null === (a2 = this.socket) || void 0 === a2 || a2.close(), null === (m2 = this.socket) || void 0 === m2 || m2.removeAllListeners(), this.socket = void 0, o3;
          throw this.logger.warn(`clientSocketV2::connect failed with link url: ${t2}`, I2), this.auth.lifeCycle.processEvent("connectFail", I2), o3;
        }
      });
    }
    doConnect(t2) {
      var o2 = false;
      return new Promise((a2, m2) => {
        this.socket = new BaseWebsocket(this.core, t2, this.linkSSL), this.socket.on("connect", () => {
          this.logger.log("clientSocketV2::socket on connect", t2), this.core.reporterHookLinkKeep.start(), this.core.reporterHookLinkKeep.update({ code: 0, description: "connection begin", operation_type: 0, target: t2 }), o2 = true, a2();
        }), this.socket.on("message", this.onMessage.bind(this)), this.socket.on("disconnect", (a3) => __awaiter$2(this, void 0, void 0, function* () {
          o2 = true, this.logger.log("clientSocketV2::socket on disconnect", a3), yield this.core.reporterHookLinkKeep.update({ code: (null == a3 ? void 0 : a3.code) || 0, description: (null == a3 ? void 0 : a3.reason) || "socket on disconnect", operation_type: 1, target: t2 }), this.core.reporterHookLinkKeep.end(false), this.doDisconnect(ze.OFFLINE, "SocketOnDisconnect");
        })), this.socket.on("handshakeFailed", (t3) => {
          o2 ? this.ping() : (this.logger.error(`clientSocketV2::handshake failed: "${t3 && t3.message}"`), this.cleanSocket()), o2 = true, m2(t3);
        });
      });
    }
    cleanSocket() {
      this.socket && ("function" == typeof this.socket.removeAllListeners && this.socket.removeAllListeners(), "function" == typeof this.socket.close && this.socket.close(), this.socket = void 0);
    }
    resetSocketConfig() {
      this.backoff.reset(), this.initOnlineListener();
    }
    doDisconnect(t2, o2) {
      if (this.logger.log(`clientSocketV2::doDisconnect: type ${t2}, reason `, o2), 0 !== this.core.auth.getConnectStatus()) {
        var a2 = { 1: "close", 2: "kicked", 3: "broken" }[t2] || "";
        this.markAllCmdInvaild(new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "Packet timeout due to instance disconnect", disconnect_reason: a2 } })), this.timerManager.destroy(), clearTimeout(this.pingTimer), this.cleanSocket(), t2 === ze.ACTIVE || t2 === ze.KICKED ? this.destroyOnlineListener() : t2 === ze.OFFLINE && (this.auth.lifeCycle.processEvent("connectionBroken", new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "connection broken due to internal reasons" } })), this.logger.log(`clientSocketV2::doDisconnect: pending reconnect ${this.isReconnect}`), this.isReconnect && this.auth.lifeCycle.processEvent("waiting"));
      } else
        this.logger.warn("clientSocketV2::doDisconnect: already disconnected");
    }
    sendCmd(t2, o2, a2) {
      var m2 = this.core.auth.getLoginStatus(), u2 = { cmd: t2 };
      if (1 !== m2 && !["v2Login", "login", "chatroomLogin", "v2ChatroomLogin"].includes(t2))
        return this.logger.warn(`clientSocketV2::NIM login status is ${m2}, so can not sendCmd ${t2}`), Promise.reject(new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: Object.assign({ reason: "Can not sendCmd due to no logined" }, u2) }));
      var h2 = "heartbeat" !== t2, g2 = h2 ? this.packetSer++ : 0, I2 = createCmd(t2, g2, this.logger, o2);
      if (!I2) {
        var _2 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_INTERNAL, detail: Object.assign(Object.assign({}, u2), { reason: `SendCmd::createCmd error: ${g2} ${t2}` }) });
        return this.logger.error(_2), Promise.reject(_2);
      }
      var { packet: E2, hasPacketResponse: M2, hasPacketTimer: T2 } = I2, S2 = JSON.stringify(E2);
      h2 && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::sendCmd: ${E2.SID}_${E2.CID},${t2},ser:${g2}`, S2) : this.logger.log(`clientSocketV2::sendCmd: ${E2.SID}_${E2.CID},${t2},ser:${g2}`));
      var C2 = (/* @__PURE__ */ new Date()).getTime();
      return new Promise((m3, h3) => {
        M2 && this.sendingCmdMap.set(g2, { cmd: t2, params: o2, callback: [m3, h3], timer: T2 ? setTimeout(() => {
          var o3 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, detail: Object.assign({ ser: g2, reason: `Packet Timeout: ser ${g2} cmd ${t2}`, timetag: (/* @__PURE__ */ new Date()).getTime() }, u2) });
          this.markCmdInvalid(g2, o3, t2);
        }, a2 && a2.timeout ? a2.timeout : this.packetTimeout) : null });
        try {
          this.socket.send(S2), M2 || m3(E2);
        } catch (o3) {
          var I3 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED, detail: Object.assign({ ser: g2, reason: "Unable to send packet" + (o3 && o3.message ? ": " + o3.message : ""), timetag: (/* @__PURE__ */ new Date()).getTime(), rawError: o3 }, u2) });
          this.markCmdInvalid(g2, I3, t2), h3(I3);
        }
      }).catch((t3) => __awaiter$2(this, void 0, void 0, function* () {
        var o3, a3 = t3;
        if (![me.V2NIM_ERROR_CODE_DISCONNECT, me.V2NIM_ERROR_CODE_PROTOCOL_TIMEOUT, me.V2NIM_ERROR_CODE_PROTOCOL_SEND_FAILED].includes(a3.code))
          return Promise.reject(a3);
        this.reporter.reportTraceStart("exceptions", { user_id: this.core.auth.getLoginUser(), trace_id: null === (o3 = this.socket) || void 0 === o3 ? void 0 : o3.sessionId, start_time: C2, action: 2, exception_service: 6 });
        var m3 = get(a3, "detail.disconnect_reason") || "", u3 = a3.code === me.V2NIM_ERROR_CODE_DISCONNECT ? JSON.stringify({ disconnect_reason: m3 }) : a3.detail.reason;
        return this.reporter.reportTraceUpdateV2("exceptions", { code: a3.code, description: u3, operation_type: 1, target: `${E2.SID}-${E2.CID}`, context: `${E2.SER}` }, { asyncParams: Ie.net.getNetworkStatus() }), this.reporter.reportTraceEnd("exceptions", 1), Promise.reject(a3);
      }));
    }
    onMessage(t2) {
      var o2 = parseCmd(t2, this.logger);
      if (o2)
        for (var a2 of o2) {
          var m2 = a2.raw.ser;
          if (a2.error && this.logger.error("clientSocketV2::onMessage packet error", `${a2.raw.sid}_${a2.raw.cid}, ser:${m2},`, a2.error), a2.notFound)
            return void this.logger.warn("clientSocketV2::onMessage packet not found", `${a2.raw.sid}_${a2.raw.cid}, ser:${m2}`);
          "heartbeat" !== a2.cmd && (this.logger.getDebugMode() ? this.logger.debug(`clientSocketV2::recvCmd ${a2.raw.sid}_${a2.raw.cid},${a2.cmd},ser:${m2}`, a2.content) : this.logger.log(`clientSocketV2::recvCmd ${a2.raw.sid}_${a2.raw.cid},${a2.cmd},ser:${m2};code:${a2.raw.code}`)), this.packetHandler(a2);
        }
    }
    packetHandler(t2) {
      var o2, a2, m2, u2;
      if (t2) {
        var h2 = t2.raw.ser, g2 = this.sendingCmdMap.get(h2);
        if (g2 && g2.cmd === t2.cmd) {
          var { callback: I2, timer: _2, params: E2 } = g2;
          if (clearTimeout(_2), t2.params = E2, this.sendingCmdMap.delete(h2), "heartbeat" === t2.cmd)
            return void I2[0]();
          var M2 = null === (a2 = null === (o2 = this.core[t2.service]) || void 0 === o2 ? void 0 : o2.process) || void 0 === a2 ? void 0 : a2.call(o2, t2);
          M2 && "function" == typeof M2.then ? M2.then((t3) => {
            I2[0](t3);
          }).catch((t3) => {
            I2[1](t3);
          }) : (this.logger.log("clientSocketV2::handlerFn without promise", t2.service, t2.cmd), I2[0](t2));
        } else {
          var T2 = null === (u2 = null === (m2 = this.core[t2.service]) || void 0 === m2 ? void 0 : m2.process) || void 0 === u2 ? void 0 : u2.call(m2, t2);
          T2 && "function" == typeof T2.then && T2.catch((t3) => {
            this.logger.error("clientSocketV2::no obj cache, no process handler", t3);
          });
        }
      }
    }
    markCmdInvalid(t2, o2, a2) {
      var m2 = this.sendingCmdMap.get(t2);
      if (m2) {
        var { callback: u2, timer: h2 } = m2;
        h2 && clearTimeout(h2), this.sendingCmdMap.delete(t2), this.logger.warn(`clientSocketV2::packet ${t2}, ${a2} is invalid:`, o2), u2[1](o2);
      }
    }
    markAllCmdInvaild(t2) {
      this.logger.log("markAllCmdInvaild", t2), this.sendingCmdMap.forEach((o2) => {
        var { callback: a2, timer: m2, cmd: u2 } = o2;
        this.logger.log(`clientSocketV2::markAllCmdInvaild:cmd ${u2}`), m2 && clearTimeout(m2), a2[1](t2);
      }), this.sendingCmdMap.clear();
    }
    ping() {
      var t2;
      return __awaiter$2(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        try {
          yield this.sendCmd("heartbeat");
        } catch (o2) {
          if (o2.code === me.V2NIM_ERROR_CODE_DISCONNECT)
            return;
          if (yield this.testHeartBeat5Timeout())
            return yield this.core.reporterHookLinkKeep.update({ code: 0, description: "Heartbeat-discovered link failure", operation_type: 1, target: null === (t2 = this.socket) || void 0 === t2 ? void 0 : t2.url }), this.core.reporterHookLinkKeep.end(true), void this.doDisconnect(ze.OFFLINE, "PingError");
        }
        this.pingTimer = setTimeout(() => {
          this.ping();
        }, 3e4);
      });
    }
    testHeartBeat5Timeout() {
      return __awaiter$2(this, void 0, void 0, function* () {
        clearTimeout(this.pingTimer);
        for (var t2 = 0; t2 < 5; t2++)
          try {
            return yield this.sendCmd("heartbeat", {}, { timeout: 3e3 }), false;
          } catch (o2) {
            this.logger.log(`clientSocketV2::test heartbeat ${t2} Timeout`);
          }
        return true;
      });
    }
    initOnlineListener() {
      this.hasNetworkListener || (this.logger.log("clientSocketV2::onlineListener:init"), this.hasNetworkListener = true, Ie.net.onNetworkStatusChange((t2) => {
        this.logger.log("clientSocketV2::onlineListener:network change", t2);
        var o2 = this.auth.getConnectStatus(), a2 = this.auth.getLoginStatus();
        t2.isConnected && 1 === a2 ? this.ping() : t2.isConnected && 3 === o2 ? (this.logger.log("clientSocketV2::onlineListener:online and connectStatus is waiting, do reLogin"), this.auth.reconnect.clearReconnectTimer(), this.auth.reconnect.doReLogin()) : t2.isConnected || this.doDisconnect(ze.OFFLINE, "OfflineListener");
      }));
    }
    destroyOnlineListener() {
      this.logger.log("clientSocketV2::onlineListener:destroy"), this.hasNetworkListener = false;
    }
  }
  class V2NIMLoginReconnect {
    constructor(t2) {
      this.currenRetryCount = 0, this.backoff = new $e({ max: 8e3, min: 1600, jitter: 0.01 }), this.reconnectTimer = 0, this.core = t2, this.auth = t2.V2NIMLoginService;
    }
    reset() {
      this.currenRetryCount = 0, this.backoff.reset(), this.reconnectTimer && clearTimeout(this.reconnectTimer);
    }
    clearReconnectTimer() {
      this.reconnectTimer && clearTimeout(this.reconnectTimer);
    }
    attempToReLogin() {
      var t2 = this.backoff.duration();
      if ("function" == typeof this.reconnectDelayProvider)
        try {
          var o2 = this.reconnectDelayProvider(t2);
          "number" == typeof o2 && o2 >= 0 && (t2 = o2 >= 1e3 ? o2 : o2 + 200 + Math.ceil(300 * Math.random()));
        } catch (t3) {
          this.core.logger.error("reconnect::connectDelayProvider excute failed,", t3);
        }
      return this.currenRetryCount++, this.core.logger.log(`reconnect::reconnect timer is about to be set, delay ${t2} ms, current retry count is ${this.currenRetryCount}`), this.core.reporter.reportTraceStart("login", { user_id: this.auth.getLoginUser(), action: "auto_login", binary_websocket: this.auth.binaryWebsocket }), this.clearReconnectTimer(), this.reconnectTimer = setTimeout(() => {
        this.core.logger.log("reconnect::reconnect timer is now triggered");
        var t3 = this.auth.getConnectStatus();
        3 === t3 ? this.doReLogin() : this.core.logger.warn(`reconnect::reconnect timer is over because connect status now is ${t3}`);
      }, t2), true;
    }
    doReLogin() {
      this.auth.loginOption.forceMode = false, this.auth.originLoginPromise = this.auth.doLogin(true);
      var t2 = this.auth.previousLoginManager.add(this.auth.originLoginPromise);
      return t2.then(() => {
        this.core.reporter.reportTraceEnd("login", true);
      }).catch((t3) => {
        var o2 = t3;
        if (this.core.logger.warn("reconnect::try login but failed due to", o2), this.core.reporter.reportTraceEnd("login", false), this.auth.checkLoginTerminalCode(o2 && o2.code))
          return this.auth.clientSocket.doDisconnect(He.ACTIVE, "ReloginTerminated"), void this.auth.lifeCycle.processEvent("exited", o2);
        o2 && 399 === o2.code && this.auth.lbs.reset(), this.auth.lifeCycle.processEvent("waiting");
      }), t2;
    }
    _setReconnectDelayProvider(t2) {
      this.reconnectDelayProvider = t2;
    }
  }
  function uniq(t2) {
    t2 = t2 || [];
    for (var o2 = [], a2 = 0; a2 < t2.length; a2++)
      -1 === o2.indexOf(t2[a2]) && o2.push(t2[a2]);
    return o2;
  }
  class V2NIMLoginLbs {
    constructor(t2) {
      this.socketLinkUrls = [], this.timer = 0, this.failedCount = 0, this.core = t2, this.auth = t2.V2NIMLoginService;
    }
    getLbsInfos() {
      return __awaiter$2(this, void 0, void 0, function* () {
        if (this.socketLinkUrls.length > 0) {
          var t2 = this.socketLinkUrls.shift();
          return this.socketLinkUrls = [], this.core.logger.log("V2NIMLoginService::getLbsInfos:use cache link", t2), Promise.resolve(t2);
        }
        this.auth.lifeCycle.processEvent("addressing"), this.core.reporterHookLBS.start(this.core.account);
        var o2 = uniq(this.auth.config.lbsUrls);
        try {
          var a2 = yield this.ladderLoad(o2);
          if (200 !== a2.status || !a2.data)
            throw this.core.logger.error("V1NIMLoginService::getLbsInfos:error status", a2.status, a2), new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: `V2NIMLoginService::getLbsInfos failed, status ${a2.status}` } });
          this.success(a2);
        } catch (t3) {
          var m2 = t3;
          if (this.core.logger.error(`V2NIMLoginService::lbs getLbsInfos error, use default link: ${this.auth.config.linkUrl}. error:`, t3), this.reportForFail(o2[0], m2.code, m2.message), this.checkTerminator(m2.code))
            throw t3;
          this.socketLinkUrls = [this.auth.config.linkUrl];
        }
        return this.socketLinkUrls.shift();
      });
    }
    checkTerminator(t2) {
      return t2 === me.V2NIM_ERROR_CODE_CANCELLED || t2 === me.V2NIM_ERROR_CODE_TIMEOUT;
    }
    generateUrl(t2) {
      var o2 = t2.indexOf("?") > -1 ? "&" : "?";
      return t2 + o2 + "k=" + this.core.options.appkey + "&id=" + this.core.auth.getLoginUser() + "&sv=180&pv=1&networkType=0&lv=1";
    }
    requstLbs(t2) {
      return this.auth.doLoginStepsManager.add(this.core.adapters.request(this.generateUrl(t2), { method: "GET", dataType: "json", timeout: 8e3 }));
    }
    setLadderTimer(t2, o2, a2, m2) {
      this.timer && clearTimeout(this.timer);
      var u2 = t2[o2];
      this.timer = setTimeout(() => {
        u2 && (this.setLadderTimer(t2, o2 + 1, a2, m2), this.core.logger.log(`V2NIMLoginService::getLbsInfos ${o2}:`, u2), this.reportForLbsStart(u2, o2), this.requstLbs(u2).then((t3) => {
          this.reset(), a2(Object.assign(Object.assign({}, t3), { url: u2 }));
        }).catch((a3) => {
          var h2;
          if (this.core.logger.warn(`V2NIMLoginService::getLbsInfos ${o2} failed:`, a3), this.failedCount += 1, this.reportForFailOnce(u2, a3.code, (null === (h2 = a3.detail) || void 0 === h2 ? void 0 : h2.reason) || a3.message), this.failedCount >= t2.length || this.checkTerminator(a3.code))
            return this.reset(), void m2(a3);
        }));
      }, 2e3);
    }
    ladderLoad(t2) {
      return new Promise((o2, a2) => {
        t2.length > 1 && this.setLadderTimer(t2, 1, o2, a2);
        var m2 = t2[0];
        this.core.logger.log("V2NIMLoginService::getLbsInfos 0:", m2), this.reportForLbsStart(m2, 0), this.requstLbs(m2).then((t3) => {
          this.reset(), o2(Object.assign(Object.assign({}, t3), { url: m2 }));
        }).catch((o3) => {
          var u2;
          this.failedCount += 1, this.core.logger.warn("V2NIMLoginService::getLbsInfos 0 failed:", o3), this.reportForFailOnce(m2, o3.code, (null === (u2 = o3.detail) || void 0 === u2 ? void 0 : u2.reason) || o3.message), (this.failedCount >= t2.length || this.checkTerminator(o3.code)) && (this.reset(), a2(o3));
        });
      });
    }
    success(t2) {
      var o2, a2, m2 = t2.data.common, u2 = m2["mix.link"] || [], h2 = m2["link.default"] || [];
      this.socketLinkUrls = u2.concat(h2).concat(this.auth.config.linkUrl), t2.data["nos-chunk"] && (null === (o2 = this.core.cloudStorage) || void 0 === o2 ? void 0 : o2.setOptions) && (this.core.logger.log("getLbsInfos success. lbs.nos-chunk", t2.data["nos-chunk"]), this.core.cloudStorage.setOptions({ chunkUploadHost: t2.data["nos-chunk"] })), Array.isArray(t2.data.nosup) && t2.data.nosup.length > 0 && (null === (a2 = this.core.cloudStorage) || void 0 === a2 ? void 0 : a2.setOptions) && (this.core.logger.log("getLbsInfos success. lbs.nosup", t2.data.nosup), this.core.cloudStorage.setOptions({ commonUploadHostBackupList: t2.data.nosup, commonUploadHost: t2.data.nosup[0] })), this.core.logger.log("V2NIMLoginService::getLbsInfos success, socket link:", this.socketLinkUrls.slice(0), "chunkUploadHost: ", t2.data["nos-chunk"]), this.reportForLbsSuccess(t2.url, t2.data);
    }
    reportForLbsStart(t2, o2) {
      this.core.reporterHookLBS.updateBegin({ target: t2, index: o2 });
    }
    reportForLbsSuccess(t2, o2) {
      this.core.reporterHookLBS.updateComplete({ target: t2, code: 200, body: JSON.stringify(o2) }), this.core.reporterHookLBS.end(true), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: t2, code: 200, succeed: true }, { asyncParams: Ie.net.getNetworkStatus() });
    }
    reportForFailOnce(t2, o2, a2) {
      this.core.reporterHookLBS.updateComplete({ target: t2, code: o2, body: a2 });
    }
    reportForFail(t2, o2, a2) {
      this.core.reporterHookLBS.end(false), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "HTTP", target: t2, description: a2, code: o2, succeed: false }, { asyncParams: Ie.net.getNetworkStatus() });
    }
    reset() {
      this.socketLinkUrls = [], this.failedCount = 0, clearTimeout(this.timer);
    }
  }
  class V2NIMLoginAuthenticator {
    constructor(t2) {
      this.lastLoginClientKey = "__NIM_LAST_LOGIN_CLIENT__", this.loginClients = [], this.loginClientOfThisConnection = {}, this.core = t2, this.auth = t2.V2NIMLoginService;
    }
    verifyAuthentication(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        var o2 = yield this.auth.doLoginStepsManager.add(this.refreshLoginToken(this.auth.account)), a2 = yield this.auth.doLoginStepsManager.add(this.refreshThirdPartyExt(this.auth.account));
        this.auth.token = o2;
        var m2, u2 = Ie.getSystemInfo(), h2 = { appkey: this.core.options.appkey, account: this.auth.account, token: o2, authType: this.auth.loginOption.authType, appLogin: t2 ? 0 : 1, clientType: 16, clientSession: this.auth.clientSession, clientId: this.auth.deviceId, sdkVersion: 100811, userAgent: this.core.options.loginSDKTypeParamCompat ? "Native/10.8.11" : u2.userAgent.replace("{{appkey}}", this.core.options.appkey).slice(0, 299), libEnv: this.core.options.loginSDKTypeParamCompat ? void 0 : u2.libEnv, hostEnv: this.core.options.loginSDKTypeParamCompat ? 0 : u2.hostEnvEnum, sdkHumanVersion: this.core.options.flutterSdkVersion || "10.8.11", os: u2.os, browser: u2.browser, protocolVersion: 1, customClientType: this.auth.config.customClientType, customTag: this.auth.config.customTag, thirdPartyExtension: a2 };
        u2.os.toLowerCase();
        this.core.logger.log("V2NIMLoginService::do login ", h2.account, h2.clientSession, h2.appLogin);
        try {
          m2 = yield this.auth.doLoginStepsManager.add(this.auth.clientSocket.sendCmd("v2Login", { tag: h2 }));
        } catch (t3) {
          var I2 = t3;
          if (this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "26-3", code: I2.code || 0, succeed: false, description: I2.message }, { asyncParams: Ie.net.getNetworkStatus() }), I2.code === me.V2NIM_ERROR_CODE_CANCELLED || I2.code === me.V2NIM_ERROR_CODE_TIMEOUT)
            throw I2;
          throw this.processLoginFailed(I2), I2;
        }
        var { data: _2, loginClients: E2 } = m2.content;
        return this.changeLoginClient(1, E2), this.core.reporter.reportTraceUpdateV2("login", { operation_type: "protocol", target: "26-3", code: 200, succeed: true }, { asyncParams: Ie.net.getNetworkStatus() }), this.loginClientOfThisConnection = formatLoginInfo(_2), this.core.clientSocket.setSessionId(_2.consid), Ie.localStorage.setItem(this.lastLoginClientKey, JSON.stringify(Object.assign({ account: this.auth.account }, this.loginClientOfThisConnection))), this.loginClientOfThisConnection;
      });
    }
    refreshLoginToken(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        if (0 === this.auth.loginOption.authType)
          return this.auth.token;
        if ("function" != typeof this.auth.loginOption.tokenProvider)
          return this.auth.token;
        try {
          var o2 = yield this.auth.loginOption.tokenProvider(t2);
          if ("string" == typeof o2)
            return o2;
          throw this.core.logger.error("V2NIMLoginService::excute tokenProvider complete but got Unexpected value:", o2), new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute tokenProvider complete but got Unexpected value", rawData: o2 } });
        } catch (t3) {
          var a2 = t3, m2 = a2;
          throw a2.code !== me.V2NIM_ERROR_CODE_CALLBACK_FAILED && (this.core.logger.error("V2NIMLoginService::excute tokenProvider error:", a2), m2 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_CALLBACK_FAILED, desc: "Excute tokenProvider error", detail: { rawError: t3 } })), this.processLoginFailed(a2), m2;
        }
      });
    }
    refreshThirdPartyExt(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        if ("function" != typeof this.auth.loginOption.loginExtensionProvider)
          return "";
        try {
          var o2 = yield this.auth.loginOption.loginExtensionProvider(t2);
          if ("string" == typeof o2)
            return o2;
          throw this.core.logger.error("V2NIMLoginService::excute loginExtensionProvider complete but got Unexpected value:", o2), new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute loginExtensionProvider complete but got Unexpected value", rawData: o2 } });
        } catch (t3) {
          var a2 = t3, m2 = a2;
          if (a2.code !== me.V2NIM_ERROR_CODE_CALLBACK_FAILED && (this.core.logger.error("V2NIMLoginService::excute loginExtensionProvider error:", a2), m2 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_CALLBACK_FAILED, detail: { reason: "Excute loginExtensionProvider error", rawError: t3 } })), 2 === this.auth.loginOption.authType)
            throw this.processLoginFailed(a2), m2;
          return "";
        }
      });
    }
    processLoginFailed(t2) {
      this.auth.clientSocket.doDisconnect(He.ACTIVE, t2), this.checkLoginTerminalCode(t2.code) && (this.auth.authenticator.reset(), this.auth.authenticator.clearLastLoginClient()), this.auth.lifeCycle.processEvent("loginFail", t2);
    }
    changeLoginClient(t2, o2) {
      var a2 = o2.map((t3) => formatLoginInfo(t3));
      if (1 === t2)
        this.loginClients = a2, this.auth.emit("onLoginClientChanged", t2, this.loginClients);
      else if (2 === t2) {
        var m2 = a2.filter((t3) => {
          var o3 = this.loginClients.filter((o4) => o4.clientId === t3.clientId);
          return this.loginClients.push(t3), 0 === o3.length;
        });
        m2.length > 0 && this.auth.emit("onLoginClientChanged", t2, m2);
      } else if (3 === t2) {
        var u2 = a2.filter((t3) => (function remove(t4, o3) {
          o3 = o3 || (() => true);
          for (var a3 = [], m3 = (t4 = t4 || []).length, u3 = 0, h2 = 0; h2 < m3; h2++)
            o3(t4[h2 - u3]) && (a3.push(t4.splice(h2 - u3, 1)[0]), u3 += 1);
          return a3;
        }(this.loginClients, (o3) => o3.clientId === t3.clientId && o3.consid === t3.consid), 0 === this.loginClients.filter((o3) => o3.clientId === t3.clientId).length));
        u2.length > 0 && this.auth.emit("onLoginClientChanged", t2, u2);
      }
    }
    checkAutoLogin(t2) {
      if (t2)
        return false;
      var o2 = Ie.localStorage.getItem(this.lastLoginClientKey);
      if (!o2)
        return false;
      var a2 = "", m2 = "";
      try {
        var u2 = JSON.parse(o2);
        a2 = get(u2, "clientId"), m2 = get(u2, "account");
      } catch (t3) {
        return false;
      }
      return a2 === this.auth.deviceId && m2 === this.auth.account;
    }
    checkLoginTerminalCode(t2) {
      return [me.V2NIM_ERROR_CODE_CANCELLED, me.V2NIM_ERROR_CODE_TIMEOUT, me.V2NIM_ERROR_CODE_HANDSHAKE, 302, 317, me.V2NIM_ERROR_CODE_FORBIDDEN, me.V2NIM_ERROR_CODE_NOT_FOUND, me.V2NIM_ERROR_CODE_PARAMETER_ERROR, me.V2NIM_ERROR_CODE_MULTI_LOGIN_FORBIDDEN, 422, me.V2NIM_ERROR_CODE_IM_DISABLED, me.V2NIM_ERROR_CODE_APPKEY_NOT_EXIST, me.V2NIM_ERROR_CODE_BUNDLEID_CHECK_FAILED, me.V2NIM_ERROR_CODE_APPKEY_BLOCKED, me.V2NIM_ERROR_CODE_INVALID_TOKEN, me.V2NIM_ERROR_CODE_ROBOT_NOT_ALLOWED, me.V2NIM_ERROR_CODE_ACCOUNT_NOT_EXIST, me.V2NIM_ERROR_CODE_ACCOUNT_BANNED, me.V2NIM_ERROR_CODE_USER_PROFILE_NOT_EXIST].includes(t2);
    }
    reset() {
      this.loginClients = [], this.loginClientOfThisConnection = {};
    }
    clearLastLoginClient() {
      Ie.localStorage.removeItem(this.lastLoginClientKey);
    }
  }
  class V2Service extends ce {
    constructor(t2, o2) {
      super(), this.name = t2, this.logger = o2.logger, this.core = o2;
    }
    checkV2() {
      var t2 = this.core.options.apiVersion;
      if ("v2" === t2)
        return true;
      throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_MISUSE, detail: { reason: `The version "${t2}" of client is not supported.` } });
    }
    checkLogin() {
      if (0 === this.core.V2NIMLoginService.getLoginStatus())
        throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: "Client logout." } });
    }
    emit(t2, ...o2) {
      this.logger.debug(`${this.name}::emit event: '${t2.toString()}',`, void 0 !== o2[0] ? o2[0] : "", void 0 !== o2[1] ? o2[1] : "", void 0 !== o2[2] ? o2[2] : "");
      try {
        return super.emit(t2, ...o2);
      } catch (o3) {
        return setTimeout(() => {
          throw this.logger.error(`${this.name}::emit throw error in setTimeout. event: ${t2.toString()}. Error`, o3), o3;
        }, 0), false;
      }
    }
    process(t2) {
      var o2 = this[t2.cmd + "Handler"], a2 = this.handler && this.handler[t2.cmd + "Handler"];
      if ("function" == typeof o2 || "function" == typeof a2) {
        if (t2.error)
          return this.logger.error(`${t2.cmd}::recvError`, t2.error), Promise.reject(t2.error);
        try {
          var m2 = o2 ? o2.call(this, t2) : a2.call(this.handler, t2);
          return Promise.resolve(m2);
        } catch (t3) {
          return Promise.reject(t3);
        }
      }
      var u2 = get(t2, "error.detail.ignore");
      return t2.error && !u2 ? Promise.reject(t2.error) : Promise.resolve(t2);
    }
  }
  class V2NIMLoginLifeCycle {
    constructor(t2) {
      this.name = "V2NIMLoginLifeCycle", this.loginStatus = 0, this.connectStatus = 0, this.core = t2, this.auth = t2.V2NIMLoginService, this.logger = t2.logger;
    }
    processEvent(t2, o2, a2) {
      var m2 = this.getConnectStatus();
      switch (t2) {
        case "addressing":
          this.logger.log(`${this.name}::addressing`), this.setLoginStatus(2), this.setConnectStatus(2);
          break;
        case "connect":
          this.logger.log(`${this.name}::connecting`), this.setLoginStatus(2), this.setConnectStatus(2);
          break;
        case "connectSucc":
          this.logger.log(`${this.name}::connect success`), this.setLoginStatus(2), this.setConnectStatus(1);
          break;
        case "connectFail":
          this.logger.log(`${this.name}::connect fail`, o2), this.setLoginStatus(3), this.setConnectStatus(0, o2);
          break;
        case "connectionBroken":
          this.logger.log(`${this.name}::connectionBroken:`, o2), this.setLoginStatus(3), this.setConnectStatus(0, o2), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleDisconnected", o2);
          break;
        case "loginSucc":
          this.logger.log(`${this.name}::login success, verify authentication success`), this.setLoginStatus(1), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleLoginSucc", a2);
          break;
        case "loginFail":
          if (this.logger.log(`${this.name}::login fail due to verify authentication failed:`, o2), !o2)
            return;
          this.setLoginStatus(this.auth.authenticator.checkLoginTerminalCode(o2.code) ? 0 : 3), this.setConnectStatus(0, o2), this.auth.emit("onLoginFailed", o2);
          break;
        case "logout":
          this.logger.log(`${this.name}::logout`), this.setLoginStatus(0), this.setConnectStatus(0), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleLogout");
          break;
        case "kicked":
          this.logger.log(`${this.name}::kicked`, a2), this.setLoginStatus(0), this.setConnectStatus(0, o2), this.core.eventBus.emit("V2NIMLoginService/loginLifeCycleKicked");
          break;
        case "exited":
          this.logger.log(`${this.name}::exited`, o2), this.setLoginStatus(0), this.setConnectStatus(0, o2);
          break;
        case "waiting":
          this.logger.log(`${this.name}::waiting to reconnect`), this.setLoginStatus(3), this.setConnectStatus(3), 2 !== m2 && this.auth.reconnect.attempToReLogin();
      }
    }
    getConnectStatus() {
      return this.connectStatus;
    }
    getLoginStatus() {
      return this.loginStatus;
    }
    setLoginStatus(t2) {
      t2 !== this.loginStatus && (this.loginStatus = t2, this.auth.emit("onLoginStatus", t2));
    }
    setConnectStatus(t2, o2) {
      if (t2 !== this.connectStatus) {
        var a2 = this.connectStatus;
        this.connectStatus = t2, this.auth.emit("onConnectStatus", t2), this.delegateConnectEvent(a2, t2, o2);
      }
    }
    delegateConnectEvent(t2, o2, a2) {
      1 === t2 && 0 === o2 && a2 && this.auth.emit("onDisconnected", a2), 2 === t2 && 0 === o2 && a2 && this.auth.emit("onConnectFailed", a2);
    }
  }
  class V2NIMLoginDataSync {
    constructor(t2) {
      this.core = t2, this.auth = t2.V2NIMLoginService, this.datas = [];
    }
    switchDataSync(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        var { type: o2, state: a2, error: m2, subType: u2 } = t2, h2 = this.datas.filter((t3) => t3.type === o2 && t3.subType === u2);
        h2.length > 0 ? (h2[0].state = a2, h2[0].error = m2) : this.datas.push({ type: o2, state: a2, subType: u2 });
        var g2 = this.datas.every((t3) => 3 === t3.state);
        1 === o2 && (2 === a2 && "mainSync" === u2 ? (this.core.eventBus.emit("V2NIMLoginService/syncing"), this.auth.emit("onDataSync", o2, a2)) : 3 === a2 && g2 && (this.core.eventBus.emit("V2NIMLoginService/syncDone", m2), this.auth.emit("onDataSync", o2, a2, m2)));
      });
    }
    checkSyncing() {
      return this.datas.some((t2) => "mainSync" === t2.subType && 2 === t2.state);
    }
    reset() {
      this.datas = [];
    }
  }
  var Xe = { "6_3": "notifylog", "6_4": "uploadLog", "6_23": "getServerTime", "6_31": "notifyDetect", "6_32": "uploadDetect" }, Qe = { type: 1, params: 2, result: 3, t1: 100, t2: 101, t3: 102, t4: 103, t5: 104, t6: 105 }, Ze = { notifylog: { sid: 6, cid: 3, service: "misc" }, uploadLog: { sid: 6, cid: 4, service: "misc", hasPacketResponse: false, params: [{ type: "String", name: "url" }, { type: "Property", name: "data", reflectMapper: { type: 1, content: 2 } }] }, getServerTime: { sid: 6, cid: 23, service: "misc", response: [{ type: "Long", name: "time" }] }, notifyDetect: { sid: 6, cid: 31, service: "misc", response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Qe) }] }, uploadDetect: { sid: 6, cid: 32, service: "misc", hasPacketResponse: false, params: [{ type: "Property", name: "data", reflectMapper: Qe }] } }, et = { type: { type: "number" }, t1: { type: "number" }, t2: { type: "number" }, t3: { type: "number" }, t4: { type: "number" }, t5: { type: "number" }, t6: { type: "number" } };
  class MiscService extends class Service {
    constructor(t2, o2) {
      this.name = t2, this.core = o2, this.name = t2, this.logger = o2.logger, this.core = o2;
    }
    process(t2) {
      var o2 = this[t2.cmd + "Handler"];
      if ("function" == typeof o2)
        return o2.call(this, t2);
      var a2 = get(t2, "error.detail.ignore");
      return t2.error && !a2 ? Promise.reject(t2.error) : Promise.resolve(t2);
    }
  } {
    constructor(t2) {
      super("misc", t2), this.core = t2, registerParser({ cmdMap: Xe, cmdConfig: Ze }), this.setListener();
    }
    setListener() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.core.timeOrigin.setOriginTimetick();
      }), this.core.eventBus.on("logined", () => {
        this.core.timeOrigin.setOriginTimetick();
      });
    }
    getServerTime() {
      return __awaiter$2(this, void 0, void 0, function* () {
        var t2 = yield this.core.clientSocket.sendCmd("getServerTime");
        return parseInt(t2.content.time);
      });
    }
    notifyDetectHandler(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        var o2 = function formatNotifyDetectTag(t3) {
          return format(et, t3);
        }(t2.content.data);
        o2.t3 = t2.__receiveTimeNode.time, o2.t4 = Date.now();
        try {
          yield this.core.clientSocket.sendCmd("uploadDetect", { data: o2 });
        } catch (t3) {
          this.core.logger.warn("misc::notifyDetectHandler:upload failed", t3);
        }
      });
    }
    notifylogHandler() {
      return __awaiter$2(this, void 0, void 0, function* () {
        var t2 = void 0;
        try {
          t2 = yield this.core.logger.extractLogs();
        } catch (t3) {
          return;
        }
        if (t2 && "string" != typeof t2) {
          var o2 = "";
          try {
            o2 = (yield this.core.cloudStorage.uploadFile({ type: "file", file: t2 })).url;
          } catch (t3) {
            return;
          }
          if (o2) {
            o2 += (o2.indexOf("?") > 0 ? "&" : "?") + "download=" + (/* @__PURE__ */ new Date()).getTime() + "_web.log";
            try {
              yield this.core.clientSocket.sendCmd("uploadLog", { url: o2 });
            } catch (t3) {
              return;
            }
          }
        }
      });
    }
  }
  function pick(t2, o2) {
    t2 = t2 || {};
    var a2 = {};
    return (o2 = o2 || []).forEach((o3) => {
      void 0 !== t2[o3] && (a2[o3] = t2[o3]);
    }), a2;
  }
  var rt = ["https://lbs.netease.im/lbs/webconf.jsp"], it = { retryCount: 3, timeout: 6e4, forceMode: false, authType: 0, syncLevel: 0 };
  var ot = { "27_1": "v2NIMSync", "27_10": "v2QChatSync" }, nt = { v2NIMSync: { sid: 27, cid: 1, service: "V2NIMSyncService", hasPacketTimer: false, params: [{ type: "Property", name: "tag", reflectMapper: { myInfo: 1, offlineMsgs: 2, teams: 3, roamingMsgs: 7, relations: 9, friends: 11, friendUsers: 13, msgReceipts: 14, myTeamMembers: 15, donnop: 16, recallMsg: 17, sessionAck: 18, broadcastMsgs: 20, avSignal: 21, superTeams: 22, mySuperTeamMembers: 23, superTeamRoamingMsgs: 24, deleteSuperTeamMsg: 25, superTeamSessionAck: 26, deleteSelfMsgs: 27, stickTopSessions: 28, sessionHistoryMsgsDelete: 29, p2pTeamModifyMessage: 30, superTeamModifyMessage: 31, filterMsgs: 100 } }], response: [{ type: "Long", name: "timetag" }] }, v2QChatSync: { sid: 27, cid: 10, service: "V2NIMSyncService", hasPacketTimer: false, params: [{ type: "Property", name: "tag", reflectMapper: { systemNotification: 1, pushConfig: 2 } }], response: [{ type: "Long", name: "timetag" }] } };
  createCommonjsModule$1(function(t2, o2) {
    t2.exports = /* @__PURE__ */ function() {
      function object2String(t3) {
        if (t3) {
          var o3 = "";
          return Object.keys(t3).forEach(function(a2, m2) {
            o3 += 0 === m2 ? "?" : "&", o3 += `${a2}=${t3[a2]}`;
          }), o3;
        }
        return "";
      }
      class V2NIMError extends Error {
        constructor(t3, o3, a2, m2) {
          super(a2), this.source = t3, this.code = o3, this.desc = a2, this.detail = m2 || {};
        }
      }
      function request2(t3, o3 = { dataType: "json", method: "GET", timeout: 5e3 }) {
        var a2 = "text" === o3.dataType ? "text/plain; charset=UTF-8" : "application/json; charset=UTF-8", m2 = "GET" === o3.method ? object2String(o3.params) : "";
        return new Promise(function(u2, h2) {
          if (window.XMLHttpRequest) {
            var g2, I2 = new XMLHttpRequest();
            if (I2.onreadystatechange = function() {
              if (4 === I2.readyState)
                if (200 === I2.status) {
                  try {
                    g2 = JSON.parse(I2.response || "{}");
                  } catch (t4) {
                    g2 = I2.response;
                  }
                  u2({ status: I2.status, data: g2 });
                } else
                  setTimeout(() => {
                    h2(new V2NIMError(1, I2.status, `readyState: ${I2.readyState}; statusText: ${I2.statusText}`));
                  }, 0);
            }, I2.open(o3.method, `${t3}${m2}`), I2.timeout = o3.timeout || 5e3, I2.setRequestHeader("Content-Type", a2), o3.headers)
              for (var _2 in o3.headers)
                I2.setRequestHeader(_2, o3.headers[_2]);
            I2.ontimeout = function(t4) {
              h2(new V2NIMError(1, 408, t4 && t4.message ? t4.message : "request timeout"));
            }, I2.send(JSON.stringify(o3.data));
          } else
            h2(new V2NIMError(2, 10400, "request no suppout"));
        });
      }
      return request2;
    }();
  });
  createCommonjsModule$1(function(t2, o2) {
    t2.exports = function() {
      var t3 = { d: function(o4, a3) {
        for (var m3 in a3)
          t3.o(a3, m3) && !t3.o(o4, m3) && Object.defineProperty(o4, m3, { enumerable: true, get: a3[m3] });
      }, o: function(t4, o4) {
        return Object.prototype.hasOwnProperty.call(t4, o4);
      } }, o3 = {};
      t3.d(o3, { default: function() {
        return T2;
      } });
      var a2 = function e2(t4) {
        for (var o4 in function(t5, o5) {
          if (!(t5 instanceof o5))
            throw new TypeError("Cannot call a class as a function");
        }(this, e2), this.directUploadAddr = "https://wanproxy-web.127.net", this.retryCount = 4, this.trunkSize = 4194304, this.trunkUploadTimeout = 5e4, this.getOffsetTimeout = 1e4, this.version = "1.0", this.enableCache = true, this.logger = console, this.onError = function(t5) {
        }, this.onProgress = function(t5) {
        }, this.onUploadProgress = function(t5) {
        }, this.onComplete = function(t5) {
        }, t4)
          this[o4] = t4[o4];
      };
      function n2(t4, o4) {
        var a3 = "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
        if (!a3) {
          if (Array.isArray(t4) || (a3 = function(t5, o5) {
            if (t5) {
              if ("string" == typeof t5)
                return r2(t5, o5);
              var a4 = Object.prototype.toString.call(t5).slice(8, -1);
              return "Object" === a4 && t5.constructor && (a4 = t5.constructor.name), "Map" === a4 || "Set" === a4 ? Array.from(t5) : "Arguments" === a4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a4) ? r2(t5, o5) : void 0;
            }
          }(t4)) || o4 && t4 && "number" == typeof t4.length) {
            a3 && (t4 = a3);
            var m3 = 0, i2 = function() {
            };
            return { s: i2, n: function() {
              return m3 >= t4.length ? { done: true } : { done: false, value: t4[m3++] };
            }, e: function(t5) {
              throw t5;
            }, f: i2 };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var u3, h3 = true, g3 = false;
        return { s: function() {
          a3 = a3.call(t4);
        }, n: function() {
          var t5 = a3.next();
          return h3 = t5.done, t5;
        }, e: function(t5) {
          g3 = true, u3 = t5;
        }, f: function() {
          try {
            h3 || null == a3.return || a3.return();
          } finally {
            if (g3)
              throw u3;
          }
        } };
      }
      function r2(t4, o4) {
        (null == o4 || o4 > t4.length) && (o4 = t4.length);
        for (var a3 = 0, m3 = new Array(o4); a3 < o4; a3++)
          m3[a3] = t4[a3];
        return m3;
      }
      var m2 = { privateObj: {}, setItem: function(t4, o4) {
        m2.privateObj[t4] = o4;
      }, getItem: function(t4) {
        return m2.privateObj[t4];
      }, removeItem: function(t4) {
        delete m2.privateObj[t4];
      }, getKeys: function() {
        return Object.keys(m2.privateObj);
      } }, u2 = { getFileKey: function(t4) {
        var o4 = t4.size.toString(), a3 = t4.lastModified.toString();
        return "_NosUploader_" + t4.name + o4.slice(o4.length - 5) + a3.slice(a3.length - 5);
      }, getFileInfo: function(t4) {
        var o4 = m2.getItem(t4);
        if (!o4)
          return null;
        try {
          return JSON.parse(o4);
        } catch (t5) {
          return null;
        }
      }, initFile: function(t4, o4, a3) {
        u2.clearExpiredInfo();
        var h3 = this.getFileKey(o4), g3 = { ctx: void 0 !== t4.ctx ? t4.ctx : "", bucket: t4.bucketName, obj: t4.objectName, token: t4.token, modifyAt: Date.now(), end: false };
        return t4.payload && (g3.payload = t4.payload), a3 && m2.setItem(h3, JSON.stringify(g3)), h3;
      }, setUploadContext: function(t4, o4, a3) {
        var u3 = this.getFileInfo(t4);
        u3 && (u3.ctx = o4, a3 && m2.setItem(t4, JSON.stringify(u3)));
      }, setComplete: function(t4, o4) {
        var a3 = this.getFileInfo(t4);
        a3 && (a3.modifyAt = Date.now(), a3.end = true, o4 && m2.setItem(t4, JSON.stringify(a3)));
      }, getUploadContext: function(t4) {
        var o4 = this.getFileInfo(t4);
        return o4 ? o4.ctx : "";
      }, removeFileInfo: function(t4) {
        0 === t4.indexOf("_NosUploader_") && m2.removeItem(t4);
      }, clearExpiredInfo: function() {
        var t4, o4 = "function" == typeof m2.getKeys ? m2.getKeys() : Object.keys(m2), a3 = Date.now(), h3 = [], g3 = n2(o4);
        try {
          for (g3.s(); !(t4 = g3.n()).done; ) {
            var I3 = t4.value;
            if (0 === I3.indexOf("_NosUploader_")) {
              var _3 = u2.getFileInfo(I3);
              null === _3 || a3 - _3.modifyAt > T2.expireTime ? m2.removeItem(I3) : h3.push({ fileInfo: _3, key: I3 });
            }
          }
        } catch (t5) {
          g3.e(t5);
        } finally {
          g3.f();
        }
        if (h3.length > T2.maxFileCache) {
          var E3, M3 = n2(h3.sort(function(t5, o5) {
            return o5.fileInfo.modifyAt - t5.fileInfo.modifyAt;
          }).slice(T2.maxFileCache));
          try {
            for (M3.s(); !(E3 = M3.n()).done; ) {
              var S2 = E3.value;
              0 === S2.key.indexOf("_NosUploader_") && m2.removeItem(S2.key);
            }
          } catch (t5) {
            M3.e(t5);
          } finally {
            M3.f();
          }
        }
      } }, h2 = u2;
      function c2(t4) {
        return (c2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t5) {
          return typeof t5;
        } : function(t5) {
          return t5 && "function" == typeof Symbol && t5.constructor === Symbol && t5 !== Symbol.prototype ? "symbol" : typeof t5;
        })(t4);
      }
      function s2(t4, o4) {
        return !o4 || "object" !== c2(o4) && "function" != typeof o4 ? function(t5) {
          if (void 0 === t5)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t5;
        }(t4) : o4;
      }
      function f2(t4) {
        var o4 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
        return (f2 = function(t5) {
          if (null === t5 || (a3 = t5, -1 === Function.toString.call(a3).indexOf("[native code]")))
            return t5;
          var a3;
          if ("function" != typeof t5)
            throw new TypeError("Super expression must either be null or a function");
          if (void 0 !== o4) {
            if (o4.has(t5))
              return o4.get(t5);
            o4.set(t5, n3);
          }
          function n3() {
            return l2(t5, arguments, y2(this).constructor);
          }
          return n3.prototype = Object.create(t5.prototype, { constructor: { value: n3, enumerable: false, writable: true, configurable: true } }), d2(n3, t5);
        })(t4);
      }
      function l2(t4, o4, a3) {
        return (l2 = p2() ? Reflect.construct : function(t5, o5, a4) {
          var m3 = [null];
          m3.push.apply(m3, o5);
          var u3 = new (Function.bind.apply(t5, m3))();
          return a4 && d2(u3, a4.prototype), u3;
        }).apply(null, arguments);
      }
      function p2() {
        if ("undefined" == typeof Reflect || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if ("function" == typeof Proxy)
          return true;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), true;
        } catch (t4) {
          return false;
        }
      }
      function d2(t4, o4) {
        return (d2 = Object.setPrototypeOf || function(t5, o5) {
          return t5.__proto__ = o5, t5;
        })(t4, o4);
      }
      function y2(t4) {
        return (y2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t5) {
          return t5.__proto__ || Object.getPrototypeOf(t5);
        })(t4);
      }
      var g2 = function(t4) {
        !function(t5, o5) {
          if ("function" != typeof o5 && null !== o5)
            throw new TypeError("Super expression must either be null or a function");
          t5.prototype = Object.create(o5 && o5.prototype, { constructor: { value: t5, writable: true, configurable: true } }), o5 && d2(t5, o5);
        }(r3, t4);
        var o4, a3, m3 = (o4 = r3, a3 = p2(), function() {
          var t5, m4 = y2(o4);
          if (a3) {
            var u3 = y2(this).constructor;
            t5 = Reflect.construct(m4, arguments, u3);
          } else
            t5 = m4.apply(this, arguments);
          return s2(this, t5);
        });
        function r3(t5, o5) {
          var a4;
          return function(t6, o6) {
            if (!(t6 instanceof o6))
              throw new TypeError("Cannot call a class as a function");
          }(this, r3), (a4 = m3.call(this, "NosUploadError:" + t5)).errCode = o5, a4.errMsg = t5, a4;
        }
        return r3;
      }(f2(Error)), I2 = function e2(t4, o4, a3) {
        if ("uploading" === t4.uploadState) {
          var m3 = t4.config, u3 = t4.param, I3 = h2.getUploadContext(t4.fileKey);
          if (!I3)
            return a3(0);
          var _3 = new XMLHttpRequest(), E3 = m3.directUploadAddr + "/".concat(u3.bucketName) + "/".concat(encodeURIComponent(u3.objectName)) + "?uploadContext" + "&context=".concat(I3) + "&version=".concat(m3.version);
          _3.onreadystatechange = function() {
            var u4;
            if ("abort" !== t4.uploadState && 4 === _3.readyState) {
              var I4;
              try {
                I4 = JSON.parse(_3.responseText);
              } catch (t5) {
                I4 = { errMsg: "JsonParseError in getOffset. xhr.status = " + _3.status + ". xhr.responseText: " + _3.responseText, errCode: 500 };
              }
              200 === _3.status ? I4.errCode ? t4.config.onError(new g2(I4.errMsg, I4.errCode)) : a3(I4.offset) : _3.status.toString().match(/^5/) ? e2(t4, o4 - 1, a3) : o4 > 0 ? ("function" == typeof (null === (u4 = m3.logger) || void 0 === u4 ? void 0 : u4.error) && m3.logger.error("getOffset(".concat(E3, ") error. retry after 3 seconds. ").concat((/* @__PURE__ */ new Date()).toTimeString())), setTimeout(function() {
                e2(t4, o4 - 1, a3);
              }, 3500)) : _3.status ? (h2.removeFileInfo(t4.fileKey), m3.onError(new g2("getOffset(".concat(E3, ") error: ").concat(_3.status, " ").concat(_3.statusText)))) : m3.onError(new g2("getOffset(".concat(E3, ") error. no Error Code")));
            }
          }, _3.open("get", E3), _3.setRequestHeader("x-nos-token", u3.token), _3.timeout = m3.getOffsetTimeout, _3.send();
        }
      }, _2 = function e2(t4, o4, a3, m3) {
        if ("uploading" === t4.uploadState) {
          var u3 = t4.param, I3 = t4.config, _3 = File.prototype.slice, E3 = void 0 !== u3.ctx ? u3.ctx : "", M3 = o4 + I3.trunkSize >= t4.file.size, T3 = M3 ? t4.file.size : o4 + I3.trunkSize, S2 = new XMLHttpRequest(), C2 = I3.directUploadAddr + "/".concat(u3.bucketName) + "/".concat(encodeURIComponent(u3.objectName));
          if (S2.upload.onprogress = function(a4) {
            if ("abort" !== t4.uploadState) {
              var m4 = 0;
              a4.lengthComputable ? (m4 = (o4 + a4.loaded) / t4.file.size, I3.onProgress(m4), I3.onUploadProgress({ loaded: a4.loaded, total: t4.file.size, percentage: m4, percentageText: (100 * m4).toFixed(2) + "%" })) : I3.onError(new g2("browser does not support query upload progress"));
            }
          }, S2.onreadystatechange = function() {
            var u4, _4;
            if ("abort" !== t4.uploadState && 4 === S2.readyState) {
              var E4;
              try {
                E4 = JSON.parse(S2.responseText);
              } catch (t5) {
                "function" == typeof (null === (u4 = I3.logger) || void 0 === u4 ? void 0 : u4.error) && I3.logger.error("JsonParseError in uploadTrunk. xhr.status = " + S2.status + ". xhr.responseText: " + S2.responseText, t5), E4 = { errMsg: "JsonParseError in uploadTrunk. xhr.status = " + S2.status + ". xhr.responseText: " + S2.responseText };
              }
              200 === S2.status ? (t4.setContext(E4.context), M3 ? (m3(), t4.setComplete()) : e2(t4, E4.offset, I3.retryCount, m3)) : S2.status.toString().match(/^5/) ? a3 > 0 ? e2(t4, o4, a3 - 1, m3) : (h2.removeFileInfo(t4.fileKey), I3.onError(new g2(E4.errMsg, E4.errCode))) : a3 > 0 ? ("function" == typeof (null === (_4 = I3.logger) || void 0 === _4 ? void 0 : _4.error) && I3.logger.error("uploadTrunk(".concat(C2, ") error. retry after 3 seconds. ").concat((/* @__PURE__ */ new Date()).toTimeString())), setTimeout(function() {
                e2(t4, o4, a3 - 1, m3);
              }, 3500)) : S2.status ? (h2.removeFileInfo(t4.fileKey), I3.onError(new g2("uploadTrunk(".concat(C2, ") error: ").concat(S2.status, " ").concat(S2.statusText)))) : I3.onError(new g2("uploadTrunk(".concat(C2, ") error. no Error Code. Please check your network")));
            }
          }, S2.open("post", C2 + "?offset=".concat(o4) + "&complete=".concat(M3) + "&context=".concat(E3) + "&version=".concat(I3.version)), S2.setRequestHeader("x-nos-token", u3.token), u3.md5 && S2.setRequestHeader("content-md5", u3.md5), t4.file.type && S2.setRequestHeader("content-type", t4.file.type), S2.timeout = I3.trunkUploadTimeout, "undefined" != typeof FileReader) {
            var N2 = new FileReader();
            N2.addEventListener("load", function(t5) {
              var o5;
              (null === (o5 = null == t5 ? void 0 : t5.target) || void 0 === o5 ? void 0 : o5.result) instanceof ArrayBuffer && t5.target.result.byteLength > 0 ? S2.send(t5.target.result) : I3.onError(new g2("Read ArrayBuffer failed", 194003));
            }), N2.addEventListener("error", function(t5) {
              var o5 = t5.target.error;
              I3.onError(new g2("Read ArrayBuffer error. ".concat(o5.toString()), 194003));
            }), N2.readAsArrayBuffer(_3.call(t4.file, o4, T3));
          } else
            S2.send(_3.call(t4.file, o4, T3));
        }
      };
      function v2(t4, o4) {
        for (var a3 = 0; a3 < o4.length; a3++) {
          var m3 = o4[a3];
          m3.enumerable = m3.enumerable || false, m3.configurable = true, "value" in m3 && (m3.writable = true), Object.defineProperty(t4, m3.key, m3);
        }
      }
      var E2 = function() {
        function e2(t5, o4, a3) {
          !function(t6, o5) {
            if (!(t6 instanceof o5))
              throw new TypeError("Cannot call a class as a function");
          }(this, e2), this.uploadState = "paused", this.config = a3, this.file = t5, this.param = o4, this.fileKey = h2.initFile(o4, t5, this.config.enableCache), this.resume();
        }
        var t4;
        return (t4 = [{ key: "resume", value: function() {
          var t5 = this;
          if ("uploading" !== this.uploadState) {
            this.setUploadState("uploading");
            var o4 = this.config;
            I2(this, o4.retryCount, function(a3) {
              _2(t5, a3, o4.retryCount, function() {
                t5.setUploadState("ended"), "function" == typeof o4.onComplete && o4.onComplete(t5.param);
              });
            });
          }
        } }, { key: "pause", value: function() {
          this.setUploadState("paused");
        } }, { key: "abort", value: function() {
          "ended" !== this.uploadState && "abort" !== this.uploadState && (this.setUploadState("abort"), this.config.onError(new g2("Upload Aborted", 10499)));
        } }, { key: "setUploadState", value: function(t5) {
          t5 !== this.uploadState && (this.uploadState = t5);
        } }, { key: "setContext", value: function(t5) {
          h2.setUploadContext(this.fileKey, t5, this.config.enableCache), this.param.ctx = t5;
        } }, { key: "setComplete", value: function() {
          h2.setComplete(this.fileKey, this.config.enableCache), this.setUploadState("ended");
        } }]) && v2(e2.prototype, t4), e2;
      }(), M2 = { maxFileCache: 1 / 0, expireTime: 864e5, getFileUploadInformation: function(t4) {
        var o4 = h2.getFileKey(t4), a3 = h2.getFileInfo(o4);
        return null === a3 ? null : Date.now() - a3.modifyAt > M2.expireTime ? (h2.removeFileInfo(o4), null) : { uploadInfo: Object.assign({ bucketName: a3.bucket, objectName: a3.obj, token: a3.token, ctx: a3.ctx }, a3.payload ? { payload: a3.payload } : {}), complete: a3.end };
      }, setMaxFileCache: function(t4) {
        M2.maxFileCache = t4;
      }, setExpireTime: function(t4) {
        M2.expireTime = t4;
      }, printCaches: function() {
        if ("undefined" != typeof localStorage)
          for (var t4 = 0, o4 = Object.keys(localStorage); t4 < o4.length; t4++) {
            var a3 = o4[t4], m3 = h2.getFileInfo(a3);
            m3 && formatAppLog("log", "at node_modules/nim-web-sdk-ng/dist/esm/nim.js:15", m3, "modifiedAt", new Date(m3.modifyAt).toTimeString());
          }
      }, createConfig: function(t4) {
        return new a2(t4);
      }, createTask: function(t4, o4, a3) {
        return new E2(t4, o4, a3);
      } }, T2 = M2;
      return o3.default;
    }();
  });
  /*!
  * Platform.js v1.3.6
  * Copyright 2014-2020 Benjamin Tan
  * Copyright 2011-2013 John-David Dalton
  * Available under MIT license
  */
  createCommonjsModule$1(function(o2, a2) {
    (function() {
      var m2 = { function: true, object: true }[typeof window] && window || this, u2 = a2, h2 = o2 && !o2.nodeType && o2, g2 = u2 && h2 && "object" == typeof t && t;
      !g2 || g2.global !== g2 && g2.window !== g2 && g2.self !== g2 || (m2 = g2);
      var I2 = Math.pow(2, 53) - 1, _2 = /\bOpera/, E2 = Object.prototype, M2 = E2.hasOwnProperty, T2 = E2.toString;
      function capitalize(t2) {
        return (t2 = String(t2)).charAt(0).toUpperCase() + t2.slice(1);
      }
      function format2(t2) {
        return t2 = trim2(t2), /^(?:webOS|i(?:OS|P))/.test(t2) ? t2 : capitalize(t2);
      }
      function forOwn(t2, o3) {
        for (var a3 in t2)
          M2.call(t2, a3) && o3(t2[a3], a3, t2);
      }
      function getClassOf(t2) {
        return null == t2 ? capitalize(t2) : T2.call(t2).slice(8, -1);
      }
      function qualify(t2) {
        return String(t2).replace(/([ -])(?!$)/g, "$1?");
      }
      function reduce(t2, o3) {
        var a3 = null;
        return function each(t3, o4) {
          var a4 = -1, m3 = t3 ? t3.length : 0;
          if ("number" == typeof m3 && m3 > -1 && m3 <= I2)
            for (; ++a4 < m3; )
              o4(t3[a4], a4, t3);
          else
            forOwn(t3, o4);
        }(t2, function(m3, u3) {
          a3 = o3(a3, m3, u3, t2);
        }), a3;
      }
      function trim2(t2) {
        return String(t2).replace(/^ +| +$/g, "");
      }
      var S2 = function parse(t2) {
        var o3 = m2, a3 = t2 && "object" == typeof t2 && "String" != getClassOf(t2);
        a3 && (o3 = t2, t2 = null);
        var u3 = o3.navigator || {}, h3 = u3.userAgent || "";
        t2 || (t2 = h3);
        var g3, I3, E3 = a3 ? !!u3.likeChrome : /\bChrome\b/.test(t2) && !/internal|\n/i.test(T2.toString()), M3 = "Object", S3 = a3 ? M3 : "ScriptBridgingProxyObject", C2 = a3 ? M3 : "Environment", N2 = a3 && o3.java ? "JavaPackage" : getClassOf(o3.java), O2 = a3 ? M3 : "RuntimeObject", b2 = /\bJava/.test(N2) && o3.java, R2 = b2 && getClassOf(o3.environment) == C2, A2 = b2 ? "a" : "α", V2 = b2 ? "b" : "β", k2 = o3.document || {}, P2 = o3.operamini || o3.opera, L2 = _2.test(L2 = a3 && P2 ? P2["[[Class]]"] : getClassOf(P2)) ? L2 : P2 = null, w2 = t2, D2 = [], U2 = null, x2 = t2 == h3, B2 = x2 && P2 && "function" == typeof P2.version && P2.version(), j2 = function getLayout(o4) {
          return reduce(o4, function(o5, a4) {
            return o5 || RegExp("\\b" + (a4.pattern || qualify(a4)) + "\\b", "i").exec(t2) && (a4.label || a4);
          });
        }([{ label: "EdgeHTML", pattern: "Edge" }, "Trident", { label: "WebKit", pattern: "AppleWebKit" }, "iCab", "Presto", "NetFront", "Tasman", "KHTML", "Gecko"]), $2 = function getName(o4) {
          return reduce(o4, function(o5, a4) {
            return o5 || RegExp("\\b" + (a4.pattern || qualify(a4)) + "\\b", "i").exec(t2) && (a4.label || a4);
          });
        }(["Adobe AIR", "Arora", "Avant Browser", "Breach", "Camino", "Electron", "Epiphany", "Fennec", "Flock", "Galeon", "GreenBrowser", "iCab", "Iceweasel", "K-Meleon", "Konqueror", "Lunascape", "Maxthon", { label: "Microsoft Edge", pattern: "(?:Edge|Edg|EdgA|EdgiOS)" }, "Midori", "Nook Browser", "PaleMoon", "PhantomJS", "Raven", "Rekonq", "RockMelt", { label: "Samsung Internet", pattern: "SamsungBrowser" }, "SeaMonkey", { label: "Silk", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Sleipnir", "SlimBrowser", { label: "SRWare Iron", pattern: "Iron" }, "Sunrise", "Swiftfox", "Vivaldi", "Waterfox", "WebPositive", { label: "Yandex Browser", pattern: "YaBrowser" }, { label: "UC Browser", pattern: "UCBrowser" }, "Opera Mini", { label: "Opera Mini", pattern: "OPiOS" }, "Opera", { label: "Opera", pattern: "OPR" }, "Chromium", "Chrome", { label: "Chrome", pattern: "(?:HeadlessChrome)" }, { label: "Chrome Mobile", pattern: "(?:CriOS|CrMo)" }, { label: "Firefox", pattern: "(?:Firefox|Minefield)" }, { label: "Firefox for iOS", pattern: "FxiOS" }, { label: "IE", pattern: "IEMobile" }, { label: "IE", pattern: "MSIE" }, "Safari"]), G2 = getProduct([{ label: "BlackBerry", pattern: "BB10" }, "BlackBerry", { label: "Galaxy S", pattern: "GT-I9000" }, { label: "Galaxy S2", pattern: "GT-I9100" }, { label: "Galaxy S3", pattern: "GT-I9300" }, { label: "Galaxy S4", pattern: "GT-I9500" }, { label: "Galaxy S5", pattern: "SM-G900" }, { label: "Galaxy S6", pattern: "SM-G920" }, { label: "Galaxy S6 Edge", pattern: "SM-G925" }, { label: "Galaxy S7", pattern: "SM-G930" }, { label: "Galaxy S7 Edge", pattern: "SM-G935" }, "Google TV", "Lumia", "iPad", "iPod", "iPhone", "Kindle", { label: "Kindle Fire", pattern: "(?:Cloud9|Silk-Accelerated)" }, "Nexus", "Nook", "PlayBook", "PlayStation Vita", "PlayStation", "TouchPad", "Transformer", { label: "Wii U", pattern: "WiiU" }, "Wii", "Xbox One", { label: "Xbox 360", pattern: "Xbox" }, "Xoom"]), q2 = function getManufacturer(o4) {
          return reduce(o4, function(o5, a4, m3) {
            return o5 || (a4[G2] || a4[/^[a-z]+(?: +[a-z]+\b)*/i.exec(G2)] || RegExp("\\b" + qualify(m3) + "(?:\\b|\\w*\\d)", "i").exec(t2)) && m3;
          });
        }({ Apple: { iPad: 1, iPhone: 1, iPod: 1 }, Alcatel: {}, Archos: {}, Amazon: { Kindle: 1, "Kindle Fire": 1 }, Asus: { Transformer: 1 }, "Barnes & Noble": { Nook: 1 }, BlackBerry: { PlayBook: 1 }, Google: { "Google TV": 1, Nexus: 1 }, HP: { TouchPad: 1 }, HTC: {}, Huawei: {}, Lenovo: {}, LG: {}, Microsoft: { Xbox: 1, "Xbox One": 1 }, Motorola: { Xoom: 1 }, Nintendo: { "Wii U": 1, Wii: 1 }, Nokia: { Lumia: 1 }, Oppo: {}, Samsung: { "Galaxy S": 1, "Galaxy S2": 1, "Galaxy S3": 1, "Galaxy S4": 1 }, Sony: { PlayStation: 1, "PlayStation Vita": 1 }, Xiaomi: { Mi: 1, Redmi: 1 } }), H2 = function getOS(o4) {
          return reduce(o4, function(o5, a4) {
            var m3 = a4.pattern || qualify(a4);
            return !o5 && (o5 = RegExp("\\b" + m3 + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(t2)) && (o5 = function cleanupOS(t3, o6, a5) {
              var m4 = { "10.0": "10", 6.4: "10 Technical Preview", 6.3: "8.1", 6.2: "8", 6.1: "Server 2008 R2 / 7", "6.0": "Server 2008 / Vista", 5.2: "Server 2003 / XP 64-bit", 5.1: "XP", 5.01: "2000 SP1", "5.0": "2000", "4.0": "NT", "4.90": "ME" };
              return o6 && a5 && /^Win/i.test(t3) && !/^Windows Phone /i.test(t3) && (m4 = m4[/[\d.]+$/.exec(t3)]) && (t3 = "Windows " + m4), t3 = String(t3), o6 && a5 && (t3 = t3.replace(RegExp(o6, "i"), a5)), format2(t3.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]);
            }(o5, m3, a4.label || a4)), o5;
          });
        }(["Windows Phone", "KaiOS", "Android", "CentOS", { label: "Chrome OS", pattern: "CrOS" }, "Debian", { label: "DragonFly BSD", pattern: "DragonFly" }, "Fedora", "FreeBSD", "Gentoo", "Haiku", "Kubuntu", "Linux Mint", "OpenBSD", "Red Hat", "SuSE", "Ubuntu", "Xubuntu", "Cygwin", "Symbian OS", "hpwOS", "webOS ", "webOS", "Tablet OS", "Tizen", "Linux", "Mac OS X", "Macintosh", "Mac", "Windows 98;", "Windows "]);
        function getProduct(o4) {
          return reduce(o4, function(o5, a4) {
            var m3 = a4.pattern || qualify(a4);
            return !o5 && (o5 = RegExp("\\b" + m3 + " *\\d+[.\\w_]*", "i").exec(t2) || RegExp("\\b" + m3 + " *\\w+-[\\w]*", "i").exec(t2) || RegExp("\\b" + m3 + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(t2)) && ((o5 = String(a4.label && !RegExp(m3, "i").test(a4.label) ? a4.label : o5).split("/"))[1] && !/[\d.]+/.test(o5[0]) && (o5[0] += " " + o5[1]), a4 = a4.label || a4, o5 = format2(o5[0].replace(RegExp(m3, "i"), a4).replace(RegExp("; *(?:" + a4 + "[_-])?", "i"), " ").replace(RegExp("(" + a4 + ")[-_.]?(\\w)", "i"), "$1 $2"))), o5;
          });
        }
        function getVersion(o4) {
          return reduce(o4, function(o5, a4) {
            return o5 || (RegExp(a4 + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(t2) || 0)[1] || null;
          });
        }
        if (j2 && (j2 = [j2]), /\bAndroid\b/.test(H2) && !G2 && (g3 = /\bAndroid[^;]*;(.*?)(?:Build|\) AppleWebKit)\b/i.exec(t2)) && (G2 = trim2(g3[1]).replace(/^[a-z]{2}-[a-z]{2};\s*/i, "") || null), q2 && !G2 ? G2 = getProduct([q2]) : q2 && G2 && (G2 = G2.replace(RegExp("^(" + qualify(q2) + ")[-_.\\s]", "i"), q2 + " ").replace(RegExp("^(" + qualify(q2) + ")[-_.]?(\\w)", "i"), q2 + " $2")), (g3 = /\bGoogle TV\b/.exec(G2)) && (G2 = g3[0]), /\bSimulator\b/i.test(t2) && (G2 = (G2 ? G2 + " " : "") + "Simulator"), "Opera Mini" == $2 && /\bOPiOS\b/.test(t2) && D2.push("running in Turbo/Uncompressed mode"), "IE" == $2 && /\blike iPhone OS\b/.test(t2) ? (q2 = (g3 = parse(t2.replace(/like iPhone OS/, ""))).manufacturer, G2 = g3.product) : /^iP/.test(G2) ? ($2 || ($2 = "Safari"), H2 = "iOS" + ((g3 = / OS ([\d_]+)/i.exec(t2)) ? " " + g3[1].replace(/_/g, ".") : "")) : "Konqueror" == $2 && /^Linux\b/i.test(H2) ? H2 = "Kubuntu" : q2 && "Google" != q2 && (/Chrome/.test($2) && !/\bMobile Safari\b/i.test(t2) || /\bVita\b/.test(G2)) || /\bAndroid\b/.test(H2) && /^Chrome/.test($2) && /\bVersion\//i.test(t2) ? ($2 = "Android Browser", H2 = /\bAndroid\b/.test(H2) ? H2 : "Android") : "Silk" == $2 ? (/\bMobi/i.test(t2) || (H2 = "Android", D2.unshift("desktop mode")), /Accelerated *= *true/i.test(t2) && D2.unshift("accelerated")) : "UC Browser" == $2 && /\bUCWEB\b/.test(t2) ? D2.push("speed mode") : "PaleMoon" == $2 && (g3 = /\bFirefox\/([\d.]+)\b/.exec(t2)) ? D2.push("identifying as Firefox " + g3[1]) : "Firefox" == $2 && (g3 = /\b(Mobile|Tablet|TV)\b/i.exec(t2)) ? (H2 || (H2 = "Firefox OS"), G2 || (G2 = g3[1])) : !$2 || (g3 = !/\bMinefield\b/i.test(t2) && /\b(?:Firefox|Safari)\b/.exec($2)) ? ($2 && !G2 && /[\/,]|^[^(]+?\)/.test(t2.slice(t2.indexOf(g3 + "/") + 8)) && ($2 = null), (g3 = G2 || q2 || H2) && (G2 || q2 || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(H2)) && ($2 = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(H2) ? H2 : g3) + " Browser")) : "Electron" == $2 && (g3 = (/\bChrome\/([\d.]+)\b/.exec(t2) || 0)[1]) && D2.push("Chromium " + g3), B2 || (B2 = getVersion(["(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$)|UCBrowser|YaBrowser)", "Version", qualify($2), "(?:Firefox|Minefield|NetFront)"])), (g3 = ("iCab" == j2 && parseFloat(B2) > 3 ? "WebKit" : /\bOpera\b/.test($2) && (/\bOPR\b/.test(t2) ? "Blink" : "Presto")) || /\b(?:Midori|Nook|Safari)\b/i.test(t2) && !/^(?:Trident|EdgeHTML)$/.test(j2) && "WebKit" || !j2 && /\bMSIE\b/i.test(t2) && ("Mac OS" == H2 ? "Tasman" : "Trident") || "WebKit" == j2 && /\bPlayStation\b(?! Vita\b)/i.test($2) && "NetFront") && (j2 = [g3]), "IE" == $2 && (g3 = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(t2) || 0)[1]) ? ($2 += " Mobile", H2 = "Windows Phone " + (/\+$/.test(g3) ? g3 : g3 + ".x"), D2.unshift("desktop mode")) : /\bWPDesktop\b/i.test(t2) ? ($2 = "IE Mobile", H2 = "Windows Phone 8.x", D2.unshift("desktop mode"), B2 || (B2 = (/\brv:([\d.]+)/.exec(t2) || 0)[1])) : "IE" != $2 && "Trident" == j2 && (g3 = /\brv:([\d.]+)/.exec(t2)) && ($2 && D2.push("identifying as " + $2 + (B2 ? " " + B2 : "")), $2 = "IE", B2 = g3[1]), x2) {
          if (function isHostType(t3, o4) {
            var a4 = null != t3 ? typeof t3[o4] : "number";
            return !(/^(?:boolean|number|string|undefined)$/.test(a4) || "object" == a4 && !t3[o4]);
          }(o3, "global"))
            if (b2 && (w2 = (g3 = b2.lang.System).getProperty("os.arch"), H2 = H2 || g3.getProperty("os.name") + " " + g3.getProperty("os.version")), R2) {
              try {
                B2 = o3.require("ringo/engine").version.join("."), $2 = "RingoJS";
              } catch (t3) {
                (g3 = o3.system) && g3.global.system == o3.system && ($2 = "Narwhal", H2 || (H2 = g3[0].os || null));
              }
              $2 || ($2 = "Rhino");
            } else
              "object" == typeof o3.process && !o3.process.browser && (g3 = o3.process) && ("object" == typeof g3.versions && ("string" == typeof g3.versions.electron ? (D2.push("Node " + g3.versions.node), $2 = "Electron", B2 = g3.versions.electron) : "string" == typeof g3.versions.nw && (D2.push("Chromium " + B2, "Node " + g3.versions.node), $2 = "NW.js", B2 = g3.versions.nw)), $2 || ($2 = "Node.js", w2 = g3.arch, H2 = g3.platform, B2 = (B2 = /[\d.]+/.exec(g3.version)) ? B2[0] : null));
          else
            getClassOf(g3 = o3.runtime) == S3 ? ($2 = "Adobe AIR", H2 = g3.flash.system.Capabilities.os) : getClassOf(g3 = o3.phantom) == O2 ? ($2 = "PhantomJS", B2 = (g3 = g3.version || null) && g3.major + "." + g3.minor + "." + g3.patch) : "number" == typeof k2.documentMode && (g3 = /\bTrident\/(\d+)/i.exec(t2)) ? (B2 = [B2, k2.documentMode], (g3 = +g3[1] + 4) != B2[1] && (D2.push("IE " + B2[1] + " mode"), j2 && (j2[1] = ""), B2[1] = g3), B2 = "IE" == $2 ? String(B2[1].toFixed(1)) : B2[0]) : "number" == typeof k2.documentMode && /^(?:Chrome|Firefox)\b/.test($2) && (D2.push("masking as " + $2 + " " + B2), $2 = "IE", B2 = "11.0", j2 = ["Trident"], H2 = "Windows");
          H2 = H2 && format2(H2);
        }
        if (B2 && (g3 = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(B2) || /(?:alpha|beta)(?: ?\d)?/i.exec(t2 + ";" + (x2 && u3.appMinorVersion)) || /\bMinefield\b/i.test(t2) && "a") && (U2 = /b/i.test(g3) ? "beta" : "alpha", B2 = B2.replace(RegExp(g3 + "\\+?$"), "") + ("beta" == U2 ? V2 : A2) + (/\d+\+?/.exec(g3) || "")), "Fennec" == $2 || "Firefox" == $2 && /\b(?:Android|Firefox OS|KaiOS)\b/.test(H2))
          $2 = "Firefox Mobile";
        else if ("Maxthon" == $2 && B2)
          B2 = B2.replace(/\.[\d.]+/, ".x");
        else if (/\bXbox\b/i.test(G2))
          "Xbox 360" == G2 && (H2 = null), "Xbox 360" == G2 && /\bIEMobile\b/.test(t2) && D2.unshift("mobile mode");
        else if (!/^(?:Chrome|IE|Opera)$/.test($2) && (!$2 || G2 || /Browser|Mobi/.test($2)) || "Windows CE" != H2 && !/Mobi/i.test(t2))
          if ("IE" == $2 && x2)
            try {
              null === o3.external && D2.unshift("platform preview");
            } catch (t3) {
              D2.unshift("embedded");
            }
          else
            (/\bBlackBerry\b/.test(G2) || /\bBB10\b/.test(t2)) && (g3 = (RegExp(G2.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(t2) || 0)[1] || B2) ? (H2 = ((g3 = [g3, /BB10/.test(t2)])[1] ? (G2 = null, q2 = "BlackBerry") : "Device Software") + " " + g3[0], B2 = null) : this != forOwn && "Wii" != G2 && (x2 && P2 || /Opera/.test($2) && /\b(?:MSIE|Firefox)\b/i.test(t2) || "Firefox" == $2 && /\bOS X (?:\d+\.){2,}/.test(H2) || "IE" == $2 && (H2 && !/^Win/.test(H2) && B2 > 5.5 || /\bWindows XP\b/.test(H2) && B2 > 8 || 8 == B2 && !/\bTrident\b/.test(t2))) && !_2.test(g3 = parse.call(forOwn, t2.replace(_2, "") + ";")) && g3.name && (g3 = "ing as " + g3.name + ((g3 = g3.version) ? " " + g3 : ""), _2.test($2) ? (/\bIE\b/.test(g3) && "Mac OS" == H2 && (H2 = null), g3 = "identify" + g3) : (g3 = "mask" + g3, $2 = L2 ? format2(L2.replace(/([a-z])([A-Z])/g, "$1 $2")) : "Opera", /\bIE\b/.test(g3) && (H2 = null), x2 || (B2 = null)), j2 = ["Presto"], D2.push(g3));
        else
          $2 += " Mobile";
        (g3 = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(t2) || 0)[1]) && (g3 = [parseFloat(g3.replace(/\.(\d)$/, ".0$1")), g3], "Safari" == $2 && "+" == g3[1].slice(-1) ? ($2 = "WebKit Nightly", U2 = "alpha", B2 = g3[1].slice(0, -1)) : B2 != g3[1] && B2 != (g3[2] = (/\bSafari\/([\d.]+\+?)/i.exec(t2) || 0)[1]) || (B2 = null), g3[1] = (/\b(?:Headless)?Chrome\/([\d.]+)/i.exec(t2) || 0)[1], 537.36 == g3[0] && 537.36 == g3[2] && parseFloat(g3[1]) >= 28 && "WebKit" == j2 && (j2 = ["Blink"]), x2 && (E3 || g3[1]) ? (j2 && (j2[1] = "like Chrome"), g3 = g3[1] || ((g3 = g3[0]) < 530 ? 1 : g3 < 532 ? 2 : g3 < 532.05 ? 3 : g3 < 533 ? 4 : g3 < 534.03 ? 5 : g3 < 534.07 ? 6 : g3 < 534.1 ? 7 : g3 < 534.13 ? 8 : g3 < 534.16 ? 9 : g3 < 534.24 ? 10 : g3 < 534.3 ? 11 : g3 < 535.01 ? 12 : g3 < 535.02 ? "13+" : g3 < 535.07 ? 15 : g3 < 535.11 ? 16 : g3 < 535.19 ? 17 : g3 < 536.05 ? 18 : g3 < 536.1 ? 19 : g3 < 537.01 ? 20 : g3 < 537.11 ? "21+" : g3 < 537.13 ? 23 : g3 < 537.18 ? 24 : g3 < 537.24 ? 25 : g3 < 537.36 ? 26 : "Blink" != j2 ? "27" : "28")) : (j2 && (j2[1] = "like Safari"), g3 = (g3 = g3[0]) < 400 ? 1 : g3 < 500 ? 2 : g3 < 526 ? 3 : g3 < 533 ? 4 : g3 < 534 ? "4+" : g3 < 535 ? 5 : g3 < 537 ? 6 : g3 < 538 ? 7 : g3 < 601 ? 8 : g3 < 602 ? 9 : g3 < 604 ? 10 : g3 < 606 ? 11 : g3 < 608 ? 12 : "12"), j2 && (j2[1] += " " + (g3 += "number" == typeof g3 ? ".x" : /[.+]/.test(g3) ? "" : "+")), "Safari" == $2 && (!B2 || parseInt(B2) > 45) ? B2 = g3 : "Chrome" == $2 && /\bHeadlessChrome/i.test(t2) && D2.unshift("headless")), "Opera" == $2 && (g3 = /\bzbov|zvav$/.exec(H2)) ? ($2 += " ", D2.unshift("desktop mode"), "zvav" == g3 ? ($2 += "Mini", B2 = null) : $2 += "Mobile", H2 = H2.replace(RegExp(" *" + g3 + "$"), "")) : "Safari" == $2 && /\bChrome\b/.exec(j2 && j2[1]) ? (D2.unshift("desktop mode"), $2 = "Chrome Mobile", B2 = null, /\bOS X\b/.test(H2) ? (q2 = "Apple", H2 = "iOS 4.3+") : H2 = null) : /\bSRWare Iron\b/.test($2) && !B2 && (B2 = getVersion("Chrome")), B2 && 0 == B2.indexOf(g3 = /[\d.]+$/.exec(H2)) && t2.indexOf("/" + g3 + "-") > -1 && (H2 = trim2(H2.replace(g3, ""))), H2 && -1 != H2.indexOf($2) && !RegExp($2 + " OS").test(H2) && (H2 = H2.replace(RegExp(" *" + qualify($2) + " *"), "")), j2 && !/\b(?:Avant|Nook)\b/.test($2) && (/Browser|Lunascape|Maxthon/.test($2) || "Safari" != $2 && /^iOS/.test(H2) && /\bSafari\b/.test(j2[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test($2) && j2[1]) && (g3 = j2[j2.length - 1]) && D2.push(g3), D2.length && (D2 = ["(" + D2.join("; ") + ")"]), q2 && G2 && G2.indexOf(q2) < 0 && D2.push("on " + q2), G2 && D2.push((/^on /.test(D2[D2.length - 1]) ? "" : "on ") + G2), H2 && (g3 = / ([\d.+]+)$/.exec(H2), I3 = g3 && "/" == H2.charAt(H2.length - g3[0].length - 1), H2 = { architecture: 32, family: g3 && !I3 ? H2.replace(g3[0], "") : H2, version: g3 ? g3[1] : null, toString: function() {
          var t3 = this.version;
          return this.family + (t3 && !I3 ? " " + t3 : "") + (64 == this.architecture ? " 64-bit" : "");
        } }), (g3 = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(w2)) && !/\bi686\b/i.test(w2) ? (H2 && (H2.architecture = 64, H2.family = H2.family.replace(RegExp(" *" + g3), "")), $2 && (/\bWOW64\b/i.test(t2) || x2 && /\w(?:86|32)$/.test(u3.cpuClass || u3.platform) && !/\bWin64; x64\b/i.test(t2)) && D2.unshift("32-bit")) : H2 && /^OS X/.test(H2.family) && "Chrome" == $2 && parseFloat(B2) >= 39 && (H2.architecture = 64), t2 || (t2 = null);
        var Y2 = {};
        return Y2.description = t2, Y2.layout = j2 && j2[0], Y2.manufacturer = q2, Y2.name = $2, Y2.prerelease = U2, Y2.product = G2, Y2.ua = t2, Y2.version = $2 && B2, Y2.os = H2 || { architecture: null, family: null, version: null, toString: function() {
          return "null";
        } }, Y2.parse = parse, Y2.toString = function toStringPlatform() {
          return this.description || "";
        }, Y2.version && D2.unshift(B2), Y2.name && D2.unshift($2), H2 && $2 && (H2 != String(H2).split(" ")[0] || H2 != $2.split(" ")[0] && !G2) && D2.push(G2 ? "(" + H2 + ")" : "on " + H2), D2.length && (Y2.description = D2.join(" ")), Y2;
      }();
      u2 && h2 ? forOwn(S2, function(t2, o3) {
        u2[o3] = t2;
      }) : m2.platform = S2;
    }).call(t);
  });
  var _t = { accountId: { type: "string", allowEmpty: false }, content: { type: "object", required: false, rules: { msg: { type: "string", allowEmpty: false }, type: { type: "number", allowEmpty: false } } }, messages: { type: "array", required: false, rules: { msg: { type: "string", allowEmpty: false }, type: { type: "number" }, role: { type: "enum", values: ["assistant", "user", "system"] } } }, promptVariables: { type: "jsonstr", required: false }, modelConfigParams: { type: "object", required: false, rules: { prompt: { type: "string", required: false }, maxTokens: { type: "number", required: false }, topP: { type: "number", required: false }, temperature: { type: "number", required: false } } } };
  Object.assign({ requestId: { type: "string", allowEmpty: false } }, _t);
  var Jt = { sceneName: { type: "string", required: false }, name: { type: "string", required: false } }, Xt = Object.assign(Object.assign({}, Jt), { duration: { type: "number", required: false } });
  Object.assign(Object.assign({}, Xt), { width: { type: "number", required: false }, height: { type: "number", required: false } });
  Object.assign(Object.assign({}, Jt), { width: { type: "number", required: false }, height: { type: "number", required: false } });
  var or = { antispamBusinessId: 1 }, nr = "V2NIMTeamService", sr = { teamId: 1, name: 3, teamType: { id: 4, retConverter: (t2) => 0 == +t2 ? 1 : +t2 }, ownerAccountId: 5, memberLimit: { id: 6, retType: "number" }, isValidTeam: { id: 8, retConverter: (t2, o2) => 1 == +t2 && (void 0 === o2[13] || 1 == +o2[13]) }, memberCount: { id: 9, retType: "number" }, memberUpdateTime: { id: 10, retType: "number" }, createTime: { id: 11, retType: "number" }, updateTime: { id: 12, retType: "number" }, intro: 14, announcement: 15, joinMode: { id: 16, retType: "number" }, serverExtension: 18, customerExtension: 19, avatar: 20, agreeMode: { id: 21, retType: "number" }, inviteMode: { id: 22, retType: "number" }, updateInfoMode: { id: 23, retType: "number" }, updateExtensionMode: { id: 24, retType: "number" }, chatBannedMode: { id: 101, retType: "number" } }, ar = { teamId: 1, accountId: 3, memberRole: { id: 4, retType: "number" }, teamNick: 5, bits: { id: 7, retType: "number" }, inTeam: { id: 9, retType: "boolean" }, joinTime: { id: 10, retType: "number" }, updateTime: { id: 11, retType: "number" }, serverExtension: 12, chatBanned: { id: 13, retType: "boolean" }, invitorAccountId: 14, followAccountIds: { id: 16, retConverter: (t2) => {
    try {
      return JSON.parse(t2);
    } catch (t3) {
      return [];
    }
  } } }, cr = { teamId: 1, accountId: 3, memberRole: { id: 4, retType: "number" }, teamNick: 5, bits: { id: 7, retType: "number" }, inTeam: { id: 9, retType: "boolean" }, updateTime: { id: 11, retType: "number" }, serverExtension: 12, chatBanned: { id: 13, retType: "boolean" }, invitorAccountId: 14, joinTime: { id: 15, retType: "number" }, followAccountIds: { id: 17, retConverter: (t2) => {
    try {
      return JSON.parse(t2);
    } catch (t3) {
      return [];
    }
  } } }, dr = { accountIds: { id: 1, converter: (t2) => JSON.stringify(t2) }, operation: 2 }, lr = { teamId: 1, teamType: 2, roleQueryType: 3, onlyChatBanned: { id: 4, converter: (t2) => +t2 }, nextToken: 5, limit: 6, direction: 7 };
  ({ v2TeamCreate: { sid: 31, cid: 1, service: nr, params: [{ type: "Property", name: "team", reflectMapper: sr }, { type: "StrArray", name: "inviteeAccountIds" }, { type: "String", name: "postscript" }, { type: "Property", name: "antispamConfig", reflectMapper: or }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }, { type: "StrArray", name: "failedList" }] }, v2SuperTeamCreate: { sid: 32, cid: 1, service: nr, params: [{ type: "Property", name: "team", reflectMapper: sr }, { type: "StrArray", name: "inviteeAccountIds" }, { type: "String", name: "postscript" }, { type: "Property", name: "antispamConfig", reflectMapper: or }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }, { type: "StrArray", name: "failedList" }] }, v2TeamInviteMembers: { sid: 31, cid: 5, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }, { type: "String", name: "attach" }], response: [{ type: "Long", name: "time" }, { type: "StrArray", name: "abortedAccidList" }] }, v2SuperTeamInviteMembers: { sid: 32, cid: 5, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }, { type: "String", name: "ps" }, { type: "String", name: "attach" }], response: [{ type: "StrArray", name: "abortedAccidList" }, { type: "Long", name: "time" }] }, v2TeamUpdateInfo: { sid: 31, cid: 7, service: nr, params: [{ type: "Property", name: "team", reflectMapper: sr }, { type: "Property", name: "antispamConfig", reflectMapper: or }], response: [{ type: "Long", name: "teamId" }, { type: "Long", name: "timestamp" }] }, v2SuperTeamUpdateInfo: { sid: 32, cid: 8, service: nr, params: [{ type: "Property", name: "team", reflectMapper: sr }, { type: "Property", name: "antispamConfig", reflectMapper: or }], response: [{ type: "Long", name: "timestamp" }] }, v2TeamLeave: { sid: 31, cid: 8, service: nr, params: [{ type: "Long", name: "teamId" }] }, v2SuperTeamLeave: { sid: 32, cid: 7, service: nr, params: [{ type: "Long", name: "teamId" }] }, v2TeamGetInfo: { sid: 31, cid: 9, service: nr, params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }] }, v2SuperTeamGetInfo: { sid: 32, cid: 9, service: nr, params: [{ type: "Long", name: "teamId" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }] }, v2TeamGetByIds: { sid: 31, cid: 34, service: nr, params: [{ type: "LongArray", name: "teamIds" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: invertSerializeItem(sr) }, { type: "LongArray", name: "tids" }] }, v2SuperTeamGetByIds: { sid: 32, cid: 36, service: nr, params: [{ type: "LongArray", name: "teamIds" }], response: [{ type: "PropertyArray", name: "teams", reflectMapper: invertSerializeItem(sr) }, { type: "LongArray", name: "tids" }] }, v2TeamDismiss: { sid: 31, cid: 12, service: nr, params: [{ type: "Long", name: "teamId" }] }, v2SuperTeamDismiss: { sid: 32, cid: 4, service: nr, params: [{ type: "Long", name: "teamId" }] }, v2TeamAcceptInvitation: { sid: 31, cid: 21, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }] }, v2SuperTeamAcceptInvitation: { sid: 32, cid: 23, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }] }, v2TeamRejectInvite: { sid: 31, cid: 22, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2SuperTeamRejectInvite: { sid: 32, cid: 24, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2TeamKickMembers: { sid: 31, cid: 6, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamKickMembers: { sid: 32, cid: 6, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamApplyToJoin: { sid: 31, cid: 13, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }, { type: "Int", name: "isInTeam" }] }, v2SuperTeamApplyToJoin: { sid: 32, cid: 20, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "ps" }], response: [{ type: "Property", name: "team", reflectMapper: invertSerializeItem(sr) }, { type: "Int", name: "isInTeam" }] }, v2TeamAcceptJoinApplication: { sid: 31, cid: 14, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, v2SuperTeamAcceptJoinApplication: { sid: 32, cid: 21, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }] }, v2TeamRejectJoinApplication: { sid: 31, cid: 15, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2SuperTeamRejectJoinApplication: { sid: 32, cid: 22, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "from" }, { type: "String", name: "ps" }] }, v2TeamAddManagers: { sid: 31, cid: 16, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamAddManagers: { sid: 32, cid: 26, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamRemoveManagers: { sid: 31, cid: 17, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2SuperTeamRemoveManagers: { sid: 32, cid: 27, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }] }, v2TeamTransferOwner: { sid: 31, cid: 18, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, v2SuperTeamTransferOwner: { sid: 32, cid: 31, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "account" }, { type: "Bool", name: "leave" }] }, v2TeamUpdateSelfMemberInfo: { sid: 31, cid: 19, service: nr, params: [{ type: "Property", name: "teamMember", reflectMapper: ar }, { type: "Property", name: "specialFollowUpdate", reflectMapper: dr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(ar) }] }, v2SuperTeamUpdateSelfMemberInfo: { sid: 32, cid: 10, service: nr, params: [{ type: "Property", name: "teamMember", reflectMapper: cr }, { type: "Property", name: "specialFollowUpdate", reflectMapper: dr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(cr) }] }, v2TeamUpdateMember: { sid: 31, cid: 20, service: nr, params: [{ type: "Property", name: "teamMember", reflectMapper: ar }] }, v2SuperTeamUpdateMember: { sid: 32, cid: 30, service: nr, params: [{ type: "Property", name: "teamMember", reflectMapper: cr }] }, v2TeamGetMemberInvitor: { sid: 31, cid: 33, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrStrMap", name: "accountsMap" }] }, v2SuperTeamGetMemberInvitor: { sid: 32, cid: 35, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accounts" }], response: [{ type: "StrStrMap", name: "accountsMap" }] }, v2TeamMemberSetChatBannedStatus: { sid: 31, cid: 25, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "String", name: "accountId" }, { type: "Int", name: "chatBanned" }] }, v2SuperTeamMemberSetChatBannedStatus: { sid: 32, cid: 29, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "StrArray", name: "accountId" }, { type: "Int", name: "chatBanned" }] }, v2TeamSetChatBannedMode: { sid: 31, cid: 32, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "chatBannedMode" }] }, v2SuperTeamSetChatBannedMode: { sid: 32, cid: 28, service: nr, params: [{ type: "Long", name: "teamId" }, { type: "Int", name: "chatBannedMode" }] }, v2TeamMemberGetListByIds: { sid: 31, cid: 35, service: nr, params: [{ type: "StrArray", name: "tag" }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(ar) }] }, v2SuperTeamMemberGetListByIds: { sid: 32, cid: 37, service: nr, params: [{ type: "StrArray", name: "tag" }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(cr) }] }, v2TeamMemberGetList: { sid: 31, cid: 36, service: nr, params: [{ type: "Property", name: "tag", reflectMapper: lr }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(ar) }, { type: "Property", name: "pageInfo", reflectMapper: { 1: "hasMore", 2: "nextToken" } }] }, v2TeamSync: { sid: 8, cid: 109, service: nr, response: [{ type: "Long", name: "timetag" }, { type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(sr) }] }, v2TeamCreateMultiSync: { sid: 8, cid: 101, service: nr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(sr) }] }, v2TeamMemberUpdateMultiSync: { sid: 8, cid: 119, service: nr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(ar) }] }, v2TeamMembersOfSelfInSync: { sid: 8, cid: 126, service: nr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(ar) }, { type: "Long", name: "timetag" }] }, v2SuperTeamSync: { sid: 21, cid: 109, service: nr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(sr) }, { type: "Bool", name: "isAll" }, { type: "Long", name: "timetag" }] }, v2SuperTeamCreateMultiSync: { sid: 21, cid: 101, service: nr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(sr) }] }, v2SuperTeamMemberUpdateMultiSync: { sid: 21, cid: 110, service: nr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(cr) }] }, v2SuperTeamMembersOfSelfInSync: { sid: 21, cid: 111, service: nr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(cr) }, { type: "Long", name: "timetag" }] } });
  function attachmentToRaw(t2, o2) {
    if (!o2)
      return "";
    switch (t2) {
      case 100:
        return o2.raw || "";
      case 1:
      case 3:
      case 2:
      case 6:
        return function mediaAttachmentToRaw(t3) {
          var o3 = t3, { width: a2, height: m2, duration: u2, path: h2, file: g2, raw: I2, ctx: _2, payload: E2, bucketName: M2, objectName: T2, token: S2, ext: C2 } = o3, N2 = __rest$1(o3, ["width", "height", "duration", "path", "file", "raw", "ctx", "payload", "bucketName", "objectName", "token", "ext"]), O2 = "string" == typeof C2 && "." === C2[0] ? C2.slice(1) : C2;
          return JSON.stringify(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, N2), void 0 === C2 ? {} : { ext: O2 }), void 0 === a2 ? {} : { w: a2 }), void 0 === m2 ? {} : { h: m2 }), void 0 === u2 ? {} : { dur: u2 }));
        }(o2);
      case 4:
        return function locationAttachmentToRaw(t3) {
          return JSON.stringify({ lat: t3.latitude, lng: t3.longitude, title: t3.address });
        }(o2);
      case 12:
        return function callAttachmentToRaw(t3) {
          var o3 = __rest$1(t3, ["raw"]);
          try {
            return JSON.stringify(Object.assign(Object.assign({}, o3), { durations: t3.durations.map((t4) => ({ accid: t4.accountId, duration: t4.duration })) }));
          } catch (o4) {
            return JSON.stringify(t3);
          }
        }(o2);
      default:
        return o2.raw || JSON.stringify(o2);
    }
  }
  function rawToAttachment(t2, o2) {
    var a2;
    try {
      switch (a2 = JSON.parse(t2), o2) {
        case 100:
          return { raw: t2 };
        case 4:
          return function locationRawToAttachment(t3, o3) {
            return { latitude: o3.lat, longitude: o3.lng, address: o3.title, raw: t3 };
          }(t2, a2);
        case 2:
        case 3:
        case 1:
        case 6:
          return function mediaRawToAttachment(t3, o3) {
            var { w: a3, h: m2, dur: u2, ext: h2 } = o3, g2 = __rest$1(o3, ["w", "h", "dur", "ext"]), I2 = "string" == typeof h2 && "." !== h2[0] ? `.${h2}` : h2;
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, g2), void 0 === h2 ? {} : { ext: I2 }), void 0 === a3 ? {} : { width: a3 }), void 0 === m2 ? {} : { height: m2 }), void 0 === u2 ? {} : { duration: u2 }), { raw: t3 });
          }(t2, a2);
        case 12:
          return function callRawToAttachment(t3, o3) {
            return Object.assign(Object.assign({}, o3), { durations: o3.durations.map((t4) => ({ accountId: t4.accid, duration: t4.duration })), raw: t3 });
          }(t2, a2);
        default:
          return "object" == typeof a2 && a2 ? Object.assign(Object.assign({}, a2), { raw: t2 }) : { raw: t2 };
      }
    } catch (o3) {
      return "object" == typeof a2 && a2 ? Object.assign(Object.assign({}, a2), { raw: t2 }) : { raw: t2 };
    }
  }
  var mr = "V2NIMMessageService", hr = { conversationType: { id: 0, converter: conversationTypeV2ToV1, retConverter: conversationTypeV1ToV2 }, receiverId: 1, senderId: 2, fromClientType: 4, fromDeviceId: 5, fromNick: 6, createTime: { id: 7, retType: "number" }, messageType: { id: 8, retType: "number" }, text: 9, attachment: { id: 10, converter: (t2, o2) => attachmentToRaw(o2.messageType, t2), retConverter: (t2, o2) => rawToAttachment(t2, Number(o2[8])) }, messageClientId: 11, messageServerId: 12, resend: { id: 13, converter: boolToInt, retType: "boolean" }, userUpdateTime: { id: 14, retType: "number" }, serverExtension: 15, pushPayload: { id: 16, access: "pushConfig.pushPayload" }, pushContent: { id: 17, access: "pushConfig.pushContent" }, forcePushAccountIds: { id: 18, access: "pushConfig.forcePushAccountIds", def: (t2) => {
    if (t2["pushConfig.forcePush"])
      return "#%@all@%#";
  }, converter: (t2, o2) => {
    if (o2["pushConfig.forcePush"])
      return t2 ? JSON.stringify(t2) : "#%@all@%#";
  }, retConverter(t2) {
    if ("#%@all@%#" !== t2 && t2)
      try {
        return JSON.parse(t2);
      } catch (t3) {
        return [];
      }
  } }, forcePushContent: { id: 19, access: "pushConfig.forcePushContent" }, forcePush: { id: 20, access: "pushConfig.forcePush", converter: boolToInt, retType: "boolean" }, antispamCustomMessageEnabled: { id: 21, def: (t2) => get(t2, "antispamConfig.antispamCustomMessage") ? 1 : void 0, retConverter: () => {
  } }, antispamCustomMessage: { id: 22, access: "antispamConfig.antispamCustomMessage" }, antispamBusinessId: { id: 23, access: "antispamConfig.antispamBusinessId" }, clientAntispamHit: { id: 24, access: "clientAntispamHit", converter: boolToInt, retType: "boolean" }, antispamEnabled: { id: 25, access: "antispamConfig.antispamEnabled", converter: boolToInt, retType: "boolean" }, needAck: { id: 26, access: "messageConfig.readReceiptEnabled", converter: boolToInt, retType: "boolean" }, lastMessageUpdateEnabled: { id: 28, access: "messageConfig.lastMessageUpdateEnabled", converter: boolToInt, retType: "boolean" }, threadReplySenderId: { id: 29, access: "threadReply.senderId" }, threadReplyReceiverId: { id: 30, access: "threadReply.receiverId" }, threadReplyTime: { id: 31, access: "threadReply.createTime", retType: "number" }, threadReplyServerId: { id: 32, access: "threadReply.messageServerId" }, threadReplyClientId: { id: 33, access: "threadReply.messageClientId" }, threadRootSenderId: { id: 34, access: "threadRoot.senderId" }, threadRootReceiverId: { id: 35, access: "threadRoot.receiverId" }, threadRootTime: { id: 36, access: "threadRoot.createTime", retType: "number" }, threadRootServerId: { id: 37, access: "threadRoot.messageServerId" }, threadRootClientId: { id: 38, access: "threadRoot.messageClientId" }, callbackExtension: 40, subType: { id: 41, retType: "number" }, antispamCheating: { id: 42, access: "antispamConfig.antispamCheating" }, routeEnvironment: { id: 43, access: "routeConfig.routeEnvironment" }, antispamExtension: { id: 44, access: "antispamConfig.antispamExtension" }, antispamResult: 45, __clientExt: { id: 46, converter: objectToJSONString, retConverter: stringToJSONObject }, robotFunction: { id: 47, access: "robotConfig.function" }, robotTopic: { id: 48, access: "robotConfig.topic" }, robotCustomContent: { id: 49, access: "robotConfig.customContent" }, robotAccount: { id: 50, access: "robotConfig.accountId" }, _conversationOnlineSyncNotify: { id: 51 }, _conversationOnlineSyncData: { id: 52 }, aiAgentMsgDirection: { id: 55, access: "aiConfig.aiStatus", retAccess: "aiConfig.aiStatus", retType: "number" }, aiAgentAccount: { id: 56, access: "aiConfig.accountId", retAccess: "aiConfig.accountId" }, aiAgentContent: { id: 57, access: "aiConfig.content", converter: objectToJSONString, retConverter: emptyFunc }, aiAgentMessages: { id: 58, access: "aiConfig.messages", converter: objectToJSONString, retConverter: emptyFunc }, aiAgentPromptVariables: { id: 59, access: "aiConfig.promptVariables", retConverter: emptyFunc }, aiAgentModelConfigParams: { id: 60, access: "aiConfig.modelConfigParams", converter: objectToJSONString, retConverter: emptyFunc }, errorCode: { id: 61, access: "messageStatus.errorCode", retType: "number" }, modifyTime: { id: 62, retType: "number" }, modifyAccountId: 63, historyEnabled: { id: 100, access: "messageConfig.historyEnabled", converter: boolToInt, retType: "boolean" }, roamingEnabled: { id: 101, access: "messageConfig.roamingEnabled", converter: boolToInt, retType: "boolean" }, onlineSyncEnabled: { id: 102, access: "messageConfig.onlineSyncEnabled", converter: boolToInt, retType: "boolean" }, routeEnabled: { id: 105, access: "routeConfig.routeEnabled", converter: boolToInt, retType: "boolean" }, pushEnable: { id: 107, access: "pushConfig.pushEnabled", converter: boolToInt, retType: "boolean" }, offlineEnabled: { id: 108, access: "messageConfig.offlineEnabled", converter: boolToInt, retType: "boolean" }, unreadEnabled: { id: 109, access: "messageConfig.unreadEnabled", converter: boolToInt, retType: "boolean" }, pushNickEnabled: { id: 110, access: "pushConfig.pushNickEnabled", converter: boolToInt, retType: "boolean" }, msgAckSnapshot: { id: 112, retType: "number" }, receiverIds: { id: 154, access: "targetConfig.receiverIds", converter: objectToJSONString, retConverter: () => {
  } }, inclusive: { id: 155, access: "targetConfig.inclusive", converter: (t2) => t2 ? 1 : 2, retConverter: () => {
  } }, newMemberVisible: { id: 156, access: "targetConfig.newMemberVisible", converter: (t2) => t2 ? 1 : 2, retConverter: () => {
  } } };
  invertSerializeItem(hr);
  var vr = { conversationType: { id: 1, access: "messageRefer.conversationType", retType: "number" }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, messageServerId: { id: 4, access: "messageRefer.messageServerId" }, messageClientId: { id: 5, access: "messageRefer.messageClientId" }, createTime: { id: 6, access: "messageRefer.createTime", retType: "number" }, deleteTime: { id: 7, retType: "number" }, serverExtension: 8 };
  invertSerializeItem(vr);
  var fr = { version: 1, md5: 2, nosurl: 3, thesaurus: 4 }, Ir = { createTime: { id: 0, retType: "number" }, sysMsgType: 1, receiverId: 2, senderId: 3, postscript: 4, attach: 5, pushContent: 8, pushPayload: 9, messageClientId: 10, messageServerId: 11, deleteMsgCreatetime: { id: 14, retType: "number" }, opeAccount: 16, env: 21, callbackExtension: 22 }, yr = { receiverId: 0, messageServerId: 1, readCount: { id: 100, retType: "number" }, unreadCount: { id: 101, retType: "number" }, messageClientId: 102, latestReadAccount: 103 };
  ({ v2BatchMarkRead: { sid: 4, cid: 5, service: mr, hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, v2SendP2pMessage: { sid: 30, cid: 1, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, onMsg: { sid: 7, cid: 2, service: mr, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(hr) }] }, syncOfflineMsgs: { sid: 4, cid: 4, service: mr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(hr) }] }, syncRoamingMsgs: { sid: 4, cid: 9, service: mr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(hr) }] }, v2SendP2PMessageReceipt: { sid: 30, cid: 11, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2RevokeMessage: { sid: 30, cid: 13, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: Ir }] }, v2DeleteMessage: { sid: 30, cid: 23, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: vr }], response: [{ type: "Long", name: "timetag" }] }, v2DeleteMessages: { sid: 30, cid: 24, service: mr, params: [{ type: "PropertyArray", name: "tag", reflectMapper: vr }], response: [{ type: "Long", name: "timetag" }] }, v2SendTeamMessage: { sid: 31, cid: 2, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2SendTeamMessageReceipts: { sid: 31, cid: 28, service: mr, params: [{ type: "PropertyArray", name: "tag", reflectMapper: yr }], response: [{ type: "PropertyArray", name: "tag", reflectMapper: invertSerializeItem(yr) }] }, v2SendSuperTeamMessage: { sid: 32, cid: 2, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2RevokeSuperTeamMessage: { sid: 32, cid: 17, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: Ir }] }, syncP2PMessagReceipts: { sid: 4, cid: 12, service: mr, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(hr) }] }, onP2PMessageReceipts: { sid: 7, cid: 12, service: mr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2GetTeamMessageReceipts: { sid: 31, cid: 29, service: mr, params: [{ type: "PropertyArray", name: "tag", reflectMapper: yr }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(yr) }] }, v2GetTeamMessageReceiptDetail: { sid: 31, cid: 30, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: yr, select: ["receiverId", "messageServerId"] }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(yr) }, { type: "StrArray", name: "readAccountList" }, { type: "StrArray", name: "unreadAccountList" }] }, onTeamMessageReceipts: { sid: 8, cid: 31, service: mr, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(yr) }] }, onRevokeMessage: { sid: 7, cid: 14, service: mr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Ir) }] }, syncRevokeMessage: { sid: 7, cid: 15, service: mr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Ir) }] }, syncOnDeleteMessages: { sid: 4, cid: 21, service: mr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(vr) }] }, onDeleteMessage: { sid: 7, cid: 123, service: mr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(vr) }] }, onDeleteMessages: { sid: 7, cid: 124, service: mr, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(vr) }] }, v2DownloadLocalAntiSpamVocabs: { sid: 29, cid: 17, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: fr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(fr) }] }, v2MessageP2pModify: { sid: 30, cid: 31, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2MessageTeamModify: { sid: 31, cid: 37, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2MessageSuperTeamModify: { sid: 32, cid: 38, service: mr, params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2MessageOnModified: { sid: 7, cid: 33, service: mr, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2MessageSyncModified: { sid: 4, cid: 27, service: mr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(hr) }, { type: "Long", name: "time" }] }, v2MessageSuperTeamSyncModified: { sid: 4, cid: 28, service: mr, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(hr) }, { type: "Long", name: "time" }] } });
  function conversationTypeV2ToV1(t2) {
    return 1 === t2 ? 0 : 2 === t2 ? 1 : 3 === t2 ? 5 : void 0;
  }
  function conversationTypeV1ToV2(t2) {
    var o2 = parseInt(t2);
    return 0 === o2 ? 1 : 1 === o2 ? 2 : 5 === o2 ? 3 : 0;
  }
  var Er = "V2NIMNotificationService", Tr = { timestamp: { id: 0, retType: "number" }, type: { id: 1, retType: "number" }, receiverId: 2, senderId: 3, postscript: 4, content: 5, idServer: 6, offlineEnabled: { id: 7, converter: boolToInt, retConverter: function(t2, o2) {
    return "0" !== o2[6] && !!parseInt(t2);
  }, access: "notificationConfig.offlineEnabled" }, pushContent: { id: 8, access: "pushConfig.pushContent" }, pushPayload: { id: 9, access: "pushConfig.pushPayload" }, deletedIdClient: 10, deletedIdServer: 11, antispamEnabled: { id: 12, converter: boolToInt, retType: "boolean", access: "antispamConfig.antispamEnabled" }, antispamCustomNotification: { id: 13, access: "antispamConfig.antispamCustomNotification" }, deletedMsgCreateTime: 14, deletedMsgFromNick: 15, opeAccount: 16, forcePushAccountIds: { id: 18, access: "pushConfig.forcePushAccountIds", def: (t2) => {
    if (101 === t2.type && t2["pushConfig.forcePush"])
      return "#%@all@%#";
  }, converter: (t2, o2) => {
    if (o2["pushConfig.forcePush"])
      return t2 ? JSON.stringify(t2) : "#%@all@%#";
  }, retConverter(t2) {
    if ("#%@all@%#" !== t2 && t2)
      try {
        return JSON.parse(t2);
      } catch (t3) {
        return [];
      }
  } }, forcePushContent: { id: 19, access: "pushConfig.forcePushContent" }, forcePush: { id: 20, converter: boolToInt, retType: "boolean", access: "pushConfig.forcePush" }, routeEnvironment: { id: 21, access: "routeConfig.routeEnvironment" }, callbackExt: 22, clientNotificationId: { id: 23, access: "notificationConfig.clientNotificationId" }, conversationOnlineSyncNotify: 24, conversationOnlineSyncData: 25, routeEnabled: { id: 105, converter: boolToInt, retType: "boolean", access: "routeConfig.routeEnabled" }, pushEnabled: { id: 107, converter: boolToInt, retType: "boolean", access: "pushConfig.pushEnabled" }, unreadEnabled: { id: 109, converter: boolToInt, retType: "boolean", access: "notificationConfig.unreadEnabled" }, pushNickEnabled: { id: 110, converter: boolToInt, retType: "boolean", access: "pushConfig.pushNickEnabled" } }, Sr = { id: 1, senderId: 2, timestamp: { id: 4, retType: "number" }, content: 5 };
  ({ v2SendCustomNotification: { sid: 30, cid: 7, service: Er, params: [{ type: "Property", name: "tag", reflectMapper: Tr }] }, v2SendCustomNotificationWithSuperTeam: { sid: 32, cid: 16, service: Er, params: [{ type: "Property", name: "tag", reflectMapper: Tr }] }, onSysNotification: { sid: 7, cid: 3, service: Er, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Tr) }] }, syncBroadcastMsg: { sid: 4, cid: 16, service: Er, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Sr) }] }, onBroadcastMsg: { sid: 7, cid: 17, service: Er, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Sr) }] }, v2SyncOfflineSysNotifications: { sid: 4, cid: 9, service: Er, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Tr) }] }, v2NotificationRevoke: { sid: 7, cid: 14, service: Er, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Tr) }] }, v2NotificationSyncRevoke: { sid: 7, cid: 15, service: Er, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Tr) }, { type: "Long", name: "timetag" }, { type: "Byte", name: "type" }] } });
  ({ ysfBatchMarkRead: { sid: 4, cid: 5, service: "YSFService", hasPacketResponse: false, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] }, ysfSendMessage: { sid: 101, cid: 1, service: "YSFService", params: [{ type: "Property", name: "tag", reflectMapper: hr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, ysfOnMsg: { sid: 101, cid: 2, service: "YSFService", response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(hr) }] }, ysfSyncOfflineMsgs: { sid: 4, cid: 100, service: "YSFService", response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(hr) }] }, ysfOnSysNotification: { sid: 101, cid: 3, service: "YSFService", response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Tr) }] }, ysfSendCustomNotification: { sid: 101, cid: 7, service: "YSFService", params: [{ type: "Property", name: "tag", reflectMapper: Tr }] }, ysfSyncSysNotification: { sid: 4, cid: 101, service: "YSFService", response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Tr) }] } });
  var Ar, Vr;
  !function(t2) {
    t2[t2.nos = 1] = "nos", t2[t2.s3 = 2] = "s3";
  }(Ar || (Ar = {})), function(t2) {
    t2[t2.dontNeed = -1] = "dontNeed", t2[t2.time = 2] = "time", t2[t2.urls = 3] = "urls";
  }(Vr || (Vr = {}));
  var Dr = { nosToken: { objectName: 1, token: 2, bucket: 3, expireTime: 4, expireSec: 7, tag: 8, shortUrl: 9 }, mixStoreTokenReqTag: { provider: 0, tokenCount: 1, nosSurvivalTime: 2, tag: 3, returnBody: 4, policyVersion: 5 }, nosConfigTag: { bucket: 1, cdnDomain: 2, expire: 3, objectNamePrefix: 4 }, grayConfigTag: { config: 0, ttl: 1 }, mixStorePolicyTag: { providers: 0, ttl: 1, mixEnable: 2, nosPolicy: 3, s3Policy: 4, policyVersion: 5 }, mixStoreTokenResTag: { provider: 0, accessKeyId: 1, secretAccessKey: 2, sessionToken: 3, token: 4, expireTime: 5, bucket: 6, objectName: 7, fileExpireSec: 8, tag: 9, shortUrl: 10, region: 11 }, nosSafeUrlTag: { safeUrl: 0, originUrl: 1 }, mixStoreAuthTokenReqTag: { type: 1, urls: 2 }, mixStoreAuthTokenResTag: { type: 1, tokens: 2, token: 3, ttl: 4 }, nosAccessTokenTag: { token: 0, url: 1, userAgent: 2, ext: 3 } };
  ({ getNosToken: { sid: 6, cid: 2, service: "cloudStorage", params: [{ type: "String", name: "responseBody" }, { type: "Property", name: "nosToken", entity: "nosToken", reflectMapper: Dr.nosToken }], response: [{ type: "Property", name: "nosToken", reflectMapper: invert(Dr.nosToken) }] }, getOriginUrl: { sid: 6, cid: 22, service: "cloudStorage", params: [{ type: "Property", name: "nosSafeUrlTag", reflectMapper: Dr.nosSafeUrlTag }], response: [{ type: "Property", name: "nosSafeUrlTag", reflectMapper: invert(Dr.nosSafeUrlTag) }] }, getNosCdnHost: { sid: 6, cid: 26, service: "cloudStorage", response: [{ type: "Property", name: "nosConfigTag", reflectMapper: invert(Dr.nosConfigTag) }] }, getGrayscaleConfig: { sid: 6, cid: 27, service: "cloudStorage", params: [{ type: "Property", name: "config" }], response: [{ type: "Property", name: "grayConfigTag", reflectMapper: invert(Dr.grayConfigTag) }] }, getMixStorePolicy: { sid: 6, cid: 28, service: "cloudStorage", params: [{ type: "LongArray", name: "supportType" }], response: [{ type: "Property", name: "mixStorePolicyTag", reflectMapper: invert(Dr.mixStorePolicyTag) }] }, getMixStoreToken: { sid: 6, cid: 29, service: "cloudStorage", params: [{ type: "Property", name: "mixStoreTokenReqTag", reflectMapper: Dr.mixStoreTokenReqTag }], response: [{ type: "Property", name: "mixStoreTokenResTag", reflectMapper: invert(Dr.mixStoreTokenResTag) }] }, getFileAuthToken: { sid: 6, cid: 30, service: "cloudStorage", params: [{ type: "Property", name: "mixStoreAuthTokenReqTag", reflectMapper: Dr.mixStoreAuthTokenReqTag }], response: [{ type: "Property", name: "mixStoreAuthTokenResTag", reflectMapper: invert(Dr.mixStoreAuthTokenResTag) }] }, getNosAccessToken: { sid: 6, cid: 24, service: "cloudStorage", params: [{ type: "Property", name: "tag", reflectMapper: Dr.nosAccessTokenTag }], response: [{ type: "Property", name: "tag", reflectMapper: invert(Dr.nosAccessTokenTag) }] }, deleteNosAccessToken: { sid: 6, cid: 25, service: "cloudStorage", params: [{ type: "Property", name: "tag", reflectMapper: Dr.nosAccessTokenTag }] } });
  var $r = "V2NIMLocalConversationService", Gr = { id: 1, ext: 2, createTime: { id: 3, retType: "number" }, updateTime: { id: 4, retType: "number" } }, qr = { scene: 1, to: 2, timetag: 3 };
  ({ v2LocalConvSyncReadTime: { sid: 4, cid: 14, service: $r, response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Long", name: "timetag" }] }, v2LocalConvSyncSuperTeamReadTime: { sid: 4, cid: 20, service: $r, response: [{ type: "LongLongMap", name: "superTeam" }] }, v2LocalConvSyncMoreRoaming: { sid: 4, cid: 22, service: $r, response: [] }, v2LocalConvSyncStickTop: { sid: 4, cid: 23, service: $r, response: [{ type: "Long", name: "timetag" }, { type: "Bool", name: "isThereAnyChange" }, { type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Gr) }] }, v2LocalConvSyncReliableInfo: { sid: 4, cid: 25, service: $r, response: [] }, v2LocalConvMarkReadTime: { sid: 7, cid: 16, service: $r, params: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvMultiMarkReadTime: { sid: 7, cid: 25, service: $r, ignoreErrCodes: [700], params: [{ type: "PropertyArray", name: "tags", reflectMapper: qr }] }, v2LocalConvMultiSyncReadTime: { sid: 7, cid: 116, service: $r, response: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvSuperTeamMarkReadTime: { sid: 21, cid: 25, service: $r, params: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvSuperTeamMultiMarkReadTime: { sid: 21, cid: 32, service: $r, ignoreErrCodes: [700], params: [{ type: "PropertyArray", name: "tags", reflectMapper: qr }] }, v2LocalConvSuperTeamMultiSyncReadTime: { sid: 21, cid: 125, service: $r, response: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, v2LocalConvStickTopAdd: { sid: 33, cid: 12, service: $r, params: [{ type: "Property", name: "tag", reflectMapper: Gr }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Gr) }] }, v2LocalConvStickTopDelete: { sid: 33, cid: 13, service: $r, params: [{ type: "Property", name: "tag", reflectMapper: Gr }], response: [{ type: "Long", name: "timetag" }] }, v2LocalConvStickTopMultiSyncAdd: { sid: 23, cid: 112, service: $r, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Gr) }] }, v2LocalConvStickTopMultiSyncDelete: { sid: 23, cid: 113, service: $r, response: [{ type: "Long", name: "timetag" }, { type: "Property", name: "data", reflectMapper: invertSerializeItem(Gr) }] }, v2LocalConvStickTopMultiSyncUpdate: { sid: 23, cid: 114, service: $r, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Gr) }] } });
  var Yr;
  !function(t2) {
    t2[t2.createConversation = 1] = "createConversation", t2[t2.deleteConversation = 2] = "deleteConversation", t2[t2.updateConversation = 3] = "updateConversation", t2[t2.setConversationTop = 4] = "setConversationTop", t2[t2.clearConversationUnread = 5] = "clearConversationUnread", t2[t2.addConversationToGroup = 6] = "addConversationToGroup", t2[t2.removeConversationFromGroup = 7] = "removeConversationFromGroup", t2[t2.modifyConversationOnSendMessage = 8] = "modifyConversationOnSendMessage", t2[t2.modifyConversationOnDeleteMessage = 9] = "modifyConversationOnDeleteMessage", t2[t2.modifyConversationOnRecallMessage = 10] = "modifyConversationOnRecallMessage", t2[t2.modifyConversationOnClearMessage = 11] = "modifyConversationOnClearMessage", t2[t2.oneClickClearConversationUnread = 12] = "oneClickClearConversationUnread", t2[t2.modifyConversationOnUpdateMessage = 13] = "modifyConversationOnUpdateMessage";
  }(Yr || (Yr = {}));
  var Xr = "V2NIMConversationService", Qr = { conversationId: 1, type: 2, serverExtension: 3, groupIds: 4, lastMessage: 5, lastMessageState: 6, unreadCount: 7, stickTop: 8, sortOrder: 9, version: 10, deleteFlag: 11, createTime: 12, updateTime: 13 }, Zr = { type: 1, oneClickClearUnreadType: 2, oneClickClearUnreadConversationType: 3, oneClickClearUnreadGroupId: 4, oneClickClearUnreadVersion: 5, deleteConversationClearMessage: 6 };
  ({ v2ConversationCreate: { sid: 28, cid: 1, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Qr) }] }, v2ConversationDelete: { sid: 28, cid: 2, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, clearMessage: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Qr) }] }, v2ConversationUpdate: { sid: 28, cid: 3, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, serverExtension: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Qr) }] }, v2ConversationSetTop: { sid: 28, cid: 4, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, stickTop: 2 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Qr) }] }, v2ConversationUnreadClear: { sid: 28, cid: 5, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Qr) }] }, v2ConversationGet: { sid: 28, cid: 6, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(Qr) }] }, v2ConversationGetByIds: { sid: 28, cid: 7, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGetList: { sid: 28, cid: 8, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { cursor: 1, limit: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }, { type: "Property", name: "info", reflectMapper: { 1: "hasMore", 2: "offset" } }] }, v2ConversationsDelete: { sid: 28, cid: 17, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1, clearMessage: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationsUnreadClear: { sid: 28, cid: 18, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationSync: { sid: 28, cid: 19, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { cursor: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: { 1: "nextCursor", 2: "syncType" } }] }, v2ConversationNotifySync: { sid: 28, cid: 20, service: Xr, response: [{ type: "Property", name: "info", reflectMapper: { 1: "nextCursor", 2: "syncType" } }, { type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }] }, v2ConversationNotifySyncOnline: { sid: 28, cid: 21, service: Xr, response: [{ type: "Property", name: "info", reflectMapper: invert(Zr) }, { type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }] }, v2ConversationClearTotalUnread: { sid: 28, cid: 23, service: Xr, response: [{ type: "Property", name: "info", reflectMapper: invert(Zr) }] }, v2ConversationClearTypeUnread: { sid: 28, cid: 24, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { conversationType: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: invert(Zr) }] }, v2ConversationClearGroupUnread: { sid: 28, cid: 25, service: Xr, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: invert(Zr) }] }, syncConversationReadTime: { sid: 4, cid: 14, service: Xr, response: [{ type: "StrLongMap", name: "p2p" }, { type: "LongLongMap", name: "team" }, { type: "Long", name: "timetag" }] }, syncSuperTeamReadTime: { sid: 4, cid: 20, service: Xr, response: [{ type: "LongLongMap", name: "superTeam" }] }, v2SyncSessionsWithMoreRoaming: { sid: 4, cid: 22, service: Xr, response: [] }, v2SyncSessionReliableInfo: { sid: 4, cid: 25, service: Xr, response: [] }, v2MarkConversationReadTime: { sid: 30, cid: 16, service: Xr, params: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2MarkSuperTeamReadTime: { sid: 32, cid: 25, service: Xr, params: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] }, v2MultiDeviceConversationReadTime: { sid: 30, cid: 116, service: Xr, response: [{ type: "Byte", name: "scene" }, { type: "String", name: "to" }, { type: "Long", name: "timetag" }] }, v2MultiDeviceSuperTeamReadTime: { sid: 21, cid: 125, service: Xr, response: [{ type: "Long", name: "to" }, { type: "Long", name: "timetag" }] } });
  var ri;
  !function(t2) {
    t2[t2.createConversationGroup = 1] = "createConversationGroup", t2[t2.deleteConversationGroup = 2] = "deleteConversationGroup", t2[t2.updateConversationGroup = 3] = "updateConversationGroup", t2[t2.addConversationToGroup = 4] = "addConversationToGroup", t2[t2.removeConversationFromGroup = 5] = "removeConversationFromGroup";
  }(ri || (ri = {}));
  var ni = "V2NIMConversationGroupService", si = { groupId: 1, name: 2, serverExtension: 3, createTime: 4, updateTime: 5 };
  ({ v2ConversationGroupCreate: { sid: 28, cid: 9, service: ni, params: [{ type: "Property", name: "tag", reflectMapper: { conversationIds: 1, name: 2, serverExtension: 3 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(si) }, { type: "PropertyArray", name: "conversations", reflectMapper: invert(Qr) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupDelete: { sid: 28, cid: 10, service: ni, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "info", reflectMapper: { 1: "type", 2: "deleteVersion", 3: "groupList" } }] }, v2ConversationGroupUpdate: { sid: 28, cid: 11, service: ni, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, name: 2, serverExtension: 3 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(si) }] }, v2ConversationGroupGet: { sid: 28, cid: 12, service: ni, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1 } }], response: [{ type: "Property", name: "data", reflectMapper: invert(si) }] }, v2ConversationGroupsGet: { sid: 28, cid: 13, service: ni, params: [{ type: "Property", name: "tag", reflectMapper: { groupIds: 1 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(si) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupListGet: { sid: 28, cid: 14, service: ni, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(si) }] }, v2ConversationGroupAddTo: { sid: 28, cid: 15, service: ni, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, conversationIds: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupRemoveFrom: { sid: 28, cid: 16, service: ni, params: [{ type: "Property", name: "tag", reflectMapper: { groupId: 1, conversationIds: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invert(Qr) }, { type: "Property", name: "info", reflectMapper: { 1: "failedMap" } }] }, v2ConversationGroupNotifySyncOnline: { sid: 28, cid: 22, service: ni, response: [{ type: "Property", name: "info", reflectMapper: { 1: "type", 2: "deleteVersion", 3: "conversationIds" } }, { type: "Property", name: "data", reflectMapper: invert(si) }] } });
  var ci = "V2NIMMessageLogUtil", li = { conversationType: { id: 0, retType: "number" }, receiverId: 1, deleteRoam: { id: 2, converter: boolToInt }, teamId: 3, onlineSync: { id: 4, converter: boolToInt }, deleteTime: { id: 6, retType: "number" }, serverExtension: 7 }, pi = [{ type: "Long", name: "beginTime" }, { type: "Long", name: "endTime" }, { type: "Long", name: "lastMsgId" }, { type: "Int", name: "limit" }, { type: "Bool", name: "direction" }, { type: "LongArray", name: "msgTypes" }];
  ({ v2GetMessageList: { sid: 30, cid: 6, service: ci, params: [{ type: "String", name: "to" }, ...pi], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(hr) }] }, v2GetMessageListByRefers: { sid: 33, cid: 2, service: ci, params: [{ type: "PropertyArray", name: "tag", reflectMapper: hr, select: ["conversationType", "senderId", "receiverId", "createTime", "messageServerId"] }], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(hr) }] }, v2ClearHistoryMessage: { sid: 30, cid: 18, service: ci, params: [{ type: "Property", name: "tag", reflectMapper: li }], response: [{ type: "Long", name: "timetag" }] }, v2GetTeamMessageList: { sid: 31, cid: 23, service: ci, params: [{ type: "Long", name: "to" }, ...pi], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(hr) }] }, v2GetSuperTeamMessageList: { sid: 32, cid: 14, service: ci, params: [{ type: "Long", name: "to" }, ...pi], response: [{ type: "PropertyArray", name: "msgs", reflectMapper: invertSerializeItem(hr) }] }, onClearHistoryMessage: { sid: 7, cid: 118, service: ci, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(li) }] }, syncClearHistoryMessage: { sid: 4, cid: 24, service: ci, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(li) }] } });
  var ui = "V2NIMMessageExtendUtil", gi = { conversationType: { id: 1, converter: conversationTypeV2ToV1, retConverter: conversationTypeV1ToV2, access: "messageRefer.conversationType" }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, createTime: { id: 4, retType: "number", access: "messageRefer.createTime" }, messageServerId: { id: 5, access: "messageRefer.messageServerId" }, messageClientId: { id: 6, access: "messageRefer.messageClientId" }, detail: 7, modify: { id: 8, retType: "number" } }, vi = { conversationType: { id: 1, access: "messageRefer.conversationType", retConverter: conversationTypeV1ToV2 }, senderId: { id: 2, access: "messageRefer.senderId" }, receiverId: { id: 3, access: "messageRefer.receiverId" }, time: { id: 4, access: "messageRefer.createTime", converter: boolToInt, retType: "number" }, messageServerId: { id: 5, access: "messageRefer.messageServerId" }, messageClientId: { id: 6, access: "messageRefer.messageClientId" }, operatorId: 7, serverExtension: 8, createTime: { id: 9, converter: boolToInt, retType: "number" }, updateTime: { id: 10, converter: boolToInt, retType: "number" } }, fi = { operatorId: 1, index: { id: 2, retType: "number" }, createTime: { id: 3, retType: "number" }, serverExtension: 4, pushEnabled: { id: 5, access: "pushConfig.pushEnabled", converter: boolToInt }, needBadge: { id: 6, access: "pushConfig.needBadge", converter: boolToInt }, title: { id: 7, access: "pushConfig.title" }, pushContent: { id: 8, access: "pushConfig.pushContent" }, pushPayload: { id: 9, access: "pushConfig.pushPayload" } }, Ii = { accid: 1, serverExtension: 2, createTime: { id: 3, retType: "number" }, updateTime: { id: 4, retType: "number" } }, yi = { collectionId: 1, collectionType: { id: 2, retType: "number" }, collectionData: 3, serverExtension: 4, uniqueId: 5, createTime: { id: 6, retType: "number" }, updateTime: { id: 7, retType: "number" } }, _i = { keyword: 1, beginTime: 2, endTime: 3, messageLimit: 5, sortOrder: { id: 6, converter: (t2) => 0 === t2 ? 2 : 1 }, p2pAccountIds: { id: 7, converter: (t2) => t2.join(",") }, teamIds: { id: 8, converter: (t2) => t2.join(",") }, senderAccountIds: { id: 9, converter: (t2) => t2.join(",") }, messageTypes: { id: 10, converter: (t2) => t2.join(",") }, messageSubtypes: { id: 11, converter: (t2) => t2.join(",") } }, Ei = Object.assign(Object.assign({}, _i), { conversationLimit: 4 });
  ({ v2PinMessage: { sid: 33, cid: 15, service: ui, params: [{ type: "Property", name: "msg", reflectMapper: hr, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Ii }], response: [{ type: "Long", name: "timetag" }] }, v2UnpinMessage: { sid: 33, cid: 17, service: ui, params: [{ type: "Property", name: "msg", reflectMapper: hr, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Ii }], response: [{ type: "Long", name: "timetag" }] }, v2UpdatePinMessage: { sid: 33, cid: 16, service: ui, params: [{ type: "Property", name: "msg", reflectMapper: hr, select: ["conversationType", "receiverId", "senderId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "msgPin", reflectMapper: Ii }], response: [{ type: "Long", name: "timetag" }] }, v2GetPinMessageList: { sid: 33, cid: 21, service: ui, params: [{ type: "Property", name: "tag", reflectMapper: { conversationId: 1, timetag: 2 } }], response: [{ type: "Long", name: "timetag" }, { type: "Bool", name: "changed" }, { type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(vi) }] }, v2VoiceToText: { sid: 29, cid: 5, service: ui, params: [{ type: "Property", name: "tag", reflectMapper: { mimeType: 0, sampleRate: 1, voiceUrl: 2, duration: 3 } }], response: [{ type: "String", name: "data" }] }, v2AddQuickComment: { sid: 33, cid: 3, service: ui, params: [{ type: "Property", name: "message", reflectMapper: hr, select: ["conversationType", "senderId", "receiverId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "quickComment", reflectMapper: fi }], response: [{ type: "Long", name: "timetag" }] }, v2RemoveQuickComment: { sid: 33, cid: 4, service: ui, params: [{ type: "Property", name: "message", reflectMapper: hr, select: ["conversationType", "senderId", "receiverId", "createTime", "messageClientId", "messageServerId"] }, { type: "Property", name: "quickComment", reflectMapper: fi }], response: [{ type: "Long", name: "timetag" }] }, onAddQuickComment: { sid: 23, cid: 5, service: ui, response: [{ type: "Property", name: "message", reflectMapper: invertSerializeItem(hr) }, { type: "Property", name: "quickComment", reflectMapper: invertSerializeItem(fi) }] }, onRemoveQuickComment: { sid: 23, cid: 6, service: ui, response: [{ type: "Property", name: "message", reflectMapper: invertSerializeItem(hr) }, { type: "Property", name: "quickComment", reflectMapper: invertSerializeItem(fi) }] }, v2GetQuickComment: { sid: 33, cid: 7, service: ui, params: [{ type: "PropertyArray", name: "tag", reflectMapper: gi }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(gi) }] }, onPinMessage: { sid: 23, cid: 18, service: ui, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(hr) }, { type: "Property", name: "pinInfo", reflectMapper: invertSerializeItem(Ii) }] }, onUpdatePinMessage: { sid: 23, cid: 19, service: ui, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(hr) }, { type: "Property", name: "pinInfo", reflectMapper: invertSerializeItem(Ii) }] }, onUnpinMessage: { sid: 23, cid: 20, service: ui, response: [{ type: "Property", name: "msg", reflectMapper: invertSerializeItem(hr) }, { type: "Property", name: "pinInfo", reflectMapper: invertSerializeItem(Ii) }] }, v2AddCollection: { sid: 33, cid: 8, service: ui, params: [{ type: "Property", name: "tag", reflectMapper: yi }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(yi) }] }, v2RemoveCollections: { sid: 33, cid: 9, service: ui, params: [{ type: "PropertyArray", name: "tag", reflectMapper: yi, select: ["collectionId", "createTime"] }], response: [{ type: "Int", name: "data" }] }, v2UpdateCollectionExtension: { sid: 33, cid: 10, service: ui, params: [{ type: "Property", name: "tag", reflectMapper: yi }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(yi) }] }, v2GetCollectionListByOption: { sid: 33, cid: 11, service: ui, params: [{ type: "Property", name: "tag", reflectMapper: { beginTime: 1, endTime: 2, excludeId: 3, limit: 4, direction: 5, collectionType: 6 } }], response: [{ type: "Long", name: "total" }, { type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(yi) }] }, v2SearchCloudMessagesGroupByConversation: { sid: 30, cid: 26, service: ui, params: [{ type: "Property", name: "tag", reflectMapper: Ei }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2SearchCloudMessages: { sid: 30, cid: 27, service: ui, params: [{ type: "Property", name: "tag", reflectMapper: _i }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(hr) }] }, v2GetThreadMessageList: { sid: 33, cid: 1, service: ui, params: [{ type: "Property", name: "messageRefer", reflectMapper: hr }, { type: "Property", name: "tag", reflectMapper: { beginTime: 1, endTime: 2, excludeMessageServerId: 3, limit: 4, reverse: 5 } }], response: [{ type: "Property", name: "message", reflectMapper: invertSerializeItem(hr) }, { type: "Property", name: "replyResult", reflectMapper: invertSerializeItem({ total: { id: 1, retType: "number" }, timestamp: { id: 2, retType: "number" } }) }, { type: "PropertyArray", name: "replyList", reflectMapper: invertSerializeItem(hr) }] } });
  var Ti, Si = { joinMode: { type: "enum", values: [1, 0, 2], required: false }, agreeMode: { type: "enum", values: [0, 1], required: false }, inviteMode: { type: "enum", values: [1, 0], required: false }, updateInfoMode: { type: "enum", values: [1, 0], required: false }, updateExtensionMode: { type: "enum", values: [1, 0], required: false }, chatBannedMode: { type: "enum", values: [0, 1], required: false } };
  ({ type: "object", required: true, rules: Object.assign({ name: { type: "string", allowEmpty: false }, teamType: { type: "enum", values: [1, 2] }, memberLimit: { type: "number", min: 1, required: false } }, Si) });
  var Ni = { type: "array", min: 1, itemType: "string" }, bi = { type: "string" };
  ({ inviteeParams: { type: "object", required: true, rules: { inviteeAccountIds: Ni, postscript: Object.assign(Object.assign({}, bi), { required: false }), serverExtension: Object.assign(Object.assign({}, bi), { required: false }) } } });
  ({ updateTeamInfoParams: { type: "object", required: true, rules: Object.assign({ name: { type: "string", allowEmpty: false, required: false }, memberLimit: { type: "number", min: 1, required: false } }, Si) } });
  !function(t2) {
    t2[t2.TEAM_INVITATION = 0] = "TEAM_INVITATION", t2[t2.TEAM_KICK = 1] = "TEAM_KICK", t2[t2.TEAM_LEAVE = 2] = "TEAM_LEAVE", t2[t2.TEAM_UPDATED = 3] = "TEAM_UPDATED", t2[t2.TEAM_DISMISS = 4] = "TEAM_DISMISS", t2[t2.TEAM_APPLY_ACCEPT = 5] = "TEAM_APPLY_ACCEPT", t2[t2.TEAM_TRANSFER_OWNER = 6] = "TEAM_TRANSFER_OWNER", t2[t2.TEAM_ADD_MANAGER = 7] = "TEAM_ADD_MANAGER", t2[t2.TEAM_REMOVE_MANAGER = 8] = "TEAM_REMOVE_MANAGER", t2[t2.TEAM_INVITE_ACCEPT = 9] = "TEAM_INVITE_ACCEPT", t2[t2.TEAM_MEMBER_MUTE = 10] = "TEAM_MEMBER_MUTE", t2[t2.SUPER_TEAM_INVITATION = 401] = "SUPER_TEAM_INVITATION", t2[t2.SUPER_TEAM_KICK = 402] = "SUPER_TEAM_KICK", t2[t2.SUPER_TEAM_LEAVE = 403] = "SUPER_TEAM_LEAVE", t2[t2.SUPER_TEAM_UPDATE = 404] = "SUPER_TEAM_UPDATE", t2[t2.SUPER_TEAM_DISMISS = 405] = "SUPER_TEAM_DISMISS", t2[t2.SUPER_TEAM_TRANSFER_OWNER = 406] = "SUPER_TEAM_TRANSFER_OWNER", t2[t2.SUPER_TEAM_ADD_MANAGER = 407] = "SUPER_TEAM_ADD_MANAGER", t2[t2.SUPER_TEAM_REMOVE_MANAGER = 408] = "SUPER_TEAM_REMOVE_MANAGER", t2[t2.SUPER_TEAM_MEMBER_MUTE = 409] = "SUPER_TEAM_MEMBER_MUTE", t2[t2.SUPER_TEAM_APPLY_ACCEPT = 410] = "SUPER_TEAM_APPLY_ACCEPT", t2[t2.SUPER_TEAM_INVITE_ACCEPT = 411] = "SUPER_TEAM_INVITE_ACCEPT";
  }(Ti || (Ti = {}));
  var zi = "V2NIMUserService", Wi = { accountId: 1, name: 3, avatar: 4, sign: 5, gender: { id: 6, retType: "number" }, email: 7, birthday: 8, mobile: 9, serverExtension: 10, createTime: { id: 12, retType: "number" }, updateTime: { id: 13, retType: "number" } };
  ({ v2UpdateBlockList: { sid: 34, cid: 3, service: zi, params: [{ type: "String", name: "accountId" }, { type: "Bool", name: "addToBlockList" }] }, v2GetUserList: { sid: 34, cid: 7, service: zi, params: [{ type: "StrArray", name: "accountIds" }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(Wi) }] }, v2UpdateSelfUserProfile: { sid: 34, cid: 10, service: zi, params: [{ type: "Property", name: "tag", reflectMapper: Wi }], response: [{ type: "Long", name: "updateTime" }] }, onUpdateUserProfile: { sid: 3, cid: 110, service: zi, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Wi) }] }, onUpdateBlockList: { sid: 3, cid: 103, service: zi, response: [{ type: "String", name: "accountId" }, { type: "Bool", name: "addToBlockList" }] }, syncBlockAndMuteList: { sid: 3, cid: 8, service: zi, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem({ accountId: 0, isMute: { id: 1, retType: "boolean" }, isBlock: { id: 2, retType: "boolean" } }) }, { type: "Long", name: "timetag" }] }, v2SyncSelfUserInfo: { sid: 3, cid: 109, service: zi, response: [{ type: "Property", name: "user", reflectMapper: invertSerializeItem(Wi) }] }, v2SetP2PMessageMuteMode: { sid: 34, cid: 5, service: zi, params: [{ type: "String", name: "accountId" }, { type: "Bool", name: "muteMode" }] }, v2OnUpdateMuteList: { sid: 3, cid: 105, service: zi, response: [{ type: "String", name: "accountId" }, { type: "Bool", name: "mute" }] } });
  var eo = "V2NIMFriendService", ro = { accountId: 4, relationShip: { id: 5, retType: "number" }, source: { id: 7, retType: "number" }, alias: 8, serverExtension: 10, createTime: { id: 11, retType: "number" }, updateTime: { id: 12, retType: "number" }, customerExtension: 13 };
  ({ v2AddFriend: { sid: 35, cid: 1, service: eo, params: [{ type: "String", name: "accountId" }, { type: "Byte", name: "verifyType" }, { type: "String", name: "postscript" }], response: [] }, v2DeleteFriend: { sid: 35, cid: 2, service: eo, params: [{ type: "String", name: "accountId" }, { type: "Property", name: "params", reflectMapper: { deleteAlias: { id: 1, converter: boolToInt } } }] }, v2SetFriendInfo: { sid: 35, cid: 3, service: eo, params: [{ type: "Property", name: "tag", reflectMapper: ro }] }, v2OnAddFriend: { sid: 12, cid: 101, service: eo, response: [{ type: "String", name: "accountId" }, { type: "Byte", name: "verifyType" }, { type: "String", name: "postscript" }, { type: "Property", name: "ext", reflectMapper: invertSerializeItem({ serverExt: 1 }) }] }, v2OnDeleteFriend: { sid: 12, cid: 102, service: eo, response: [{ type: "String", name: "accountId" }] }, v2OnUpdateFriendInfo: { sid: 12, cid: 103, service: eo, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(ro) }] }, v2SyncFriendList: { sid: 12, cid: 5, service: eo, response: [{ type: "PropertyArray", name: "friends", reflectMapper: invertSerializeItem(ro) }, { type: "Long", name: "timetag" }] }, v2SyncFriendUserList: { sid: 12, cid: 6, service: eo, response: [{ type: "PropertyArray", name: "users", reflectMapper: invertSerializeItem(Wi) }] }, v2IncFriendInfo: { sid: 35, cid: 4, service: eo, params: [{ type: "Long", name: "timetag" }], response: [{ type: "PropertyArray", name: "friends", reflectMapper: invertSerializeItem(ro) }, { type: "Long", name: "timetag" }] } });
  var vo = vo || function(t2) {
    var o2;
    "undefined" != typeof window && $inject_global_crypto && (o2 = $inject_global_crypto), "undefined" != typeof self && self.crypto && (o2 = self.crypto), "undefined" != typeof globalThis && globalThis.crypto && (o2 = globalThis.crypto), !o2 && "undefined" != typeof window && window.msCrypto && (o2 = window.msCrypto), !o2 && "undefined" != typeof global && $inject_global_crypto && (o2 = $inject_global_crypto);
    var cryptoSecureRandomInt = function() {
      if (o2) {
        if ("function" == typeof o2.getRandomValues)
          try {
            return o2.getRandomValues(new Uint32Array(1))[0];
          } catch (t3) {
          }
        if ("function" == typeof o2.randomBytes)
          try {
            return o2.randomBytes(4).readInt32LE();
          } catch (t3) {
          }
      }
      throw new Error("Native crypto module could not be used to get secure random number.");
    }, a2 = Object.create || /* @__PURE__ */ function() {
      function F2() {
      }
      return function(t3) {
        var o3;
        return F2.prototype = t3, o3 = new F2(), F2.prototype = null, o3;
      };
    }(), m2 = {}, u2 = m2.lib = {}, h2 = u2.Base = { extend: function(t3) {
      var o3 = a2(this);
      return t3 && o3.mixIn(t3), o3.hasOwnProperty("init") && this.init !== o3.init || (o3.init = function() {
        o3.$super.init.apply(this, arguments);
      }), o3.init.prototype = o3, o3.$super = this, o3;
    }, create: function() {
      var t3 = this.extend();
      return t3.init.apply(t3, arguments), t3;
    }, init: function() {
    }, mixIn: function(t3) {
      for (var o3 in t3)
        t3.hasOwnProperty(o3) && (this[o3] = t3[o3]);
      t3.hasOwnProperty("toString") && (this.toString = t3.toString);
    }, clone: function() {
      return this.init.prototype.extend(this);
    } }, g2 = u2.WordArray = h2.extend({ init: function(t3, o3) {
      t3 = this.words = t3 || [], this.sigBytes = null != o3 ? o3 : 4 * t3.length;
    }, toString: function(t3) {
      return (t3 || _2).stringify(this);
    }, concat: function(t3) {
      var o3 = this.words, a3 = t3.words, m3 = this.sigBytes, u3 = t3.sigBytes;
      if (this.clamp(), m3 % 4)
        for (var h3 = 0; h3 < u3; h3++) {
          var g3 = a3[h3 >>> 2] >>> 24 - h3 % 4 * 8 & 255;
          o3[m3 + h3 >>> 2] |= g3 << 24 - (m3 + h3) % 4 * 8;
        }
      else
        for (var I3 = 0; I3 < u3; I3 += 4)
          o3[m3 + I3 >>> 2] = a3[I3 >>> 2];
      return this.sigBytes += u3, this;
    }, clamp: function() {
      var o3 = this.words, a3 = this.sigBytes;
      o3[a3 >>> 2] &= 4294967295 << 32 - a3 % 4 * 8, o3.length = t2.ceil(a3 / 4);
    }, clone: function() {
      var t3 = h2.clone.call(this);
      return t3.words = this.words.slice(0), t3;
    }, random: function(t3) {
      for (var o3 = [], a3 = 0; a3 < t3; a3 += 4)
        o3.push(cryptoSecureRandomInt());
      return new g2.init(o3, t3);
    } }), I2 = m2.enc = {}, _2 = I2.Hex = { stringify: function(t3) {
      for (var o3 = t3.words, a3 = t3.sigBytes, m3 = [], u3 = 0; u3 < a3; u3++) {
        var h3 = o3[u3 >>> 2] >>> 24 - u3 % 4 * 8 & 255;
        m3.push((h3 >>> 4).toString(16)), m3.push((15 & h3).toString(16));
      }
      return m3.join("");
    }, parse: function(t3) {
      for (var o3 = t3.length, a3 = [], m3 = 0; m3 < o3; m3 += 2)
        a3[m3 >>> 3] |= parseInt(t3.substr(m3, 2), 16) << 24 - m3 % 8 * 4;
      return new g2.init(a3, o3 / 2);
    } }, E2 = I2.Latin1 = { stringify: function(t3) {
      for (var o3 = t3.words, a3 = t3.sigBytes, m3 = [], u3 = 0; u3 < a3; u3++) {
        var h3 = o3[u3 >>> 2] >>> 24 - u3 % 4 * 8 & 255;
        m3.push(String.fromCharCode(h3));
      }
      return m3.join("");
    }, parse: function(t3) {
      for (var o3 = t3.length, a3 = [], m3 = 0; m3 < o3; m3++)
        a3[m3 >>> 2] |= (255 & t3.charCodeAt(m3)) << 24 - m3 % 4 * 8;
      return new g2.init(a3, o3);
    } }, M2 = I2.Utf8 = { stringify: function(t3) {
      try {
        return decodeURIComponent(escape(E2.stringify(t3)));
      } catch (t4) {
        throw new Error("Malformed UTF-8 data");
      }
    }, parse: function(t3) {
      return E2.parse(unescape(encodeURIComponent(t3)));
    } }, T2 = u2.BufferedBlockAlgorithm = h2.extend({ reset: function() {
      this._data = new g2.init(), this._nDataBytes = 0;
    }, _append: function(t3) {
      "string" == typeof t3 && (t3 = M2.parse(t3)), this._data.concat(t3), this._nDataBytes += t3.sigBytes;
    }, _process: function(o3) {
      var a3, m3 = this._data, u3 = m3.words, h3 = m3.sigBytes, I3 = this.blockSize, _3 = h3 / (4 * I3), E3 = (_3 = o3 ? t2.ceil(_3) : t2.max((0 | _3) - this._minBufferSize, 0)) * I3, M3 = t2.min(4 * E3, h3);
      if (E3) {
        for (var T3 = 0; T3 < E3; T3 += I3)
          this._doProcessBlock(u3, T3);
        a3 = u3.splice(0, E3), m3.sigBytes -= M3;
      }
      return new g2.init(a3, M3);
    }, clone: function() {
      var t3 = h2.clone.call(this);
      return t3._data = this._data.clone(), t3;
    }, _minBufferSize: 0 });
    u2.Hasher = T2.extend({ cfg: h2.extend(), init: function(t3) {
      this.cfg = this.cfg.extend(t3), this.reset();
    }, reset: function() {
      T2.reset.call(this), this._doReset();
    }, update: function(t3) {
      return this._append(t3), this._process(), this;
    }, finalize: function(t3) {
      return t3 && this._append(t3), this._doFinalize();
    }, blockSize: 16, _createHelper: function(t3) {
      return function(o3, a3) {
        return new t3.init(a3).finalize(o3);
      };
    }, _createHmacHelper: function(t3) {
      return function(o3, a3) {
        return new S2.HMAC.init(t3, a3).finalize(o3);
      };
    } });
    var S2 = m2.algo = {};
    return m2;
  }(Math);
  vo.enc.Utf8;
  var Io = vo, yo = Io.lib, _o = yo.Base, Eo = yo.WordArray, Mo = Io.algo, To = Mo.MD5, So = Mo.EvpKDF = _o.extend({ cfg: _o.extend({ keySize: 4, hasher: To, iterations: 1 }), init: function(t2) {
    this.cfg = this.cfg.extend(t2);
  }, compute: function(t2, o2) {
    for (var a2, m2 = this.cfg, u2 = m2.hasher.create(), h2 = Eo.create(), g2 = h2.words, I2 = m2.keySize, _2 = m2.iterations; g2.length < I2; ) {
      a2 && u2.update(a2), a2 = u2.update(t2).finalize(o2), u2.reset();
      for (var E2 = 1; E2 < _2; E2++)
        a2 = u2.finalize(a2), u2.reset();
      h2.concat(a2);
    }
    return h2.sigBytes = 4 * I2, h2;
  } });
  Io.EvpKDF = function(t2, o2, a2) {
    return So.create(a2).compute(t2, o2);
  }, vo.EvpKDF;
  var Co = vo, No = Co.lib.WordArray;
  Co.enc.Base64 = { stringify: function(t2) {
    var o2 = t2.words, a2 = t2.sigBytes, m2 = this._map;
    t2.clamp();
    for (var u2 = [], h2 = 0; h2 < a2; h2 += 3)
      for (var g2 = (o2[h2 >>> 2] >>> 24 - h2 % 4 * 8 & 255) << 16 | (o2[h2 + 1 >>> 2] >>> 24 - (h2 + 1) % 4 * 8 & 255) << 8 | o2[h2 + 2 >>> 2] >>> 24 - (h2 + 2) % 4 * 8 & 255, I2 = 0; I2 < 4 && h2 + 0.75 * I2 < a2; I2++)
        u2.push(m2.charAt(g2 >>> 6 * (3 - I2) & 63));
    var _2 = m2.charAt(64);
    if (_2)
      for (; u2.length % 4; )
        u2.push(_2);
    return u2.join("");
  }, parse: function(t2) {
    var o2 = t2.length, a2 = this._map, m2 = this._reverseMap;
    if (!m2) {
      m2 = this._reverseMap = [];
      for (var u2 = 0; u2 < a2.length; u2++)
        m2[a2.charCodeAt(u2)] = u2;
    }
    var h2 = a2.charAt(64);
    if (h2) {
      var g2 = t2.indexOf(h2);
      -1 !== g2 && (o2 = g2);
    }
    return function parseLoop(t3, o3, a3) {
      for (var m3 = [], u3 = 0, h3 = 0; h3 < o3; h3++)
        if (h3 % 4) {
          var g3 = a3[t3.charCodeAt(h3 - 1)] << h3 % 4 * 2 | a3[t3.charCodeAt(h3)] >>> 6 - h3 % 4 * 2;
          m3[u3 >>> 2] |= g3 << 24 - u3 % 4 * 8, u3++;
        }
      return No.create(m3, u3);
    }(t2, o2, m2);
  }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" }, vo.enc.Base64, function(t2) {
    t2.lib.Cipher || function() {
      var o2 = t2, a2 = o2.lib, m2 = a2.Base, u2 = a2.WordArray, h2 = a2.BufferedBlockAlgorithm, g2 = o2.enc;
      g2.Utf8;
      var I2 = g2.Base64, _2 = o2.algo.EvpKDF, E2 = a2.Cipher = h2.extend({ cfg: m2.extend(), createEncryptor: function(t3, o3) {
        return this.create(this._ENC_XFORM_MODE, t3, o3);
      }, createDecryptor: function(t3, o3) {
        return this.create(this._DEC_XFORM_MODE, t3, o3);
      }, init: function(t3, o3, a3) {
        this.cfg = this.cfg.extend(a3), this._xformMode = t3, this._key = o3, this.reset();
      }, reset: function() {
        h2.reset.call(this), this._doReset();
      }, process: function(t3) {
        return this._append(t3), this._process();
      }, finalize: function(t3) {
        return t3 && this._append(t3), this._doFinalize();
      }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: /* @__PURE__ */ function() {
        function selectCipherStrategy(t3) {
          return "string" == typeof t3 ? A2 : b2;
        }
        return function(t3) {
          return { encrypt: function(o3, a3, m3) {
            return selectCipherStrategy(a3).encrypt(t3, o3, a3, m3);
          }, decrypt: function(o3, a3, m3) {
            return selectCipherStrategy(a3).decrypt(t3, o3, a3, m3);
          } };
        };
      }() });
      a2.StreamCipher = E2.extend({ _doFinalize: function() {
        return this._process(true);
      }, blockSize: 1 });
      var M2 = o2.mode = {}, T2 = a2.BlockCipherMode = m2.extend({ createEncryptor: function(t3, o3) {
        return this.Encryptor.create(t3, o3);
      }, createDecryptor: function(t3, o3) {
        return this.Decryptor.create(t3, o3);
      }, init: function(t3, o3) {
        this._cipher = t3, this._iv = o3;
      } }), S2 = M2.CBC = function() {
        var t3 = T2.extend();
        function xorBlock(t4, o3, a3) {
          var m3, u3 = this._iv;
          u3 ? (m3 = u3, this._iv = void 0) : m3 = this._prevBlock;
          for (var h3 = 0; h3 < a3; h3++)
            t4[o3 + h3] ^= m3[h3];
        }
        return t3.Encryptor = t3.extend({ processBlock: function(t4, o3) {
          var a3 = this._cipher, m3 = a3.blockSize;
          xorBlock.call(this, t4, o3, m3), a3.encryptBlock(t4, o3), this._prevBlock = t4.slice(o3, o3 + m3);
        } }), t3.Decryptor = t3.extend({ processBlock: function(t4, o3) {
          var a3 = this._cipher, m3 = a3.blockSize, u3 = t4.slice(o3, o3 + m3);
          a3.decryptBlock(t4, o3), xorBlock.call(this, t4, o3, m3), this._prevBlock = u3;
        } }), t3;
      }(), C2 = (o2.pad = {}).Pkcs7 = { pad: function(t3, o3) {
        for (var a3 = 4 * o3, m3 = a3 - t3.sigBytes % a3, h3 = m3 << 24 | m3 << 16 | m3 << 8 | m3, g3 = [], I3 = 0; I3 < m3; I3 += 4)
          g3.push(h3);
        var _3 = u2.create(g3, m3);
        t3.concat(_3);
      }, unpad: function(t3) {
        var o3 = 255 & t3.words[t3.sigBytes - 1 >>> 2];
        t3.sigBytes -= o3;
      } };
      a2.BlockCipher = E2.extend({ cfg: E2.cfg.extend({ mode: S2, padding: C2 }), reset: function() {
        var t3;
        E2.reset.call(this);
        var o3 = this.cfg, a3 = o3.iv, m3 = o3.mode;
        this._xformMode == this._ENC_XFORM_MODE ? t3 = m3.createEncryptor : (t3 = m3.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == t3 ? this._mode.init(this, a3 && a3.words) : (this._mode = t3.call(m3, this, a3 && a3.words), this._mode.__creator = t3);
      }, _doProcessBlock: function(t3, o3) {
        this._mode.processBlock(t3, o3);
      }, _doFinalize: function() {
        var t3, o3 = this.cfg.padding;
        return this._xformMode == this._ENC_XFORM_MODE ? (o3.pad(this._data, this.blockSize), t3 = this._process(true)) : (t3 = this._process(true), o3.unpad(t3)), t3;
      }, blockSize: 4 });
      var N2 = a2.CipherParams = m2.extend({ init: function(t3) {
        this.mixIn(t3);
      }, toString: function(t3) {
        return (t3 || this.formatter).stringify(this);
      } }), O2 = (o2.format = {}).OpenSSL = { stringify: function(t3) {
        var o3 = t3.ciphertext, a3 = t3.salt;
        return (a3 ? u2.create([1398893684, 1701076831]).concat(a3).concat(o3) : o3).toString(I2);
      }, parse: function(t3) {
        var o3, a3 = I2.parse(t3), m3 = a3.words;
        return 1398893684 == m3[0] && 1701076831 == m3[1] && (o3 = u2.create(m3.slice(2, 4)), m3.splice(0, 4), a3.sigBytes -= 16), N2.create({ ciphertext: a3, salt: o3 });
      } }, b2 = a2.SerializableCipher = m2.extend({ cfg: m2.extend({ format: O2 }), encrypt: function(t3, o3, a3, m3) {
        m3 = this.cfg.extend(m3);
        var u3 = t3.createEncryptor(a3, m3), h3 = u3.finalize(o3), g3 = u3.cfg;
        return N2.create({ ciphertext: h3, key: a3, iv: g3.iv, algorithm: t3, mode: g3.mode, padding: g3.padding, blockSize: t3.blockSize, formatter: m3.format });
      }, decrypt: function(t3, o3, a3, m3) {
        return m3 = this.cfg.extend(m3), o3 = this._parse(o3, m3.format), t3.createDecryptor(a3, m3).finalize(o3.ciphertext);
      }, _parse: function(t3, o3) {
        return "string" == typeof t3 ? o3.parse(t3, this) : t3;
      } }), R2 = (o2.kdf = {}).OpenSSL = { execute: function(t3, o3, a3, m3) {
        m3 || (m3 = u2.random(8));
        var h3 = _2.create({ keySize: o3 + a3 }).compute(t3, m3), g3 = u2.create(h3.words.slice(o3), 4 * a3);
        return h3.sigBytes = 4 * o3, N2.create({ key: h3, iv: g3, salt: m3 });
      } }, A2 = a2.PasswordBasedCipher = b2.extend({ cfg: b2.cfg.extend({ kdf: R2 }), encrypt: function(t3, o3, a3, m3) {
        var u3 = (m3 = this.cfg.extend(m3)).kdf.execute(a3, t3.keySize, t3.ivSize);
        m3.iv = u3.iv;
        var h3 = b2.encrypt.call(this, t3, o3, u3.key, m3);
        return h3.mixIn(u3), h3;
      }, decrypt: function(t3, o3, a3, m3) {
        m3 = this.cfg.extend(m3), o3 = this._parse(o3, m3.format);
        var u3 = m3.kdf.execute(a3, t3.keySize, t3.ivSize, o3.salt);
        return m3.iv = u3.iv, b2.decrypt.call(this, t3, o3, u3.key, m3);
      } });
    }();
  }(vo);
  var Oo = vo, bo = Oo.lib.StreamCipher, Ro = Oo.algo, Ao = Ro.RC4 = bo.extend({ _doReset: function() {
    for (var t2 = this._key, o2 = t2.words, a2 = t2.sigBytes, m2 = this._S = [], u2 = 0; u2 < 256; u2++)
      m2[u2] = u2;
    u2 = 0;
    for (var h2 = 0; u2 < 256; u2++) {
      var g2 = u2 % a2, I2 = o2[g2 >>> 2] >>> 24 - g2 % 4 * 8 & 255;
      h2 = (h2 + m2[u2] + I2) % 256;
      var _2 = m2[u2];
      m2[u2] = m2[h2], m2[h2] = _2;
    }
    this._i = this._j = 0;
  }, _doProcessBlock: function(t2, o2) {
    t2[o2] ^= generateKeystreamWord.call(this);
  }, keySize: 8, ivSize: 0 });
  function generateKeystreamWord() {
    for (var t2 = this._S, o2 = this._i, a2 = this._j, m2 = 0, u2 = 0; u2 < 4; u2++) {
      a2 = (a2 + t2[o2 = (o2 + 1) % 256]) % 256;
      var h2 = t2[o2];
      t2[o2] = t2[a2], t2[a2] = h2, m2 |= t2[(t2[o2] + t2[a2]) % 256] << 24 - 8 * u2;
    }
    return this._i = o2, this._j = a2, m2;
  }
  Oo.RC4 = bo._createHelper(Ao);
  var Vo = Ro.RC4Drop = Ao.extend({ cfg: Ao.cfg.extend({ drop: 192 }), _doReset: function() {
    Ao._doReset.call(this);
    for (var t2 = this.cfg.drop; t2 > 0; t2--)
      generateKeystreamWord.call(this);
  } });
  Oo.RC4Drop = bo._createHelper(Vo);
  vo.RC4;
  var Lo = { accountId: 1, messages: { id: 2, converter: objectToJSONString, retConverter: stringToJSONObject }, requestId: 3, content: { id: 4, converter: objectToJSONString, retConverter: stringToJSONObject }, promptVariables: 5, modelConfigParams: { id: 6, converter: objectToJSONString, retConverter: stringToJSONObject }, antispamBusinessId: 7, antispamEnabled: { id: 8, converter: boolToInt } }, wo = { accountId: 1, name: 3, avatar: 4, sign: 5, gender: { id: 6, retType: "number" }, email: 7, birthday: 8, mobile: 9, serverExtension: 10, modelType: { id: 11, retType: "number" }, modelConfig: { id: 12, retConverter: (t2) => {
    if (t2 = stringToJSONObject(t2)) {
      var o2 = Object.keys(t2).reduce((o3, a2) => (o3[function camelCase(t3) {
        return (t3 = t3 || "").split("_").map((t4, o4) => 0 === o4 ? t4 : t4[0].toUpperCase() + t4.slice(1)).join("");
      }(a2)] = t2[a2], o3), {});
      if ("string" == typeof o2.promptKeys)
        try {
          o2.promptKeys = JSON.parse(o2.promptKeys);
        } catch (t3) {
        }
      return o2;
    }
  } }, yunxinConfig: { id: 13, retConverter: (t2) => {
    if (t2 = stringToJSONObject(t2))
      return t2;
  } }, valid: { id: 14, retType: "boolean" }, createTime: { id: 15, retType: "number" }, updateTime: { id: 16, retType: "number" } };
  ({ v2AIChatNotify: { sid: 4, cid: 26, service: "V2NIMAIService", response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem({ code: { id: 1, retType: "number" }, accountId: 2, requestId: 3, content: { id: 4, retConverter: stringToJSONObject } }) }] }, v2AIProxyModelCall: { sid: 29, cid: 35, service: "V2NIMAIService", params: [{ type: "Property", name: "tag", reflectMapper: Lo }] }, v2AIGetUserList: { sid: 29, cid: 36, service: "V2NIMAIService", params: [{ type: "Property", name: "tag", reflectMapper: { pageToken: 1, limit: 2 } }], response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(wo) }, { type: "Property", name: "queryTag", reflectMapper: invertSerializeItem({ hasMore: { id: 16, retType: "boolean" }, nextToken: 2 }) }] } });
  var xo = "V2NIMSignallingService", Fo = { accountId: 1, uid: { id: 2, retType: "number" }, joinTime: { id: 3, retType: "number" }, expireTime: { id: 4, retType: "number" }, deviceId: 5 }, Bo = { channelType: { id: 1, retType: "number", retAccess: "channelInfo.channelType" }, channelName: { id: 2, retAccess: "channelInfo.channelName" }, channelId: { id: 3, retAccess: "channelInfo.channelId" }, createTime: { id: 4, retType: "number", retAccess: "channelInfo.createTime" }, expireTime: { id: 5, retType: "number", retAccess: "channelInfo.expireTime" }, creatorAccountId: { id: 6, retAccess: "channelInfo.creatorAccountId" }, channelExtension: { id: 7, retAccess: "channelInfo.channelExtension" }, channelValid: { id: 8, retDef: true, retAccess: "channelInfo.channelValid", retConverter: (t2) => 1 !== parseInt(t2) }, fromAccid: 10, toAccid: 11, requestId: 12, pushEnabled: { id: 13, access: "pushConfig.pushEnabled", converter: boolToInt, retType: "boolean" }, pushTitle: { id: 14, access: "pushConfig.pushTitle" }, pushContent: { id: 15, access: "pushConfig.pushContent" }, pushPayload: { id: 16, access: "pushConfig.pushPayload" }, unreadEnabled: { id: 17, access: "signallingConfig.unreadEnabled", converter: boolToInt, retType: "boolean", def: 1 }, members: { id: 18, retAccess: "members", retConverter: (t2) => {
    try {
      return JSON.parse(t2).map((t3) => deserialize(t3, invertSerializeItem(Fo)));
    } catch (t3) {
      return;
    }
  } }, attach: { id: 19, retConverter: stringToJSONObject }, serverExtension: { id: 20, retDef: "" }, offlineEnabled: { id: 21, converter: boolToInt, retType: "boolean", def: 1 }, msgId: 22, selfUid: { id: 23, retType: "number", access: "signallingConfig.selfUid" }, time: { id: 24, retType: "number" }, rtcChannelName: { id: 25, access: "rtcConfig.rtcChannelName" }, rtcTokenTtl: { id: 26, retType: "number", access: "rtcConfig.rtcTokenTtl", retAccess: "rtcInfo.rtcTokenTtl" }, rtcToken: { id: 27, retAccess: "rtcInfo.rtcToken" }, rtcParams: { id: 28, access: "rtcConfig.rtcParams", retAccess: "rtcInfo.rtcParams" }, callStatus: { id: 30, retType: "number" } };
  ({ v2SignallingCall: { sid: 18, cid: 16, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingCallSetup: { sid: 18, cid: 17, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingCreateRoom: { sid: 18, cid: 1, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingDelayRoom: { sid: 18, cid: 2, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingCloseRoom: { sid: 18, cid: 3, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingJoinRoom: { sid: 18, cid: 4, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingLeaveRoom: { sid: 18, cid: 5, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingInvite: { sid: 18, cid: 6, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingCancelInvite: { sid: 18, cid: 7, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingRejectInvite: { sid: 18, cid: 8, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }] }, v2SignallingAcceptInvite: { sid: 18, cid: 9, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }] }, v2SignallingSendControl: { sid: 18, cid: 10, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }] }, v2SignallingOnlineEvent: { sid: 15, cid: 11, service: xo, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingMultiClientEvent: { sid: 15, cid: 12, service: xo, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingOfflineEvent: { sid: 15, cid: 13, service: xo, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingSyncChannels: { sid: 15, cid: 14, service: xo, response: [{ type: "PropertyArray", name: "datas", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingGetRoomInfo: { sid: 18, cid: 15, service: xo, params: [{ type: "Property", name: "tag", reflectMapper: Bo }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(Bo) }] }, v2SignallingBatchMarkRead: { sid: 4, cid: 5, hasPacketResponse: false, service: xo, params: [{ type: "Byte", name: "sid" }, { type: "Byte", name: "cid" }, { type: "LongArray", name: "ids" }] } });
  var Zo, tn = "V2NIMSubscriptionService", rn = { eventType: { id: 1, retType: "number" }, statusType: { id: 2, retType: "number" }, uniqueId: 3, extension: 4, duration: { id: 5, retType: "number" }, onlineOnly: { id: 6, retType: "boolean", converter: (t2) => t2 ? 1 : 2 }, multiSync: { id: 7, retType: "boolean", converter: boolToInt }, publishTime: { id: 10, retType: "number" }, serverId: 11, clientType: { id: 12, retType: "number" }, serverExtension: 13, extensionReceived: 14, accountId: 103 }, nn = { eventType: { id: 1, retType: "number" }, duration: { id: 2, retType: "number" }, immediateSync: { id: 3, retType: "number", converter: boolToInt }, accountId: 102, subscribeTime: { id: 105, retType: "number" } };
  ({ v2PublishEvent: { sid: 19, cid: 1, service: tn, params: [{ type: "Property", name: "tag", reflectMapper: rn }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(rn) }] }, v2OnUserStatusChange: { sid: 14, cid: 2, service: tn, response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(rn) }] }, v2SubscribeUserStatus: { sid: 19, cid: 3, service: tn, params: [{ type: "Property", name: "tag", reflectMapper: nn }, { type: "StrArray", name: "accountIds" }], response: [{ type: "StrArray", name: "failedList" }] }, v2UnsubscribeUserStatus: { sid: 19, cid: 4, service: tn, params: [{ type: "Property", name: "tag", reflectMapper: nn }, { type: "StrArray", name: "accountIds" }], response: [{ type: "StrArray", name: "failedList" }] }, v2UnsubscribeAllUserStatus: { sid: 19, cid: 5, service: tn, params: [{ type: "Property", name: "tag", reflectMapper: nn }] }, v2QuerySubscribeEvent: { sid: 19, cid: 6, service: tn, params: [{ type: "Property", name: "tag", reflectMapper: nn }, { type: "StrArray", name: "accountIds" }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(nn) }] }, v2QueryAllSubscribeEvent: { sid: 19, cid: 7, service: tn, params: [{ type: "Property", name: "tag", reflectMapper: nn }], response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(nn) }] }, v2OnMultiUserStatusChange: { sid: 14, cid: 9, service: tn, response: [{ type: "PropertyArray", name: "data", reflectMapper: invertSerializeItem(rn) }] } });
  !function(t2) {
    t2[t2.V2NIM_PROXY_REQUEST_METHOD_GET = 1] = "V2NIM_PROXY_REQUEST_METHOD_GET", t2[t2.V2NIM_PROXY_REQUEST_METHOD_POST = 2] = "V2NIM_PROXY_REQUEST_METHOD_POST", t2[t2.V2NIM_PROXY_REQUEST_METHOD_PUT = 3] = "V2NIM_PROXY_REQUEST_METHOD_PUT", t2[t2.V2NIM_PROXY_REQUEST_METHOD_DELETE = 4] = "V2NIM_PROXY_REQUEST_METHOD_DELETE";
  }(Zo || (Zo = {}));
  var pn = { zone: 1, path: 2, method: 3, header: 4, body: 5 };
  ({ v2ProxyRequest: { sid: 22, cid: 1, service: "V2NIMPassthroughService", params: [{ type: "Property", name: "tag", reflectMapper: pn }], response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem(pn) }] }, v2ProxyOnRequest: { sid: 22, cid: 2, service: "V2NIMPassthroughService", response: [{ type: "Property", name: "data", reflectMapper: invertSerializeItem({ fromAccountId: 1, body: 2, time: { id: 3, retType: "number" } }) }] } });
  ({ path: { type: "string", allowEmpty: false }, zone: { type: "string", required: false }, method: { type: "enum", values: [Zo.V2NIM_PROXY_REQUEST_METHOD_DELETE, Zo.V2NIM_PROXY_REQUEST_METHOD_GET, Zo.V2NIM_PROXY_REQUEST_METHOD_POST, Zo.V2NIM_PROXY_REQUEST_METHOD_PUT], required: false }, header: { type: "jsonstr", required: false }, body: { type: "string", required: false } });
  var hn = NIM$1;
  hn.registerService(class V2NIMLoginServiceImpl extends V2Service {
    constructor(t2, o2 = {}) {
      var a2;
      super("V2NIMLoginService", t2), this.account = "", this.previousLoginAccount = "", this.token = "", this.deviceId = "", this.clientSession = "", this.processId = "", this.kickedDetail = null, this.binaryWebsocket = true, this.core._registerDep(MiscService, "misc"), registerParser({ cmdMap: Ue, cmdConfig: Be }), "v2" === t2.options.apiVersion && (registerParser({ cmdMap: xe, cmdConfig: je }), this.core.auth = this), this.previousLoginManager = new PromiseManager(), this.doLoginStepsManager = new PromiseManager(), this.loginTimerManager = new TimerManager(), this.loginOption = Object.assign({}, it), this.config = { lbsUrls: rt, linkUrl: "weblink.netease.im:443", linkSSL: true }, this.setOptions(o2), t2.V2NIMLoginService = this, false !== this.core.options.binaryWebsocket && "function" == typeof Uint8Array ? (this.binaryWebsocket = true, a2 = new V2BinaryClientSocket(this.core)) : (this.binaryWebsocket = false, a2 = new V2ClientSocket(this.core)), this.clientSocket = a2, "v2" === this.core.options.apiVersion && (this.core.clientSocket = a2), this.lifeCycle = new V2NIMLoginLifeCycle(t2), this.reconnect = new V2NIMLoginReconnect(t2), this.lbs = new V2NIMLoginLbs(t2), this.authenticator = new V2NIMLoginAuthenticator(t2), this.dataSync = new V2NIMLoginDataSync(t2);
    }
    get hasSettingService() {
      var t2;
      return !!(null === (t2 = this.core.V2NIMSettingService) || void 0 === t2 ? void 0 : t2.name);
    }
    setOptions(t2) {
      var o2, a2, m2;
      validate({ lbsUrls: { type: "array", itemType: "string", min: 1, required: false }, linkUrl: { type: "string", allowEmpty: false, required: false } }, t2, "", true), this.config = assignOptions(this.config, t2), null === (a2 = null === (o2 = this.core.clientSocket) || void 0 === o2 ? void 0 : o2.setLinkSSL) || void 0 === a2 || a2.call(o2, null === (m2 = this.config.linkSSL) || void 0 === m2 || m2);
      var u2 = "", h2 = "";
      this.config.isFixedDeviceId ? (u2 = Ie.localStorage.getItem("__NIM_DEVC_ID__") || Me(), h2 = Ie.localStorage.getItem("__NIM_CLIENT_SESSION_ID__") || Me(), Ie.localStorage.setItem("__NIM_DEVC_ID__", u2), Ie.localStorage.setItem("__NIM_CLIENT_SESSION_ID__", h2)) : (u2 = Me(), h2 = Me()), this.deviceId = u2, this.clientSession = h2, this.core.reporter.setConfig({ common: { dev_id: u2 } });
    }
    reset() {
      this.account = "", this.token = "", this.processId = "", this.lbs.reset(), this.reconnect.reset(), this.authenticator.reset(), this.authenticator.clearLastLoginClient(), this.dataSync.reset();
    }
    login(t2, o2, a2 = {}) {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkApiVersion();
        var m2 = Ie.getSystemInfo() || {};
        m2.os ? m2.os.toLowerCase() : "";
        if (!t2)
          throw new ValidateErrorV2({ detail: { reason: "Empty account" } });
        if (validate({ retryCount: { type: "number", min: 0, required: false }, forceMode: { type: "boolean", required: false }, authType: { type: "enum", values: [0, 1, 2], required: false }, syncLevel: { type: "enum", values: [1, 0], required: false } }, a2, "", true), 0 === a2.authType && !o2)
          throw new ValidateErrorV2({ detail: { reason: "When authType is 0, token cannot be empty" } });
        if ("" !== this.previousLoginAccount && this.previousLoginAccount !== t2 && this.core._clearModuleData(), 0 === this.getLoginStatus())
          this.logger.log(`V2NIMLoginService::login:allowLogin:${t2}`, a2);
        else {
          if (1 === this.getLoginStatus())
            return this.smoothForLogined(t2, o2, a2);
          if (2 === this.getLoginStatus())
            return this.smoothForLogining(t2, o2, a2);
        }
        this.account = t2, this.previousLoginAccount = t2, this.token = o2, this.processId = Me(), this.loginOption = assignOptions(it, a2), this.kickedDetail = null, this.loginTimerManager.destroy(), this.loginTimerManager.addTimer(() => {
          var t3 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_TIMEOUT, detail: { reason: "Login API timeout" } });
          this.doLoginStepsManager.clear(t3), this.previousLoginManager.clear(t3), this.originLoginPromise = void 0, this.lifeCycle.processEvent("exited", t3);
        }, this.loginOption.timeout > 0 ? this.loginOption.timeout : 6e4, 1);
        try {
          yield this.multiTryDoLogin(), this.loginTimerManager.destroy();
        } catch (t3) {
          throw this.loginTimerManager.destroy(), t3;
        }
      });
    }
    getChatroomLinkAddress(t2, o2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        validate({ roomId: { type: "string", regExp: /^\d+$/, required: true, allowEmpty: false }, miniProgram: { type: "boolean", required: false } }, { roomId: t2, miniProgram: o2 }, "", true);
        var a2 = "unknow environment" !== getMiniappEnv();
        return o2 = void 0 === o2 ? a2 : o2, (yield this.clientSocket.sendCmd("v2GetChatroomLinkAddress", { roomId: t2, miniProgram: o2 })).content.linkAddress;
      });
    }
    multiTryDoLogin(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        for (var o2 = new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "loginFailed" } }), a2 = 0; a2 <= this.loginOption.retryCount; a2++) {
          var m2 = `V2NIMLoginService::times of login try: ${a2}`;
          a2 > 0 ? this.logger.warn(m2) : this.logger.log(m2);
          try {
            this.originLoginPromise = t2 || this.doLogin(false), t2 = void 0;
            var u2 = yield this.previousLoginManager.add(this.originLoginPromise);
            return this.core.reporter.reportTraceEnd("login", true), this.doLoginStepsManager.clear(), this.previousLoginManager.clear(), this.originLoginPromise = void 0, u2;
          } catch (t3) {
            if (o2 = t3 || o2, this.logger.error(`V2NIMLoginService::login failed, times of login try: ${a2}, err.code: ${null == o2 ? void 0 : o2.code}, err.message: "${null == o2 ? void 0 : o2.message}"`), o2.code !== me.V2NIM_ERROR_CODE_CANCELLED && this.core.reporter.reportTraceEnd("login", false), this.reconnect.clearReconnectTimer(), this.checkLoginTerminalCode(o2 && o2.code))
              throw this.lifeCycle.processEvent("exited", o2), o2;
            o2 && 399 === o2.code && this.lbs.reset();
          }
        }
        throw this.lifeCycle.processEvent("exited", o2), o2;
      });
    }
    doLogin(t2) {
      var o2, a2;
      return __awaiter$2(this, void 0, void 0, function* () {
        var m2 = !!t2 || this.authenticator.checkAutoLogin(this.loginOption.forceMode);
        this.core.reporter.reportTraceCancel("login"), this.core.reporter.reportTraceStart("login", m2 ? { user_id: this.account, action: "auto_login", process_id: this.processId, binary_websocket: this.binaryWebsocket } : { user_id: this.account, action: "manual_login", process_id: this.processId, binary_websocket: this.binaryWebsocket }), this.core.reporter.reportTraceUpdateV2("login", { code: 0, description: JSON.stringify(this.loginOption), operation_type: "conf_init", succeed: true, duration: 0, target: "" }, { asyncParams: Ie.net.getNetworkStatus() });
        var u2 = yield this.doLoginStepsManager.add(this.lbs.getLbsInfos());
        yield this.doLoginStepsManager.add(this.clientSocket.connect(u2, t2));
        var h2 = yield this.doLoginStepsManager.add(this.authenticator.verifyAuthentication(m2));
        if (this.processId = Me(), this.clientSocket.resetSocketConfig(), this.reconnect.reset(), this.dataSync.reset(), this.lifeCycle.processEvent("loginSucc", void 0, Object.assign(Object.assign({}, h2), { isReconnect: t2 })), this.clientSocket.ping(), this.core.abtest.abtRequest(), "function" == typeof (null === (o2 = this.core.V2NIMClientAntispamUtil) || void 0 === o2 ? void 0 : o2.downloadLocalAntiSpamVocabs) && this.core.V2NIMClientAntispamUtil.downloadLocalAntiSpamVocabs(), "function" == typeof (null === (a2 = this.core.cloudStorage) || void 0 === a2 ? void 0 : a2.init))
          try {
            yield this.core.cloudStorage.init();
          } catch (t3) {
            this.logger.warn("doLogin::cloudStorage init error", t3);
          }
        return h2;
      });
    }
    smoothForLogined(t2, o2, a2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        var m2 = this.checkIsSameLogin(t2, o2, a2);
        return this.logger.warn(`V2NIMLoginService::smoothForLogined:Logined, isSameLogin ${m2}`), m2 ? void 0 : (yield this.logout(), this.login(t2, o2, a2));
      });
    }
    smoothForLogining(t2, o2, a2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        var m2 = this.checkIsSameLogin(t2, o2, a2);
        if (this.logger.warn(`V2NIMLoginService::smoothForLogining:Logining progress exists, abort the previous login attempt and start next attempt, isSameLogin ${m2}`), this.previousLoginManager.clear(), this.reconnect.reset(), this.account = t2, this.previousLoginAccount = t2, this.token = o2, this.loginOption = assignOptions(this.loginOption, a2), !m2)
          return this.doLoginStepsManager.clear(), this.clientSocket.doDisconnect(He.ACTIVE, "Aborted"), this.reset(), this.lifeCycle.processEvent("logout"), yield Promise.resolve(), this.login(t2, o2, a2);
        if (!this.originLoginPromise)
          throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_INTERNAL, detail: { reason: "NoPreviousLoginExists" } });
        this.reconnect.reset(), yield Promise.resolve(), yield this.multiTryDoLogin(this.originLoginPromise);
      });
    }
    checkIsSameLogin(t2, o2, a2) {
      return this.account === t2 && this.loginOption.authType === a2.authType && (0 !== a2.authType || this.token === o2);
    }
    logout() {
      return __awaiter$2(this, void 0, void 0, function* () {
        this._checkApiVersion(), this.doLoginStepsManager.clear(), this.previousLoginManager.clear(), this.loginTimerManager.destroy(), this.originLoginPromise = void 0;
        var t2 = this.getConnectStatus(), o2 = this.getLoginStatus();
        switch (o2) {
          case 1:
            try {
              yield this.clientSocket.sendCmd("v2Logout", void 0, { timeout: 1e3 }), this.clientSocket.doDisconnect(He.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout");
            } catch (t3) {
              this.logger.error("Instance::disconnect sendCmd:logout error", t3), this.clientSocket.doDisconnect(He.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout");
            }
            break;
          case 2:
          case 3:
            this.clientSocket.doDisconnect(He.ACTIVE, "UserActiveDisconnect"), this.core._clearModuleData(), this.lifeCycle.processEvent("logout");
            break;
          case 0:
            throw this.core._clearModuleData(), new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `Illegal logout. loginStatus ${o2}. connectStatus ${t2}` } });
          default:
            throw this.core._clearModuleData(), new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE, detail: { reason: `Illegal logout. illegal status: loginStatus ${o2}. connectStatus ${t2}` } });
        }
      });
    }
    getConnectStatus() {
      return this.lifeCycle.getConnectStatus();
    }
    getLoginStatus() {
      return this.lifeCycle.getLoginStatus();
    }
    getLoginUser() {
      return this.account;
    }
    getLoginClients() {
      return function uniqBy(t2, o2) {
        t2 = t2 || [], o2 = o2 || "";
        for (var a2 = [], m2 = [], u2 = 0; u2 < t2.length; u2++) {
          var h2 = t2[u2][o2];
          -1 === m2.indexOf(h2) && (m2.push(h2), a2.push(t2[u2]));
        }
        return a2;
      }(this.authenticator.loginClients, "clientId").map((t2) => pick(t2, ["type", "os", "timestamp", "customTag", "customClientType", "clientId", "clientIP"]));
    }
    getCurrentLoginClient() {
      var t2;
      if (null === (t2 = this.authenticator.loginClientOfThisConnection) || void 0 === t2 ? void 0 : t2.clientId)
        return pick(this.authenticator.loginClientOfThisConnection, ["type", "os", "timestamp", "customTag", "customClientType", "clientId", "clientIP"]);
    }
    getDataSync() {
      var t2 = this.dataSync.datas;
      return t2 && t2.length > 0 ? t2.map((t3) => ({ type: t3.type, state: t3.state })) : null;
    }
    setReconnectDelayProvider(t2) {
      this.reconnect._setReconnectDelayProvider(t2);
    }
    kickOffline(t2) {
      return __awaiter$2(this, void 0, void 0, function* () {
        if (this._checkApiVersion(), validate({ clientId: { type: "string", allowEmpty: false } }, t2, "", true), 0 === get(yield this.clientSocket.sendCmd("v2KickOffline", { clientIds: [t2.clientId] }), "content.clientIds.length"))
          throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_REQUEST_FAILED });
      });
    }
    getKickedOfflineDetail() {
      return this.kickedDetail;
    }
    checkLoginTerminalCode(t2) {
      return this.authenticator.checkLoginTerminalCode(t2);
    }
    checkIllegalState() {
      if (!this.getLoginUser())
        throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_ILLEGAL_STATE });
    }
    _checkApiVersion() {
      if ("v2" !== this.core.options.apiVersion)
        throw new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_MISUSE, detail: { reason: 'apiVersion is not "v2"' } });
    }
    v2LoginHandler(t2) {
      if (t2.error)
        throw this.clientSocket.doDisconnect(He.ACTIVE, t2.error), t2.error;
      return t2;
    }
    v2LoginClientChangeHandler(t2) {
      this.authenticator.changeLoginClient(parseInt(t2.content.state), t2.content.datas);
    }
    nimLoginClientChangeHandler(t2) {
      this.authenticator.changeLoginClient(parseInt(t2.content.state), t2.content.datas);
    }
    qchatLoginClientChangeHandler(t2) {
      var o2 = parseInt(t2.content.state);
      o2 = 1 === o2 ? 2 : 3, this.authenticator.changeLoginClient(o2, [t2.content.data]);
    }
    v2BeKickedHandler(t2) {
      if (t2.error)
        this.core.logger.error("v2BeKickedHandler error, ", t2.error);
      else {
        var o2 = function formatBeKickedTag(t3) {
          return format({ reason: { type: "number" }, clientType: { type: "number" }, customClientType: { type: "number" } }, t3);
        }(t2.content);
        this.core.logger.warn("v2Bekicked::", o2), this.kickedDetail = o2, this.clientSocket.doDisconnect(He.KICKED, o2), this.core._clearModuleData(), this.lifeCycle.processEvent("kicked", new V2NIMErrorImpl({ code: me.V2NIM_ERROR_CODE_DISCONNECT, detail: { reason: "disconnect due to kicked" } }), o2), this.emit("onKickedOffline", o2);
      }
    }
    emit(t2, ...o2) {
      var a2 = `${this.name}::emit ${t2.toString()}`;
      if ("onLoginFailed" === t2 || "onDisconnected" === t2 || "onConnectFailed" === t2) {
        var m2 = o2[0];
        this.logger.log(`${a2}`, m2.toString());
      } else if ("onDataSync" === t2) {
        var u2 = o2[2];
        this.logger.log(`${a2}`, o2[0], o2[1], u2 && u2.toString());
      } else
        this.logger.log(`${a2}`, ...o2);
      return super.emit(t2, ...o2);
    }
  }, "V2NIMLoginService"), hn.registerService(class V2NIMSyncServiceImpl extends V2Service {
    constructor(t2) {
      super("V2NIMSyncService", t2), this.teamKey = ["teams", "superTeams", "myTeamMembers", "mySuperTeamMembers"], this.config = {}, this.timetags = {}, "v2" === this.core.options.apiVersion && (this.initEventListeners(), registerParser({ cmdMap: ot, cmdConfig: nt }));
    }
    reset() {
      this.timetags = {};
    }
    setOptions(t2) {
      var o2 = this.core;
      return this.config = Object.assign({ myInfo: !!o2.user.name, offlineMsgs: !!o2.V2NIMMessageService.name, roamingMsgs: !!o2.V2NIMMessageService.name, relations: !!o2.user.name, friends: !!o2.friend.name, friendUsers: !!o2.user.name, msgReceipts: !!o2.V2NIMMessageService.name, broadcastMsgs: !!o2.V2NIMNotificationService.name, recallMsg: !!o2.V2NIMMessageService.name, sessionAck: !!o2.V2NIMConversationService.name, superTeamSessionAck: !!o2.V2NIMConversationService.name, superTeamRoamingMsgs: !!o2.V2NIMTeamService.name, deleteSuperTeamMsg: !!o2.V2NIMTeamService.name, deleteSelfMsgs: !!o2.V2NIMMessageService.name, sessionHistoryMsgsDelete: !!o2.V2NIMMessageService.name, avSignal: !!o2.signaling.name, teams: !!o2.V2NIMTeamService.name, superTeams: !!o2.V2NIMTeamService.name, myTeamMembers: !!o2.V2NIMTeamService.name, mySuperTeamMembers: !!o2.V2NIMTeamService.name, p2pTeamModifyMessage: !!o2.V2NIMMessageService.name, superTeamModifyMessage: !!o2.V2NIMMessageService.name, stickTopSessions: !!o2.V2NIMLocalConversationService.name }, t2), this.config;
    }
    doBasicSync() {
      return __awaiter$2(this, void 0, void 0, function* () {
        var t2 = Object.keys(this.config).filter((t3) => !this.teamKey.includes(t3) && this.config[t3]), o2 = this.genSyncParams(t2);
        this.logger.log("V2Sync:basic", o2);
        var a2 = (yield this.core.clientSocket.sendCmd("v2NIMSync", { tag: o2 })).content.timetag;
        this.setTimetags(a2, t2), yield this.delaySyncDone(), yield this.handleImmediate(), this.core.logger.log("sync::basic sync complete in", a2);
      });
    }
    doTeamSync() {
      return __awaiter$2(this, void 0, void 0, function* () {
        var t2 = this.teamKey.filter((t3) => this.config[t3]);
        if (0 !== t2.length) {
          var o2 = this.genSyncParams(t2);
          this.core.eventBus.emit("V2NIMTeamService/onSyncStarted"), this.logger.log("V2Sync:team", o2);
          var a2 = null;
          try {
            a2 = yield this.core.clientSocket.sendCmd("v2NIMSync", { tag: o2 });
          } catch (t3) {
            throw this.core.eventBus.emit("V2NIMTeamService/onSyncFailed", t3), t3;
          }
          this.core.eventBus.emit("V2NIMTeamService/onSyncFinished");
          var m2 = a2.content.timetag;
          this.setTimetags(m2, this.teamKey), this.core.logger.log("sync::team sync complete in", m2);
        }
      });
    }
    doQchatSync() {
      return __awaiter$2(this, void 0, void 0, function* () {
        var t2 = yield this.core.clientSocket.sendCmd("v2QChatSync", { tag: { systemNotification: 0 } });
        this.core.logger.log("sync::qchat sync complete in", t2.content.timetag);
      });
    }
    doSync() {
      return __awaiter$2(this, void 0, void 0, function* () {
        var t2 = get(this.core, "V2NIMLoginService.authenticator.loginClientOfThisConnection.loginType");
        if (void 0 !== t2) {
          if (this.logger.log(`sync::doSync:type ${t2}`), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 2, subType: "mainSync" }), 1 === t2)
            try {
              yield this.doBasicSync(), yield this.doTeamSync();
            } catch (t3) {
              return void this.doSyncComplete(t3);
            }
          else if (2 === t2)
            try {
              yield this.doQchatSync();
            } catch (t3) {
              return void this.doSyncComplete(t3);
            }
          else {
            if (3 !== t2)
              return;
            try {
              yield this.doBasicSync(), yield this.doTeamSync(), yield this.doQchatSync();
            } catch (t3) {
              return void this.doSyncComplete(t3);
            }
          }
          this.doSyncComplete();
        } else
          this.logger.warn("sync::doSync: no loginType, stop sync");
      });
    }
    doSyncComplete(t2) {
      t2 && this.core.logger.log("sync::doSync complete but got error", t2), this.core.V2NIMLoginService.dataSync.switchDataSync({ type: 1, state: 3, error: t2, subType: "mainSync" });
    }
    initEventListeners() {
      this.core.eventBus.on("V2NIMLoginService/loginLifeCycleLoginSucc", () => {
        this.doSync();
      });
    }
    genSyncParams(t2) {
      return t2.reduce((t3, o2) => {
        var a2 = o2;
        return t3[a2] = this.timetags[a2] || 0, t3;
      }, {});
    }
    setTimetags(t2, o2) {
      o2.forEach((o3) => {
        this.timetags[o3] = t2;
      });
    }
    handleImmediate() {
      return this.core.session && this.core.session.onSyncDone && this.core.session.onSyncDone(), Promise.resolve();
    }
    delaySyncDone() {
      return "ALI" === getMiniappEnv() ? (this.core.logger.log("sync: emit ALIAPP sycnHandler, handle later"), new Promise((t2) => {
        setTimeout(() => {
          t2();
        }, 100);
      })) : Promise.resolve();
    }
  }, "V2NIMSyncService");
  const _sfc_main$$ = /* @__PURE__ */ vue.defineComponent({
    __name: "p2p-set",
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const myNick = vue.ref("");
      const conversation = vue.ref();
      const isMute = vue.ref(false);
      const isStickTop = vue.ref(false);
      const account = vue.ref("");
      const conversationId = vue.ref("");
      let p2pSetWatch;
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      onLoad((option) => {
        const _account = option == null ? void 0 : option.id;
        account.value = _account;
        const _conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.p2pConversationId(_account);
        conversationId.value = _conversationId;
        p2pSetWatch = autorun(() => {
          var _a3, _b2, _c;
          conversation.value = enableV2CloudConversation ? (_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.conversations.get(_conversationId) : (_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.conversations.get(
            _conversationId
          );
          myNick.value = uni.$UIKitStore.uiStore.getAppellation({ account: _account });
          isMute.value = uni.$UIKitStore.relationStore.mutes.includes(_account);
          isStickTop.value = !!((_c = conversation.value) == null ? void 0 : _c.stickTop);
        });
      });
      const addTeamMember = () => {
        const to2 = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationTargetId(
          conversationId.value
        );
        customNavigateTo({
          url: `/pages/Group/group-create/index?p2pConversationId=${to2}`
        });
      };
      const goPinInP2p = () => {
        customNavigateTo({
          url: `/pages/Chat/message/pin-list?conversationId=${conversationId.value}`
        });
      };
      const changeSessionMute = async (e2) => {
        const checked = !e2.detail.value;
        try {
          await uni.$UIKitStore.relationStore.setP2PMessageMuteModeActive(
            account.value,
            checked ? he.V2NIMP2PMessageMuteMode.V2NIM_P2P_MESSAGE_MUTE_MODE_ON : he.V2NIMP2PMessageMuteMode.V2NIM_P2P_MESSAGE_MUTE_MODE_OFF
          );
        } catch (error) {
          uni.showToast({
            title: checked ? t$2("sessionMuteFailText") : t$2("sessionUnMuteFailText"),
            icon: "error"
          });
        }
      };
      const changeStickTopInfo = async (e2) => {
        var _a3, _b2;
        const checked = e2.detail.value;
        try {
          if (enableV2CloudConversation) {
            await ((_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.stickTopConversationActive(
              conversationId.value,
              checked
            ));
          } else {
            await ((_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.stickTopConversationActive(
              conversationId.value,
              checked
            ));
          }
        } catch (error) {
          uni.showToast({
            title: checked ? t$2("addStickTopFailText") : t$2("deleteStickTopFailText"),
            icon: "error"
          });
        }
      };
      vue.onUnmounted(() => {
        p2pSetWatch();
      });
      const __returned__ = { myNick, conversation, isMute, isStickTop, account, conversationId, get p2pSetWatch() {
        return p2pSetWatch;
      }, set p2pSetWatch(v2) {
        p2pSetWatch = v2;
      }, enableV2CloudConversation, addTeamMember, goPinInP2p, changeSessionMute, changeStickTopInfo, NavBar: NavBar$1, Avatar, Icon, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("setText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "p2p-set-container" }, [
        vue.createElementVNode("div", { class: "p2p-set-card" }, [
          vue.createElementVNode("div", { class: "p2p-set-item" }, [
            vue.createElementVNode("div", { class: "p2p-set-my-info" }, [
              vue.createVNode($setup["Avatar"], { account: $setup.account }, null, 8, ["account"]),
              vue.createElementVNode(
                "div",
                { class: "p2p-set-my-nick" },
                vue.toDisplayString($setup.myNick),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("div", {
              class: "member-add",
              onClick: $setup.addTeamMember
            }, [
              vue.createVNode($setup["Icon"], { type: "icon-tianjiaanniu" })
            ])
          ])
        ]),
        vue.createElementVNode("div", { class: "p2p-set-card" }, [
          vue.createElementVNode("div", {
            class: "p2p-set-item p2p-set-item-flex-sb",
            onClick: $setup.goPinInP2p
          }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("pinText")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ]),
          vue.createElementVNode("div", { class: "p2p-set-item p2p-set-item-flex-sb" }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("sessionMuteText")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("switch", {
              checked: !$setup.isMute,
              onChange: $setup.changeSessionMute
            }, null, 40, ["checked"])
          ]),
          vue.createElementVNode("div", { class: "p2p-set-item p2p-set-item-flex-sb" }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("stickTopText")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("switch", {
              checked: $setup.isStickTop,
              onChange: $setup.changeStickTopInfo
            }, null, 40, ["checked"])
          ])
        ])
      ])
    ]);
  }
  const PagesChatMessageP2pSet = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$_], ["__scopeId", "data-v-83bcd594"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/p2p-set.vue"]]);
  var extendStatics = function(d2, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
      d3.__proto__ = b3;
    } || function(d3, b3) {
      for (var p2 in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p2))
          d3[p2] = b3[p2];
    };
    return extendStatics(d2, b2);
  };
  function __extends(d2, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d2, b2);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  }
  var __assign$1 = function() {
    __assign$1 = Object.assign || function __assign2(t2) {
      for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign$1.apply(this, arguments);
  };
  function __awaiter$1(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator$1(thisArg, body) {
    var _2 = { label: 0, sent: function() {
      if (t2[0] & 1)
        throw t2[1];
      return t2[1];
    }, trys: [], ops: [] }, f2, y2, t2, g2;
    return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n2) {
      return function(v2) {
        return step([n2, v2]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (g2 && (g2 = 0, op[0] && (_2 = 0)), _2)
        try {
          if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
            return t2;
          if (y2 = 0, t2)
            op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _2.label++;
              return { value: op[1], done: false };
            case 5:
              _2.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t2[1]) {
                _2.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _2.label < t2[2]) {
                _2.label = t2[2];
                _2.ops.push(op);
                break;
              }
              if (t2[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e2) {
          op = [6, e2];
          y2 = 0;
        } finally {
          f2 = t2 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values$1(o2) {
    var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
    if (m2)
      return m2.call(o2);
    if (o2 && typeof o2.length === "number")
      return {
        next: function() {
          if (o2 && i2 >= o2.length)
            o2 = void 0;
          return { value: o2 && o2[i2++], done: !o2 };
        }
      };
    throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read$1(o2, n2) {
    var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
    if (!m2)
      return o2;
    var i2 = m2.call(o2), r2, ar2 = [], e2;
    try {
      while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
        ar2.push(r2.value);
    } catch (error) {
      e2 = { error };
    } finally {
      try {
        if (r2 && !r2.done && (m2 = i2["return"]))
          m2.call(i2);
      } finally {
        if (e2)
          throw e2.error;
      }
    }
    return ar2;
  }
  function __spreadArray$1(to2, from, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
        if (ar2 || !(i2 in from)) {
          if (!ar2)
            ar2 = Array.prototype.slice.call(from, 0, i2);
          ar2[i2] = from[i2];
        }
      }
    return to2.concat(ar2 || Array.prototype.slice.call(from));
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e2 = new Error(message);
    return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
  };
  var request$1 = function(_a2) {
    var _b = _a2.method, method = _b === void 0 ? "POST" : _b, url = _a2.url, data2 = _a2.data, headers = _a2.headers;
    return __awaiter$1(void 0, void 0, void 0, function() {
      var res, err_1;
      return __generator$1(this, function(_c) {
        switch (_c.label) {
          case 0:
            _c.trys.push([0, 2, , 3]);
            return [4, axios$1({
              method,
              url,
              data: data2,
              headers
            })];
          case 1:
            res = _c.sent();
            if (res.data.code !== 200) {
              return [2, Promise.reject(res.data)];
            }
            return [2, res.data];
          case 2:
            err_1 = _c.sent();
            return [2, Promise.reject(err_1)];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var webRequestHelper = request$1;
  var request = webRequestHelper;
  var url$1 = "https://statistic.live.126.net/statics/report/xkit/action";
  var EventTracking = (
    /** @class */
    function() {
      function EventTracking2(_a2) {
        var appKey = _a2.appKey, version2 = _a2.version, component = _a2.component, nertcVersion = _a2.nertcVersion, imVersion = _a2.imVersion, _b = _a2.platform, platform = _b === void 0 ? "Web" : _b, _c = _a2.channel, channel = _c === void 0 ? "netease" : _c;
        this.platform = platform;
        this.appKey = appKey;
        this.version = version2;
        this.component = component;
        this.nertcVersion = nertcVersion;
        this.imVersion = imVersion;
        this.channel = channel;
      }
      EventTracking2.prototype.track = function(reportType, data2) {
        return __awaiter$1(this, void 0, void 0, function() {
          var _a2, appKey, version2, component, nertcVersion, imVersion, platform, channel, timeStamp;
          return __generator$1(this, function(_c) {
            switch (_c.label) {
              case 0:
                _a2 = this, appKey = _a2.appKey, version2 = _a2.version, component = _a2.component, nertcVersion = _a2.nertcVersion, imVersion = _a2.imVersion, platform = _a2.platform, channel = _a2.channel;
                timeStamp = Date.now();
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [4, request({
                  method: "POST",
                  url: url$1,
                  data: {
                    appKey,
                    version: version2,
                    component,
                    timeStamp,
                    nertcVersion,
                    imVersion,
                    platform,
                    reportType,
                    data: data2,
                    channel
                  }
                })];
              case 2:
                _c.sent();
                return [3, 4];
              case 3:
                _c.sent();
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      return EventTracking2;
    }()
  );
  var EventTracking$1 = EventTracking;
  (function(_super) {
    __extends(VisibilityObserver, _super);
    function VisibilityObserver(options) {
      var _this = _super.call(this) || this;
      _this.visibilityState = document.visibilityState;
      _this.entries = [];
      _this._visibilitychange = function() {
        _this.visibilityState = document.visibilityState;
        _this._trigger();
      };
      _this.intersectionObserver = new IntersectionObserver(_this._intersectionObserverHandler.bind(_this), options);
      document.addEventListener("visibilitychange", _this._visibilitychange);
      return _this;
    }
    VisibilityObserver.prototype.observe = function(target) {
      return this.intersectionObserver.observe(target);
    };
    VisibilityObserver.prototype.unobserve = function(target) {
      return this.intersectionObserver.unobserve(target);
    };
    VisibilityObserver.prototype.destroy = function() {
      this.intersectionObserver.disconnect();
      document.removeEventListener("visibilitychange", this._visibilitychange);
      this.entries = [];
    };
    VisibilityObserver.prototype._intersectionObserverHandler = function(entries, observer) {
      this.entries = entries;
      this._trigger();
    };
    VisibilityObserver.prototype._trigger = function() {
      var _this = this;
      this.entries.forEach(function(item) {
        if (_this.visibilityState !== "visible" || item.intersectionRatio <= 0) {
          _this.emit("visibleChange", {
            visible: false,
            target: item.target
          });
          return;
        }
        _this.emit("visibleChange", {
          visible: true,
          target: item.target
        });
      });
    };
    return VisibilityObserver;
  })(EventEmitter);
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule(fn2, module2) {
    return module2 = { exports: {} }, fn2(module2, module2.exports), module2.exports;
  }
  var loglevel = createCommonjsModule(function(module2) {
    (function(root, definition) {
      if (module2.exports) {
        module2.exports = definition();
      } else {
        root.log = definition();
      }
    })(commonjsGlobal, function() {
      var noop2 = function() {
      };
      var undefinedType = "undefined";
      var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
      var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ];
      function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === "function") {
          return method.bind(obj);
        } else {
          try {
            return Function.prototype.bind.call(method, obj);
          } catch (e2) {
            return function() {
              return Function.prototype.apply.apply(method, [obj, arguments]);
            };
          }
        }
      }
      function traceForIE() {
        if (console.log) {
          if (console.log.apply) {
            console.log.apply(console, arguments);
          } else {
            Function.prototype.apply.apply(console.log, [console, arguments]);
          }
        }
        if (console.trace)
          console.trace();
      }
      function realMethod(methodName) {
        if (methodName === "debug") {
          methodName = "log";
        }
        if (typeof console === undefinedType) {
          return false;
        } else if (methodName === "trace" && isIE) {
          return traceForIE;
        } else if (console[methodName] !== void 0) {
          return bindMethod(console, methodName);
        } else if (console.log !== void 0) {
          return bindMethod(console, "log");
        } else {
          return noop2;
        }
      }
      function replaceLoggingMethods(level, loggerName) {
        for (var i2 = 0; i2 < logMethods.length; i2++) {
          var methodName = logMethods[i2];
          this[methodName] = i2 < level ? noop2 : this.methodFactory(methodName, level, loggerName);
        }
        this.log = this.debug;
      }
      function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function() {
          if (typeof console !== undefinedType) {
            replaceLoggingMethods.call(this, level, loggerName);
            this[methodName].apply(this, arguments);
          }
        };
      }
      function defaultMethodFactory(methodName, level, loggerName) {
        return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
      }
      function Logger2(name2, defaultLevel, factory) {
        var self2 = this;
        var currentLevel;
        defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;
        var storageKey = "loglevel";
        if (typeof name2 === "string") {
          storageKey += ":" + name2;
        } else if (typeof name2 === "symbol") {
          storageKey = void 0;
        }
        function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || "silent").toUpperCase();
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            window.localStorage[storageKey] = levelName;
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {
          }
        }
        function getPersistedLevel() {
          var storedLevel;
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            storedLevel = window.localStorage[storageKey];
          } catch (ignore) {
          }
          if (typeof storedLevel === undefinedType) {
            try {
              var cookie = window.document.cookie;
              var location = cookie.indexOf(
                encodeURIComponent(storageKey) + "="
              );
              if (location !== -1) {
                storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
              }
            } catch (ignore) {
            }
          }
          if (self2.levels[storedLevel] === void 0) {
            storedLevel = void 0;
          }
          return storedLevel;
        }
        function clearPersistedLevel() {
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            window.localStorage.removeItem(storageKey);
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {
          }
        }
        self2.name = name2;
        self2.levels = {
          "TRACE": 0,
          "DEBUG": 1,
          "INFO": 2,
          "WARN": 3,
          "ERROR": 4,
          "SILENT": 5
        };
        self2.methodFactory = factory || defaultMethodFactory;
        self2.getLevel = function() {
          return currentLevel;
        };
        self2.setLevel = function(level, persist) {
          if (typeof level === "string" && self2.levels[level.toUpperCase()] !== void 0) {
            level = self2.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self2.levels.SILENT) {
            currentLevel = level;
            if (persist !== false) {
              persistLevelIfPossible(level);
            }
            replaceLoggingMethods.call(self2, level, name2);
            if (typeof console === undefinedType && level < self2.levels.SILENT) {
              return "No console available for logging";
            }
          } else {
            throw "log.setLevel() called with invalid level: " + level;
          }
        };
        self2.setDefaultLevel = function(level) {
          defaultLevel = level;
          if (!getPersistedLevel()) {
            self2.setLevel(level, false);
          }
        };
        self2.resetLevel = function() {
          self2.setLevel(defaultLevel, false);
          clearPersistedLevel();
        };
        self2.enableAll = function(persist) {
          self2.setLevel(self2.levels.TRACE, persist);
        };
        self2.disableAll = function(persist) {
          self2.setLevel(self2.levels.SILENT, persist);
        };
        var initialLevel = getPersistedLevel();
        if (initialLevel == null) {
          initialLevel = defaultLevel;
        }
        self2.setLevel(initialLevel, false);
      }
      var defaultLogger = new Logger2();
      var _loggersByName = {};
      defaultLogger.getLogger = function getLogger(name2) {
        if (typeof name2 !== "symbol" && typeof name2 !== "string" || name2 === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }
        var logger2 = _loggersByName[name2];
        if (!logger2) {
          logger2 = _loggersByName[name2] = new Logger2(
            name2,
            defaultLogger.getLevel(),
            defaultLogger.methodFactory
          );
        }
        return logger2;
      };
      var _log = typeof window !== undefinedType ? window.log : void 0;
      defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType && window.log === defaultLogger) {
          window.log = _log;
        }
        return defaultLogger;
      };
      defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
      };
      defaultLogger["default"] = defaultLogger;
      return defaultLogger;
    });
  });
  var log = loglevel;
  function sensitiveInfoFilter(content) {
    var regexs = [
      "scene/apps/[a-z0-9]{32}/",
      '"rtcKey":"[a-z0-9]{32}"',
      '"imKey":"[a-z0-9]{32}"',
      '"appkey":"[a-z0-9]{32}"',
      '"appkey": "[a-z0-9]{32}"',
      'appkey:"[a-z0-9]{32}"',
      'appkey: "[a-z0-9]{32}"',
      '"appkey":[a-z0-9]{32}',
      '"appkey": [a-z0-9]{32}',
      "appkey:[a-z0-9]{32}",
      "appkey: [a-z0-9]{32}"
    ];
    var templates = [
      "scene/apps/***/",
      '"rtcKey":"***"',
      '"imKey":"***"',
      '"appkey":"***"',
      '"appkey": "***"',
      'appkey:"***"',
      'appkey: "***"',
      '"appkey":***',
      '"appkey": ***',
      "appkey:***",
      "appkey: ***"
    ];
    regexs.forEach(function(regex, index) {
      var reg = new RegExp(regex, "gi");
      content = content.replace(reg, templates[index]);
    });
    return content;
  }
  var logDebug = function(_a2) {
    var _b = _a2 === void 0 ? {
      appName: "",
      version: "",
      storeWindow: false
    } : _a2, level = _b.level, _c = _b.appName, appName = _c === void 0 ? "" : _c;
    _b.version;
    var _e2 = _b.storeWindow, storeWindow = _e2 === void 0 ? false : _e2;
    var genTime = function() {
      var now = /* @__PURE__ */ new Date();
      var year = now.getFullYear();
      var month = now.getMonth() + 1;
      var day = now.getDate();
      var hour = now.getHours() < 10 ? "0".concat(now.getHours()) : now.getHours();
      var min = now.getMinutes() < 10 ? "0".concat(now.getMinutes()) : now.getMinutes();
      var s2 = now.getSeconds() < 10 ? "0".concat(now.getSeconds()) : now.getSeconds();
      var nowString = "".concat(year, "-").concat(month, "-").concat(day, " ").concat(hour, ":").concat(min, ":").concat(s2);
      return nowString;
    };
    var genUserAgent = function() {
      try {
        var ua2 = navigator.userAgent.toLocaleLowerCase();
        var re2 = /(msie|firefox|chrome|opera|version).*?([\d.]+)/;
        var m2 = ua2.match(re2) || [];
        var browser = m2[1].replace(/version/, "safari");
        var ver = m2[2];
        return {
          browser,
          ver
        };
      } catch (error) {
        return null;
      }
    };
    var proxyLog = function() {
      var _log = new Proxy(log, {
        get: function(target, prop) {
          var _a3, _b2;
          if (!(prop in target)) {
            return;
          }
          var func = target[prop];
          if (!["log", "info", "warn", "error", "trace", "debug"].includes(prop)) {
            return func;
          }
          var prefix = genTime();
          if (genUserAgent()) {
            prefix += "[".concat((_a3 = genUserAgent()) === null || _a3 === void 0 ? void 0 : _a3.browser, " ").concat((_b2 = genUserAgent()) === null || _b2 === void 0 ? void 0 : _b2.ver, "]");
          }
          prefix += "[".concat({
            log: "L",
            info: "I",
            warn: "W",
            error: "E",
            trace: "E",
            debug: "D"
          }[prop], "]") + "[".concat(appName, "]") + ":";
          var that = this;
          return function() {
            var args = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              args[_i2] = arguments[_i2];
            }
            for (var i2 = 0; i2 < args.length; i2++) {
              if (typeof args[i2] === "object") {
                try {
                  args[i2] = JSON.stringify(args[i2]);
                } catch (_a4) {
                  formatAppLog("warn", "at node_modules/@xkit-yx/utils/dist/index.esm.js:778", "[日志打印对象无法序列化]", args[i2]);
                  args[i2] = args[i2];
                }
              }
              if (typeof args[i2] === "string") {
                args[i2] = sensitiveInfoFilter(args[i2]);
              }
            }
            return func.apply(that, __spreadArray$1([prefix], __read$1(args), false));
          };
        }
      });
      return _log;
    };
    var logger2 = proxyLog();
    if (level) {
      logger2.setLevel(level);
    }
    if (storeWindow) {
      window.__LOGGER__ = logger2;
    }
    return logger2;
  };
  var logDebug$1 = logDebug;
  var EventPriority;
  (function(EventPriority2) {
    EventPriority2[EventPriority2["LOW"] = 0] = "LOW";
    EventPriority2[EventPriority2["NORMAL"] = 1] = "NORMAL";
    EventPriority2[EventPriority2["HIGH"] = 2] = "HIGH";
  })(EventPriority || (EventPriority = {}));
  var ReportEvent = (
    /** @class */
    function() {
      function ReportEvent2(options) {
        this.appKey = "";
        this.component = "";
        this.data = {};
        this.framework = "";
        this.version = "";
        this.startTime = 0;
        this.endTime = 0;
        this.duration = 0;
        this.data.startTime = (/* @__PURE__ */ new Date()).getTime();
        this.data.timeStamp = this.data.startTime;
        this.eventId = options.eventId;
        this.priority = options.priority;
      }
      ReportEvent2.prototype.end = function() {
        if (this.data.endTime && this.data.duration) {
          return;
        }
        this.data.endTime = this.data.endTime || (/* @__PURE__ */ new Date()).getTime();
        this.data.duration = this.data.duration || this.data.endTime - this.data.startTime;
      };
      ReportEvent2.prototype.setAppInfo = function(appInfo) {
        this.appKey = appInfo.appKey;
        this.component = appInfo.component;
        this.version = appInfo.version;
        if (appInfo.framework) {
          this.framework = appInfo.framework;
        }
      };
      ReportEvent2.prototype.endWith = function(data2) {
        var code = data2.code, msg = data2.msg, requestId = data2.requestId, serverCost = data2.serverCost;
        if (typeof code != "number") {
          this.data.code = -2;
        } else {
          this.data.code = code;
        }
        this.data.message = msg;
        this.data.requestId = requestId;
        this.data.serverCost = serverCost;
        this.end();
      };
      ReportEvent2.prototype.endWithSuccess = function(data2) {
        if (data2) {
          var requestId = data2.requestId, serverCost = data2.serverCost;
          this.data.requestId = requestId;
          this.data.serverCost = serverCost;
        }
        this.data.code = 0;
        this.data.message = "success";
        this.end();
      };
      ReportEvent2.prototype.endWithFailure = function(data2) {
        if (data2) {
          var requestId = data2.requestId, serverCost = data2.serverCost;
          this.data.requestId = requestId;
          this.data.serverCost = serverCost;
        }
        this.data.code = -1;
        this.data.message = "failure";
        this.end();
      };
      ReportEvent2.prototype.setParams = function(params) {
        this.data.params = __assign$1({}, params);
        return this;
      };
      ReportEvent2.prototype.addParams = function(params) {
        this.data.params = __assign$1(__assign$1({}, this.data.params), params);
        return this;
      };
      ReportEvent2.prototype.setData = function(data2) {
        this.data = __assign$1(__assign$1({}, this.data), data2);
      };
      ReportEvent2.prototype.setUserId = function(userId) {
        this.data.userId = userId;
      };
      return ReportEvent2;
    }()
  );
  var EventStep = (
    /** @class */
    function(_super) {
      __extends(EventStep2, _super);
      function EventStep2(options) {
        return _super.call(this, options) || this;
      }
      return EventStep2;
    }(ReportEvent)
  );
  (function(_super) {
    __extends(IntervalEvent, _super);
    function IntervalEvent(options) {
      var _this = _super.call(this, options) || this;
      _this._stepMap = /* @__PURE__ */ new Map();
      return _this;
    }
    IntervalEvent.prototype.beginStep = function(name2) {
      if (this._stepMap.has(name2)) {
        return this._stepMap[name2];
      }
      var step = new EventStep({ eventId: name2, priority: this.priority });
      step.setData({ step: name2 });
      this._stepMap.set(name2, step);
      return step;
    };
    IntervalEvent.prototype.addStep = function(data2) {
      this._stepMap.set(data2.eventId, data2);
    };
    IntervalEvent.prototype.removeStep = function(eventId) {
      this._stepMap.delete(eventId);
    };
    IntervalEvent.prototype.endWith = function(data2) {
      _super.prototype.endWith.call(this, data2);
      this.end();
    };
    IntervalEvent.prototype.endWithSuccess = function(data2) {
      _super.prototype.endWithSuccess.call(this, data2);
      this.end();
    };
    IntervalEvent.prototype.endWithFailure = function(data2) {
      _super.prototype.endWithFailure.call(this, data2);
      this.end();
    };
    IntervalEvent.prototype.end = function() {
      var e_1, _a2;
      var steps = [];
      _super.prototype.end.call(this);
      try {
        for (var _b = __values$1(this._stepMap.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var step = _c.value;
          step.data.index = steps.length;
          steps.push(step.data);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (steps.length > 0) {
        this.data.steps = steps;
      }
    };
    return IntervalEvent;
  })(EventStep);
  function getFileType(filename) {
    var fileMap = {
      img: /(png|gif|jpg)/i,
      pdf: /pdf$/i,
      word: /(doc|docx)$/i,
      excel: /(xls|xlsx)$/i,
      ppt: /(ppt|pptx)$/i,
      zip: /(zip|rar|7z)$/i,
      audio: /(mp3|wav|wmv)$/i,
      video: /(mp4|mkv|rmvb|wmv|avi|flv|mov)$/i
    };
    return Object.keys(fileMap).find(function(type) {
      return fileMap[type].test(filename);
    }) || "";
  }
  var parseFileSize = function(size, level) {
    if (level === void 0) {
      level = 0;
    }
    var fileSizeMap = {
      0: "B",
      1: "KB",
      2: "MB",
      3: "GB",
      4: "TB"
    };
    var handler = function(size2, level2) {
      if (level2 >= Object.keys(fileSizeMap).length) {
        return "the file is too big";
      }
      if (size2 < 1024) {
        return "".concat(size2).concat(fileSizeMap[level2]);
      }
      return handler(Math.round(size2 / 1024), level2 + 1);
    };
    return handler(size, level);
  };
  function debounce(fn2, wait) {
    var timer = null;
    return function() {
      var _this = this;
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      timer = setTimeout(function() {
        fn2.apply(_this, args);
      }, wait);
    };
  }
  const _sfc_main$_ = {
    name: "uniLink",
    props: {
      href: {
        type: String,
        default: ""
      },
      text: {
        type: String,
        default: ""
      },
      download: {
        type: String,
        default: ""
      },
      showUnderLine: {
        type: [Boolean, String],
        default: true
      },
      copyTips: {
        type: String,
        default: "已自动复制网址，请在手机浏览器里粘贴该网址"
      },
      color: {
        type: String,
        default: "#999999"
      },
      fontSize: {
        type: [Number, String],
        default: 14
      }
    },
    computed: {
      isShowA() {
        if ((this.isMail() || this.isTel()) && this._isH5 === true) {
          return true;
        }
        return false;
      }
    },
    created() {
      this._isH5 = null;
    },
    methods: {
      isMail() {
        return this.href.startsWith("mailto:");
      },
      isTel() {
        return this.href.startsWith("tel:");
      },
      openURL() {
      },
      makePhoneCall(phoneNumber) {
        uni.makePhoneCall({
          phoneNumber
        });
      }
    }
  };
  function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
    return $options.isShowA ? (vue.openBlock(), vue.createElementBlock("a", {
      key: 0,
      class: vue.normalizeClass(["uni-link", {
        "uni-link--withline": $props.showUnderLine === true || $props.showUnderLine === "true"
      }]),
      href: $props.href,
      style: vue.normalizeStyle({ color: $props.color, fontSize: $props.fontSize + "px" }),
      download: $props.download
    }, [
      vue.renderSlot(_ctx.$slots, "default", {}, () => [
        vue.createTextVNode(
          vue.toDisplayString($props.text),
          1
          /* TEXT */
        )
      ], true)
    ], 14, ["href", "download"])) : (vue.openBlock(), vue.createElementBlock(
      "text",
      {
        key: 1,
        class: vue.normalizeClass(["uni-link", {
          "uni-link--withline": $props.showUnderLine === true || $props.showUnderLine === "true"
        }]),
        style: vue.normalizeStyle({ color: $props.color, fontSize: $props.fontSize + "px" }),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.openURL && $options.openURL(...args))
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.createTextVNode(
            vue.toDisplayString($props.text),
            1
            /* TEXT */
          )
        ], true)
      ],
      6
      /* CLASS, STYLE */
    ));
  }
  const UniLink = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$Z], ["__scopeId", "data-v-109b22ad"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/uni-components/uni-link/components/uni-link/uni-link.vue"]]);
  const _sfc_main$Z = /* @__PURE__ */ vue.defineComponent({
    __name: "message-file",
    props: {
      msg: { type: Object, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const fileIconMap = {
        pdf: "icon-PPT",
        word: "icon-Word",
        excel: "icon-Excel",
        ppt: "icon-PPT",
        zip: "icon-RAR1",
        txt: "icon-qita",
        img: "icon-tupian2",
        audio: "icon-yinle",
        video: "icon-shipin"
      };
      const {
        name: name2 = "",
        url = "",
        ext = "",
        size = 0
      } = props.msg.attachment || {};
      const iconType = fileIconMap[getFileType(ext)] || "icon-weizhiwenjian";
      const index = name2.lastIndexOf(".") > -1 ? name2.lastIndexOf(".") : name2.length;
      const prefixName = name2.slice(0, Math.max(index - 5, 0));
      const suffixName = name2.slice(Math.max(index - 5, 0));
      const downloadUrl = url + (url.includes("?") ? "&" : "?") + `download=${name2}`;
      const mpDownload = () => {
        uni.setClipboardData({
          data: downloadUrl
        });
        uni.showModal({
          content: t$2("wxAppFileCopyText"),
          showCancel: false
        });
      };
      const openInBrowser = (url2) => {
        uni.setClipboardData({
          data: url2,
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("openUrlText"),
              icon: "none"
            });
          }
        });
      };
      const __returned__ = { props, fileIconMap, name: name2, url, ext, size, iconType, index, prefixName, suffixName, downloadUrl, mpDownload, openInBrowser, get parseFileSize() {
        return parseFileSize;
      }, Icon, UniLink, get isWxApp() {
        return isWxApp;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
    return !$setup.isWxApp ? (vue.openBlock(), vue.createBlock($setup["UniLink"], {
      key: 0,
      class: "msg-file-wrapper",
      href: $setup.downloadUrl,
      download: $setup.name,
      showUnderLine: false
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode(
          "div",
          {
            class: vue.normalizeClass(!$props.msg.isSelf ? "msg-file msg-file-in" : "msg-file msg-file-out"),
            onClick: _cache[0] || (_cache[0] = () => $setup.openInBrowser($setup.downloadUrl))
          },
          [
            vue.createVNode($setup["Icon"], {
              type: $setup.iconType,
              size: 32
            }, null, 8, ["type"]),
            vue.createElementVNode("div", { class: "msg-file-content" }, [
              vue.createElementVNode("div", { class: "msg-file-title" }, [
                vue.createElementVNode(
                  "div",
                  { class: "msg-file-title-prefix" },
                  vue.toDisplayString($setup.prefixName),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "div",
                  { class: "msg-file-title-suffix" },
                  vue.toDisplayString($setup.suffixName),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode(
                "div",
                { class: "msg-file-size" },
                vue.toDisplayString($setup.parseFileSize($setup.size)),
                1
                /* TEXT */
              )
            ])
          ],
          2
          /* CLASS */
        )
      ]),
      _: 1
      /* STABLE */
    }, 8, ["download"])) : (vue.openBlock(), vue.createElementBlock("div", {
      key: 1,
      onClick: $setup.mpDownload
    }, [
      vue.createElementVNode(
        "div",
        {
          class: vue.normalizeClass(!$props.msg.isSelf ? "msg-file msg-file-in" : "msg-file msg-file-out")
        },
        [
          vue.createVNode($setup["Icon"], {
            type: $setup.iconType,
            size: 32
          }, null, 8, ["type"]),
          vue.createElementVNode("div", { class: "msg-file-content" }, [
            vue.createElementVNode("div", { class: "msg-file-title" }, [
              vue.createElementVNode(
                "div",
                { class: "msg-file-title-prefix" },
                vue.toDisplayString($setup.prefixName),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "div",
                { class: "msg-file-title-suffix" },
                vue.toDisplayString($setup.suffixName),
                1
                /* TEXT */
              ),
              vue.createCommentVNode(' <text class="msg-file-name" v-text="name"></text> ')
            ]),
            vue.createElementVNode(
              "div",
              { class: "msg-file-size" },
              vue.toDisplayString($setup.parseFileSize($setup.size)),
              1
              /* TEXT */
            )
          ])
        ],
        2
        /* CLASS */
      )
    ]));
  }
  const MessageFile = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$Y], ["__scopeId", "data-v-999edb3e"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-file.vue"]]);
  const _sfc_main$Y = /* @__PURE__ */ vue.defineComponent({
    __name: "message-audio",
    props: {
      msg: { type: Object, required: true },
      mode: { type: String, required: false },
      broadcastNewAudioSrc: { type: String, required: false }
    },
    emits: ["getGlobalAudioContext"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const audioIconType = vue.ref("icon-yuyin3");
      const animationFlag = vue.ref(false);
      const isAudioPlaying = vue.ref(false);
      const audioMap = /* @__PURE__ */ new Map();
      const emits = __emit;
      const formatDuration = (duration2) => {
        return Math.round(duration2 / 1e3) || 1;
      };
      const audioContainerWidth = vue.computed(() => {
        var _a2;
        const duration2 = formatDuration((_a2 = props.msg.attachment) == null ? void 0 : _a2.duration);
        const maxWidth = 180;
        return 50 + 8 * (duration2 - 1) > maxWidth ? maxWidth : 50 + 8 * (duration2 - 1);
      });
      const duration = vue.computed(() => {
        var _a2;
        return formatDuration(
          (_a2 = props.msg.attachment) == null ? void 0 : _a2.duration
        );
      });
      const handlePlayAudio = () => {
        var _a2, _b;
        uni.$emit(events.AUDIO_URL_CHANGE, (_b = (_a2 = props.msg) == null ? void 0 : _a2.attachment) == null ? void 0 : _b.url);
        const audioContext = getAudio();
        if (!audioContext) {
          const globalAudioContext = uni.createInnerAudioContext();
          audioMap.set("audio", globalAudioContext);
          initAudioSrc();
        }
        toggleAudioPlayState();
      };
      vue.watch(
        () => props.broadcastNewAudioSrc,
        (newSrc) => {
          var _a2, _b;
          if (newSrc !== ((_b = (_a2 = props.msg) == null ? void 0 : _a2.attachment) == null ? void 0 : _b.url) && isAudioPlaying.value) {
            stopAudio();
            isAudioPlaying.value = false;
          }
        }
      );
      const toggleAudioPlayState = () => {
        if (!isAudioPlaying.value) {
          playAudio();
        } else {
          stopAudio();
        }
      };
      const stopAudio = () => {
        const audioContext = getAudio();
        if (!audioContext) {
          return;
        }
        try {
          audioContext.stop();
          isAudioPlaying.value = false;
        } catch {
          formatAppLog("log", "at pages/Chat/message/message-audio.vue:104", "stop audio error");
        }
      };
      function initAudioSrc() {
        var _a2, _b;
        const audioContext = getAudio();
        if (!audioContext) {
          return;
        }
        audioContext.src = (_b = (_a2 = props.msg) == null ? void 0 : _a2.attachment) == null ? void 0 : _b.url;
        isAudioPlaying.value = false;
        audioContext.onPlay(onAudioPlay);
        audioContext.onStop(onAudioStop);
        audioContext.onEnded(onAudioEnded);
        audioContext.onError(onAudioError);
      }
      function playAudio() {
        const audioContext = getAudio();
        formatAppLog("log", "at pages/Chat/message/message-audio.vue:126", "audio played============", audioContext);
        if (!audioContext) {
          return;
        }
        try {
          audioContext.play();
        } catch (error) {
          formatAppLog("log", "at pages/Chat/message/message-audio.vue:134", "audio played error", error);
        }
      }
      function onAudioPlay() {
        isAudioPlaying.value = true;
        playAudioAnimation();
      }
      function onAudioStop() {
        var _a2;
        animationFlag.value = false;
        isAudioPlaying.value = false;
        if (isHarmonyOs) {
          const audioContext = getAudio();
          (_a2 = audioContext == null ? void 0 : audioContext.destroy) == null ? void 0 : _a2.call(audioContext);
          audioMap.delete("audio");
        }
      }
      function onAudioEnded() {
        animationFlag.value = false;
        isAudioPlaying.value = false;
      }
      function onAudioError(error) {
        animationFlag.value = false;
        formatAppLog("warn", "at pages/Chat/message/message-audio.vue:164", "audio played error", error);
      }
      const getAudio = () => {
        return audioMap.get("audio");
      };
      const playAudioAnimation = () => {
        try {
          animationFlag.value = true;
          let audioIcons = ["icon-yuyin1", "icon-yuyin2", "icon-yuyin3"];
          const handler = () => {
            const icon = audioIcons.shift();
            if (icon) {
              audioIconType.value = icon;
              if (!audioIcons.length && animationFlag.value) {
                audioIcons = ["icon-yuyin1", "icon-yuyin2", "icon-yuyin3"];
              }
              if (audioIcons.length) {
                setTimeout(handler, 300);
              }
            }
          };
          handler();
        } catch (error) {
          formatAppLog("log", "at pages/Chat/message/message-audio.vue:190", "playAudioAnimation error", error);
        }
      };
      const stopAudioOnHide = () => {
        var _a2;
        const audioContext = getAudio();
        if (isAudioPlaying.value) {
          stopAudio();
        }
        (_a2 = audioContext == null ? void 0 : audioContext.destroy) == null ? void 0 : _a2.call(audioContext);
        animationFlag.value = false;
        audioMap.delete("audio");
      };
      vue.onUnmounted(() => {
        stopAudioOnHide();
      });
      onHide(() => {
        stopAudioOnHide();
      });
      onUnload(() => {
        stopAudioOnHide();
      });
      const __returned__ = { props, audioIconType, animationFlag, isAudioPlaying, audioMap, emits, formatDuration, audioContainerWidth, duration, handlePlayAudio, toggleAudioPlayState, stopAudio, initAudioSrc, playAudio, onAudioPlay, onAudioStop, onAudioEnded, onAudioError, getAudio, playAudioAnimation, stopAudioOnHide, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "div",
      {
        class: vue.normalizeClass(!$props.msg.isSelf || $props.mode === "audio-in" ? "audio-in" : "audio-out"),
        style: vue.normalizeStyle({ width: $setup.audioContainerWidth + "px" }),
        onClick: $setup.handlePlayAudio
      },
      [
        vue.createElementVNode(
          "div",
          { class: "audio-dur" },
          vue.toDisplayString($setup.duration) + "s",
          1
          /* TEXT */
        ),
        vue.createElementVNode("div", { class: "audio-icon-wrapper" }, [
          (vue.openBlock(), vue.createBlock($setup["Icon"], {
            size: 24,
            key: $setup.audioIconType,
            type: $setup.audioIconType
          }, null, 8, ["type"]))
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const MessageAudio = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$X], ["__scopeId", "data-v-bedcccfd"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-audio.vue"]]);
  var isRegExp = function(re2) {
    return re2 instanceof RegExp;
  };
  var escapeRegExp = function escapeRegExp2(string) {
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
  };
  var isString = function(value) {
    return typeof value === "string";
  };
  var flatten = function(array) {
    var newArray = [];
    array.forEach(function(item) {
      if (Array.isArray(item)) {
        newArray = newArray.concat(item);
      } else {
        newArray.push(item);
      }
    });
    return newArray;
  };
  function replaceString(str, match, fn2) {
    var curCharStart = 0;
    var curCharLen = 0;
    if (str === "") {
      return str;
    } else if (!str || !isString(str)) {
      throw new TypeError(
        "First argument to react-string-replace#replaceString must be a string"
      );
    }
    var re2 = match;
    if (!isRegExp(re2)) {
      re2 = new RegExp("(" + escapeRegExp(re2) + ")", "gi");
    }
    var result = str.split(re2);
    for (var i2 = 1, length = result.length; i2 < length; i2 += 2) {
      if (result[i2] === void 0 || result[i2 - 1] === void 0) {
        formatAppLog(
          "warn",
          "at utils/parseText.ts:87",
          "reactStringReplace: Encountered undefined value during string replacement. Your RegExp may not be working the way you expect."
        );
        continue;
      }
      curCharLen = result[i2].length;
      curCharStart += result[i2 - 1].length;
      result[i2] = fn2(result[i2], i2, curCharStart);
      curCharStart += curCharLen;
    }
    return result;
  }
  function stringReplace(source, match, fn2) {
    if (!Array.isArray(source))
      source = [source];
    return flatten(
      source.map(function(x2) {
        return isString(x2) ? replaceString(x2, match, fn2) : x2;
      })
    );
  }
  function parseText(text, ext) {
    var _a2;
    if (!text)
      return [];
    const regexLink = /(https?:\/\/\S+)/gi;
    const yxAitMsg = ext ? JSON.parse(ext).yxAitMsg : null;
    const emojiArr = stringReplace(text, emojiRegExp, (item) => {
      return {
        type: "emoji",
        value: item
      };
    });
    const emojiAndLinkArr = stringReplace(emojiArr, regexLink, (item) => {
      return {
        type: "link",
        value: item
      };
    });
    let emojiAndLinkAndAitArr = emojiAndLinkArr;
    if (yxAitMsg) {
      (_a2 = Object.keys(yxAitMsg)) == null ? void 0 : _a2.forEach((key) => {
        const item = yxAitMsg[key];
        emojiAndLinkAndAitArr = stringReplace(
          emojiAndLinkAndAitArr,
          item.text,
          (item2) => {
            return {
              type: "Ait",
              value: item2
            };
          }
        );
      });
    }
    const result = emojiAndLinkAndAitArr.map((item) => {
      if (typeof item == "string") {
        return {
          type: "text",
          value: item
        };
      } else {
        return item;
      }
    });
    return result;
  }
  const _sfc_main$X = /* @__PURE__ */ vue.defineComponent({
    __name: "message-text",
    props: {
      msg: { type: Object, required: true },
      fontSize: { type: Number, required: false }
    },
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const props = __props;
      const textArr = parseText(((_a2 = props.msg) == null ? void 0 : _a2.text) || "", (_b = props.msg) == null ? void 0 : _b.serverExtension);
      const openInBrowser = (url) => {
        uni.setClipboardData({
          data: url,
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("openUrlText"),
              icon: "none"
            });
          }
        });
      };
      const __returned__ = { props, textArr, openInBrowser, Icon, UniLink, get EMOJI_ICON_MAP_CONFIG() {
        return EMOJI_ICON_MAP_CONFIG$1;
      }, get isHarmonyOs() {
        return isHarmonyOs;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "div",
      {
        class: "msg-text",
        style: vue.normalizeStyle({ fontSize: ($props.fontSize || 16) + "px" })
      },
      [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.textArr, (item) => {
            return vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              null,
              [
                item.type === "text" ? (vue.openBlock(), vue.createElementBlock(
                  "span",
                  {
                    key: 0,
                    class: "msg-text"
                  },
                  vue.toDisplayString(item.value),
                  1
                  /* TEXT */
                )) : item.type === "Ait" ? (vue.openBlock(), vue.createElementBlock(
                  "text",
                  {
                    key: 1,
                    class: "msg-text",
                    style: { color: "#1861df" }
                  },
                  vue.toDisplayString(" " + item.value + " "),
                  1
                  /* TEXT */
                )) : item.type === "emoji" ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
                  key: 2,
                  type: $setup.EMOJI_ICON_MAP_CONFIG[item.value],
                  size: $props.fontSize || 22,
                  style: { margin: "0 2px 2px 2px", verticalAlign: "bottom" }
                }, null, 8, ["type", "size"])) : item.type === "link" ? (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 3 },
                  [
                    !$setup.isHarmonyOs ? (vue.openBlock(), vue.createBlock($setup["UniLink"], {
                      key: 0,
                      href: item.value,
                      style: vue.normalizeStyle({ color: "#1861df", fontSize: ($props.fontSize || 16) + "px" }),
                      showUnderLine: false
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString(item.value),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["href", "style"])) : (vue.openBlock(), vue.createElementBlock("span", {
                      key: 1,
                      style: vue.normalizeStyle({ color: "#1861df", fontSize: ($props.fontSize || 16) + "px" }),
                      onClick: () => $setup.openInBrowser(item.value)
                    }, vue.toDisplayString(item.value), 13, ["onClick"]))
                  ],
                  64
                  /* STABLE_FRAGMENT */
                )) : vue.createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            );
          }),
          256
          /* UNKEYED_FRAGMENT */
        ))
      ],
      4
      /* STYLE */
    );
  }
  const MessageText = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$W], ["__scopeId", "data-v-78d0533c"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-text.vue"]]);
  const _sfc_main$W = /* @__PURE__ */ vue.defineComponent({
    __name: "message-pin-card",
    props: {
      msg: { type: Object, required: true },
      handleUnPinMsg: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const conversationType = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationType(
        props.msg.conversationId
      );
      const to2 = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationTargetId(
        props.msg.conversationId
      );
      const gotoChat = async () => {
        await uni.$UIKitStore.uiStore.selectConversation(props.msg.conversationId);
        customRedirectTo({
          url: "/pages/Chat/index"
        });
      };
      const handleCopy = () => {
        uni.setClipboardData({
          //@ts-ignore
          data: props.msg.text,
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("copySuccessText"),
              icon: "none"
            });
          },
          fail: () => {
            uni.showToast({
              title: t$2("copyFailText"),
              icon: "none"
            });
          }
        });
      };
      const handlePinMsg = () => {
        let itemList = [t$2("unpinText")];
        if (props.msg.messageType === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT) {
          itemList = itemList.concat([
            t$2("copyText"),
            t$2("forwardToTeamText"),
            t$2("forwardToFriendText")
          ]);
        } else if (props.msg.messageType !== Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO) {
          itemList = itemList.concat([
            t$2("forwardToTeamText"),
            t$2("forwardToFriendText")
          ]);
        }
        uni.showActionSheet({
          itemList,
          success(data2) {
            if (props.msg.messageType === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT) {
              if (data2.tapIndex === 0) {
                props.handleUnPinMsg();
              } else if (data2.tapIndex === 1) {
                handleCopy();
              } else if (data2.tapIndex === 2) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM}&msgIdClient=${props.msg.messageClientId}&origin=pin`
                });
              } else if (data2.tapIndex === 3) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P}&msgIdClient=${props.msg.messageClientId}&origin=pin`
                });
              }
            } else if (props.msg.messageType !== Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO) {
              if (data2.tapIndex === 0) {
                props.handleUnPinMsg();
              } else if (data2.tapIndex === 1) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM}&msgIdClient=${props.msg.messageClientId}&origin=pin`
                });
              } else if (data2.tapIndex === 2) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P}&msgIdClient=${props.msg.messageClientId}&origin=pin`
                });
              }
            } else {
              if (data2.tapIndex === 0) {
                props.handleUnPinMsg();
              }
            }
          },
          complete() {
          }
        });
      };
      const imageUrl = vue.computed(() => {
        var _a2, _b, _c;
        return ((_b = (_a2 = props.msg) == null ? void 0 : _a2.attachment) == null ? void 0 : _b.url) || ((_c = props.msg.attachment) == null ? void 0 : _c.file);
      });
      const videoFirstFrameDataUrl = vue.computed(() => {
        var _a2;
        const url = (_a2 = props.msg.attachment) == null ? void 0 : _a2.url;
        return url ? `${url}${url.includes("?") ? "&" : "?"}vframe=1` : "";
      });
      const handleImageTouch = (url) => {
        if (url) {
          uni.previewImage({
            urls: [url]
          });
        }
      };
      const handleVideoTouch = (msg) => {
        var _a2;
        stopAllAudio();
        const url = (_a2 = msg.attachment) == null ? void 0 : _a2.url;
        if (url) {
          customNavigateTo({
            url: `/pages/Chat/video-play?videoUrl=${encodeURIComponent(url)}`
          });
        }
      };
      const isToday = (time) => {
        const createTime = new Date(time);
        const now = /* @__PURE__ */ new Date();
        return createTime.getFullYear() === now.getFullYear() && createTime.getMonth() === now.getMonth() && createTime.getDate() === now.getDate();
      };
      const isThisYear = (time) => {
        const createTime = new Date(time);
        const now = /* @__PURE__ */ new Date();
        return createTime.getFullYear() === now.getFullYear();
      };
      const timeFormat = () => {
        const createTime = props.msg.createTime;
        if (isToday(createTime)) {
          return dayjs(createTime).format("HH:mm");
        } else if (isThisYear(createTime)) {
          return dayjs(createTime).format("MM月DD日 HH:mm");
        } else {
          return dayjs(createTime).format("YYYY年MM月DD日 HH:mm");
        }
      };
      const __returned__ = { props, conversationType, to: to2, gotoChat, handleCopy, handlePinMsg, imageUrl, videoFirstFrameDataUrl, handleImageTouch, handleVideoTouch, isToday, isThisYear, timeFormat, Avatar, Icon, get V2NIMConst() {
        return Ma;
      }, Appellation, MessageFile, MessageAudio, MessageText };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "pincard-wrapper" }, [
      vue.createElementVNode("div", { class: "info-wrapper" }, [
        vue.createElementVNode("div", {
          class: "info",
          onClick: $setup.gotoChat
        }, [
          vue.createElementVNode("div", { class: "info-left" }, [
            vue.createVNode($setup["Avatar"], {
              size: "32",
              account: $setup.props.msg.senderId
            }, null, 8, ["account"])
          ]),
          vue.createElementVNode("div", { class: "info-right" }, [
            vue.createElementVNode("div", { class: "name" }, [
              vue.createVNode($setup["Appellation"], {
                account: $setup.props.msg.senderId,
                teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : ""
              }, null, 8, ["account", "teamId"])
            ]),
            vue.createElementVNode(
              "div",
              { class: "createtime" },
              vue.toDisplayString($setup.timeFormat()),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createVNode($setup["Icon"], {
          type: "icon-More",
          onClick: $setup.handlePinMsg
        })
      ]),
      vue.createElementVNode("div", { class: "content-wrapper" }, [
        $props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "msg-text"
        }, [
          vue.createVNode($setup["MessageText"], {
            msg: $setup.props.msg
          }, null, 8, ["msg"])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("div", { class: "file-wrapper" }, [
          $props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE ? (vue.openBlock(), vue.createElementBlock("div", { key: 0 }, [
            vue.createElementVNode("div", {
              onClick: _cache[0] || (_cache[0] = () => {
                $setup.handleImageTouch($setup.props.msg.attachment.url);
              })
            }, [
              vue.createElementVNode("image", {
                class: "msg-image",
                "lazy-load": true,
                mode: "aspectFill",
                src: $setup.imageUrl
              }, null, 8, ["src"])
            ])
          ])) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO ? (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
            vue.createElementVNode("div", {
              class: "video-msg-wrapper",
              onClick: _cache[1] || (_cache[1] = () => $setup.handleVideoTouch($setup.props.msg))
            }, [
              vue.createElementVNode("div", { class: "video-play-button" }, [
                vue.createElementVNode("div", { class: "video-play-icon" })
              ]),
              vue.createElementVNode("image", {
                class: "msg-image",
                "lazy-load": true,
                mode: "aspectFill",
                src: $setup.videoFirstFrameDataUrl
              }, null, 8, ["src"])
            ])
          ])) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 2,
            class: "extra"
          }, [
            vue.createVNode($setup["MessageFile"], {
              msg: $setup.props.msg
            }, null, 8, ["msg"])
          ])) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO ? (vue.openBlock(), vue.createElementBlock("div", { key: 3 }, [
            vue.createElementVNode("div", { class: "audio-wrapper" }, [
              vue.createVNode($setup["MessageAudio"], {
                msg: $setup.props.msg,
                mode: "audio-in"
              }, null, 8, ["msg"])
            ])
          ])) : vue.createCommentVNode("v-if", true)
        ])
      ])
    ]);
  }
  const PinCard = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$V], ["__scopeId", "data-v-7d943ccb"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-pin-card.vue"]]);
  const _sfc_main$V = /* @__PURE__ */ vue.defineComponent({
    __name: "pin-list",
    setup(__props, { expose: __expose }) {
      __expose();
      let conversationId = "";
      let pinInfos = vue.ref([]);
      let pinInfosWatch = () => {
      };
      onLoad((option) => {
        conversationId = option == null ? void 0 : option.conversationId;
        pinInfosWatch = autorun(() => {
          const curPinMsgsMap = uni.$UIKitStore.msgStore.pinMsgs.map.get(conversationId);
          pinInfos.value = [...curPinMsgsMap.values()].filter((pinInfo) => pinInfo.pinState > 0 && pinInfo.message).sort((a2, b2) => b2.message.createTime - a2.message.createTime);
        });
      });
      const handleUnPinMsg = (msg) => {
        return () => {
          return uni.$UIKitStore.msgStore.unpinMessageActive(msg).catch((err) => {
            if ((err == null ? void 0 : err.code) && typeof t$2(`${err.code}`) !== "undefined") {
              uni.showToast({
                title: t$2(`${err.code}`),
                icon: "error",
                duration: 1e3
              });
            } else {
              uni.showToast({
                title: t$2("unpinFailedText"),
                icon: "error",
                duration: 1e3
              });
            }
          });
        };
      };
      vue.onUnmounted(() => {
        pinInfosWatch();
      });
      const __returned__ = { get conversationId() {
        return conversationId;
      }, set conversationId(v2) {
        conversationId = v2;
      }, get pinInfos() {
        return pinInfos;
      }, set pinInfos(v2) {
        pinInfos = v2;
      }, get pinInfosWatch() {
        return pinInfosWatch;
      }, set pinInfosWatch(v2) {
        pinInfosWatch = v2;
      }, handleUnPinMsg, NavBar: NavBar$1, PinCard, get t() {
        return t$2;
      }, Empty };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "div",
      {
        class: vue.normalizeClass(`wrapper ${$setup.pinInfos.length === 0 ? "bg-white" : ""}`)
      },
      [
        vue.createVNode($setup["NavBar"], {
          title: $setup.t("pinText")
        }, {
          left: vue.withCtx(() => [
            vue.createElementVNode(
              "div",
              {
                class: "nav-bar-text",
                onClick: _cache[0] || (_cache[0] = (...args) => _ctx.back && _ctx.back(...args))
              },
              vue.toDisplayString($setup.t("pinText")),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["title"]),
        vue.createElementVNode("div", { class: "pinCard-item-wrapper" }, [
          $setup.pinInfos.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
            key: 0,
            text: $setup.t("noPinListText")
          }, null, 8, ["text"])) : (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($setup.pinInfos, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                key: item.message.messageClientId
              }, [
                (vue.openBlock(), vue.createBlock($setup["PinCard"], {
                  msg: item.message,
                  index,
                  key: item.message.messageClientId,
                  handleUnPinMsg: $setup.handleUnPinMsg(item.message)
                }, null, 8, ["msg", "index", "handleUnPinMsg"]))
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ],
      2
      /* CLASS */
    );
  }
  const PagesChatMessagePinList = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$U], ["__scopeId", "data-v-005b7104"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/pin-list.vue"]]);
  const _sfc_main$U = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      let teamId = "";
      const teamMembers = vue.ref([]);
      const conversation = vue.ref();
      const team = vue.ref();
      const teamMuteMode = vue.ref();
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      const isGroupOwner = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return (team.value ? team.value.ownerAccountId : "") === (myUser ? myUser.accountId : "");
      });
      const isGroupManager = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return teamMembers.value.filter(
          (item) => (
            //@ts-ignore
            item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
          )
        ).some((member) => member.accountId === (myUser ? myUser.accountId : ""));
      });
      const canAddMember = vue.computed(() => {
        var _a3;
        if (
          //@ts-ignore
          ((_a3 = team.value) == null ? void 0 : _a3.inviteMode) === Ma.V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_ALL
        ) {
          return true;
        }
        return isGroupOwner.value || isGroupManager.value;
      });
      const handleInfoClick = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/group-info-edit?id=${teamId}`
        });
      };
      const goBackChat = () => {
        customSwitchTab({
          url: "/pages/Conversation/index"
        });
      };
      const goTeamManage = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/group-manage?id=${teamId}`
        });
      };
      const goNickInTeam = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/nick-in-team?id=${teamId}`
        });
      };
      const goPinInTeam = () => {
        const conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.teamConversationId(teamId);
        customNavigateTo({
          url: `/pages/Chat/message/pin-list?conversationId=${conversationId}`
        });
      };
      const addTeamMember = () => {
        if (!canAddMember.value) {
          uni.showToast({
            title: t$2("noPermission"),
            icon: "error"
          });
          return;
        }
        customNavigateTo({
          url: `/pages/Group/group-add/index?teamId=${teamId}`
        });
      };
      const gotoTeamMember = () => {
        customNavigateTo({
          url: `/pages/Group/group-member/index?teamId=${teamId}`
        });
      };
      const showDismissConfirm = () => {
        uni.showModal({
          title: t$2("dismissTeamText"),
          content: t$2("dismissTeamConfirmText"),
          cancelText: t$2("cancelText"),
          confirmText: t$2("okText"),
          showCancel: true,
          success: function(res) {
            if (res.confirm) {
              uni.$UIKitStore.teamStore.dismissTeamActive(teamId).then(() => {
                uni.showToast({
                  title: t$2("dismissTeamSuccessText"),
                  icon: "success"
                });
              }).catch(() => {
                uni.showToast({
                  title: t$2("dismissTeamFailedText"),
                  icon: "error"
                });
              });
            }
          }
        });
      };
      const showLeaveConfirm = () => {
        uni.showModal({
          title: t$2("leaveTeamTitle"),
          content: t$2("leaveTeamConfirmText"),
          cancelText: t$2("cancelText"),
          confirmText: t$2("okText"),
          showCancel: true,
          success: function(res) {
            if (res.confirm) {
              uni.$UIKitStore.teamStore.leaveTeamActive(teamId).then(() => {
                uni.showToast({
                  title: t$2("leaveTeamSuccessText"),
                  icon: "success"
                });
                goBackChat();
              }).catch(() => {
                uni.showToast({
                  title: t$2("leaveTeamFailedText"),
                  icon: "error"
                });
              });
            }
          }
        });
      };
      let uninstallTeamWatch = () => {
      };
      let uninstallSessionsWatch = () => {
      };
      onLoad((option) => {
        teamId = option ? option.id : "";
        const conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.teamConversationId(teamId);
        uni.$UIKitStore.teamStore.getTeamMessageMuteModeActive(teamId, 1).then((res) => {
          teamMuteMode.value = res;
        });
        uninstallTeamWatch = autorun(() => {
          if (teamId) {
            team.value = uni.$UIKitStore.teamStore.teams.get(teamId);
            teamMembers.value = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId);
          }
        });
        uninstallSessionsWatch = autorun(() => {
          var _a3, _b2;
          conversation.value = enableV2CloudConversation ? (_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.conversations.get(conversationId) : (_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.conversations.get(
            conversationId
          );
        });
      });
      const changeStickTopInfo = async (e2) => {
        var _a3, _b2;
        const checked = e2.detail.value;
        const conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.teamConversationId(teamId);
        try {
          if (enableV2CloudConversation) {
            await ((_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.stickTopConversationActive(
              conversationId,
              checked
            ));
          } else {
            await ((_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.stickTopConversationActive(
              conversationId,
              checked
            ));
          }
        } catch (error) {
          uni.showToast({
            title: checked ? t$2("addStickTopFailText") : t$2("deleteStickTopFailText"),
            icon: "error"
          });
        }
      };
      const changeTeamMute = (e2) => {
        const checked = e2.detail.value;
        uni.$UIKitStore.teamStore.setTeamMessageMuteModeActive(
          teamId,
          Ma.V2NIMTeamType.V2NIM_TEAM_TYPE_ADVANCED,
          checked ? Ma.V2NIMTeamMessageMuteMode.V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF : Ma.V2NIMTeamMessageMuteMode.V2NIM_TEAM_MESSAGE_MUTE_MODE_ON
        ).then(() => {
          teamMuteMode.value = checked ? Ma.V2NIMTeamMessageMuteMode.V2NIM_TEAM_MESSAGE_MUTE_MODE_OFF : Ma.V2NIMTeamMessageMuteMode.V2NIM_TEAM_MESSAGE_MUTE_MODE_ON;
        }).catch((error) => {
          switch (error == null ? void 0 : error.code) {
            case 109432:
              uni.showToast({
                title: t$2("noPermission"),
                icon: "none"
              });
              break;
            default:
              uni.showToast({
                title: checked ? t$2("sessionMuteFailText") : t$2("sessionUnMuteFailText"),
                icon: "none"
              });
              break;
          }
        });
      };
      const setTeamChatBanned = async (e2) => {
        const checked = e2.detail.value;
        try {
          await uni.$UIKitStore.teamStore.setTeamChatBannedActive({
            teamId,
            chatBannedMode: checked ? Ma.V2NIMTeamChatBannedMode.V2NIM_TEAM_CHAT_BANNED_MODE_BANNED_NORMAL : Ma.V2NIMTeamChatBannedMode.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN
          });
        } catch (error) {
          switch (error == null ? void 0 : error.code) {
            case 109432:
              uni.showToast({
                title: t$2("noPermission"),
                icon: "error"
              });
              break;
            default:
              uni.showToast({
                title: checked ? t$2("muteAllTeamFailedText") : t$2("sessionUnMuteFailText"),
                icon: "error"
              });
              break;
          }
        }
      };
      vue.onUnmounted(() => {
        uninstallTeamWatch();
        uninstallSessionsWatch();
      });
      const __returned__ = { get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, teamMembers, conversation, team, teamMuteMode, enableV2CloudConversation, isGroupOwner, isGroupManager, canAddMember, handleInfoClick, goBackChat, goTeamManage, goNickInTeam, goPinInTeam, addTeamMember, gotoTeamMember, showDismissConfirm, showLeaveConfirm, get uninstallTeamWatch() {
        return uninstallTeamWatch;
      }, set uninstallTeamWatch(v2) {
        uninstallTeamWatch = v2;
      }, get uninstallSessionsWatch() {
        return uninstallSessionsWatch;
      }, set uninstallSessionsWatch(v2) {
        uninstallSessionsWatch = v2;
      }, changeStickTopInfo, changeTeamMute, setTeamChatBanned, NavBar: NavBar$1, Avatar, Icon, get t() {
        return t$2;
      }, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("setText")
      }, null, 8, ["title"]),
      $setup.team ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "group-set-container"
      }, [
        vue.createElementVNode("div", { class: "group-set-card" }, [
          vue.createElementVNode("div", { class: "group-set-item" }, [
            vue.createElementVNode("div", {
              class: "group-info-item",
              onClick: $setup.handleInfoClick
            }, [
              vue.createVNode($setup["Avatar"], {
                account: $setup.team && $setup.team.teamId,
                avatar: $setup.team && $setup.team.avatar
              }, null, 8, ["account", "avatar"]),
              vue.createElementVNode(
                "div",
                { class: "group-info-title" },
                vue.toDisplayString($setup.team && $setup.team.name),
                1
                /* TEXT */
              ),
              vue.createVNode($setup["Icon"], {
                iconClassName: "more-icon",
                color: "#999",
                type: "icon-jiantou"
              })
            ])
          ]),
          vue.createElementVNode("div", { class: "group-set-item" }, [
            vue.createElementVNode("div", { class: "group-members-item" }, [
              vue.createElementVNode("div", {
                class: "group-members-info-item",
                onClick: $setup.gotoTeamMember
              }, [
                vue.createElementVNode("div", { class: "group-members-info" }, [
                  vue.createElementVNode(
                    "div",
                    { class: "group-info-title" },
                    vue.toDisplayString($setup.t("teamMemberText")),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "div",
                    { class: "group-info-subtitle" },
                    vue.toDisplayString($setup.team && $setup.team.memberCount),
                    1
                    /* TEXT */
                  )
                ]),
                vue.createVNode($setup["Icon"], {
                  iconClassName: "more-icon",
                  color: "#999",
                  type: "icon-jiantou"
                })
              ]),
              vue.createElementVNode("div", { class: "member-list" }, [
                vue.createElementVNode("div", { class: "member-add" }, [
                  vue.createElementVNode("div", {
                    onClick: $setup.addTeamMember,
                    style: { display: "flex" }
                  }, [
                    vue.createVNode($setup["Icon"], { type: "icon-tianjiaanniu" })
                  ])
                ]),
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($setup.teamMembers, (member) => {
                    return vue.openBlock(), vue.createElementBlock("div", {
                      class: "member-item",
                      key: member.accountId
                    }, [
                      (vue.openBlock(), vue.createBlock($setup["Avatar"], {
                        account: member.accountId,
                        size: "32",
                        key: member.accountId,
                        "font-size": "10"
                      }, null, 8, ["account"]))
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])
            ])
          ])
        ]),
        vue.createElementVNode("div", { class: "group-set-card" }, [
          vue.createElementVNode("div", {
            class: "group-set-item group-set-item-flex",
            onClick: $setup.goPinInTeam
          }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("pinText")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ]),
          vue.createElementVNode("div", { class: "group-set-item group-set-item-flex" }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("stickTopText")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("switch", {
              checked: $setup.conversation && !!$setup.conversation.stickTop,
              onChange: $setup.changeStickTopInfo
            }, null, 40, ["checked"])
          ]),
          vue.createElementVNode("div", { class: "group-set-item group-set-item-flex" }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("sessionMuteText")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("switch", {
              checked: $setup.team && $setup.teamMuteMode !== $setup.V2NIMConst.V2NIMTeamMessageMuteMode.V2NIM_TEAM_MESSAGE_MUTE_MODE_ON,
              onChange: $setup.changeTeamMute
            }, null, 40, ["checked"])
          ]),
          vue.createElementVNode("div", {
            class: "group-set-item group-set-item-flex",
            onClick: $setup.goNickInTeam
          }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("nickInTeam")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ])
        ]),
        $setup.isGroupOwner || $setup.isGroupManager ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "group-set-card"
        }, [
          vue.createElementVNode("div", { class: "group-set-item group-set-item-flex" }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("teamBannedText")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("switch", {
              checked: $setup.team && $setup.team.chatBannedMode !== $setup.V2NIMConst.V2NIMTeamChatBannedMode.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN,
              onChange: $setup.setTeamChatBanned
            }, null, 40, ["checked"])
          ]),
          vue.createElementVNode("div", {
            class: "group-set-item group-set-item-flex",
            onClick: $setup.goTeamManage
          }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("teamManagerText")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ])
        ])) : vue.createCommentVNode("v-if", true),
        $setup.isGroupOwner ? (vue.openBlock(), vue.createElementBlock(
          "div",
          {
            key: 1,
            class: "group-set-button",
            onClick: $setup.showDismissConfirm
          },
          vue.toDisplayString($setup.t("dismissTeamText")),
          1
          /* TEXT */
        )) : (vue.openBlock(), vue.createElementBlock(
          "div",
          {
            key: 2,
            class: "group-set-button",
            onClick: $setup.showLeaveConfirm
          },
          vue.toDisplayString($setup.t("leaveTeamTitle")),
          1
          /* TEXT */
        ))
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesGroupGroupSetIndex = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$T], ["__scopeId", "data-v-11aa5efa"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/index.vue"]]);
  const _sfc_main$T = /* @__PURE__ */ vue.defineComponent({
    __name: "group-info-edit",
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      let teamId = "";
      const team = vue.ref();
      const teamMembers = vue.ref([]);
      const conversation = vue.ref();
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      const handleAvatarClick = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/group-avatar-edit?id=${teamId}`
        });
      };
      const handleTitleClick = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/group-name-edit?id=${teamId}`
        });
      };
      const handleIntroClick = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/group-intro-edit?id=${teamId}`
        });
      };
      let uninstallTeamWatch = () => {
      };
      let uninstallSessionsWatch = () => {
      };
      onLoad((option) => {
        teamId = option ? option.id : "";
        const conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.teamConversationId(teamId);
        uninstallTeamWatch = autorun(() => {
          if (teamId) {
            team.value = uni.$UIKitStore.teamStore.teams.get(teamId);
            teamMembers.value = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId);
          }
        });
        uninstallSessionsWatch = autorun(() => {
          var _a3, _b2;
          conversation.value = enableV2CloudConversation ? (_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.conversations.get(conversationId) : (_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.conversations.get(
            conversationId
          );
        });
      });
      vue.onUnmounted(() => {
        uninstallTeamWatch();
        uninstallSessionsWatch();
      });
      const __returned__ = { get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, team, teamMembers, conversation, enableV2CloudConversation, handleAvatarClick, handleTitleClick, handleIntroClick, get uninstallTeamWatch() {
        return uninstallTeamWatch;
      }, set uninstallTeamWatch(v2) {
        uninstallTeamWatch = v2;
      }, get uninstallSessionsWatch() {
        return uninstallSessionsWatch;
      }, set uninstallSessionsWatch(v2) {
        uninstallSessionsWatch = v2;
      }, NavBar: NavBar$1, Avatar, Icon, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("teamInfoText")
      }, null, 8, ["title"]),
      $setup.team ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "group-set-container"
      }, [
        vue.createElementVNode("div", { class: "group-set-card" }, [
          vue.createElementVNode("div", {
            class: "group-set-item group-set-item-flex",
            onClick: $setup.handleAvatarClick
          }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("teamAvatar")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("div", { class: "group-set-item-flex" }, [
              vue.createVNode($setup["Avatar"], {
                account: $setup.team && $setup.team.teamId,
                avatar: $setup.team && $setup.team.avatar
              }, null, 8, ["account", "avatar"]),
              vue.createVNode($setup["Icon"], {
                iconClassName: "more-icon",
                color: "#999",
                type: "icon-jiantou"
              })
            ])
          ]),
          vue.createElementVNode("div", {
            class: "group-set-item group-set-item-flex",
            onClick: $setup.handleTitleClick
          }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("teamTitle")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ]),
          vue.createElementVNode("div", {
            class: "group-set-item group-set-item-flex",
            onClick: $setup.handleIntroClick
          }, [
            vue.createElementVNode(
              "div",
              null,
              vue.toDisplayString($setup.t("teamIntro")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesGroupGroupSetGroupInfoEdit = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$S], ["__scopeId", "data-v-73115aa8"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/group-info-edit.vue"]]);
  const _sfc_main$S = /* @__PURE__ */ vue.defineComponent({
    __name: "FormInput",
    props: {
      className: { type: String, required: false, default: "" },
      type: { type: String, required: false, default: "text" },
      modelValue: { type: String, required: false, default: "" },
      placeholder: { type: String, required: false, default: "" },
      allowClear: { type: Boolean, required: false, default: false },
      rule: { type: null, required: false, default: null },
      maxlength: { type: Number, required: false, default: 140 }
    },
    emits: [
      "update:modelValue",
      "input",
      "focus",
      "blur",
      "clear"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const $emit = __emit;
      const props = __props;
      const inputFocus = vue.ref(false);
      const inputError = vue.ref(false);
      const inputClass = vue.computed(() => {
        return [
          props.className,
          "form-input-item",
          { focus: inputFocus.value, error: inputError.value }
        ];
      });
      const inputValue = vue.computed(() => {
        return props.modelValue || "";
      });
      const handleBlur = (event) => {
        inputFocus.value = false;
        if (props.rule && props.rule.trigger === "blur") {
          inputError.value = !props.rule.reg.test(props.modelValue || "");
        }
        $emit("blur", event);
      };
      const handleFocus = (event) => {
        inputFocus.value = true;
        $emit("blur", event);
      };
      const handleInput = (event) => {
        if (!(props.maxlength && event.detail.value.length > props.maxlength)) {
          $emit("update:modelValue", event.detail.value);
          $emit("input", event.detail.value);
        }
      };
      const clearInput = () => {
        $emit("update:modelValue", null);
        $emit("input", null);
        $emit("clear", "");
        inputFocus.value = true;
      };
      const __returned__ = { $emit, props, inputFocus, inputError, inputClass, inputValue, handleBlur, handleFocus, handleInput, clearInput };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createElementVNode(
        "div",
        {
          class: vue.normalizeClass($setup.inputClass)
        },
        [
          vue.renderSlot(_ctx.$slots, "addonBefore", {}, void 0, true),
          vue.createElementVNode("input", {
            class: "input",
            type: $props.type,
            value: $setup.inputValue,
            onInput: $setup.handleInput,
            focus: $setup.inputFocus,
            onFocus: $setup.handleFocus,
            onBlur: $setup.handleBlur,
            placeholder: $props.placeholder,
            maxlength: $props.maxlength
          }, null, 40, ["type", "value", "focus", "placeholder", "maxlength"]),
          vue.createElementVNode("div", {
            class: "clear-icon",
            onClick: _cache[0] || (_cache[0] = ($event) => $setup.clearInput())
          }, [
            vue.withDirectives(vue.createElementVNode(
              "icon",
              {
                type: "clear",
                size: "16"
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue.vShow, $props.modelValue && $props.allowClear]
            ])
          ]),
          vue.renderSlot(_ctx.$slots, "addonAfter", {}, void 0, true)
        ],
        2
        /* CLASS */
      ),
      $setup.inputError && $props.rule ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "error-tips"
        },
        vue.toDisplayString($props.rule.message),
        1
        /* TEXT */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const FormInput = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$R], ["__scopeId", "data-v-61574403"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/FormInput.vue"]]);
  const _sfc_main$R = /* @__PURE__ */ vue.defineComponent({
    __name: "group-name-edit",
    setup(__props, { expose: __expose }) {
      __expose();
      let hasPermission = vue.ref(false);
      const teamName = vue.ref();
      let teamId = "";
      const inputLengthTips = vue.computed(() => {
        var _a2;
        return `${teamName.value ? (_a2 = teamName.value) == null ? void 0 : _a2.length : 0}/${30}`;
      });
      const handleSave = () => {
        if (!teamName.value) {
          uni.showToast({
            title: t$2("teamTitleConfirmText"),
            icon: "error"
          });
          return;
        }
        teamName.value && uni.$UIKitStore.teamStore.updateTeamActive({
          teamId,
          info: {
            name: teamName.value
          }
        }).then(() => {
          uni.showToast({
            title: t$2("updateTeamSuccessText"),
            icon: "success"
          });
          uni.navigateBack();
        }).catch((err) => {
          switch (err == null ? void 0 : err.code) {
            case 109432:
              uni.showToast({
                title: t$2("noPermission"),
                icon: "error"
              });
              break;
            default:
              uni.showToast({
                title: t$2("updateTeamFailedText"),
                icon: "error"
              });
              break;
          }
        });
      };
      const handleInput = (value) => {
        teamName.value = value ? value.replace(/\s*/g, "") : value;
      };
      onLoad((option) => {
        const myAccount = uni.$UIKitStore.userStore.myUserInfo.accountId;
        teamId = option == null ? void 0 : option.id;
        const myTeamMember = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId, [
          myAccount
        ])[0];
        const team = uni.$UIKitStore.teamStore.teams.get(teamId);
        const updateInfoMode = team == null ? void 0 : team.updateInfoMode;
        teamName.value = team ? team.name.substring(0, 30) : "";
        if (updateInfoMode === 0 && myTeamMember.memberRole !== 0 || updateInfoMode === 1) {
          hasPermission.value = true;
        }
      });
      const __returned__ = { get hasPermission() {
        return hasPermission;
      }, set hasPermission(v2) {
        hasPermission = v2;
      }, teamName, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, inputLengthTips, handleSave, handleInput, NavBar: NavBar$1, FormInput, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "group-set-container" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("teamTitle")
      }, null, 8, ["title"]),
      $setup.hasPermission ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "group-name-input-container"
      }, [
        vue.createVNode($setup["FormInput"], {
          "model-value": $setup.teamName,
          "allow-clear": true,
          maxlength: 30,
          onInput: $setup.handleInput
        }, null, 8, ["model-value"]),
        vue.createElementVNode(
          "div",
          { class: "input-length" },
          vue.toDisplayString($setup.inputLengthTips),
          1
          /* TEXT */
        )
      ])) : (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: "group-name-input-container"
      }, [
        vue.createElementVNode("input", {
          class: "input",
          value: $setup.teamName
        }, null, 8, ["value"])
      ])),
      $setup.hasPermission ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 2,
          class: "ok-btn",
          onClick: $setup.handleSave
        },
        vue.toDisplayString($setup.t("saveText")),
        1
        /* TEXT */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesGroupGroupSetGroupNameEdit = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$Q], ["__scopeId", "data-v-1c2e087d"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/group-name-edit.vue"]]);
  const _sfc_main$Q = /* @__PURE__ */ vue.defineComponent({
    __name: "group-intro-edit",
    setup(__props, { expose: __expose }) {
      __expose();
      let hasPermission = vue.ref(false);
      const teamIntro = vue.ref();
      let teamId = "";
      const inputLengthTips = vue.computed(() => {
        var _a2;
        return `${teamIntro.value ? (_a2 = teamIntro.value) == null ? void 0 : _a2.length : 0}/${100}`;
      });
      const clearInput = () => {
        teamIntro.value = "";
      };
      const handleSave = () => {
        uni.$UIKitStore.teamStore.updateTeamActive({
          teamId,
          info: {
            intro: teamIntro.value
          }
        }).then(() => {
          uni.showToast({
            title: t$2("updateTeamSuccessText"),
            icon: "success"
          });
          uni.navigateBack();
        }).catch((err) => {
          switch (err == null ? void 0 : err.code) {
            case 109432:
              uni.showToast({
                title: t$2("noPermission"),
                icon: "error"
              });
              break;
            default:
              uni.showToast({
                title: t$2("updateTeamFailedText"),
                icon: "error"
              });
              break;
          }
        });
      };
      const handleInput = (value) => {
        teamIntro.value = value;
      };
      onLoad((option) => {
        teamId = option == null ? void 0 : option.id;
        const myAccount = uni.$UIKitStore.userStore.myUserInfo.accountId;
        const team = uni.$UIKitStore.teamStore.teams.get(teamId);
        const updateInfoMode = team == null ? void 0 : team.updateInfoMode;
        teamIntro.value = (team == null ? void 0 : team.intro) ? team.intro.substring(0, 100) : "";
        const myTeamMember = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId, [
          myAccount
        ])[0];
        if (updateInfoMode === 0 && myTeamMember.memberRole !== 0 || updateInfoMode === 1) {
          hasPermission.value = true;
        }
      });
      const __returned__ = { get hasPermission() {
        return hasPermission;
      }, set hasPermission(v2) {
        hasPermission = v2;
      }, teamIntro, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, inputLengthTips, clearInput, handleSave, handleInput, NavBar: NavBar$1, get t() {
        return t$2;
      }, FormInput };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "group-set-container" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("teamTitle")
      }, null, 8, ["title"]),
      $setup.hasPermission ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "group-intro-input-container"
      }, [
        vue.createVNode($setup["FormInput"], {
          "model-value": $setup.teamIntro,
          "allow-clear": true,
          maxlength: 100,
          onInput: $setup.handleInput,
          onClear: $setup.clearInput
        }, null, 8, ["model-value"]),
        vue.createElementVNode(
          "div",
          { class: "input-length" },
          vue.toDisplayString($setup.inputLengthTips),
          1
          /* TEXT */
        )
      ])) : (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: "group-intro-input-container"
      }, [
        vue.createElementVNode(
          "div",
          { class: "input" },
          vue.toDisplayString($setup.teamIntro),
          1
          /* TEXT */
        )
      ])),
      $setup.hasPermission ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 2,
          class: "ok-btn",
          onClick: $setup.handleSave
        },
        vue.toDisplayString($setup.t("saveText")),
        1
        /* TEXT */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesGroupGroupSetGroupIntroEdit = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$P], ["__scopeId", "data-v-4d5ac757"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/group-intro-edit.vue"]]);
  const handleNoPermission = (res) => {
    if (uni.getSystemInfoSync().platform == "android" || uni.getSystemInfoSync().platform == "ios") {
      const appAuthorizeSetting = uni.getAppAuthorizeSetting();
      const isCameraDenied = appAuthorizeSetting.cameraAuthorized === "denied";
      const isUserCancelled = res.errMsg === "chooseImage:fail User cancelled" || res.errMsg === "chooseImage:fail cancel" || res.errMsg === "chooseVideo:fail cancel" || res.errMsg === "chooseVideo:fail User cancelled";
      if (res.code === 11 && isCameraDenied && !isUserCancelled || res.code === 12 && isCameraDenied && !isUserCancelled || res.code === 2 && !isUserCancelled) {
        uni.showToast({
          icon: "none",
          title: t$2("addPermissionText")
        });
      }
    }
  };
  const _sfc_main$P = /* @__PURE__ */ vue.defineComponent({
    __name: "group-avatar-edit",
    setup(__props, { expose: __expose }) {
      __expose();
      const avatar = vue.ref();
      let hasPermission = vue.ref(false);
      const avatarArr = [
        "https://yx-web-nosdn.netease.im/common/2425b4cc058e5788867d63c322feb7ac/groupAvatar1.png",
        "https://yx-web-nosdn.netease.im/common/62c45692c9771ab388d43fea1c9d2758/groupAvatar2.png",
        "https://yx-web-nosdn.netease.im/common/d1ed3c21d3f87a41568d17197760e663/groupAvatar3.png",
        "https://yx-web-nosdn.netease.im/common/e677d8551deb96723af2b40b821c766a/groupAvatar4.png",
        "https://yx-web-nosdn.netease.im/common/fd6c75bb6abca9c810d1292e66d5d87e/groupAvatar5.png"
      ];
      let teamId = "";
      const onChangeAvatar = () => {
        try {
          uni.chooseImage({
            count: 1,
            sizeType: ["original"],
            success: function(res) {
              uni.showLoading({
                title: ""
              });
              uni.$UIKitStore.storageStore.uploadFileActive(res.tempFilePaths[0]).then((data2) => {
                avatar.value = data2;
                uni.hideLoading();
              }).catch((err) => {
                uni.hideLoading();
                uni.showToast({
                  title: t$2("FailAvatarText"),
                  icon: "error",
                  duration: 1e3
                });
              });
            },
            fail: function(error) {
            },
            //没有开启权限时，提示开启权限
            complete: handleNoPermission
          });
        } catch (err) {
          uni.showToast({
            title: t$2("FailAvatarText"),
            icon: "error",
            duration: 1e3
          });
        }
      };
      const setAvatar = (index) => {
        avatar.value = avatarArr[index];
      };
      const handleSave = () => {
        uni.$UIKitStore.teamStore.updateTeamActive({
          teamId,
          info: {
            avatar: avatar.value
          }
        }).then(() => {
          uni.showToast({
            title: t$2("updateTeamSuccessText"),
            icon: "success"
          });
          uni.navigateBack();
        }).catch((err) => {
          uni.showToast({
            title: t$2("updateTeamFailedText"),
            icon: "error",
            duration: 1e3
          });
        });
      };
      onLoad((option) => {
        const myAccount = uni.$UIKitStore.userStore.myUserInfo.accountId;
        teamId = option == null ? void 0 : option.id;
        const team = uni.$UIKitStore.teamStore.teams.get(teamId);
        const updateInfoMode = team == null ? void 0 : team.updateInfoMode;
        avatar.value = (team == null ? void 0 : team.avatar) || "";
        const myTeamMember = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId, [
          myAccount
        ])[0];
        if (updateInfoMode === 0 && myTeamMember.memberRole !== 0 || updateInfoMode === 1) {
          hasPermission.value = true;
        }
      });
      const __returned__ = { avatar, get hasPermission() {
        return hasPermission;
      }, set hasPermission(v2) {
        hasPermission = v2;
      }, avatarArr, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, onChangeAvatar, setAvatar, handleSave, NavBar: NavBar$1, get t() {
        return t$2;
      }, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "group-set-container" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("updateAvatarText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "group-avatar-container" }, [
        $setup.hasPermission ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          onClick: $setup.onChangeAvatar,
          class: "avatar"
        }, [
          $setup.avatar ? (vue.openBlock(), vue.createElementBlock("image", {
            key: 0,
            "lazy-load": true,
            class: "avatar-img",
            src: $setup.avatar,
            mode: "aspectFill"
          }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", { class: "choose-picture" }, [
            vue.createVNode($setup["Icon"], {
              size: 24,
              type: "choose-picture"
            })
          ])
        ])) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: "avatar"
        }, [
          $setup.avatar ? (vue.openBlock(), vue.createElementBlock("image", {
            key: 0,
            "lazy-load": true,
            class: "avatar-img",
            src: $setup.avatar,
            mode: "aspectFill"
          }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
        ]))
      ]),
      vue.withDirectives(vue.createElementVNode(
        "div",
        { class: "group-avatar-arr-container" },
        [
          vue.createElementVNode(
            "div",
            { class: "tip" },
            vue.toDisplayString(`${$setup.t("chooseDefaultImage")}`),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "avatar-arr" }, [
            vue.createElementVNode("image", {
              "lazy-load": true,
              class: "avatar-img",
              src: $setup.avatarArr[0],
              mode: "aspectFill",
              onClick: _cache[0] || (_cache[0] = ($event) => $setup.setAvatar(0))
            }, null, 8, ["src"]),
            vue.createElementVNode("image", {
              "lazy-load": true,
              class: "avatar-img",
              src: $setup.avatarArr[1],
              mode: "aspectFill",
              onClick: _cache[1] || (_cache[1] = ($event) => $setup.setAvatar(1))
            }, null, 8, ["src"]),
            vue.createElementVNode("image", {
              "lazy-load": true,
              class: "avatar-img",
              src: $setup.avatarArr[2],
              mode: "aspectFill",
              onClick: _cache[2] || (_cache[2] = ($event) => $setup.setAvatar(2))
            }, null, 8, ["src"]),
            vue.createElementVNode("image", {
              "lazy-load": true,
              class: "avatar-img",
              src: $setup.avatarArr[3],
              mode: "aspectFill",
              onClick: _cache[3] || (_cache[3] = ($event) => $setup.setAvatar(3))
            }, null, 8, ["src"]),
            vue.createElementVNode("image", {
              "lazy-load": true,
              class: "avatar-img",
              src: $setup.avatarArr[4],
              mode: "aspectFill",
              onClick: _cache[4] || (_cache[4] = ($event) => $setup.setAvatar(4))
            }, null, 8, ["src"])
          ])
        ],
        512
        /* NEED_PATCH */
      ), [
        [vue.vShow, $setup.hasPermission]
      ]),
      vue.withDirectives(vue.createElementVNode(
        "div",
        {
          class: "ok-btn",
          onClick: $setup.handleSave
        },
        vue.toDisplayString($setup.t("saveText")),
        513
        /* TEXT, NEED_PATCH */
      ), [
        [vue.vShow, $setup.hasPermission]
      ])
    ]);
  }
  const PagesGroupGroupSetGroupAvatarEdit = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$O], ["__scopeId", "data-v-8c9b14f6"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/group-avatar-edit.vue"]]);
  const _sfc_main$O = /* @__PURE__ */ vue.defineComponent({
    __name: "Badge",
    props: {
      num: { type: Number, required: true },
      max: { type: Number, required: false, default: 99 },
      dot: { type: Boolean, required: false, default: false },
      customStyle: { type: [String, Object, Array], required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const max2 = props.max || 99;
      const text = vue.computed(() => {
        return props.num > 0 ? props.num > max2 ? `${max2}+` : props.num + "" : "";
      });
      const __returned__ = { props, max: max2, text };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      $props.dot ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "dot",
          style: vue.normalizeStyle($props.customStyle)
        },
        null,
        4
        /* STYLE */
      )) : $setup.text ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 1,
          class: "badge",
          style: vue.normalizeStyle($props.customStyle)
        },
        vue.toDisplayString($setup.text),
        5
        /* TEXT, STYLE */
      )) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode(
        "div",
        { class: "hidden" },
        vue.toDisplayString($setup.props.num),
        1
        /* TEXT */
      )
    ]);
  }
  const Badge = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$N], ["__scopeId", "data-v-a6681a8f"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/Badge.vue"]]);
  const friendGroupByPy = (arr, keys, isLowerCase = true) => {
    const res = {};
    const OTHER_TAG = "#";
    const add = (k2, v2) => {
      const _k = isLowerCase ? k2.toLowerCase() : k2.toUpperCase();
      if (!res[_k]) {
        res[_k] = [v2];
      } else {
        res[_k].push(v2);
      }
    };
    arr.forEach((item) => {
      const v2 = item[keys.firstKey] || item[keys.secondKey || ""] || item[keys.thirdKey || ""];
      if (!!v2 && typeof v2 === "string") {
        const str = v2[0];
        if (/^[a-zA-Z]$/.test(str)) {
          add(str.toLowerCase(), item);
        } else if (/^[\u4e00-\u9fa5]$/.test(str)) {
          const en2 = "*abcdefghjklmnopqrstwxyz".split("");
          const zh2 = "阿八嚓哒妸发旮哈讥咔垃痳拏噢妑七呥扨它穵夕丫帀".split("");
          const k2 = en2.find(
            (k22, ki2) => (!zh2[ki2 - 1] || zh2[ki2 - 1].localeCompare(str, "zh") <= 0) && str.localeCompare(zh2[ki2], "zh") == -1
          );
          if (k2 && k2 !== "*") {
            add(k2, item);
          } else {
            add(OTHER_TAG, item);
          }
        } else {
          add(OTHER_TAG, item);
        }
      } else {
        add(OTHER_TAG, item);
      }
    });
    const data2 = Object.keys(res).map((k2) => ({ key: k2, data: res[k2] }));
    const sortData = data2.filter((item) => item.key !== OTHER_TAG).sort((a2, b2) => a2.key.localeCompare(b2.key, "en"));
    const otherData = data2.filter((item) => item.key === OTHER_TAG);
    return sortData.concat(otherData);
  };
  const _sfc_main$N = /* @__PURE__ */ vue.defineComponent({
    __name: "friend-list",
    setup(__props, { expose: __expose }) {
      __expose();
      const friendGroupList = vue.ref([]);
      function handleFriendItemClick(friend) {
        customNavigateTo({
          url: `/pages/user-card/friend/index?account=${friend.accountId}`
        });
      }
      const friendListWatch = autorun(() => {
        const data2 = uni.$UIKitStore.uiStore.friends.filter(
          (item) => !uni.$UIKitStore.relationStore.blacklist.includes(item.accountId)
        ).map((item) => ({
          accountId: item.accountId,
          appellation: uni.$UIKitStore.uiStore.getAppellation({
            account: item.accountId
          })
        }));
        friendGroupList.value = friendGroupByPy(
          data2,
          {
            firstKey: "appellation"
          },
          false
        );
      });
      vue.onUnmounted(() => {
        friendListWatch();
      });
      const __returned__ = { friendGroupList, handleFriendItemClick, friendListWatch, Avatar, Empty, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "friend-list-container" }, [
      vue.createElementVNode("div", { class: "friend-group-list" }, [
        $setup.friendGroupList.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
          key: 0,
          text: $setup.t("noFriendText")
        }, null, 8, ["text"])) : vue.createCommentVNode("v-if", true),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.friendGroupList, (friendGroup) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              class: "friend-group-item",
              key: friendGroup.key
            }, [
              vue.createElementVNode(
                "div",
                { class: "friend-group-title" },
                vue.toDisplayString(friendGroup.key),
                1
                /* TEXT */
              ),
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(friendGroup.data, (friend) => {
                  return vue.openBlock(), vue.createElementBlock("div", {
                    class: "friend-item",
                    key: friend.accountId,
                    onClick: ($event) => $setup.handleFriendItemClick(friend)
                  }, [
                    vue.createVNode($setup["Avatar"], {
                      account: friend.accountId
                    }, null, 8, ["account"]),
                    vue.createElementVNode(
                      "div",
                      { class: "friend-name" },
                      vue.toDisplayString(friend.appellation),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])
    ]);
  }
  const FriendList = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$M], ["__scopeId", "data-v-c57775de"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Contact/contact-list/friend-list.vue"]]);
  const _sfc_main$M = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const addDropdownVisible = vue.ref(false);
      const unreadSysMsgCount = vue.ref(0);
      let unreadWatch = () => {
      };
      onShow(() => {
        unreadWatch = autorun(() => {
          var _a2;
          unreadSysMsgCount.value = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sysMsgStore.getTotalUnreadMsgsCount();
        });
      });
      const onDropdownClick = (urlType) => {
        const urlMap2 = {
          // 添加好友
          addFriend: "/pages/Friend/add-friend/index",
          // 创建群聊
          createGroup: "/pages/Group/group-create/index"
        };
        addDropdownVisible.value = false;
        customNavigateTo({
          url: urlMap2[urlType]
        });
      };
      const handleValidMsgClick = () => {
        var _a2;
        (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sysMsgStore.setAllApplyMsgRead();
        customNavigateTo({
          url: `/pages/Contact/contact-list/valid-list`
        });
      };
      const handleBlacklistClick = () => {
        customNavigateTo({
          url: `/pages/Contact/contact-list/black-list`
        });
      };
      const handleGroupContactClick = () => {
        customNavigateTo({
          url: `/pages/Contact/contact-list/group-list`
        });
      };
      const showAddDropdown = () => {
        addDropdownVisible.value = true;
      };
      const hideAddDropdown = () => {
        addDropdownVisible.value = false;
      };
      let buttonClass = "button-box";
      vue.onUnmounted(() => {
        unreadWatch();
      });
      onHide(() => {
        addDropdownVisible.value = false;
        unreadWatch();
      });
      const __returned__ = { addDropdownVisible, unreadSysMsgCount, get unreadWatch() {
        return unreadWatch;
      }, set unreadWatch(v2) {
        unreadWatch = v2;
      }, onDropdownClick, handleValidMsgClick, handleBlacklistClick, handleGroupContactClick, showAddDropdown, hideAddDropdown, get buttonClass() {
        return buttonClass;
      }, set buttonClass(v2) {
        buttonClass = v2;
      }, Icon, Badge, FriendList, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "contact-list-container" }, [
      $setup.addDropdownVisible ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "dropdown-mark",
          onTouchstart: $setup.hideAddDropdown
        },
        null,
        32
        /* NEED_HYDRATION */
      )) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("div", { class: "navigation-bar" }, [
        vue.createElementVNode("div", { class: "logo-box" }, [
          vue.createElementVNode(
            "div",
            null,
            vue.toDisplayString($setup.t("contactText")),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode(
          "div",
          {
            class: vue.normalizeClass($setup.buttonClass)
          },
          [
            vue.createElementVNode("div", { onClick: $setup.showAddDropdown }, [
              vue.createVNode($setup["Icon"], { type: "icon-More" })
            ]),
            $setup.addDropdownVisible ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: "dropdown-container"
            }, [
              vue.createElementVNode("div", { class: "add-menu-list" }, [
                vue.createElementVNode("div", {
                  class: "add-menu-item",
                  onClick: _cache[0] || (_cache[0] = ($event) => $setup.onDropdownClick("addFriend"))
                }, [
                  vue.createElementVNode("div", { style: { marginRight: "5px" } }, [
                    vue.createVNode($setup["Icon"], { type: "icon-tianjiahaoyou" })
                  ]),
                  vue.createTextVNode(
                    " " + vue.toDisplayString($setup.t("addFriendText")),
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode("div", {
                  class: "add-menu-item",
                  onClick: _cache[1] || (_cache[1] = ($event) => $setup.onDropdownClick("createGroup"))
                }, [
                  vue.createElementVNode("div", { style: { marginRight: "5px" } }, [
                    vue.createVNode($setup["Icon"], { type: "icon-chuangjianqunzu" })
                  ]),
                  vue.createTextVNode(
                    " " + vue.toDisplayString($setup.t("createTeamText")),
                    1
                    /* TEXT */
                  )
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        )
      ]),
      vue.createElementVNode("div", { class: "contact-list" }, [
        vue.createElementVNode("div", { class: "contact-item-content" }, [
          vue.createElementVNode("div", {
            class: "contact-item",
            onClick: $setup.handleValidMsgClick
          }, [
            vue.createVNode($setup["Icon"], {
              iconClassName: "contact-item-icon contact-valid-icon",
              size: 42,
              type: "icon-yanzheng",
              color: "#fff"
            }),
            vue.createVNode($setup["Badge"], {
              num: $setup.unreadSysMsgCount,
              style: { position: "absolute", top: "5px", left: "45px" }
            }, null, 8, ["num"]),
            vue.createElementVNode(
              "span",
              { class: "contact-item-title" },
              vue.toDisplayString($setup.t("validMsgText")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ]),
          vue.createElementVNode("div", {
            class: "contact-item",
            onClick: $setup.handleBlacklistClick
          }, [
            vue.createVNode($setup["Icon"], {
              iconClassName: "contact-item-icon contact-blacklist-icon",
              size: 42,
              type: "icon-lahei2",
              color: "#fff"
            }),
            vue.createElementVNode(
              "span",
              { class: "contact-item-title" },
              vue.toDisplayString($setup.t("blacklistText")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ]),
          vue.createElementVNode("div", {
            class: "contact-item",
            onClick: $setup.handleGroupContactClick
          }, [
            vue.createVNode($setup["Icon"], {
              iconClassName: "contact-item-icon contact-group-icon",
              size: 42,
              type: "icon-team2",
              color: "#fff"
            }),
            vue.createElementVNode(
              "span",
              { class: "contact-item-title" },
              vue.toDisplayString($setup.t("teamMenuText")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              iconClassName: "more-icon",
              color: "#999",
              type: "icon-jiantou"
            })
          ])
        ]),
        vue.createVNode($setup["FriendList"])
      ])
    ]);
  }
  const ContactList = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$L], ["__scopeId", "data-v-34927438"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Contact/contact-list/index.vue"]]);
  const _sfc_main$L = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      trackInit("ContactUIKit");
      onShow(() => {
        setTabUnread();
        setContactTabUnread();
      });
      const __returned__ = { ContactList };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock($setup["ContactList"]);
  }
  const PagesContactIndex = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$K], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Contact/index.vue"]]);
  const _sfc_main$K = /* @__PURE__ */ vue.defineComponent({
    __name: "group-list",
    setup(__props, { expose: __expose }) {
      __expose();
      const teamList = vue.ref([]);
      const handleClick = async (team) => {
        await uni.$UIKitStore.uiStore.selectConversation(
          uni.$UIKitNIM.V2NIMConversationIdUtil.teamConversationId(team.teamId)
        );
        customNavigateTo({
          url: "/pages/Chat/index"
        });
      };
      const teamListWatch = autorun(() => {
        teamList.value = uni.$UIKitStore.uiStore.teamList;
      });
      vue.onUnmounted(() => {
        teamListWatch();
      });
      const __returned__ = { teamList, handleClick, teamListWatch, Empty, Avatar, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "group-list-container" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("teamMenuText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "group-list-content" }, [
        $setup.teamList.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
          key: 0,
          text: $setup.t("teamEmptyText")
        }, null, 8, ["text"])) : (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          vue.renderList($setup.teamList, (team) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              class: "group-item",
              key: team.teamId,
              onClick: ($event) => $setup.handleClick(team)
            }, [
              vue.createVNode($setup["Avatar"], {
                account: team.teamId,
                avatar: team.avatar
              }, null, 8, ["account", "avatar"]),
              vue.createElementVNode(
                "span",
                { class: "group-name" },
                vue.toDisplayString(team.name),
                1
                /* TEXT */
              )
            ], 8, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])
    ]);
  }
  const PagesContactContactListGroupList = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$J], ["__scopeId", "data-v-1a5f244e"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Contact/contact-list/group-list.vue"]]);
  const _sfc_main$J = /* @__PURE__ */ vue.defineComponent({
    __name: "valid-list",
    setup(__props, { expose: __expose }) {
      __expose();
      const validMsg = vue.ref([]);
      const applyFriendLoading = vue.ref(false);
      const isMeApplicant = (data2) => {
        return data2.applicantAccountId === uni.$UIKitStore.userStore.myUserInfo.accountId;
      };
      const handleRejectApplyFriendClick = async (msg) => {
        applyFriendLoading.value = true;
        try {
          await uni.$UIKitStore.friendStore.rejectAddApplicationActive(msg);
          uni.showToast({
            title: t$2("rejectedText"),
            icon: "success"
          });
        } catch (error) {
          uni.showToast({
            title: t$2("rejectFailedText"),
            icon: "error"
          });
        } finally {
          applyFriendLoading.value = false;
        }
      };
      const handleAcceptApplyFriendClick = async (msg) => {
        applyFriendLoading.value = true;
        try {
          try {
            await uni.$UIKitStore.friendStore.acceptAddApplicationActive(msg);
            uni.showToast({
              title: t$2("acceptedText"),
              icon: "success"
            });
          } catch (error) {
            uni.showToast({
              title: t$2("acceptFailedText"),
              icon: "error"
            });
          }
          const textMsg = uni.$UIKitNIM.V2NIMMessageCreator.createTextMessage(
            t$2("passFriendAskText")
          );
          await uni.$UIKitStore.msgStore.sendMessageActive({
            msg: textMsg,
            conversationId: uni.$UIKitNIM.V2NIMConversationIdUtil.p2pConversationId(
              msg.operatorAccountId
            )
          });
        } catch (error) {
          formatAppLog("log", "at pages/Contact/contact-list/valid-list.vue:185", "error", error);
        } finally {
          applyFriendLoading.value = false;
        }
      };
      const validMsgWatch = autorun(() => {
        var _a2, _b, _c;
        validMsg.value = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sysMsgStore.friendApplyMsgs;
        (_c = (_b = uni.$UIKitStore) == null ? void 0 : _b.sysMsgStore.friendApplyMsgs) == null ? void 0 : _c.map((item) => {
          var _a3;
          (_a3 = uni.$UIKitStore) == null ? void 0 : _a3.userStore.getUserActive(item.applicantAccountId);
        });
      });
      vue.onUnmounted(() => {
        validMsgWatch();
      });
      const __returned__ = { validMsg, applyFriendLoading, isMeApplicant, handleRejectApplyFriendClick, handleAcceptApplyFriendClick, validMsgWatch, Empty, Avatar, NavBar: NavBar$1, Icon, get t() {
        return t$2;
      }, get V2NIMConst() {
        return Ma;
      }, Appellation };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "valid-list-container" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("validMsgText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "valid-list-content" }, [
        $setup.validMsg.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
          key: 0,
          text: $setup.t("validEmptyText")
        }, null, 8, ["text"])) : (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          vue.renderList($setup.validMsg, (msg) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              class: "valid-item",
              key: msg.timestamp
            }, [
              vue.createCommentVNode(" 好友申请 已同意 "),
              msg.status === $setup.V2NIMConst.V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_AGREED ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                [
                  vue.createElementVNode("div", { class: "valid-item-left" }, [
                    vue.createVNode($setup["Avatar"], {
                      account: msg.applicantAccountId
                    }, null, 8, ["account"]),
                    vue.createElementVNode("div", { class: "valid-name-container" }, [
                      vue.createElementVNode("div", { class: "valid-name" }, [
                        vue.createVNode($setup["Appellation"], {
                          account: msg.applicantAccountId
                        }, null, 8, ["account"])
                      ]),
                      vue.createElementVNode(
                        "div",
                        { class: "valid-action" },
                        vue.toDisplayString($setup.t("applyFriendText")),
                        1
                        /* TEXT */
                      )
                    ])
                  ]),
                  vue.createElementVNode("div", { class: "valid-state" }, [
                    vue.createVNode($setup["Icon"], { type: "icon-yidu" }),
                    vue.createElementVNode(
                      "span",
                      { class: "valid-state-text" },
                      vue.toDisplayString($setup.t("acceptResultText")),
                      1
                      /* TEXT */
                    )
                  ])
                ],
                64
                /* STABLE_FRAGMENT */
              )) : msg.status === $setup.V2NIMConst.V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 1 },
                [
                  vue.createCommentVNode("好友申请 已拒绝 "),
                  $setup.isMeApplicant(msg) ? (vue.openBlock(), vue.createElementBlock("div", {
                    key: 0,
                    class: "valid-item-left"
                  }, [
                    vue.createVNode($setup["Avatar"], {
                      account: msg.recipientAccountId
                    }, null, 8, ["account"]),
                    vue.createElementVNode("div", { class: "valid-name-container" }, [
                      vue.createElementVNode("div", { class: "valid-name" }, [
                        vue.createVNode($setup["Appellation"], {
                          account: msg.recipientAccountId
                        }, null, 8, ["account"])
                      ]),
                      vue.createElementVNode(
                        "div",
                        { class: "valid-action" },
                        vue.toDisplayString($setup.t("beRejectResultText")),
                        1
                        /* TEXT */
                      )
                    ])
                  ])) : (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 1 },
                    [
                      vue.createElementVNode("div", { class: "valid-item-left" }, [
                        vue.createVNode($setup["Avatar"], {
                          account: msg.applicantAccountId
                        }, null, 8, ["account"]),
                        vue.createElementVNode("div", { class: "valid-name-container" }, [
                          vue.createElementVNode("div", { class: "valid-name" }, [
                            vue.createVNode($setup["Appellation"], {
                              account: msg.applicantAccountId
                            }, null, 8, ["account"])
                          ]),
                          vue.createElementVNode(
                            "div",
                            { class: "valid-action" },
                            vue.toDisplayString($setup.t("applyFriendText")),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      vue.createElementVNode("div", { class: "valid-state" }, [
                        vue.createVNode($setup["Icon"], { type: "icon-shandiao" }),
                        vue.createElementVNode(
                          "span",
                          { class: "valid-state-text" },
                          vue.toDisplayString($setup.t("rejectResultText")),
                          1
                          /* TEXT */
                        )
                      ])
                    ],
                    64
                    /* STABLE_FRAGMENT */
                  ))
                ],
                64
                /* STABLE_FRAGMENT */
              )) : msg.status === $setup.V2NIMConst.V2NIMFriendAddApplicationStatus.V2NIM_FRIEND_ADD_APPLICATION_STATUS_INIT ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 2 },
                [
                  vue.createCommentVNode(" 好友申请 未处理 "),
                  !$setup.isMeApplicant(msg) ? (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 0 },
                    [
                      vue.createElementVNode("div", { class: "valid-item-left" }, [
                        vue.createVNode($setup["Avatar"], {
                          account: msg.applicantAccountId
                        }, null, 8, ["account"]),
                        vue.createElementVNode("div", { class: "valid-name-container" }, [
                          vue.createElementVNode("div", { class: "valid-name" }, [
                            vue.createVNode($setup["Appellation"], {
                              account: msg.applicantAccountId
                            }, null, 8, ["account"])
                          ]),
                          vue.createElementVNode(
                            "div",
                            { class: "valid-action" },
                            vue.toDisplayString($setup.t("applyFriendText")),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      vue.createElementVNode("div", { class: "valid-buttons" }, [
                        vue.createElementVNode("div", {
                          class: "valid-button button-reject",
                          onClick: ($event) => $setup.handleRejectApplyFriendClick(msg),
                          loading: $setup.applyFriendLoading
                        }, vue.toDisplayString($setup.t("rejectText")), 9, ["onClick", "loading"]),
                        vue.createElementVNode("div", {
                          class: "valid-button button-accept",
                          onClick: ($event) => $setup.handleAcceptApplyFriendClick(msg),
                          loading: $setup.applyFriendLoading
                        }, vue.toDisplayString($setup.t("acceptText")), 9, ["onClick", "loading"])
                      ])
                    ],
                    64
                    /* STABLE_FRAGMENT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                64
                /* STABLE_FRAGMENT */
              )) : vue.createCommentVNode("v-if", true)
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])
    ]);
  }
  const PagesContactContactListValidList = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$I], ["__scopeId", "data-v-81c16f18"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Contact/contact-list/valid-list.vue"]]);
  const _sfc_main$I = /* @__PURE__ */ vue.defineComponent({
    __name: "black-list",
    setup(__props, { expose: __expose }) {
      __expose();
      const blacklist = vue.ref([]);
      const users = vue.ref();
      const handleClick = async (account) => {
        try {
          await uni.$UIKitStore.relationStore.removeUserFromBlockListActive(account);
          uni.showToast({
            title: t$2("removeBlackSuccessText"),
            icon: "success"
          });
        } catch (error) {
          uni.showToast({
            title: t$2("removeBlackFailText"),
            icon: "error"
          });
        }
      };
      const blacklistWatch = autorun(() => {
        blacklist.value = uni.$UIKitStore.relationStore.blacklist;
      });
      const usersWatch = autorun(() => {
        users.value = uni.$UIKitStore.userStore.users;
      });
      vue.onUnmounted(() => {
        blacklistWatch();
        usersWatch();
      });
      const __returned__ = { blacklist, users, handleClick, blacklistWatch, usersWatch, Empty, Avatar, Appellation, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "black-list-container" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("blacklistText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "black-list-content" }, [
        vue.createElementVNode(
          "div",
          { class: "black-list-subtitle" },
          vue.toDisplayString($setup.t("blacklistSubTitle")),
          1
          /* TEXT */
        ),
        $setup.blacklist.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
          key: 0,
          text: $setup.t("blacklistEmptyText")
        }, null, 8, ["text"])) : (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          vue.renderList($setup.blacklist, (item) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              class: "black-item",
              key: item
            }, [
              vue.createElementVNode("div", { class: "item-left" }, [
                vue.createVNode($setup["Avatar"], {
                  account: item,
                  gotoUserCard: true
                }, null, 8, ["account"]),
                vue.createVNode($setup["Appellation"], {
                  class: "black-name",
                  account: item
                }, null, 8, ["account"])
              ]),
              vue.createElementVNode("div", {
                class: "black-button",
                onClick: () => $setup.handleClick(item)
              }, vue.toDisplayString($setup.t("removeBlacklist")), 9, ["onClick"])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])
    ]);
  }
  const PagesContactContactListBlackList = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$H], ["__scopeId", "data-v-08b6e9fd"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Contact/contact-list/black-list.vue"]]);
  const _sfc_main$H = {
    name: "PageMeta",
    setup(props, { emit }) {
      onResize((evt) => {
        emit("resize", evt);
      });
    },
    props: {
      backgroundTextStyle: {
        type: String,
        default: "dark",
        validator(value) {
          return ["dark", "light"].indexOf(value) !== -1;
        }
      },
      backgroundColor: {
        type: String,
        default: "#ffffff"
      },
      backgroundColorTop: {
        type: String,
        default: "#ffffff"
      },
      backgroundColorBottom: {
        type: String,
        default: "#ffffff"
      },
      scrollTop: {
        type: String,
        default: ""
      },
      scrollDuration: {
        type: Number,
        default: 300
      },
      pageStyle: {
        type: String,
        default: ""
      },
      enablePullDownRefresh: {
        type: [Boolean, String],
        default: false
      },
      rootFontSize: {
        type: String,
        default: ""
      }
    },
    created() {
      const page = getCurrentPages()[0];
      this.$pageVm = page.$vm || page;
      this.$watch("backgroundTextStyle", () => {
        this.setBackgroundTextStyle();
      });
      this.$watch(() => [
        this.rootFontSize,
        this.pageStyle
      ], () => {
        this.setPageMeta();
      });
      this.$watch(() => [
        this.backgroundColor,
        this.backgroundColorTop,
        this.backgroundColorBottom
      ], () => {
        this.setBackgroundColor();
      });
      this.$watch(() => [
        this.scrollTop,
        this.scrollDuration
      ], () => {
        this.pageScrollTo();
      });
    },
    beforeMount() {
      this.setBackgroundColor();
      if (this.rootFontSize || this.pageStyle) {
        this.setPageMeta();
      }
      this.backgroundTextStyle && this.setBackgroundTextStyle();
    },
    mounted() {
      this.scrollTop && this.pageScrollTo();
    },
    methods: {
      setPullDownRefresh(webview, enabled) {
        webview.setStyle({
          pullToRefresh: {
            support: enabled,
            style: plus.os.name === "Android" ? "circle" : "default"
          }
        });
      },
      setPageMeta() {
      },
      setBackgroundTextStyle() {
      },
      setBackgroundColor() {
      },
      pageScrollTo() {
        let scrollTop = String(this.scrollTop);
        if (scrollTop.indexOf("rpx") !== -1) {
          scrollTop = uni.upx2px(scrollTop.replace("rpx", ""));
        }
        scrollTop = parseFloat(scrollTop);
        if (isNaN(scrollTop)) {
          return;
        }
        uni.pageScrollTo({
          scrollTop,
          duration: this.scrollDuration,
          success: () => {
          }
        });
      }
    }
  };
  function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { style: { "display": "none" } }, [
      vue.renderSlot(_ctx.$slots, "default")
    ]);
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$G], ["__file", "/Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli-vite/node_modules/@dcloudio/uni-components/lib/page-meta/page-meta.vue"]]);
  const _sfc_main$G = /* @__PURE__ */ vue.defineComponent({
    __name: "nav-bar",
    props: {
      title: { type: String, required: true },
      subTitle: { type: String, required: false, default: "" },
      backgroundColor: { type: String, required: false, default: "" },
      showLeft: { type: Boolean, required: false, default: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const back = () => {
        uni.navigateBack({
          delta: 1
        });
      };
      const __returned__ = { back, get isWxApp() {
        return isWxApp;
      }, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(" 样式兼容微信小程序  "),
        vue.createElementVNode("div", null, [
          vue.createElementVNode(
            "div",
            {
              class: "nav-bar-wrapper",
              style: vue.normalizeStyle({
                backgroundColor: $props.backgroundColor || "#ffffff",
                backgroundImage: `url(${$props.title})`,
                height: $setup.isWxApp ? "55px" : "40px",
                alignItems: $setup.isWxApp ? "flex-end" : "center"
              })
            },
            [
              $props.showLeft ? vue.renderSlot(_ctx.$slots, "left", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createElementBlock("div", {
                key: 1,
                onClick: $setup.back
              }, [
                vue.createVNode($setup["Icon"], {
                  type: "icon-zuojiantou",
                  size: 22
                })
              ])),
              vue.createElementVNode("div", { class: "title-container" }, [
                vue.createElementVNode(
                  "div",
                  { class: "title" },
                  vue.toDisplayString($props.title),
                  1
                  /* TEXT */
                ),
                $props.subTitle ? (vue.openBlock(), vue.createElementBlock(
                  "div",
                  {
                    key: 0,
                    class: "subTitle"
                  },
                  vue.toDisplayString($props.subTitle),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true),
                vue.renderSlot(_ctx.$slots, "icon", {}, void 0, true)
              ]),
              vue.createElementVNode("div", null, [
                vue.renderSlot(_ctx.$slots, "right", {}, void 0, true)
              ])
            ],
            4
            /* STYLE */
          )
        ])
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    );
  }
  const NavBar = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$F], ["__scopeId", "data-v-40a09da3"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/nav-bar.vue"]]);
  const _sfc_main$F = {
    name: "Tooltip",
    props: {
      visible: Boolean,
      align: Boolean,
      color: {
        type: String,
        default: "#303133"
      },
      // placement: {
      //   type: String,
      //   default: 'top',
      // },
      content: {
        type: String,
        default: ""
      },
      show: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        isShow: this.visible,
        title: "Hello",
        arrowLeft: 0,
        query: null,
        style: {},
        arrowStyle: {},
        placement: "top"
      };
    },
    onLoad() {
    },
    watch: {
      isShow: {
        handler(val) {
          this.$emit("update:visible", val);
        },
        immediate: true
      },
      visible: {
        handler(val) {
          if (val) {
            this.$nextTick(() => {
              this.getPosition();
            });
          }
          this.isShow = val;
        },
        immediate: true
      }
    },
    mounted() {
      this.getPosition();
    },
    methods: {
      close() {
        this.isShow = false;
      },
      fixedWrap() {
        this.isShow = false;
      },
      async handleClick() {
        if (this.isShow) {
          return this.isShow = false;
        }
        await this.getPosition();
        this.isShow = true;
      },
      getPosition() {
        return new Promise((resolve) => {
          uni.createSelectorQuery().in(this).selectAll(".zb_tooltip_content,.zb_tooltip__popper").boundingClientRect(async (data2) => {
            let { left, bottom, right, top, width, height } = data2[0] || {};
            data2[1] || {};
            let objStyle = {};
            let objStyle1 = {};
            if (top <= 300) {
              this.placement = "bottom";
            } else {
              this.placement = "top";
            }
            switch (this.placement) {
              case "top":
                if (this.align) {
                  objStyle.left = "-100px";
                  if (width < 90) {
                    objStyle.left = "-200px";
                  }
                } else {
                  objStyle.left = "50px";
                }
                objStyle.bottom = `${height + 8}px`;
                break;
              case "bottom":
                if (this.align) {
                  objStyle.left = "-100px";
                  if (width < 100) {
                    objStyle.left = "-200px";
                  }
                } else {
                  objStyle.left = "50px";
                }
                objStyle.top = `${height + 8}px`;
                break;
            }
            this.style = objStyle;
            this.arrowStyle = objStyle1;
            resolve();
          }).exec();
        });
      }
    }
  };
  function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "zb-tooltip",
        style: vue.normalizeStyle({
          "--theme-bg-color": $props.color
        })
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "zb_tooltip_content",
            onLongpress: _cache[2] || (_cache[2] = vue.withModifiers((...args) => $options.handleClick && $options.handleClick(...args), ["stop"]))
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
            vue.withDirectives(vue.createElementVNode(
              "view",
              {
                class: "zb_tooltip__mask",
                onLongpress: _cache[0] || (_cache[0] = vue.withModifiers(() => {
                }, ["stop"])),
                onTouchstart: _cache[1] || (_cache[1] = (...args) => $options.close && $options.close(...args))
              },
              null,
              544
              /* NEED_HYDRATION, NEED_PATCH */
            ), [
              [vue.vShow, $data.isShow]
            ]),
            vue.createElementVNode(
              "view",
              {
                class: "zb_tooltip__popper",
                onClick: vue.withModifiers(() => {
                }, ["stop"]),
                style: vue.normalizeStyle([
                  $data.style,
                  {
                    visibility: $data.isShow ? "visible" : "hidden",
                    color: $props.color === "white" ? "" : "#fff",
                    boxShadow: $props.color === "white" ? "0 3px 6px -4px #0000001f, 0 6px 16px #00000014, 0 9px 28px 8px #0000000d" : ""
                  }
                ])
              },
              [
                vue.renderSlot(_ctx.$slots, "content", {}, () => [
                  vue.createTextVNode(
                    vue.toDisplayString($props.content),
                    1
                    /* TEXT */
                  )
                ], true),
                vue.createCommentVNode(` <view
            class="zb_popper__icon"
            :style="[arrowStyle]"
            :class="[
              {
                zb_popper__up: placement.indexOf('bottom') === 0,
                zb_popper__arrow: placement.indexOf('top') === 0,
                zb_popper__right: placement.indexOf('right') === 0,
                zb_popper__left: placement.indexOf('left') === 0,
              },
            ]"
          >
          </view> `)
              ],
              4
              /* STYLE */
            )
          ],
          32
          /* NEED_HYDRATION */
        )
      ],
      4
      /* STYLE */
    );
  }
  const Tooltip = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$E], ["__scopeId", "data-v-218252dc"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/Tooltip.vue"]]);
  const _sfc_main$E = /* @__PURE__ */ vue.defineComponent({
    __name: "message-bubble",
    props: {
      msg: { type: Object, required: true },
      tooltipVisible: { type: Boolean, required: false },
      bgVisible: { type: Boolean, required: false },
      placement: { type: String, required: false }
    },
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const tooltipRef = vue.ref(null);
      const props = __props;
      const conversationType = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationType(
        props.msg.conversationId
      );
      vue.onMounted(() => {
        isUnknownMsg.value = !(props.msg.messageType == Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT || props.msg.messageType == Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE || props.msg.messageType == Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE || props.msg.messageType == Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO || props.msg.messageType == Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO || props.msg.messageType == Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL);
      });
      formatAppLog("log", "at pages/Chat/message/message-bubble.vue:451", "props.msg=================", props.msg);
      const isFriend = vue.ref(true);
      const isUnknownMsg = vue.ref(false);
      const closeTooltip = () => {
        tooltipRef.value.close();
      };
      const handleCopy = () => {
        uni.setClipboardData({
          data: props.msg.text || "",
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("copySuccessText"),
              icon: "none"
            });
          },
          fail: () => {
            uni.showToast({
              title: t$2("copyFailText"),
              icon: "none"
            });
          },
          complete() {
            closeTooltip();
          }
        });
      };
      const scrollBottom = () => {
        setTimeout(() => {
          uni.$emit(events.ON_SCROLL_BOTTOM);
        }, 100);
      };
      const handleResendMsg = async () => {
        const _msg = props.msg;
        uni.$UIKitStore.msgStore.removeMsg(_msg.conversationId, [
          _msg.messageClientId
        ]);
        try {
          switch (_msg.messageType) {
            case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE:
            case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO:
              uni.$UIKitStore.msgStore.sendMessageActive({
                msg: _msg,
                conversationId: _msg.conversationId,
                progress: () => true,
                sendBefore: () => {
                  scrollBottom();
                }
              });
              break;
            case Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT:
              uni.$UIKitStore.msgStore.sendMessageActive({
                msg: _msg,
                conversationId: _msg.conversationId,
                sendBefore: () => {
                  scrollBottom();
                }
              });
              break;
            default:
              uni.$UIKitStore.msgStore.sendMessageActive({
                msg: _msg,
                conversationId: _msg.conversationId,
                sendBefore: () => {
                  scrollBottom();
                }
              });
              break;
          }
          scrollBottom();
        } catch (error) {
          formatAppLog("log", "at pages/Chat/message/message-bubble.vue:533", error);
        }
      };
      const handleForwardMsg = () => {
        uni.showActionSheet({
          itemList: [t$2("forwardToTeamText"), t$2("forwardToFriendText")],
          success(data2) {
            if (data2.tapIndex === 0) {
              customNavigateTo({
                url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM}&msgIdClient=${props.msg.messageClientId}`
              });
            } else if (data2.tapIndex === 1) {
              customNavigateTo({
                url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P}&msgIdClient=${props.msg.messageClientId}`
              });
            }
          },
          complete() {
            closeTooltip();
          }
        });
      };
      const handlePinMsg = () => {
        const _msg = props.msg;
        if (_msg.pinState) {
          uni.$UIKitStore.msgStore.unpinMessageActive(_msg).catch((err) => {
            if ((err == null ? void 0 : err.code) && typeof t$2(`${err.code}`) !== "undefined") {
              uni.showToast({
                title: t$2(`${err.code}`),
                icon: "error",
                duration: 1e3
              });
            } else {
              uni.showToast({
                title: t$2("unpinFailedText"),
                icon: "error",
                duration: 1e3
              });
            }
          });
        } else {
          uni.$UIKitStore.msgStore.pinMessageActive(_msg).catch((err) => {
            if ((err == null ? void 0 : err.code) && typeof t$2(`${err.code}`) !== "undefined") {
              uni.showToast({
                title: t$2(`${err.code}`),
                icon: "error",
                duration: 1e3
              });
            } else {
              uni.showToast({
                title: t$2("pinFailedText"),
                icon: "error",
                duration: 1e3
              });
            }
          });
        }
        closeTooltip();
      };
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      const handleCollectionMsg = () => {
        var _a3, _b2, _c;
        const _msg = props.msg;
        const conversation = enableV2CloudConversation ? (_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.conversations.get(_msg.conversationId) : (_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.conversations.get(
          _msg.conversationId
        );
        const collectionDataObj = {
          //@ts-expect-error
          message: uni.$UIKitNIM.V2NIMMessageConverter.messageSerialization(_msg),
          // 序列化
          avatar: (_c = uni.$UIKitStore.userStore.users.get(_msg.senderId)) == null ? void 0 : _c.avatar,
          conversationName: conversation == null ? void 0 : conversation.name,
          senderName: uni.$UIKitStore.uiStore.getAppellation({
            account: _msg.senderId,
            teamId: conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? _msg.receiverId : ""
          })
        };
        const addCollectionParams = {
          collectionType: 1e3 + _msg.messageType,
          // 和移动端对齐
          collectionData: JSON.stringify(collectionDataObj),
          uniqueId: _msg.messageServerId
        };
        uni.$UIKitStore.msgStore.addCollectionActive(addCollectionParams).then(() => {
          uni.showToast({
            title: t$2("addCollectionSuccessText"),
            icon: "success"
          });
        }).catch((err) => {
          if ((err == null ? void 0 : err.code) && typeof t$2(`${err.code}`) !== "undefined") {
            uni.showToast({
              title: t$2(`${err.code}`),
              icon: "error",
              duration: 1e3
            });
          } else {
            uni.showToast({
              title: t$2("addCollectionFailedText"),
              icon: "error",
              duration: 1e3
            });
          }
        });
        closeTooltip();
      };
      const handleReplyMsg = async () => {
        const _msg = props.msg;
        uni.$UIKitStore.msgStore.replyMsgActive(_msg);
        closeTooltip();
        uni.$emit(events.REPLY_MSG, props.msg);
        if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM && !props.msg.isSelf) {
          uni.$emit(events.AIT_TEAM_MEMBER, {
            accountId: props.msg.senderId,
            appellation: uni.$UIKitStore.uiStore.getAppellation({
              account: props.msg.senderId,
              teamId: props.msg.receiverId,
              ignoreAlias: true
            })
          });
        }
      };
      const handleRecallMsg = () => {
        const diff = Date.now() - props.msg.createTime;
        if (diff > msgRecallTime) {
          uni.showToast({
            title: t$2("msgRecallTimeErrorText"),
            icon: "none"
          });
          closeTooltip();
          return;
        }
        uni.showModal({
          title: t$2("recallText"),
          content: t$2("recall3"),
          showCancel: true,
          confirmText: t$2("recallText"),
          confirmColor: "#1861df",
          success(data2) {
            if (data2.confirm) {
              const _msg = props.msg;
              uni.$UIKitStore.msgStore.reCallMsgActive(_msg).catch(() => {
                uni.showToast({
                  title: t$2("recallMsgFailText"),
                  icon: "error"
                });
              });
            }
          },
          complete() {
            closeTooltip();
          }
        });
      };
      const handleDeleteMsg = () => {
        const _msg = props.msg;
        uni.showModal({
          title: t$2("deleteText"),
          content: t$2("delete"),
          showCancel: true,
          confirmText: t$2("deleteText"),
          confirmColor: "#1861df",
          success(data2) {
            if (data2.confirm) {
              uni.$UIKitStore.msgStore.deleteMsgActive([_msg]).then(() => {
                uni.showToast({
                  title: t$2("deleteMsgSuccessText"),
                  icon: "success"
                });
              }).catch((error) => {
                uni.showToast({
                  title: t$2("deleteMsgFailText"),
                  icon: "error"
                });
              });
            }
          },
          complete() {
            closeTooltip();
          }
        });
      };
      const addFriend = () => {
        customNavigateTo({
          url: `/pages/user-card/friend/index?account=${props.msg.receiverId}`
        });
      };
      const friendsWatch = autorun(() => {
        const _isFriend = uni.$UIKitStore.uiStore.friends.filter(
          (item) => !uni.$UIKitStore.relationStore.blacklist.includes(item.accountId)
        ).map((item) => item.accountId).some((item) => item.account === props.msg.receiverId);
        isFriend.value = _isFriend;
      });
      vue.onUnmounted(() => {
        friendsWatch();
      });
      const __returned__ = { tooltipRef, props, conversationType, isFriend, isUnknownMsg, closeTooltip, handleCopy, scrollBottom, handleResendMsg, handleForwardMsg, handlePinMsg, enableV2CloudConversation, handleCollectionMsg, handleReplyMsg, handleRecallMsg, handleDeleteMsg, addFriend, friendsWatch, Tooltip, Icon, get V2NIMConst() {
        return Ma;
      }, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    return !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createBlock($setup["Tooltip"], {
      key: 0,
      placement: $props.placement,
      ref: "tooltipRef",
      color: "white"
    }, {
      content: vue.withCtx(() => [
        !$setup.isUnknownMsg ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "msg-action-groups"
        }, [
          $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: "msg-action-btn",
            onClick: $setup.handleCopy
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-fuzhi1"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("copyText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: "msg-action-btn",
            onClick: $setup.handleReplyMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-huifu"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("replyText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO && $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 2,
            class: "msg-action-btn",
            onClick: $setup.handleForwardMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-zhuanfa"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("forwardText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 3,
            class: "msg-action-btn",
            onClick: $setup.handlePinMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-pin"
            }),
            vue.createCommentVNode(" pinState 为 0 或者 undefined，显示“标记”，其他显示“取消标记” "),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.props.msg.pinState ? $setup.t("unpinText") : $setup.t("pinText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: "msg-action-btn",
            onClick: $setup.handleDeleteMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-shanchu"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("deleteText")),
              1
              /* TEXT */
            )
          ]),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 4,
            class: "msg-action-btn",
            onClick: $setup.handleCollectionMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-collection"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("collectionText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true)
        ])) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 未知消息体 "),
            vue.createElementVNode("div", { class: "msg-action-groups-unknown" }, [
              vue.createElementVNode("div", {
                class: "msg-action-btn",
                onClick: $setup.handleDeleteMsg
              }, [
                vue.createVNode($setup["Icon"], {
                  size: 18,
                  color: "#656A72",
                  class: "msg-action-btn-icon",
                  type: "icon-shanchu"
                }),
                vue.createElementVNode(
                  "text",
                  { class: "msg-action-btn-text" },
                  vue.toDisplayString($setup.t("deleteText")),
                  1
                  /* TEXT */
                )
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      default: vue.withCtx(() => [
        $props.bgVisible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "msg-bg msg-bg-in"
        }, [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ])) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["placement"])) : $setup.props.msg.sendingState === $setup.V2NIMConst.V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SENDING ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 1,
      class: "msg-status-wrapper"
    }, [
      vue.createVNode($setup["Icon"], {
        size: 21,
        color: "#337EFF",
        class: "msg-status-icon icon-loading",
        type: "icon-a-Frame8"
      }),
      vue.createVNode($setup["Tooltip"], {
        placement: $props.placement,
        ref: "tooltipRef",
        color: "white",
        align: $setup.props.msg.isSelf
      }, {
        content: vue.withCtx(() => [
          vue.createElementVNode("div", { class: "msg-action-groups" }, [
            $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: "msg-action-btn",
              onClick: $setup.handleCopy
            }, [
              vue.createVNode($setup["Icon"], {
                size: 18,
                color: "#656A72",
                class: "msg-action-btn-icon",
                type: "icon-fuzhi1"
              }),
              vue.createElementVNode(
                "text",
                { class: "msg-action-btn-text" },
                vue.toDisplayString($setup.t("copyText")),
                1
                /* TEXT */
              )
            ])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: "msg-action-btn",
              onClick: $setup.handleDeleteMsg
            }, [
              vue.createVNode($setup["Icon"], {
                size: 18,
                color: "#656A72",
                class: "msg-action-btn-icon",
                type: "icon-shanchu"
              }),
              vue.createElementVNode(
                "text",
                { class: "msg-action-btn-text" },
                vue.toDisplayString($setup.t("deleteText")),
                1
                /* TEXT */
              )
            ])
          ])
        ]),
        default: vue.withCtx(() => [
          $props.bgVisible ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: "msg-bg msg-bg-out"
          }, [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ])) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["placement", "align"])
    ])) : $setup.props.msg.sendingState === $setup.V2NIMConst.V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_FAILED || $setup.props.msg.messageStatus.errorCode === 102426 || $setup.props.msg.messageStatus.errorCode === 104404 ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 2,
      class: "msg-failed-wrapper"
    }, [
      vue.createElementVNode("div", { class: "msg-failed" }, [
        vue.createElementVNode("div", {
          class: "msg-status-wrapper",
          onClick: $setup.handleResendMsg
        }, [
          vue.createElementVNode("div", { class: "icon-fail" }, "!")
        ]),
        vue.createVNode($setup["Tooltip"], {
          placement: $props.placement,
          ref: "tooltipRef",
          color: "white",
          align: $setup.props.msg.isSelf
        }, {
          content: vue.withCtx(() => [
            vue.createElementVNode(
              "div",
              {
                class: "msg-action-groups",
                style: vue.normalizeStyle({
                  width: $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? "112px" : "56px"
                })
              },
              [
                $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 0,
                  class: "msg-action-btn",
                  onClick: $setup.handleCopy
                }, [
                  vue.createVNode($setup["Icon"], {
                    size: 18,
                    color: "#656A72",
                    class: "msg-action-btn-icon",
                    type: "icon-fuzhi1"
                  }),
                  vue.createElementVNode(
                    "text",
                    { class: "msg-action-btn-text" },
                    vue.toDisplayString($setup.t("copyText")),
                    1
                    /* TEXT */
                  )
                ])) : vue.createCommentVNode("v-if", true),
                vue.createElementVNode("div", {
                  class: "msg-action-btn",
                  onClick: $setup.handleDeleteMsg
                }, [
                  vue.createVNode($setup["Icon"], {
                    size: 18,
                    color: "#656A72",
                    class: "msg-action-btn-icon",
                    type: "icon-shanchu"
                  }),
                  vue.createElementVNode(
                    "text",
                    { class: "msg-action-btn-text" },
                    vue.toDisplayString($setup.t("deleteText")),
                    1
                    /* TEXT */
                  )
                ])
              ],
              4
              /* STYLE */
            )
          ]),
          default: vue.withCtx(() => [
            $props.bgVisible ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: "msg-bg msg-bg-out"
            }, [
              vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ])) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["placement", "align"])
      ]),
      $setup.props.msg.errorCode === 102426 ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "in-blacklist"
        },
        vue.toDisplayString($setup.t("sendFailWithInBlackText")),
        1
        /* TEXT */
      )) : $setup.props.msg.errorCode === 104404 ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: "friend-delete"
      }, [
        vue.createTextVNode(
          vue.toDisplayString($setup.t("sendFailWithDeleteText")) + " ",
          1
          /* TEXT */
        ),
        vue.createElementVNode(
          "span",
          {
            onClick: $setup.addFriend,
            class: "friend-verification"
          },
          vue.toDisplayString($setup.t("friendVerificationText")),
          1
          /* TEXT */
        )
      ])) : vue.createCommentVNode("v-if", true)
    ])) : $props.tooltipVisible ? (vue.openBlock(), vue.createBlock($setup["Tooltip"], {
      key: 3,
      placement: $props.placement,
      ref: "tooltipRef",
      color: "white",
      align: $setup.props.msg.isSelf
    }, {
      content: vue.withCtx(() => [
        !$setup.isUnknownMsg ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "msg-action-groups"
        }, [
          $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: "msg-action-btn",
            onClick: $setup.handleCopy
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-fuzhi1"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("copyText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: "msg-action-btn",
            onClick: $setup.handleReplyMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-huifu"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("replyText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO && $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 2,
            class: "msg-action-btn",
            onClick: $setup.handleForwardMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-zhuanfa"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("forwardText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 3,
            class: "msg-action-btn",
            onClick: $setup.handlePinMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-pin"
            }),
            vue.createCommentVNode(" pinState 为 0 或者 undefined，显示“标记”，其他显示“取消标记” "),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.props.msg.pinState ? $setup.t("unpinText") : $setup.t("pinText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: "msg-action-btn",
            onClick: $setup.handleDeleteMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-shanchu"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("deleteText")),
              1
              /* TEXT */
            )
          ]),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 4,
            class: "msg-action-btn",
            onClick: $setup.handleRecallMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-chehui"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("recallText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.props.msg.messageType !== $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 5,
            class: "msg-action-btn",
            onClick: $setup.handleCollectionMsg
          }, [
            vue.createVNode($setup["Icon"], {
              size: 18,
              color: "#656A72",
              class: "msg-action-btn-icon",
              type: "icon-collection"
            }),
            vue.createElementVNode(
              "text",
              { class: "msg-action-btn-text" },
              vue.toDisplayString($setup.t("collectionText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true)
        ])) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 未知消息体 "),
            vue.createElementVNode("div", { class: "msg-action-groups-unknown" }, [
              vue.createElementVNode("div", {
                class: "msg-action-btn",
                onClick: $setup.handleDeleteMsg
              }, [
                vue.createVNode($setup["Icon"], {
                  size: 18,
                  color: "#656A72",
                  class: "msg-action-btn-icon",
                  type: "icon-shanchu"
                }),
                vue.createElementVNode(
                  "text",
                  { class: "msg-action-btn-text" },
                  vue.toDisplayString($setup.t("deleteText")),
                  1
                  /* TEXT */
                )
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      default: vue.withCtx(() => [
        $props.bgVisible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "msg-bg msg-bg-out"
        }, [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ])) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["placement", "align"])) : $props.bgVisible ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 4,
      class: "msg-bg msg-bg-out"
    }, [
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
    ])) : (vue.openBlock(), vue.createElementBlock("div", { key: 5 }, [
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
    ]));
  }
  const MessageBubble = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$D], ["__scopeId", "data-v-7f8137d5"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-bubble.vue"]]);
  const _sfc_main$D = /* @__PURE__ */ vue.defineComponent({
    __name: "MessageOneLine",
    props: {
      text: { type: String, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const parseText2 = (text) => {
        if (!text)
          return [];
        const regexEmoji = emojiRegExp;
        const matches = [];
        let match;
        while ((match = regexEmoji.exec(text)) !== null) {
          matches.push({
            type: "emoji",
            value: match[0],
            index: match.index
          });
          const fillText = " ".repeat(match[0].length);
          text = text.replace(match[0], fillText);
        }
        text = text.replace(regexEmoji, " ");
        if (text) {
          text.split(" ").filter((item) => item.trim()).map((item) => {
            const index = text == null ? void 0 : text.indexOf(item);
            matches.push({
              type: "text",
              value: item,
              index
            });
            const fillText = " ".repeat(item.length);
            text = text.replace(item, fillText);
          });
        }
        return matches.sort((a2, b2) => a2.index - b2.index);
      };
      const textArr = vue.computed(() => {
        return parseText2(props.text);
      });
      const __returned__ = { props, parseText: parseText2, textArr, Icon, get EMOJI_ICON_MAP_CONFIG() {
        return EMOJI_ICON_MAP_CONFIG$1;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "wrapper" }, [
      (vue.openBlock(true), vue.createElementBlock(
        vue.Fragment,
        null,
        vue.renderList($setup.textArr, (item) => {
          return vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            null,
            [
              item.type === "text" ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                [
                  vue.createTextVNode(
                    vue.toDisplayString(item.value),
                    1
                    /* TEXT */
                  )
                ],
                64
                /* STABLE_FRAGMENT */
              )) : item.type === "emoji" ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
                key: 1,
                type: $setup.EMOJI_ICON_MAP_CONFIG[item.value],
                size: 14,
                iconStyle: {
                  margin: "3px",
                  verticalAlign: "bottom",
                  display: "inline-block"
                }
              }, null, 8, ["type"])) : vue.createCommentVNode("v-if", true)
            ],
            64
            /* STABLE_FRAGMENT */
          );
        }),
        256
        /* UNKEYED_FRAGMENT */
      ))
    ]);
  }
  const MessageOneLine = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$C], ["__scopeId", "data-v-7b46a878"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/MessageOneLine.vue"]]);
  const _sfc_main$C = /* @__PURE__ */ vue.defineComponent({
    __name: "message-reply",
    props: {
      replyMsg: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      var _a2;
      __expose();
      const props = __props;
      const isFullScreen = vue.ref(false);
      const repliedTo = vue.ref("");
      const { name: name2 = "", url = "" } = ((_a2 = props.replyMsg) == null ? void 0 : _a2.attachment) || {};
      const downloadUrl = url + (url.includes("?") ? "&" : "?") + `download=${name2}`;
      const isReplyMsgExist = vue.computed(() => {
        var _a3;
        return ((_a3 = props.replyMsg) == null ? void 0 : _a3.messageClientId) !== "noFind";
      });
      vue.onMounted(() => {
        var _a3, _b;
        repliedTo.value = uni.$UIKitStore.uiStore.getAppellation({
          account: (_a3 = props.replyMsg) == null ? void 0 : _a3.senderId,
          teamId: (_b = props.replyMsg) == null ? void 0 : _b.receiverId
        });
      });
      const repliedToWatch = autorun(() => {
        var _a3, _b;
        repliedTo.value = uni.$UIKitStore.uiStore.getAppellation({
          account: (_a3 = props.replyMsg) == null ? void 0 : _a3.senderId,
          teamId: (_b = props.replyMsg) == null ? void 0 : _b.receiverId
        });
      });
      const showFullReplyMsg = () => {
        var _a3, _b, _c, _d, _e2, _f, _g, _h;
        if (((_a3 = props.replyMsg) == null ? void 0 : _a3.messageType) === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE) {
          uni.previewImage({
            //@ts-ignore
            urls: [(_c = (_b = props.replyMsg) == null ? void 0 : _b.attachment) == null ? void 0 : _c.url]
          });
        } else if (((_d = props.replyMsg) == null ? void 0 : _d.messageType) === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT) {
          isFullScreen.value = true;
          uni.$emit(events.HANDLE_MOVE_THROUGH, true);
        } else if (((_e2 = props.replyMsg) == null ? void 0 : _e2.messageType) === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO) {
          const url2 = (_g = (_f = props.replyMsg) == null ? void 0 : _f.attachment) == null ? void 0 : _g.url;
          stopAllAudio();
          if (url2) {
            customNavigateTo({
              url: `/pages/Chat/video-play?videoUrl=${encodeURIComponent(url2)}`
            });
          }
        } else if (((_h = props.replyMsg) == null ? void 0 : _h.messageType) === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO) {
          isFullScreen.value = true;
        }
      };
      const closeFullReplyMsg = () => {
        isFullScreen.value = false;
        stopAllAudio();
        uni.$emit(events.HANDLE_MOVE_THROUGH, false);
      };
      const openInBrowser = (url2) => {
        uni.setClipboardData({
          data: url2,
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("openUrlText"),
              icon: "none"
            });
          }
        });
      };
      vue.onUnmounted(() => {
        repliedToWatch();
      });
      const __returned__ = { props, isFullScreen, repliedTo, name: name2, url, downloadUrl, isReplyMsgExist, repliedToWatch, showFullReplyMsg, closeFullReplyMsg, openInBrowser, get t() {
        return t$2;
      }, MessageOneLine, MessageText, UniLink, get REPLY_MSG_TYPE_MAP() {
        return REPLY_MSG_TYPE_MAP;
      }, get isHarmonyOs() {
        return isHarmonyOs;
      }, get V2NIMConst() {
        return Ma;
      }, MessageAudio, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    var _a2;
    return vue.openBlock(), vue.createElementBlock("div", null, [
      ((_a2 = $setup.props.replyMsg) == null ? void 0 : _a2.messageClientId) ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "reply-msg-wrapper"
      }, [
        vue.createCommentVNode(" replyMsg 不存在 说明回复的消息被删除或者撤回 "),
        !$setup.isReplyMsgExist ? (vue.openBlock(), vue.createElementBlock("div", { key: 0 }, [
          vue.createElementVNode(
            "span",
            null,
            vue.toDisplayString($setup.t("replyNotFindText")),
            1
            /* TEXT */
          )
        ])) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: "reply-msg",
          onClick: $setup.showFullReplyMsg
        }, [
          vue.createElementVNode("div", { class: "reply-msg-name-wrapper" }, [
            vue.createElementVNode("div", { class: "reply-msg-name-line" }, "|"),
            vue.createElementVNode(
              "div",
              { class: "reply-msg-name-content" },
              vue.toDisplayString($setup.repliedTo),
              1
              /* TEXT */
            ),
            vue.createElementVNode("div", { class: "reply-msg-name-to" }, ":")
          ]),
          $setup.props.replyMsg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createBlock($setup["MessageOneLine"], {
            key: 0,
            text: $setup.props.replyMsg.text
          }, null, 8, ["text"])) : $setup.props.replyMsg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: "other-msg-wrapper"
          }, [
            !$setup.isHarmonyOs ? (vue.openBlock(), vue.createBlock($setup["UniLink"], {
              key: 0,
              href: $setup.downloadUrl,
              download: $setup.name,
              showUnderLine: false
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(
                  vue.toDisplayString($setup.t("fileMsgTitleText")),
                  1
                  /* TEXT */
                )
              ]),
              _: 1
              /* STABLE */
            }, 8, ["download"])) : (vue.openBlock(), vue.createElementBlock(
              "span",
              {
                key: 1,
                class: "other-msg-wrapper",
                onClick: _cache[0] || (_cache[0] = () => $setup.openInBrowser($setup.downloadUrl))
              },
              vue.toDisplayString($setup.t("fileMsgTitleText")),
              1
              /* TEXT */
            ))
          ])) : (vue.openBlock(), vue.createElementBlock(
            "div",
            {
              key: 2,
              class: "other-msg-wrapper"
            },
            vue.toDisplayString("[" + $setup.REPLY_MSG_TYPE_MAP[$setup.props.replyMsg.messageType] + "]"),
            1
            /* TEXT */
          ))
        ]))
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 点击被回复的消息需要全屏显示 "),
      $setup.isFullScreen ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: "reply-full-screen",
        onClick: $setup.closeFullReplyMsg
      }, [
        vue.createElementVNode("div", {
          class: "reply-message-close",
          onClick: $setup.closeFullReplyMsg
        }, [
          vue.createVNode($setup["Icon"], {
            color: "#929299",
            iconStyle: { fontWeight: "200" },
            size: 18,
            type: "icon-guanbi"
          })
        ]),
        $setup.props.replyMsg.messageType == $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "reply-message-content"
        }, [
          vue.createVNode($setup["MessageText"], {
            msg: $props.replyMsg,
            fontSize: 22
          }, null, 8, ["msg"])
        ])) : $setup.props.replyMsg.messageType == $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO ? (vue.openBlock(), vue.createElementBlock(
          "div",
          {
            key: 1,
            class: "msg-common",
            style: vue.normalizeStyle({
              flexDirection: $setup.props.replyMsg.isSelf ? "row-reverse" : "row",
              backgroundColor: $setup.props.replyMsg.isSelf ? "#d6e5f6" : "#e8eaed",
              borderRadius: $setup.props.replyMsg.isSelf ? "8px 0px 8px 8px" : "0 8px 8px"
            }),
            onClick: vue.withModifiers(() => {
            }, ["stop"])
          },
          [
            vue.createVNode($setup["MessageAudio"], { msg: $props.replyMsg }, null, 8, ["msg"])
          ],
          4
          /* STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const ReplyMessage = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$B], ["__scopeId", "data-v-acd112ca"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-reply.vue"]]);
  const _sfc_main$B = /* @__PURE__ */ vue.defineComponent({
    __name: "message-notification",
    props: {
      msg: { type: Object, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const teamId = props.msg.conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? props.msg.receiverId : "";
      const notificationContent = vue.ref("");
      const notificationContentWatch = autorun(() => {
        const getNotificationContent = () => {
          const attachment = props.msg.attachment;
          switch (attachment == null ? void 0 : attachment.type) {
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_UPDATE_TINFO: {
              const team = (attachment == null ? void 0 : attachment.updatedTeamInfo) || {};
              const content = [];
              if (team.avatar !== void 0) {
                content.push(t$2("updateTeamAvatar"));
              }
              if (team.name !== void 0) {
                content.push(`${t$2("updateTeamName")}“${team.name}”`);
              }
              if (team.intro !== void 0) {
                content.push(t$2("updateTeamIntro"));
              }
              if (team.inviteMode !== void 0) {
                content.push(
                  `${t$2("updateTeamInviteMode")}“${team.inviteMode === Ma.V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_ALL ? t$2("teamAll") : t$2("teamOwnerAndManagerText")}”`
                );
              }
              if (team.updateInfoMode !== void 0) {
                content.push(
                  `${t$2("updateTeamUpdateTeamMode")}“${team.updateInfoMode === Ma.V2NIMTeamUpdateInfoMode.V2NIM_TEAM_UPDATE_INFO_MODE_ALL ? t$2("teamAll") : t$2("teamOwnerAndManagerText")}”`
                );
              }
              if (team.chatBannedMode !== void 0) {
                content.push(
                  `${t$2("updateTeamMute")}${team.chatBannedMode === Ma.V2NIMTeamChatBannedMode.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN ? t$2("closeText") : t$2("openText")}`
                );
              }
              if (team.serverExtension) {
                let ext = {};
                try {
                  ext = JSON.parse(team.serverExtension);
                } catch (error) {
                }
                if (ext[ALLOW_AT] !== void 0) {
                  content.push(
                    `${t$2("updateAllowAt")}“${ext[ALLOW_AT] === "manager" ? t$2("teamOwnerAndManagerText") : t$2("teamAll")}”`
                  );
                }
              }
              return content.length ? `${uni.$UIKitStore.uiStore.getAppellation({
                account: props.msg.senderId,
                teamId
              })} ${content.join("、")}` : "";
            }
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_APPLY_PASS:
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE_ACCEPT: {
              return `${uni.$UIKitStore.uiStore.getAppellation({
                account: props.msg.senderId,
                teamId
              })} ${t$2("joinTeamText")}`;
            }
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_INVITE: {
              const accounts = (attachment == null ? void 0 : attachment.targetIds) || [];
              accounts.map(async (item) => {
                await uni.$UIKitStore.userStore.getUserActive(item);
              });
              const nicks = accounts.map((item) => {
                return uni.$UIKitStore.uiStore.getAppellation({
                  account: item,
                  teamId
                });
              }).filter((item) => !!item).join("、");
              return `${nicks} ${t$2("joinTeamText")}`;
            }
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_KICK: {
              const accounts = (attachment == null ? void 0 : attachment.targetIds) || [];
              accounts.map(async (item) => {
                await uni.$UIKitStore.userStore.getUserActive(item);
              });
              const nicks = accounts.map((item) => {
                return uni.$UIKitStore.uiStore.getAppellation({
                  account: item,
                  teamId
                });
              }).filter((item) => !!item).join("、");
              return `${nicks} ${t$2("beRemoveTeamText")}`;
            }
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_ADD_MANAGER: {
              const accounts = (attachment == null ? void 0 : attachment.targetIds) || [];
              accounts.map(async (item) => {
                await uni.$UIKitStore.userStore.getUserActive(item);
              });
              const nicks = accounts.map((item) => {
                return uni.$UIKitStore.uiStore.getAppellation({
                  account: item,
                  teamId
                });
              }).filter((item) => !!item).join("、");
              return `${nicks} ${t$2("beAddTeamManagersText")}`;
            }
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_REMOVE_MANAGER: {
              const accounts = (attachment == null ? void 0 : attachment.targetIds) || [];
              accounts.map(async (item) => {
                await uni.$UIKitStore.userStore.getUserActive(item);
              });
              const nicks = accounts.map((item) => {
                return uni.$UIKitStore.uiStore.getAppellation({
                  account: item,
                  teamId
                });
              }).filter((item) => !!item).join("、");
              return `${nicks} ${t$2("beRemoveTeamManagersText")}`;
            }
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_LEAVE: {
              return `${uni.$UIKitStore.uiStore.getAppellation({
                account: props.msg.senderId,
                teamId
              })} ${t$2("leaveTeamText")}`;
            }
            case Ma.V2NIMMessageNotificationType.V2NIM_MESSAGE_NOTIFICATION_TYPE_TEAM_OWNER_TRANSFER: {
              return `${uni.$UIKitStore.uiStore.getAppellation({
                account: ((attachment == null ? void 0 : attachment.targetIds) || [])[0],
                teamId
              })} ${t$2("newGroupOwnerText")}`;
            }
            default:
              return "";
          }
        };
        notificationContent.value = getNotificationContent();
      });
      vue.onUnmounted(() => {
        notificationContentWatch();
      });
      const __returned__ = { props, teamId, notificationContent, notificationContentWatch };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.notificationContent ? (vue.openBlock(), vue.createElementBlock(
      "div",
      {
        key: 0,
        class: "msg-noti"
      },
      vue.toDisplayString($setup.notificationContent),
      1
      /* TEXT */
    )) : vue.createCommentVNode("v-if", true);
  }
  const MessageNotification = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$A], ["__scopeId", "data-v-27e904c7"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-notification.vue"]]);
  const _sfc_main$A = /* @__PURE__ */ vue.defineComponent({
    __name: "message-g2",
    props: {
      msg: { type: Object, required: true }
    },
    setup(__props, { expose: __expose }) {
      var _a2, _b, _c, _d;
      __expose();
      const props = __props;
      const duration = convertSecondsToTime(
        //@ts-ignore
        (_b = (_a2 = props.msg.attachment) == null ? void 0 : _a2.durations[0]) == null ? void 0 : _b.duration
      );
      const status = g2StatusMap[(_c = props.msg.attachment) == null ? void 0 : _c.status];
      const iconType = (
        //@ts-expect-error
        ((_d = props.msg.attachment) == null ? void 0 : _d.type) == 1 ? "icon-yuyin8" : "icon-shipin8"
      );
      const handleCall = () => {
        var _a3;
        if (isApp) {
          const callType = (_a3 = props.msg.attachment) == null ? void 0 : _a3.type;
          const myAccount = uni.$UIKitStore.userStore.myUserInfo.accountId;
          const isSelfMsg = props.msg.senderId === myAccount;
          if (isSelfMsg) {
            const remoteShowName = uni.$UIKitStore.uiStore.getAppellation({
              account: props.msg.receiverId
            });
            startCall({
              remoteUserAccid: props.msg.receiverId,
              currentUserAccid: myAccount,
              type: callType,
              remoteShowName
            });
          } else {
            const remoteShowName = uni.$UIKitStore.uiStore.getAppellation({
              account: props.msg.senderId
            });
            startCall({
              remoteUserAccid: props.msg.senderId,
              currentUserAccid: myAccount,
              type: callType,
              remoteShowName
            });
          }
        } else {
          uni.showToast({
            title: t$2("callFailedText"),
            icon: "none"
          });
        }
      };
      const __returned__ = { props, duration, status, iconType, handleCall, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: "g2-message-wrapper",
      onClick: $setup.handleCall
    }, [
      vue.createVNode($setup["Icon"], {
        type: $setup.iconType,
        size: 28
      }, null, 8, ["type"]),
      vue.createElementVNode(
        "div",
        { class: "g2-message-status" },
        vue.toDisplayString($setup.status),
        1
        /* TEXT */
      ),
      $setup.duration ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "g2-message-duration"
        },
        vue.toDisplayString($setup.duration),
        1
        /* TEXT */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const MessageG2 = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$z], ["__scopeId", "data-v-8a417550"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-g2.vue"]]);
  const _sfc_main$z = /* @__PURE__ */ vue.defineComponent({
    __name: "message-read",
    props: {
      msg: { type: Object, required: true }
    },
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const props = __props;
      const teamManagerVisible = uni.$UIKitStore.localOptions.teamMsgReceiptVisible;
      const p2pMsgReceiptVisible = uni.$UIKitStore.localOptions.p2pMsgReceiptVisible;
      const conversationType = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationType(
        props.msg.conversationId
      );
      const p2pMsgRotateDeg = vue.ref(0);
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      const setP2pMsgRotateDeg = () => {
        var _a3, _b2, _c;
        if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) {
          const conversation = enableV2CloudConversation ? (_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.conversations.get(
            props.msg.conversationId
          ) : (_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.conversations.get(
            props.msg.conversationId
          );
          p2pMsgRotateDeg.value = ((_c = props == null ? void 0 : props.msg) == null ? void 0 : _c.createTime) <= ((conversation == null ? void 0 : conversation.msgReceiptTime) || 0) ? 360 : 0;
        }
      };
      const p2pMsgReadWatch = autorun(() => {
        setP2pMsgRotateDeg();
      });
      const jumpToTeamMsgReadInfo = () => {
        var _a3, _b2;
        if (uni.$UIKitStore.connectStore.connectStatus !== Ma.V2NIMConnectStatus.V2NIM_CONNECT_STATUS_CONNECTED) {
          uni.showToast({
            title: t$2("offlineText"),
            icon: "none"
          });
          return;
        }
        if (((_a3 = props == null ? void 0 : props.msg) == null ? void 0 : _a3.messageClientId) && ((_b2 = props == null ? void 0 : props.msg) == null ? void 0 : _b2.conversationId)) {
          customNavigateTo({
            url: `/pages/Chat/message-read-info?messageClientId=${props.msg.messageClientId}&conversationId=${props.msg.conversationId}`
          });
        }
      };
      const teamMsgRotateDeg = vue.computed(() => {
        var _a3, _b2, _c;
        if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
          const percentage = (((_a3 = props == null ? void 0 : props.msg) == null ? void 0 : _a3.yxRead) || 0) / ((((_b2 = props == null ? void 0 : props.msg) == null ? void 0 : _b2.yxUnread) || 0) + (((_c = props == null ? void 0 : props.msg) == null ? void 0 : _c.yxRead) || 0)) || 0;
          return percentage * 360;
        }
        return 0;
      });
      vue.onMounted(() => {
        setP2pMsgRotateDeg();
      });
      vue.onUnmounted(() => {
        p2pMsgReadWatch();
      });
      const __returned__ = { props, teamManagerVisible, p2pMsgReceiptVisible, conversationType, p2pMsgRotateDeg, enableV2CloudConversation, setP2pMsgRotateDeg, p2pMsgReadWatch, jumpToTeamMsgReadInfo, teamMsgRotateDeg, Icon, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.props.msg.sendingState == $setup.V2NIMConst.V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 0,
      class: "msg-read-wrapper"
    }, [
      $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P && $setup.p2pMsgReceiptVisible ? (vue.openBlock(), vue.createElementBlock("div", { key: 0 }, [
        $setup.p2pMsgRotateDeg == 360 ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "icon-read-wrapper"
        }, [
          vue.createVNode($setup["Icon"], {
            type: "icon-read",
            size: 18
          })
        ])) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: "sector"
        }, [
          vue.createElementVNode(
            "span",
            {
              class: "cover-1",
              style: vue.normalizeStyle(`transform: rotate(${$setup.p2pMsgRotateDeg}deg)`)
            },
            null,
            4
            /* STYLE */
          ),
          vue.createElementVNode(
            "span",
            {
              class: vue.normalizeClass($setup.p2pMsgRotateDeg >= 180 ? "cover-2 cover-3" : "cover-2")
            },
            null,
            2
            /* CLASS */
          )
        ]))
      ])) : vue.createCommentVNode("v-if", true),
      $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM && $setup.teamManagerVisible ? (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
        $setup.teamMsgRotateDeg == 360 ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "icon-read-wrapper"
        }, [
          vue.createVNode($setup["Icon"], {
            type: "icon-read",
            size: 18
          })
        ])) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: "sector",
          onClick: $setup.jumpToTeamMsgReadInfo
        }, [
          vue.createElementVNode(
            "span",
            {
              class: "cover-1",
              style: vue.normalizeStyle(`transform: rotate(${$setup.teamMsgRotateDeg}deg)`)
            },
            null,
            4
            /* STYLE */
          ),
          vue.createElementVNode(
            "span",
            {
              class: vue.normalizeClass($setup.teamMsgRotateDeg >= 180 ? "cover-2 cover-3" : "cover-2")
            },
            null,
            2
            /* CLASS */
          )
        ]))
      ])) : vue.createCommentVNode("v-if", true)
    ])) : vue.createCommentVNode("v-if", true);
  }
  const MessageIsRead = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$y], ["__scopeId", "data-v-571f73c4"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-read.vue"]]);
  const _sfc_main$y = /* @__PURE__ */ vue.defineComponent({
    __name: "message-item",
    props: {
      msg: { type: Object, required: true },
      index: { type: Number, required: true },
      replyMsgsMap: { type: Object, required: false },
      broadcastNewAudioSrc: { type: String, required: true }
    },
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const props = __props;
      const replyMsg = vue.computed(() => {
        return props.replyMsgsMap && props.replyMsgsMap[props.msg.messageClientId];
      });
      const appellation = vue.ref("");
      const accountId = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.userStore) == null ? void 0 : _b.myUserInfo.accountId;
      const conversationType = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationType(
        props.msg.conversationId
      );
      const to2 = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationTargetId(
        props.msg.conversationId
      );
      const videoFirstFrameDataUrl = vue.computed(() => {
        var _a3;
        const url = (_a3 = props.msg.attachment) == null ? void 0 : _a3.url;
        return url ? `${url}${url.includes("?") ? "&" : "?"}vframe=1` : "";
      });
      const imageUrl = vue.computed(() => {
        var _a3, _b2, _c;
        if (props.msg.messageStatus.errorCode == 102426) {
          return "https://yx-web-nosdn.netease.im/common/c1f278b963b18667ecba4ee9a6e68047/img-fail.png";
        }
        if (props.msg.messageStatus.errorCode == 104404) {
          return "https://yx-web-nosdn.netease.im/common/c1f278b963b18667ecba4ee9a6e68047/img-fail.png";
        }
        return ((_b2 = (_a3 = props.msg) == null ? void 0 : _a3.attachment) == null ? void 0 : _b2.url) || ((_c = props.msg.attachment) == null ? void 0 : _c.file);
      });
      const handleImageTouch = (url) => {
        if (url) {
          uni.previewImage({
            urls: [url]
          });
        }
      };
      const handleVideoTouch = (msg) => {
        var _a3;
        stopAllAudio();
        const url = (_a3 = msg.attachment) == null ? void 0 : _a3.url;
        if (url) {
          customNavigateTo({
            url: `/pages/Chat/video-play?videoUrl=${encodeURIComponent(url)}`
          });
        }
      };
      const handleReeditMsg = (msg) => {
        uni.$emit(events.ON_REEDIT_MSG, msg);
      };
      const appellationWatch = autorun(() => {
        appellation.value = uni.$UIKitStore.uiStore.getAppellation({
          account: props.msg.senderId,
          teamId: conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? to2 : ""
        });
      });
      vue.onUnmounted(() => {
        appellationWatch();
      });
      const __returned__ = { props, replyMsg, appellation, accountId, conversationType, to: to2, videoFirstFrameDataUrl, imageUrl, handleImageTouch, handleVideoTouch, handleReeditMsg, appellationWatch, Avatar, MessageBubble, get MSG_ID_FLAG() {
        return MSG_ID_FLAG;
      }, get t() {
        return t$2;
      }, ReplyMessage, MessageFile, MessageText, MessageAudio, MessageNotification, MessageG2, get V2NIMConst() {
        return Ma;
      }, MessageIsRead, Icon, Appellation };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    var _a2, _b, _c, _d, _e2;
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(`msg-item-wrapper ${$setup.props.msg.pinState && !($setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && $setup.props.msg.timeValue !== void 0) && !$setup.props.msg.recallType ? "msg-pin" : ""}`),
      id: $setup.MSG_ID_FLAG + $setup.props.msg.messageClientId,
      key: $setup.props.msg.createTime
    }, [
      $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && $setup.props.msg.timeValue !== void 0 ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          class: "msg-time"
        },
        vue.toDisplayString($setup.props.msg.timeValue),
        1
        /* TEXT */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && $setup.props.msg.recallType === "reCallMsg" && $setup.props.msg.canEdit ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 1,
          class: "msg-common",
          style: vue.normalizeStyle({
            flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse"
          })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createVNode($setup["MessageBubble"], {
            msg: $setup.props.msg,
            "bg-visible": true
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode(
                vue.toDisplayString($setup.t("recall2")) + " ",
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                {
                  class: "msg-recall-btn",
                  onClick: _cache[0] || (_cache[0] = () => {
                    $setup.handleReeditMsg($setup.props.msg);
                  })
                },
                vue.toDisplayString($setup.t("reeditText")),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["msg"])
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && $setup.props.msg.recallType === "reCallMsg" && !$setup.props.msg.canEdit ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 2,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createVNode($setup["MessageBubble"], {
            msg: $setup.props.msg,
            "bg-visible": true
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode(
                "div",
                { class: "recall-text" },
                vue.toDisplayString($setup.t("you") + $setup.t("recall")),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["msg"])
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && $setup.props.msg.recallType === "beReCallMsg" ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 3,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode(
              "div",
              {
                class: vue.normalizeClass($setup.props.msg.isSelf ? "self-msg-recall" : "msg-recall")
              },
              [
                vue.createElementVNode(
                  "text",
                  { class: "msg-recall2" },
                  vue.toDisplayString(!$setup.props.msg.isSelf ? $setup.t("recall2") : `${$setup.t("you") + $setup.t("recall")}`),
                  1
                  /* TEXT */
                )
              ],
              2
              /* CLASS */
            )
          ])
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 4,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["MessageBubble"], {
              msg: $setup.props.msg,
              "tooltip-visible": true,
              "bg-visible": true
            }, {
              default: vue.withCtx(() => [
                !!$setup.replyMsg ? (vue.openBlock(), vue.createBlock($setup["ReplyMessage"], {
                  key: 0,
                  replyMsg: $setup.replyMsg
                }, null, 8, ["replyMsg"])) : vue.createCommentVNode("v-if", true),
                vue.createVNode($setup["MessageText"], {
                  msg: $setup.props.msg
                }, null, 8, ["msg"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["msg"])
          ]),
          ((_a2 = $setup.props.msg) == null ? void 0 : _a2.isSelf) ? (vue.openBlock(), vue.createBlock($setup["MessageIsRead"], {
            key: 0,
            msg: $setup.props.msg
          }, null, 8, ["msg"])) : vue.createCommentVNode("v-if", true)
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 5,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["MessageBubble"], {
              msg: $setup.props.msg,
              "tooltip-visible": true,
              "bg-visible": true,
              style: { "cursor": "pointer" }
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode("div", {
                  onClick: _cache[1] || (_cache[1] = () => {
                    $setup.handleImageTouch($setup.props.msg.attachment.url);
                  })
                }, [
                  vue.createElementVNode("image", {
                    class: "msg-image",
                    "lazy-load": true,
                    mode: "aspectFill",
                    src: $setup.imageUrl
                  }, null, 8, ["src"])
                ])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["msg"])
          ]),
          ((_b = $setup.props.msg) == null ? void 0 : _b.isSelf) ? (vue.openBlock(), vue.createBlock($setup["MessageIsRead"], {
            key: 0,
            msg: $setup.props.msg
          }, null, 8, ["msg"])) : vue.createCommentVNode("v-if", true)
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 6,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["MessageBubble"], {
              msg: $setup.props.msg,
              "tooltip-visible": true,
              "bg-visible": true,
              style: { "cursor": "pointer" }
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode("div", {
                  class: "video-msg-wrapper",
                  onClick: _cache[2] || (_cache[2] = () => $setup.handleVideoTouch($setup.props.msg))
                }, [
                  vue.createElementVNode("div", { class: "video-play-button" }, [
                    vue.createElementVNode("div", { class: "video-play-icon" })
                  ]),
                  vue.createElementVNode("image", {
                    class: "msg-image",
                    "lazy-load": true,
                    mode: "aspectFill",
                    src: $setup.videoFirstFrameDataUrl
                  }, null, 8, ["src"])
                ])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["msg"])
          ]),
          ((_c = $setup.props.msg) == null ? void 0 : _c.isSelf) ? (vue.openBlock(), vue.createBlock($setup["MessageIsRead"], {
            key: 0,
            msg: $setup.props.msg
          }, null, 8, ["msg"])) : vue.createCommentVNode("v-if", true)
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CALL ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 7,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["MessageBubble"], {
              msg: $setup.props.msg,
              "tooltip-visible": true,
              "bg-visible": true
            }, {
              default: vue.withCtx(() => [
                vue.createVNode($setup["MessageG2"], {
                  msg: $setup.props.msg
                }, null, 8, ["msg"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["msg"])
          ])
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 8,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["MessageBubble"], {
              msg: $setup.props.msg,
              "tooltip-visible": true,
              "bg-visible": false
            }, {
              default: vue.withCtx(() => [
                vue.createVNode($setup["MessageFile"], {
                  msg: $setup.props.msg
                }, null, 8, ["msg"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["msg"])
          ]),
          ((_d = $setup.props.msg) == null ? void 0 : _d.isSelf) ? (vue.openBlock(), vue.createBlock($setup["MessageIsRead"], {
            key: 0,
            msg: $setup.props.msg
          }, null, 8, ["msg"])) : vue.createCommentVNode("v-if", true)
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 9,
          class: "msg-common",
          style: vue.normalizeStyle({
            flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse"
          })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["MessageBubble"], {
              msg: $setup.props.msg,
              "tooltip-visible": true,
              "bg-visible": true,
              style: { "cursor": "pointer" }
            }, {
              default: vue.withCtx(() => [
                vue.createVNode($setup["MessageAudio"], {
                  msg: $setup.props.msg,
                  broadcastNewAudioSrc: $props.broadcastNewAudioSrc
                }, null, 8, ["msg", "broadcastNewAudioSrc"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["msg"])
          ]),
          ((_e2 = $setup.props.msg) == null ? void 0 : _e2.isSelf) ? (vue.openBlock(), vue.createBlock($setup["MessageIsRead"], {
            key: 0,
            msg: $setup.props.msg
          }, null, 8, ["msg"])) : vue.createCommentVNode("v-if", true)
        ],
        4
        /* STYLE */
      )) : $setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_NOTIFICATION ? (vue.openBlock(), vue.createBlock($setup["MessageNotification"], {
        key: 10,
        msg: $setup.props.msg
      }, null, 8, ["msg"])) : (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 11,
          class: "msg-common",
          style: vue.normalizeStyle({ flexDirection: !$setup.props.msg.isSelf ? "row" : "row-reverse" })
        },
        [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.msg.senderId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            "goto-user-card": true
          }, null, 8, ["account", "teamId"]),
          vue.createElementVNode("div", { class: "msg-content" }, [
            !$setup.props.msg.isSelf ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "msg-name"
              },
              vue.toDisplayString($setup.appellation),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            vue.createVNode($setup["MessageBubble"], {
              msg: $setup.props.msg,
              "tooltip-visible": true,
              "bg-visible": true
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(
                  " [" + vue.toDisplayString($setup.t("unknowMsgText")) + "] ",
                  1
                  /* TEXT */
                )
              ]),
              _: 1
              /* STABLE */
            }, 8, ["msg"])
          ])
        ],
        4
        /* STYLE */
      )),
      vue.createCommentVNode(" 不展示 pinState 为 0 、时间消息以及撤回消息的标记样式 "),
      $setup.props.msg.pinState && !($setup.props.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && $setup.props.msg.timeValue !== void 0) && !$setup.props.msg.recallType ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 12,
          class: "msg-pin-tip",
          style: vue.normalizeStyle({ justifyContent: !$setup.props.msg.isSelf ? "flex-start" : "flex-end" })
        },
        [
          vue.createVNode($setup["Icon"], {
            size: 11,
            type: "icon-green-pin"
          }),
          vue.createTextVNode(" "),
          $setup.props.msg.operatorId === $setup.accountId ? (vue.openBlock(), vue.createElementBlock(
            "span",
            { key: 0 },
            vue.toDisplayString(`${$setup.t("you")}`),
            1
            /* TEXT */
          )) : (vue.openBlock(), vue.createBlock($setup["Appellation"], {
            key: 1,
            account: $setup.props.msg.operatorId,
            teamId: $setup.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.to : "",
            color: "#3EAF96",
            fontSize: "11"
          }, null, 8, ["account", "teamId"])),
          vue.createTextVNode(
            " " + vue.toDisplayString(`${$setup.t("pinThisText")}`),
            1
            /* TEXT */
          )
        ],
        4
        /* STYLE */
      )) : vue.createCommentVNode("v-if", true)
    ], 10, ["id"]);
  }
  const MessageItem = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$x], ["__scopeId", "data-v-ef3dafa9"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-item.vue"]]);
  function caculateTimeago(dateTimeStamp) {
    const minute = 1e3 * 60;
    const hour = minute * 60;
    const day = hour * 24;
    const week = day * 7;
    const now = (/* @__PURE__ */ new Date()).getTime();
    const diffValue = now - dateTimeStamp;
    let result = "";
    if (diffValue < 0) {
      return t$2("nowText");
    }
    const minC = Math.floor(diffValue / minute);
    const hourC = Math.floor(diffValue / hour);
    const dayC = Math.floor(diffValue / day);
    const weekC = Math.floor(diffValue / week);
    if (weekC >= 1 && weekC <= 4) {
      result = ` ${weekC}${t$2("weekText")}`;
    } else if (dayC >= 1 && dayC <= 6) {
      result = ` ${dayC}${t$2("dayText")}`;
    } else if (hourC >= 1 && hourC <= 23) {
      result = ` ${hourC}${t$2("hourText")}`;
    } else if (minC >= 1 && minC <= 59) {
      result = ` ${minC}${t$2("minuteText")}`;
    } else if (diffValue >= 0 && diffValue <= minute) {
      result = t$2("nowText");
    } else {
      const datetime = /* @__PURE__ */ new Date();
      datetime.setTime(dateTimeStamp);
      const Nyear = datetime.getFullYear();
      const Nmonth = datetime.getMonth() + 1 < 10 ? `0${datetime.getMonth() + 1}` : datetime.getMonth() + 1;
      const Ndate = datetime.getDate() < 10 ? `0${datetime.getDate()}` : datetime.getDate();
      result = `${Nyear}-${Nmonth}-${Ndate}`;
    }
    return result;
  }
  const formatDateRange = (type) => {
    const date = /* @__PURE__ */ new Date();
    let year = date.getFullYear();
    let month = date.getMonth() + 1;
    let day = date.getDate();
    if (type === "start") {
      year = year - 100;
    } else if (type === "end") {
      year = year;
    }
    month = month > 9 ? month : "0" + month;
    day = day > 9 ? day : "0" + day;
    return `${year}-${month}-${day}`;
  };
  const _sfc_main$x = /* @__PURE__ */ vue.defineComponent({
    __name: "message-list",
    props: {
      msgs: { type: Array, required: true },
      conversationType: { type: null, required: true },
      to: { type: String, required: true },
      loadingMore: { type: Boolean, required: false },
      noMore: { type: Boolean, required: false },
      replyMsgsMap: { type: Object, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      let teamWatch = () => {
      };
      vue.onBeforeMount(() => {
        let team = void 0;
        teamWatch = autorun(() => {
          team = uni.$UIKitStore.teamStore.teams.get(props.to);
        });
        if (props.conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
          uni.$UIKitStore.teamMemberStore.getTeamMemberActive({
            teamId: props.to,
            queryOption: {
              limit: Math.max((team == null ? void 0 : team.memberLimit) || 0, 200),
              roleQueryType: 0
            }
          });
        }
        uni.$on(events.AUDIO_URL_CHANGE, (url) => {
          broadcastNewAudioSrc.value = url;
        });
        uni.$on(events.ON_SCROLL_BOTTOM, () => {
          scrollToBottom();
        });
        uni.$on(events.ON_LOAD_MORE, () => {
          const msg = finalMsgs.value.filter(
            (item) => !(item.messageType === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && ["beReCallMsg", "reCallMsg"].includes(item.recallType || ""))
          )[0];
          if (msg) {
            uni.$emit(events.GET_HISTORY_MSG, msg);
          }
        });
      });
      const scrollTop = vue.ref(99999);
      const finalMsgs = vue.computed(() => {
        const res = [];
        props.msgs.forEach((item, index) => {
          if (index > 0 && item.createTime - props.msgs[index - 1].createTime > 5 * 60 * 1e3) {
            res.push({
              ...item,
              messageClientId: "time-" + item.createTime,
              messageType: Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM,
              sendingState: Ma.V2NIMMessageSendingState.V2NIM_MESSAGE_SENDING_STATE_SUCCEEDED,
              // @ts-ignore
              timeValue: caculateTimeago(item.createTime),
              renderKey: `${item.createTime + 1}`
            });
          }
          res.push({
            ...item,
            // @ts-ignore
            renderKey: `${item.createTime}`
          });
        });
        return res;
      });
      const broadcastNewAudioSrc = vue.ref("");
      const scrollToBottom = () => {
        scrollTop.value += 9999999;
        const timer = setTimeout(() => {
          scrollTop.value += 1;
          clearTimeout(timer);
        }, 300);
      };
      const onLoadMore = () => {
        const msg = finalMsgs.value.filter(
          (item) => !(item.messageType === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_CUSTOM && ["beReCallMsg", "reCallMsg"].includes(item.recallType || ""))
        )[0];
        if (msg) {
          uni.$emit(events.GET_HISTORY_MSG, msg);
        }
      };
      const handleTapMessageList = () => {
        uni.$emit(events.CLOSE_PANEL);
        setTimeout(() => {
          uni.$emit(events.CLOSE_PANEL);
        }, 300);
      };
      vue.onUnmounted(() => {
        uni.$off(events.ON_SCROLL_BOTTOM);
        uni.$off(events.ON_LOAD_MORE);
        uni.$off(events.AUDIO_URL_CHANGE);
        teamWatch();
      });
      const __returned__ = { props, get teamWatch() {
        return teamWatch;
      }, set teamWatch(v2) {
        teamWatch = v2;
      }, scrollTop, finalMsgs, broadcastNewAudioSrc, scrollToBottom, onLoadMore, handleTapMessageList, MessageItem, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "div",
      {
        class: "msg-list-wrapper",
        onTouchstart: $setup.handleTapMessageList
      },
      [
        vue.createElementVNode("scroll-view", {
          id: "message-scroll-list",
          "scroll-y": "true",
          "scroll-top": $setup.scrollTop,
          class: "message-scroll-list"
        }, [
          vue.createCommentVNode(" 查看更多 "),
          vue.withDirectives(vue.createElementVNode(
            "div",
            {
              onClick: $setup.onLoadMore,
              class: "view-more-text"
            },
            vue.toDisplayString($setup.t("viewMoreText")),
            513
            /* TEXT, NEED_PATCH */
          ), [
            [vue.vShow, !$props.noMore]
          ]),
          vue.withDirectives(vue.createElementVNode(
            "view",
            { class: "msg-tip" },
            vue.toDisplayString($setup.t("noMoreText")),
            513
            /* TEXT, NEED_PATCH */
          ), [
            [vue.vShow, $props.noMore]
          ]),
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.finalMsgs, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                key: item.renderKey
              }, [
                (vue.openBlock(), vue.createBlock($setup["MessageItem"], {
                  msg: item,
                  index,
                  key: item.renderKey,
                  "reply-msgs-map": $props.replyMsgsMap,
                  broadcastNewAudioSrc: $setup.broadcastNewAudioSrc
                }, null, 8, ["msg", "index", "reply-msgs-map", "broadcastNewAudioSrc"]))
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ], 8, ["scroll-top"])
      ],
      32
      /* NEED_HYDRATION */
    );
  }
  const MessageList = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$w], ["__scopeId", "data-v-afb2a626"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-list.vue"]]);
  const culculateMatrix = (arr, colNum) => {
    if (colNum < 1) {
      throw Error("colNum cound not be smaller than 1");
    }
    const len = arr.length;
    const rowNum = Math.ceil(len / colNum);
    let curIndex = 0;
    let curRow = 0;
    const res = [];
    while (curIndex <= len && curRow < rowNum) {
      res[curRow] = arr.slice(curIndex, curIndex + colNum);
      curIndex += colNum;
      curRow++;
    }
    return res;
  };
  const emojiColNum = 7;
  const _sfc_main$w = /* @__PURE__ */ vue.defineComponent({
    __name: "face",
    emits: ["emojiClick", "emojiSend", "emojiDelete"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const emojiArr = Object.keys(emojiMap);
      const emojiMatrix = culculateMatrix(emojiArr, emojiColNum);
      const emit = __emit;
      const handleEmojiClick = (emoji) => {
        emit("emojiClick", emoji);
      };
      const handleEmojiDelete = () => {
        emit("emojiDelete");
      };
      const handleEmojiSend = () => {
        emit("emojiSend");
      };
      const __returned__ = { emojiArr, emojiColNum, emojiMatrix, emit, handleEmojiClick, handleEmojiDelete, handleEmojiSend, get emojiMap() {
        return emojiMap;
      }, Icon, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "msg-face-wrapper" }, [
      vue.createElementVNode("div", { class: "msg-face" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.emojiMatrix, (emojiRow, rowIndex) => {
            return vue.openBlock(), vue.createElementBlock("div", { class: "msg-face-row" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(emojiRow, (key) => {
                  return vue.openBlock(), vue.createElementBlock("div", {
                    onClick: vue.withModifiers(
                      () => {
                        $setup.handleEmojiClick({ key, type: $setup.emojiMap[key] });
                      },
                      ["stop"]
                    ),
                    key,
                    class: "msg-face-item"
                  }, [
                    vue.createVNode($setup["Icon"], {
                      size: 27,
                      type: $setup.emojiMap[key]
                    }, null, 8, ["type"])
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              )),
              vue.createCommentVNode(" 下面放三个看不到的 Icon 占个位 "),
              rowIndex + 1 === Math.ceil($setup.emojiArr.length / $setup.emojiColNum) ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
                key: 0,
                class: "msg-face-delete",
                size: 27,
                type: "icon-tuigejian"
              })) : vue.createCommentVNode("v-if", true),
              rowIndex + 1 === Math.ceil($setup.emojiArr.length / $setup.emojiColNum) ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
                key: 1,
                class: "msg-face-delete",
                size: 27,
                type: "icon-tuigejian"
              })) : vue.createCommentVNode("v-if", true),
              rowIndex + 1 === Math.ceil($setup.emojiArr.length / $setup.emojiColNum) ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
                key: 2,
                class: "msg-face-delete",
                size: 27,
                type: "icon-tuigejian"
              })) : vue.createCommentVNode("v-if", true)
            ]);
          }),
          256
          /* UNKEYED_FRAGMENT */
        ))
      ]),
      vue.createElementVNode("div", { class: "emoji-block" }),
      vue.createElementVNode("div", { class: "msg-face-control" }, [
        vue.createElementVNode("div", {
          onClick: $setup.handleEmojiDelete,
          class: "msg-delete-btn"
        }, [
          vue.createVNode($setup["Icon"], {
            type: "icon-tuigejian",
            size: 25,
            color: "#333"
          })
        ]),
        vue.createElementVNode(
          "div",
          {
            onClick: $setup.handleEmojiSend,
            class: "msg-send-btn"
          },
          vue.toDisplayString($setup.t("sendText")),
          1
          /* TEXT */
        )
      ])
    ]);
  }
  const Face = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$v], ["__scopeId", "data-v-b8bdb75f"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/face.vue"]]);
  const _sfc_main$v = /* @__PURE__ */ vue.defineComponent({
    __name: "voice-panel",
    emits: ["handleSendAudioMsg"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const $emit = __emit;
      const recorderManager = uni.getRecorderManager();
      let startRecordStamp = 0;
      const recordState = vue.ref("stop");
      const onStartRecord = () => {
        formatAppLog("log", "at pages/Chat/message/voice-panel.vue:44", "开始录音");
        try {
          stopAllAudio();
          recorderManager.start({
            format: "mp3",
            duration: 6e4,
            sampleRate: 44100,
            numberOfChannels: 1,
            encodeBitRate: 192e3,
            frameSize: 50
          });
        } catch (error) {
          formatAppLog("log", "at pages/Chat/message/voice-panel.vue:56", "录音失败", error);
        }
      };
      const onStopRecord = () => {
        formatAppLog("log", "at pages/Chat/message/voice-panel.vue:62", "结束录音");
        recordState.value = "stop";
        recorderManager.stop();
      };
      recorderManager.onStart((res) => {
        formatAppLog("log", "at pages/Chat/message/voice-panel.vue:68", "recorder start" + JSON.stringify(res));
        formatAppLog("log", "at pages/Chat/message/voice-panel.vue:69", "recorder start");
        recordState.value = "recording";
        startRecordStamp = (/* @__PURE__ */ new Date()).getTime();
      });
      recorderManager.onStop((res) => {
        formatAppLog("log", "at pages/Chat/message/voice-panel.vue:75", "recorder stop" + JSON.stringify(res));
        recordState.value = "stop";
        const duration = (/* @__PURE__ */ new Date()).getTime() - startRecordStamp;
        if (duration < 1e3) {
          uni.showToast({
            title: "录音时间太短",
            icon: "none"
          });
          return;
        }
        $emit("handleSendAudioMsg", res.tempFilePath, duration);
      });
      recorderManager.onError((res) => {
        formatAppLog("log", "at pages/Chat/message/voice-panel.vue:89", "recorder error", res);
        recordState.value = "stop";
        if (!isWxApp) {
          uni.showToast({
            title: t$2("audioErrorText"),
            icon: "none"
          });
        } else {
          if (res.errMsg == "operateRecorder:fail auth deny") {
            uni.showToast({
              title: t$2("audioErrorText"),
              icon: "none"
            });
          }
        }
      });
      const __returned__ = { $emit, recorderManager, get startRecordStamp() {
        return startRecordStamp;
      }, set startRecordStamp(v2) {
        startRecordStamp = v2;
      }, recordState, onStartRecord, onStopRecord, Icon, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "voice-panel-wrapper" }, [
      vue.createElementVNode(
        "div",
        { class: "audio-remind-text" },
        vue.toDisplayString($setup.t("audioRemindText")),
        1
        /* TEXT */
      ),
      vue.createElementVNode("div", { class: "voice-panel" }, [
        vue.createElementVNode(
          "div",
          {
            class: "voice-panel-circel",
            onTouchstart: $setup.onStartRecord,
            onTouchend: $setup.onStopRecord
          },
          [
            vue.createElementVNode("div", { class: "img-mask" }),
            vue.createVNode($setup["Icon"], {
              width: 24,
              height: 30,
              type: "audio-btn"
            })
          ],
          32
          /* NEED_HYDRATION */
        ),
        vue.createElementVNode(
          "div",
          {
            style: vue.normalizeStyle({ display: $setup.recordState == "stop" ? "none" : "block" }),
            class: "big-circle"
          },
          null,
          4
          /* STYLE */
        ),
        vue.createElementVNode(
          "div",
          {
            style: vue.normalizeStyle({ display: $setup.recordState == "stop" ? "none" : "block" }),
            class: "small-circle"
          },
          null,
          4
          /* STYLE */
        )
      ]),
      vue.createElementVNode(
        "div",
        { class: "audio-btn-text" },
        vue.toDisplayString($setup.t("audioBtnText")),
        1
        /* TEXT */
      )
    ]);
  }
  const VoicePanel = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$u], ["__scopeId", "data-v-67c7211d"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/voice-panel.vue"]]);
  class MPAnimation {
    constructor(options, _this) {
      this.options = options;
      this.animation = uni.createAnimation({
        ...options
      });
      this.currentStepAnimates = {};
      this.next = 0;
      this.$ = _this;
    }
    _nvuePushAnimates(type, args) {
      let aniObj = this.currentStepAnimates[this.next];
      let styles = {};
      if (!aniObj) {
        styles = {
          styles: {},
          config: {}
        };
      } else {
        styles = aniObj;
      }
      if (animateTypes1.includes(type)) {
        if (!styles.styles.transform) {
          styles.styles.transform = "";
        }
        let unit = "";
        if (type === "rotate") {
          unit = "deg";
        }
        styles.styles.transform += `${type}(${args + unit}) `;
      } else {
        styles.styles[type] = `${args}`;
      }
      this.currentStepAnimates[this.next] = styles;
    }
    _animateRun(styles = {}, config = {}) {
      let ref = this.$.$refs["ani"].ref;
      if (!ref)
        return;
      return new Promise((resolve, reject) => {
        nvueAnimation.transition(
          ref,
          {
            styles,
            ...config
          },
          (res) => {
            resolve();
          }
        );
      });
    }
    _nvueNextAnimate(animates, step = 0, fn2) {
      let obj = animates[step];
      if (obj) {
        let { styles, config } = obj;
        this._animateRun(styles, config).then(() => {
          step += 1;
          this._nvueNextAnimate(animates, step, fn2);
        });
      } else {
        this.currentStepAnimates = {};
        typeof fn2 === "function" && fn2();
        this.isEnd = true;
      }
    }
    step(config = {}) {
      this.animation.step(config);
      return this;
    }
    run(fn2) {
      this.$.animationData = this.animation.export();
      this.$.timer = setTimeout(() => {
        typeof fn2 === "function" && fn2();
      }, this.$.durationTime);
    }
  }
  const animateTypes1 = [
    "matrix",
    "matrix3d",
    "rotate",
    "rotate3d",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "scale3d",
    "scaleX",
    "scaleY",
    "scaleZ",
    "skew",
    "skewX",
    "skewY",
    "translate",
    "translate3d",
    "translateX",
    "translateY",
    "translateZ"
  ];
  const animateTypes2 = ["opacity", "backgroundColor"];
  const animateTypes3 = ["width", "height", "left", "right", "top", "bottom"];
  animateTypes1.concat(animateTypes2, animateTypes3).forEach((type) => {
    MPAnimation.prototype[type] = function(...args) {
      this.animation[type](...args);
      return this;
    };
  });
  function createAnimation(option, _this) {
    if (!_this)
      return;
    clearTimeout(_this.timer);
    return new MPAnimation(option, _this);
  }
  const _sfc_main$u = {
    name: "uniTransition",
    emits: ["click", "change"],
    props: {
      show: {
        type: Boolean,
        default: false
      },
      modeClass: {
        type: [Array, String],
        default() {
          return "fade";
        }
      },
      duration: {
        type: Number,
        default: 300
      },
      styles: {
        type: Object,
        default() {
          return {};
        }
      },
      customClass: {
        type: String,
        default: ""
      },
      onceRender: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        isShow: false,
        transform: "",
        opacity: 1,
        animationData: {},
        durationTime: 300,
        config: {}
      };
    },
    watch: {
      show: {
        handler(newVal) {
          if (newVal) {
            this.open();
          } else {
            if (this.isShow) {
              this.close();
            }
          }
        },
        immediate: true
      }
    },
    computed: {
      // 生成样式数据
      stylesObject() {
        let styles = {
          ...this.styles,
          "transition-duration": this.duration / 1e3 + "s"
        };
        let transform = "";
        for (let i2 in styles) {
          let line = this.toLine(i2);
          transform += line + ":" + styles[i2] + ";";
        }
        return transform;
      },
      // 初始化动画条件
      transformStyles() {
        return "transform:" + this.transform + ";opacity:" + this.opacity + ";" + this.stylesObject;
      }
    },
    created() {
      this.config = {
        duration: this.duration,
        timingFunction: "ease",
        transformOrigin: "50% 50%",
        delay: 0
      };
      this.durationTime = this.duration;
    },
    methods: {
      /**
       *  ref 触发 初始化动画
       */
      init(obj = {}) {
        if (obj.duration) {
          this.durationTime = obj.duration;
        }
        this.animation = createAnimation(Object.assign(this.config, obj), this);
      },
      /**
       * 点击组件触发回调
       */
      onClick() {
        this.$emit("click", {
          detail: this.isShow
        });
      },
      /**
       * ref 触发 动画分组
       * @param {Object} obj
       */
      step(obj, config = {}) {
        if (!this.animation)
          return;
        for (let i2 in obj) {
          try {
            if (typeof obj[i2] === "object") {
              this.animation[i2](...obj[i2]);
            } else {
              this.animation[i2](obj[i2]);
            }
          } catch (e2) {
            formatAppLog("error", "at components/uni-components/uni-transition/components/uni-transition/uni-transition.vue:148", `方法 ${i2} 不存在`);
          }
        }
        this.animation.step(config);
        return this;
      },
      /**
       *  ref 触发 执行动画
       */
      run(fn2) {
        if (!this.animation)
          return;
        this.animation.run(fn2);
      },
      // 开始过度动画
      open() {
        clearTimeout(this.timer);
        this.transform = "";
        this.isShow = true;
        let { opacity, transform } = this.styleInit(false);
        if (typeof opacity !== "undefined") {
          this.opacity = opacity;
        }
        this.transform = transform;
        this.$nextTick(() => {
          this.timer = setTimeout(() => {
            this.animation = createAnimation(this.config, this);
            this.tranfromInit(false).step();
            this.animation.run();
            this.$emit("change", {
              detail: this.isShow
            });
          }, 20);
        });
      },
      // 关闭过度动画
      close(type) {
        if (!this.animation)
          return;
        this.tranfromInit(true).step().run(() => {
          this.isShow = false;
          this.animationData = null;
          this.animation = null;
          let { opacity, transform } = this.styleInit(false);
          this.opacity = opacity || 1;
          this.transform = transform;
          this.$emit("change", {
            detail: this.isShow
          });
        });
      },
      // 处理动画开始前的默认样式
      styleInit(type) {
        let styles = {
          transform: ""
        };
        let buildStyle = (type2, mode) => {
          if (mode === "fade") {
            styles.opacity = this.animationType(type2)[mode];
          } else {
            styles.transform += this.animationType(type2)[mode] + " ";
          }
        };
        if (typeof this.modeClass === "string") {
          buildStyle(type, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildStyle(type, mode);
          });
        }
        return styles;
      },
      // 处理内置组合动画
      tranfromInit(type) {
        let buildTranfrom = (type2, mode) => {
          let aniNum = null;
          if (mode === "fade") {
            aniNum = type2 ? 0 : 1;
          } else {
            aniNum = type2 ? "-100%" : "0";
            if (mode === "zoom-in") {
              aniNum = type2 ? 0.8 : 1;
            }
            if (mode === "zoom-out") {
              aniNum = type2 ? 1.2 : 1;
            }
            if (mode === "slide-right") {
              aniNum = type2 ? "100%" : "0";
            }
            if (mode === "slide-bottom") {
              aniNum = type2 ? "100%" : "0";
            }
          }
          this.animation[this.animationMode()[mode]](aniNum);
        };
        if (typeof this.modeClass === "string") {
          buildTranfrom(type, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildTranfrom(type, mode);
          });
        }
        return this.animation;
      },
      animationType(type) {
        return {
          fade: type ? 1 : 0,
          "slide-top": `translateY(${type ? "0" : "-100%"})`,
          "slide-right": `translateX(${type ? "0" : "100%"})`,
          "slide-bottom": `translateY(${type ? "0" : "100%"})`,
          "slide-left": `translateX(${type ? "0" : "-100%"})`,
          "zoom-in": `scaleX(${type ? 1 : 0.8}) scaleY(${type ? 1 : 0.8})`,
          "zoom-out": `scaleX(${type ? 1 : 1.2}) scaleY(${type ? 1 : 1.2})`
        };
      },
      // 内置动画类型与实际动画对应字典
      animationMode() {
        return {
          fade: "opacity",
          "slide-top": "translateY",
          "slide-right": "translateX",
          "slide-bottom": "translateY",
          "slide-left": "translateX",
          "zoom-in": "scale",
          "zoom-out": "scale"
        };
      },
      // 驼峰转中横线
      toLine(name2) {
        return name2.replace(/([A-Z])/g, "-$1").toLowerCase();
      }
    }
  };
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("view", {
      ref: "ani",
      animation: $data.animationData,
      class: vue.normalizeClass($props.customClass),
      style: vue.normalizeStyle($options.transformStyles),
      onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 14, ["animation"])), [
      [vue.vShow, $data.isShow]
    ]);
  }
  const UniTransition = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$t], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/uni-components/uni-transition/components/uni-transition/uni-transition.vue"]]);
  const _sfc_main$t = {
    name: "uniPopup",
    components: {
      UniTransition
    },
    emits: ["change", "maskClick"],
    props: {
      // 开启动画
      animation: {
        type: Boolean,
        default: true
      },
      // 弹出层类型，可选值，top: 顶部弹出层；bottom：底部弹出层；center：全屏弹出层
      // message: 消息提示 ; dialog : 对话框
      type: {
        type: String,
        default: "center"
      },
      // maskClick
      isMaskClick: {
        type: Boolean,
        default: null
      },
      // TODO 2 个版本后废弃属性 ，使用 isMaskClick
      maskClick: {
        type: Boolean,
        default: null
      },
      backgroundColor: {
        type: String,
        default: "none"
      },
      safeArea: {
        type: Boolean,
        default: true
      },
      maskBackgroundColor: {
        type: String,
        default: "rgba(0, 0, 0, 0.4)"
      }
    },
    watch: {
      /**
       * 监听type类型
       */
      type: {
        handler: function(type) {
          if (!this.config[type])
            return;
          this[this.config[type]](true);
        },
        immediate: true
      },
      isDesktop: {
        handler: function(newVal) {
          if (!this.config[newVal])
            return;
          this[this.config[this.type]](true);
        },
        immediate: true
      },
      /**
       * 监听遮罩是否可点击
       * @param {Object} val
       */
      maskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      isMaskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      // H5 下禁止底部滚动
      showPopup(show) {
      }
    },
    data() {
      return {
        duration: 300,
        ani: [],
        showPopup: false,
        showTrans: false,
        popupWidth: 0,
        popupHeight: 0,
        config: {
          top: "top",
          bottom: "bottom",
          center: "center",
          left: "left",
          right: "right",
          message: "top",
          dialog: "center",
          share: "bottom"
        },
        maskClass: {
          position: "fixed",
          bottom: 0,
          top: 0,
          left: 0,
          right: 0,
          backgroundColor: "rgba(0, 0, 0, 0.4)"
        },
        transClass: {
          position: "fixed",
          left: 0,
          right: 0
        },
        maskShow: true,
        mkclick: true,
        popupstyle: this.isDesktop ? "fixforpc-top" : "top"
      };
    },
    computed: {
      isDesktop() {
        return this.popupWidth >= 500 && this.popupHeight >= 500;
      },
      bg() {
        if (this.backgroundColor === "" || this.backgroundColor === "none") {
          return "transparent";
        }
        return this.backgroundColor;
      }
    },
    mounted() {
      const fixSize = () => {
        const {
          windowWidth,
          windowHeight,
          windowTop,
          safeArea,
          screenHeight,
          safeAreaInsets
        } = uni.getSystemInfoSync();
        this.popupWidth = windowWidth;
        this.popupHeight = windowHeight + (windowTop || 0);
        if (safeArea && this.safeArea) {
          this.safeAreaInsets = safeAreaInsets.bottom;
        } else {
          this.safeAreaInsets = 0;
        }
      };
      fixSize();
    },
    // TODO vue3
    unmounted() {
      this.setH5Visible();
    },
    created() {
      if (this.isMaskClick === null && this.maskClick === null) {
        this.mkclick = true;
      } else {
        this.mkclick = this.isMaskClick !== null ? this.isMaskClick : this.maskClick;
      }
      if (this.animation) {
        this.duration = 300;
      } else {
        this.duration = 0;
      }
      this.messageChild = null;
      this.clearPropagation = false;
      this.maskClass.backgroundColor = this.maskBackgroundColor;
    },
    methods: {
      setH5Visible() {
      },
      /**
       * 公用方法，不显示遮罩层
       */
      closeMask() {
        this.maskShow = false;
      },
      /**
       * 公用方法，遮罩层禁止点击
       */
      disableMask() {
        this.mkclick = false;
      },
      // TODO nvue 取消冒泡
      clear(e2) {
        e2.stopPropagation();
        this.clearPropagation = true;
      },
      open(direction) {
        if (this.showPopup) {
          return;
        }
        let innerType = [
          "top",
          "center",
          "bottom",
          "left",
          "right",
          "message",
          "dialog",
          "share"
        ];
        if (!(direction && (innerType == null ? void 0 : innerType.indexOf(direction)) !== -1)) {
          direction = this.type;
        }
        if (!this.config[direction]) {
          formatAppLog("error", "at components/uni-components/uni-popup/components/uni-popup/uni-popup.vue:316", "缺少类型：", direction);
          return;
        }
        this[this.config[direction]]();
        this.$emit("change", {
          show: true,
          type: direction
        });
      },
      close(type) {
        this.showTrans = false;
        this.$emit("change", {
          show: false,
          type: this.type
        });
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.showPopup = false;
        }, 300);
      },
      // TODO 处理冒泡事件，头条的冒泡事件有问题 ，先这样兼容
      touchstart() {
        this.clearPropagation = false;
      },
      onTap() {
        if (this.clearPropagation) {
          this.clearPropagation = false;
          return;
        }
        this.$emit("maskClick");
        if (!this.mkclick)
          return;
        this.close();
      },
      /**
       * 顶部弹出样式处理
       */
      top(type) {
        this.popupstyle = this.isDesktop ? "fixforpc-top" : "top";
        this.ani = ["slide-top"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          backgroundColor: this.bg
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
        this.$nextTick(() => {
          if (this.messageChild && this.type === "message") {
            this.messageChild.timerClose();
          }
        });
      },
      /**
       * 底部弹出样式处理
       */
      bottom(type) {
        this.popupstyle = "bottom";
        this.ani = ["slide-bottom"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          bottom: 0,
          paddingBottom: this.safeAreaInsets + "px",
          backgroundColor: this.bg
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      /**
       * 中间弹出样式处理
       */
      center(type) {
        this.popupstyle = "center";
        this.ani = ["zoom-out", "fade"];
        this.transClass = {
          position: "fixed",
          display: "flex",
          flexDirection: "column",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0,
          justifyContent: "center",
          alignItems: "center"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      left(type) {
        this.popupstyle = "left";
        this.ani = ["slide-left"];
        this.transClass = {
          position: "fixed",
          left: 0,
          bottom: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      },
      right(type) {
        this.popupstyle = "right";
        this.ani = ["slide-right"];
        this.transClass = {
          position: "fixed",
          bottom: 0,
          right: 0,
          top: 0,
          backgroundColor: this.bg,
          display: "flex",
          flexDirection: "column"
        };
        if (type)
          return;
        this.showPopup = true;
        this.showTrans = true;
      }
    }
  };
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_UniTransition = vue.resolveComponent("UniTransition");
    return $data.showPopup ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["uni-popup", [$data.popupstyle, $options.isDesktop ? "fixforpc-z-index" : ""]])
      },
      [
        vue.createElementVNode(
          "view",
          {
            onTouchstart: _cache[1] || (_cache[1] = (...args) => $options.touchstart && $options.touchstart(...args))
          },
          [
            $data.maskShow ? (vue.openBlock(), vue.createBlock(_component_UniTransition, {
              key: "1",
              name: "mask",
              "mode-class": "fade",
              styles: $data.maskClass,
              duration: $data.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, null, 8, ["styles", "duration", "show", "onClick"])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(_component_UniTransition, {
              key: "2",
              "mode-class": $data.ani,
              name: "content",
              styles: $data.transClass,
              duration: $data.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["uni-popup__wrapper", [$data.popupstyle]]),
                    style: vue.normalizeStyle({ backgroundColor: $options.bg }),
                    onClick: _cache[0] || (_cache[0] = (...args) => $options.clear && $options.clear(...args))
                  },
                  [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ],
                  6
                  /* CLASS, STYLE */
                )
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["mode-class", "styles", "duration", "show", "onClick"])
          ],
          32
          /* NEED_HYDRATION */
        )
      ],
      2
      /* CLASS */
    )) : vue.createCommentVNode("v-if", true);
  }
  const UniPopup = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$s], ["__scopeId", "data-v-795eedea"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/uni-components/uni-popup/components/uni-popup/uni-popup.vue"]]);
  const _sfc_main$s = /* @__PURE__ */ vue.defineComponent({
    __name: "mention-member-list",
    props: {
      teamId: { type: String, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const team = vue.ref();
      const teamMembers = vue.ref([]);
      const teamExt = vue.ref("");
      const teamMembersWithoutSelf = vue.computed(() => {
        return teamMembers.value.filter(
          (item) => item.accountId !== uni.$UIKitStore.userStore.myUserInfo.accountId
        );
      });
      const isGroupOwner = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return (team.value ? team.value.ownerAccountId : "") === (myUser ? myUser.accountId : "");
      });
      const isGroupManager = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return teamMembers.value.filter(
          (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
        ).some((member) => member.accountId === (myUser ? myUser.accountId : ""));
      });
      const allowAtAll = vue.computed(() => {
        let ext = {};
        try {
          ext = JSON.parse(teamExt.value || "{}");
        } catch (error) {
        }
        if (ext[ALLOW_AT] === "manager") {
          return isGroupOwner.value || isGroupManager.value;
        }
        return true;
      });
      const sortGroupMembers = (members, teamId) => {
        const owner = members.filter(
          (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER
        );
        const manager = members.filter(
          (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
        ).sort((a2, b2) => a2.joinTime - b2.joinTime);
        const other = members.filter(
          (item) => ![
            Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER,
            Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
          ].includes(item.memberRole)
        ).sort((a2, b2) => a2.joinTime - b2.joinTime);
        const result = [...owner, ...manager, ...other].map((item) => {
          return {
            ...item,
            name: uni.$UIKitStore.uiStore.getAppellation({
              account: item.accountId,
              teamId
            })
          };
        });
        return result;
      };
      const handleItemClick = (member) => {
        const _member = member.accountId === AT_ALL_ACCOUNT$1 ? member : {
          accountId: member.accountId,
          appellation: uni.$UIKitStore.uiStore.getAppellation({
            account: member.accountId,
            teamId: member.teamId,
            ignoreAlias: true
          })
        };
        uni.$emit(events.HANDLE_AIT_MEMBER, _member);
      };
      const onClosePopup = () => {
        uni.$emit(events.CLOSE_AIT_POPUP);
      };
      const teamMemberWatch = autorun(() => {
        if (props.teamId) {
          teamMembers.value = sortGroupMembers(
            //@ts-ignore
            uni.$UIKitStore.teamMemberStore.getTeamMember(props.teamId),
            props.teamId
          );
          const _team = uni.$UIKitStore.teamStore.teams.get(props.teamId);
          if (team) {
            team.value = _team;
            teamExt.value = (_team == null ? void 0 : _team.serverExtension) || "";
          }
        }
      });
      vue.onUnmounted(() => {
        teamMemberWatch();
      });
      const __returned__ = { props, team, teamMembers, teamExt, teamMembersWithoutSelf, isGroupOwner, isGroupManager, allowAtAll, sortGroupMembers, handleItemClick, onClosePopup, teamMemberWatch, get t() {
        return t$2;
      }, Avatar, Icon, get AT_ALL_ACCOUNT() {
        return AT_ALL_ACCOUNT$1;
      }, Appellation, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "mention-member-list-wrapper" }, [
      vue.createElementVNode("div", { class: "header" }, [
        vue.createElementVNode("div", {
          onClick: $setup.onClosePopup,
          class: "close"
        }, [
          vue.createVNode($setup["Icon"], {
            color: "#000",
            type: "icon-jiantou"
          })
        ]),
        vue.createElementVNode(
          "div",
          { class: "title" },
          vue.toDisplayString($setup.t("chooseMentionText")),
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode("div", { class: "member-list-content" }, [
        vue.createElementVNode(
          "div",
          { style: { "display": "none" } },
          vue.toDisplayString($setup.teamExt),
          1
          /* TEXT */
        ),
        $setup.allowAtAll ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "member-item",
          onClick: _cache[0] || (_cache[0] = () => $setup.handleItemClick({
            accountId: $setup.AT_ALL_ACCOUNT,
            appellation: $setup.t("teamAll")
          }))
        }, [
          vue.createVNode($setup["Icon"], {
            size: 42,
            type: "icon-team2",
            color: "#fff"
          }),
          vue.createElementVNode(
            "span",
            { class: "member-name" },
            vue.toDisplayString($setup.t("teamAll")),
            1
            /* TEXT */
          )
        ])) : vue.createCommentVNode("v-if", true),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.teamMembersWithoutSelf, (member) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              class: "member-item",
              key: member.accountId,
              onClick: () => $setup.handleItemClick(member)
            }, [
              vue.createVNode($setup["Avatar"], {
                account: member.accountId
              }, null, 8, ["account"]),
              vue.createElementVNode("div", { class: "member-name" }, [
                vue.createVNode($setup["Appellation"], {
                  account: member.accountId,
                  teamId: member.teamId
                }, null, 8, ["account", "teamId"])
              ]),
              member.memberRole === $setup.V2NIMConst.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER ? (vue.openBlock(), vue.createElementBlock(
                "div",
                {
                  key: 0,
                  class: "owner"
                },
                vue.toDisplayString($setup.t("teamOwner")),
                1
                /* TEXT */
              )) : member.memberRole === $setup.V2NIMConst.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER ? (vue.openBlock(), vue.createElementBlock(
                "div",
                {
                  key: 1,
                  class: "manager"
                },
                vue.toDisplayString($setup.t("teamManager")),
                1
                /* TEXT */
              )) : vue.createCommentVNode("v-if", true)
            ], 8, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        vue.createElementVNode("div", { class: "member-item-block" })
      ])
    ]);
  }
  const MentionMemberList = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$r], ["__scopeId", "data-v-084fc42f"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/mention-member-list.vue"]]);
  const _sfc_main$r = /* @__PURE__ */ vue.defineComponent({
    __name: "message-input",
    props: {
      conversationType: { type: null, required: true },
      to: { type: String, required: true },
      replyMsgsMap: { type: Object, required: false }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const conversationId = props.conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P ? uni.$UIKitNIM.V2NIMConversationIdUtil.p2pConversationId(props.to) : uni.$UIKitNIM.V2NIMConversationIdUtil.teamConversationId(props.to);
      const inputText = vue.ref("");
      const extVisible = vue.ref(false);
      const audioPanelVisible = vue.ref(false);
      const sendMoreVisible = vue.ref(false);
      const emojiVisible = vue.ref(false);
      const inputVisible = vue.computed(() => {
        if (audioPanelVisible.value || sendMoreVisible.value) {
          return false;
        } else {
          return true;
        }
      });
      const handleCall = (type) => {
        const myAccount = uni.$UIKitStore.userStore.myUserInfo.accountId;
        const remoteShowName = uni.$UIKitStore.uiStore.getAppellation({
          account: props.to
        });
        if (myAccount) {
          startCall({
            remoteUserAccid: props.to,
            currentUserAccid: myAccount,
            type,
            remoteShowName
          });
        } else {
          uni.showToast({
            title: t$2("callFailedText"),
            icon: "none"
          });
        }
      };
      const showEmojiInput = vue.ref(false);
      const isReplyMsg = vue.ref(false);
      const isFocus = vue.ref(false);
      const replyMsg = vue.ref();
      const ctx = vue.getCurrentInstance();
      const popupRef = vue.ref(null);
      const selectedAtMembers = vue.ref([]);
      const team = vue.ref();
      const teamMembers = vue.ref([]);
      const teamMute = vue.ref(
        Ma.V2NIMTeamChatBannedMode.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN
      );
      const isGroupOwner = vue.ref(false);
      const isGroupManager = vue.ref(false);
      const isTeamMute = vue.ref(false);
      const allowAtAll = vue.computed(() => {
        let ext = {};
        try {
          ext = JSON.parse((team.value || {}).serverExtension || "{}");
        } catch (error) {
        }
        if (ext[ALLOW_AT] === "manager") {
          return isGroupOwner.value || isGroupManager.value;
        }
        return true;
      });
      const updateTeamMute = () => {
        if (teamMute.value === Ma.V2NIMTeamChatBannedMode.V2NIM_TEAM_CHAT_BANNED_MODE_UNBAN) {
          isTeamMute.value = false;
          return;
        }
        if (isGroupOwner.value || isGroupManager.value) {
          isTeamMute.value = false;
          return;
        }
        isTeamMute.value = true;
        return;
      };
      const onPopupChange = (e2) => {
        uni.$emit(events.HANDLE_MOVE_THROUGH, e2.value);
      };
      const handleMentionItemClick = (member) => {
        ctx.refs.popupRef.close();
        uni.$emit(events.HANDLE_MOVE_THROUGH, false);
        const nickInTeam = member.appellation;
        selectedAtMembers.value = [
          ...selectedAtMembers.value.filter(
            (item) => item.accountId !== member.accountId
          ),
          member
        ];
        const newInputText = inputText.value + nickInTeam + " ";
        inputText.value = newInputText;
      };
      const closePopup = () => {
        ctx.refs.popupRef.close();
      };
      const onClickEmojiInput = () => {
        showEmojiInput.value = false;
        extVisible.value = false;
        emojiVisible.value = false;
        if (isIosWeb) {
          showKeyboard();
        } else if (!isHarmonyOs) {
          const timeout = setTimeout(() => {
            showKeyboard();
            clearTimeout(timeout);
          }, 500);
        }
      };
      const handleInputBlur = () => {
        isFocus.value = false;
      };
      const scrollBottom = () => {
        if (!isWeb) {
          setTimeout(() => {
            uni.$emit(events.ON_SCROLL_BOTTOM);
          }, 300);
        } else {
          uni.$emit(events.ON_SCROLL_BOTTOM);
        }
      };
      const handleInput = (event) => {
        var _a2;
        const text = (_a2 = event == null ? void 0 : event.detail) == null ? void 0 : _a2.value;
        const isAit = text.endsWith("@") || text.endsWith("@\n");
        if (props.conversationType == Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
          if (isAit) {
            uni.hideKeyboard();
            ctx.refs.popupRef.open("bottom");
            isFocus.value = false;
            uni.$emit(events.HANDLE_MOVE_THROUGH, true);
          }
        }
      };
      const handleSendTextMsg = () => {
        if (inputText.value.trim() === "")
          return;
        const ext = onAtMembersExtHandler();
        let text = replaceEmoji(inputText.value);
        const textMsg = uni.$UIKitNIM.V2NIMMessageCreator.createTextMessage(text);
        uni.$UIKitStore.msgStore.sendMessageActive({
          msg: textMsg,
          conversationId,
          serverExtension: selectedAtMembers.value.length && ext,
          sendBefore: () => {
            scrollBottom();
          }
        }).catch(() => {
          uni.showToast({
            icon: "error",
            title: t$2("sendMsgFailedText")
          });
        }).finally(() => {
          scrollBottom();
        });
        inputText.value = "";
        isReplyMsg.value = false;
        selectedAtMembers.value = [];
      };
      const handleSendFileMsg = () => {
        uni.chooseFile({
          count: 1,
          type: "all",
          success: (res) => {
            var _a2, _b, _c;
            const filePath = (_a2 = res == null ? void 0 : res.tempFilePaths) == null ? void 0 : _a2[0];
            const fileName = (_c = (_b = res == null ? void 0 : res.tempFiles) == null ? void 0 : _b[0]) == null ? void 0 : _c.name;
            if (filePath && fileName) {
              const fileMsg = uni.$UIKitNIM.V2NIMMessageCreator.createFileMessage(
                filePath,
                fileName
              );
              uni.$UIKitStore.msgStore.sendMessageActive({
                msg: fileMsg,
                conversationId,
                sendBefore: () => {
                  scrollBottom();
                }
              });
            }
          },
          fail: () => {
            uni.showToast({
              title: t$2("sendFileFailedText"),
              icon: "none"
            });
          }
        });
      };
      const removeReplyMsg = () => {
        var _a2;
        uni.$UIKitStore.msgStore.removeReplyMsgActive(
          (_a2 = replyMsg == null ? void 0 : replyMsg.value) == null ? void 0 : _a2.conversationId
        );
        isReplyMsg.value = false;
      };
      const handleEmojiVisible = () => {
        if (isTeamMute.value)
          return;
        if (isWxApp || isAndroidApp || isHarmonyOs) {
          const timeout = setTimeout(() => {
            emojiVisible.value = true;
            extVisible.value = true;
            uni.$emit(events.ON_SCROLL_BOTTOM);
            clearTimeout(timeout);
          }, 300);
        } else {
          emojiVisible.value = true;
          extVisible.value = true;
        }
        showEmojiInput.value = true;
        audioPanelVisible.value = false;
        sendMoreVisible.value = false;
        uni.$emit(events.ON_SCROLL_BOTTOM);
      };
      const handleSendMoreVisible = () => {
        if (isTeamMute.value)
          return;
        audioPanelVisible.value = false;
        emojiVisible.value = false;
        sendMoreVisible.value = !sendMoreVisible.value;
        setTimeout(() => {
          uni.$emit(events.ON_SCROLL_BOTTOM);
        }, 300);
      };
      const handleEmoji = (emoji) => {
        inputText.value += emoji.key;
      };
      const handleEmojiDelete = () => {
        let target = "";
        const isEmojiEnd = Object.keys(emojiMap).reduce((prev, cur) => {
          const isEnd = inputText.value.endsWith(cur);
          if (isEnd) {
            target = cur;
          }
          return prev || isEnd;
        }, false);
        if (isEmojiEnd && target) {
          inputText.value = inputText.value.replace(target, "");
        } else {
          inputText.value = inputText.value.slice(0, -1);
        }
      };
      const handleAudioVisible = () => {
        if (isTeamMute.value)
          return;
        audioPanelVisible.value = !audioPanelVisible.value;
        emojiVisible.value = false;
        setTimeout(() => {
          uni.$emit(events.ON_SCROLL_BOTTOM);
        }, 300);
      };
      const handleSendImageMsg = () => {
        if (isTeamMute.value)
          return;
        stopAllAudio();
        uni.chooseImage({
          count: 1,
          sizeType: ["compressed"],
          success: (res) => {
            const imgMsg = uni.$UIKitNIM.V2NIMMessageCreator.createImageMessage(
              res.tempFilePaths[0]
            );
            uni.$UIKitStore.msgStore.sendMessageActive({
              msg: imgMsg,
              conversationId,
              progress: () => true,
              sendBefore: () => {
                scrollBottom();
              }
            }).then(() => {
              scrollBottom();
            }).catch(() => {
              scrollBottom();
              uni.showToast({
                icon: "error",
                title: t$2("sendImageFailedText")
              });
            });
          },
          /** uniapp 提供的chooseImage api 在鸿蒙上表现为不支持选择gif，在其他端支持 */
          fail: (error) => {
            formatAppLog("log", "at pages/Chat/message/message-input.vue:642", "chooseImage", error);
          },
          /** 没有开启权限时，提示开启权限 */
          complete: handleNoPermission
        });
      };
      const handleSendVideoMsg = (type, event) => {
        if (isTeamMute.value)
          return;
        stopAllAudio();
        if (isWxApp && (event == null ? void 0 : event.type) == "blur") {
          return;
        }
        uni.chooseVideo({
          sourceType: [type],
          compressed: true,
          maxDuration: 60,
          success: (res) => {
            const videoMsg = uni.$UIKitNIM.V2NIMMessageCreator.createVideoMessage(
              res.tempFilePath
            );
            uni.$UIKitStore.msgStore.sendMessageActive({
              msg: videoMsg,
              conversationId,
              progress: () => true,
              sendBefore: () => {
                scrollBottom();
              }
            }).then(() => {
              scrollBottom();
            }).catch(() => {
              scrollBottom();
              uni.showToast({
                icon: "error",
                title: t$2("sendVideoFailedText")
              });
            });
          },
          /** 没有开启权限时，提示开启权限 */
          complete: handleNoPermission
        });
      };
      const handleSendAudioMsg = (filePath, duration) => {
        const audioMsg = uni.$UIKitNIM.V2NIMMessageCreator.createAudioMessage(filePath);
        uni.$UIKitStore.msgStore.sendMessageActive({
          msg: audioMsg,
          conversationId,
          progress: () => true,
          sendBefore: (msg) => {
            scrollBottom();
            uni.$UIKitStore.msgStore.addMsg(msg.conversationId, [
              {
                ...msg,
                //@ts-ignore
                attachment: {
                  duration
                }
              }
            ]);
          }
        }).then(() => {
          scrollBottom();
        }).catch(() => {
          uni.showToast({
            icon: "error",
            title: t$2("sendAudioFailedText")
          });
          scrollBottom();
        });
      };
      const handleSetting = () => {
        uni.hideKeyboard();
        if (props.conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) {
          customNavigateTo({
            url: `/pages/Chat/message/p2p-set?id=${props.to}`
          });
        } else if (props.conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
          customNavigateTo({
            url: `/pages/Group/group-set/index?id=${props.to}`
          });
        }
      };
      let teamWatch = () => {
      };
      const showKeyboard = () => {
        isFocus.value = true;
      };
      vue.onMounted(() => {
        teamWatch = autorun(() => {
          if (props.conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
            const _team = uni.$UIKitStore.teamStore.teams.get(props.to);
            teamMembers.value = uni.$UIKitStore.teamMemberStore.getTeamMember(
              props.to
            );
            const myUser = uni.$UIKitStore.userStore.myUserInfo;
            isGroupOwner.value = (_team == null ? void 0 : _team.ownerAccountId) == myUser.accountId;
            isGroupManager.value = teamMembers.value.filter(
              (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
            ).some((member) => member.accountId === (myUser ? myUser.accountId : ""));
            team.value = _team;
            if (_team) {
              teamMute.value = _team.chatBannedMode;
            }
            updateTeamMute();
          }
        });
        uni.$on(events.ON_REEDIT_MSG, (msg) => {
          var _a2;
          const _replyMsg = (_a2 = props.replyMsgsMap) == null ? void 0 : _a2[msg.messageClientId];
          if (_replyMsg == null ? void 0 : _replyMsg.messageClientId) {
            _replyMsg && uni.$UIKitStore.msgStore.replyMsgActive(_replyMsg);
            replyMsg.value = _replyMsg;
            isReplyMsg.value = true;
          }
          if (msg.serverExtension) {
            const extObj = JSON.parse(msg.serverExtension);
            const yxAitMsg = extObj.yxAitMsg;
            if (yxAitMsg) {
              const _mentionedMembers = [];
              Object.keys(yxAitMsg).forEach((key) => {
                if (key == AT_ALL_ACCOUNT$1) {
                  _mentionedMembers.push({
                    accountId: key,
                    appellation: "所有人"
                  });
                } else {
                  _mentionedMembers.push({
                    accountId: key,
                    appellation: uni.$UIKitStore.uiStore.getAppellation({
                      account: key,
                      teamId: props.to,
                      ignoreAlias: true
                    })
                  });
                }
              });
              selectedAtMembers.value = _mentionedMembers;
            }
          }
          inputText.value = (msg == null ? void 0 : msg.oldText) || "";
          if (!isHarmonyOs) {
            showKeyboard();
          }
        });
        uni.$on(events.REPLY_MSG, (msg) => {
          isReplyMsg.value = true;
          replyMsg.value = msg;
          if (!isHarmonyOs) {
            showKeyboard();
          }
        });
        uni.$on(events.AIT_TEAM_MEMBER, (member) => {
          selectedAtMembers.value = [
            ...selectedAtMembers.value.filter(
              (item) => item.accountId !== member.accountId
            ),
            member
          ];
          const newInputText = inputText.value + "@" + member.appellation + " ";
          inputText.value = newInputText;
        });
        uni.$on(events.CLOSE_PANEL, () => {
          emojiVisible.value = false;
          extVisible.value = false;
          audioPanelVisible.value = false;
          sendMoreVisible.value = false;
        });
        uni.$on(events.HANDLE_AIT_MEMBER, (member) => {
          handleMentionItemClick(member);
        });
        uni.$on(events.CLOSE_AIT_POPUP, () => {
          closePopup();
        });
        uni.$on(events.EMOJI_CLICK, (emoji) => {
          handleEmoji(emoji);
        });
        uni.$on(events.EMOJI_DELETE, () => {
          handleEmojiDelete();
        });
        uni.$on(events.EMOJI_SEND, () => {
          emojiVisible.value = false;
          extVisible.value = false;
          handleSendTextMsg();
        });
        if (uni.onKeyboardHeightChange) {
          uni.onKeyboardHeightChange((res) => {
            const isAndroidWxapp = uni.getSystemInfoSync().platform == "android" && isWxApp;
            if (res.height === 0 && isAndroidApp || res.height === 0 && isAndroidWxapp) {
              emojiVisible.value = false;
              extVisible.value = false;
            }
          });
        }
      });
      const onAtMembersExtHandler = () => {
        let ext;
        if (selectedAtMembers.value.length) {
          selectedAtMembers.value.filter((member) => {
            if (!allowAtAll.value && member.accountId === AT_ALL_ACCOUNT$1) {
              return false;
            }
            return true;
          }).forEach((member) => {
            var _a2, _b;
            const substr = `@${member.appellation}`;
            const positions = [];
            let pos = (_a2 = inputText.value) == null ? void 0 : _a2.indexOf(substr);
            while (pos !== -1) {
              positions.push(pos);
              pos = (_b = inputText.value) == null ? void 0 : _b.indexOf(substr, pos + 1);
            }
            if (positions.length) {
              if (!ext) {
                ext = {
                  yxAitMsg: {
                    [member.accountId]: {
                      text: substr,
                      segments: []
                    }
                  }
                };
              } else {
                ext.yxAitMsg[member.accountId] = {
                  text: substr,
                  segments: []
                };
              }
              positions.forEach((position) => {
                const start = position;
                (ext == null ? void 0 : ext.yxAitMsg)[member.accountId].segments.push({
                  start,
                  end: start + substr.length,
                  broken: false
                });
              });
            }
          });
        }
        return ext;
      };
      vue.onUnmounted(() => {
        uni.$off(events.REPLY_MSG);
        uni.$off(events.ON_REEDIT_MSG);
        uni.$off(events.REPLY_MSG);
        uni.$off(events.AIT_TEAM_MEMBER);
        uni.$off(events.CLOSE_PANEL);
        uni.$off(events.HANDLE_AIT_MEMBER);
        uni.$off(events.CLOSE_AIT_POPUP);
        uni.$off(events.EMOJI_CLICK);
        uni.$off(events.EMOJI_DELETE);
        uni.$off(events.EMOJI_SEND);
        removeReplyMsg();
        teamWatch();
      });
      const __returned__ = { props, conversationId, inputText, extVisible, audioPanelVisible, sendMoreVisible, emojiVisible, inputVisible, handleCall, showEmojiInput, isReplyMsg, isFocus, replyMsg, ctx, popupRef, selectedAtMembers, team, teamMembers, teamMute, isGroupOwner, isGroupManager, isTeamMute, allowAtAll, updateTeamMute, onPopupChange, handleMentionItemClick, closePopup, onClickEmojiInput, handleInputBlur, scrollBottom, handleInput, handleSendTextMsg, handleSendFileMsg, removeReplyMsg, handleEmojiVisible, handleSendMoreVisible, handleEmoji, handleEmojiDelete, handleAudioVisible, handleSendImageMsg, handleSendVideoMsg, handleSendAudioMsg, handleSetting, get teamWatch() {
        return teamWatch;
      }, set teamWatch(v2) {
        teamWatch = v2;
      }, showKeyboard, onAtMembersExtHandler, Face, VoicePanel, Icon, get REPLY_MSG_TYPE_MAP() {
        return REPLY_MSG_TYPE_MAP;
      }, get t() {
        return t$2;
      }, MessageOneLine, get isWeb() {
        return isWeb;
      }, get isAndroidOrIosApp() {
        return isAndroidOrIosApp;
      }, get isHarmonyOs() {
        return isHarmonyOs;
      }, UniPopup, MentionMemberList, Appellation, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "input-root" }, [
      vue.createElementVNode("div", { class: "msg-input-wrapper" }, [
        vue.createCommentVNode(" 当回复他人消息时，输入框上方需要展示被回复消息相关内容 "),
        $setup.isReplyMsg ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "reply-message-wrapper"
        }, [
          vue.createElementVNode("div", {
            class: "reply-message-close",
            onClick: $setup.removeReplyMsg
          }, [
            vue.createVNode($setup["Icon"], {
              color: "#929299",
              iconStyle: { fontWeight: "200" },
              size: 13,
              type: "icon-guanbi"
            })
          ]),
          vue.createElementVNode("div", { class: "reply-line" }, "｜"),
          vue.createElementVNode(
            "div",
            { class: "reply-title" },
            vue.toDisplayString($setup.t("replyText")),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "reply-to" }, [
            vue.createVNode($setup["Appellation"], {
              account: $setup.replyMsg && $setup.replyMsg.senderId,
              "team-id": $setup.props.conversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $props.to : "",
              color: "#929299",
              fontSize: 13
            }, null, 8, ["account", "team-id"])
          ]),
          vue.createElementVNode("div", { class: "reply-to-colon" }, ":"),
          $setup.replyMsg && $setup.replyMsg.messageClientId === "noFind" ? (vue.openBlock(), vue.createElementBlock(
            "div",
            {
              key: 0,
              class: "reply-noFind"
            },
            vue.toDisplayString($setup.t("replyNotFindText")),
            1
            /* TEXT */
          )) : (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: "reply-message"
          }, [
            $setup.replyMsg && $setup.replyMsg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createBlock($setup["MessageOneLine"], {
              key: 0,
              text: $setup.replyMsg && $setup.replyMsg.text
            }, null, 8, ["text"])) : (vue.openBlock(), vue.createElementBlock(
              "div",
              { key: 1 },
              vue.toDisplayString("[" + $setup.REPLY_MSG_TYPE_MAP[$setup.replyMsg && $setup.replyMsg.messageType] + "]"),
              1
              /* TEXT */
            ))
          ]))
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 输入框上按钮组 "),
        vue.createElementVNode("div", { class: "msg-button-group" }, [
          !($setup.isWeb || $setup.isHarmonyOs) ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            onClick: $setup.handleAudioVisible,
            class: "msg-input-button"
          }, [
            $setup.audioPanelVisible ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
              size: 20,
              type: "audio-btn-selected",
              key: "audio-btn-selected"
            })) : (vue.openBlock(), vue.createBlock($setup["Icon"], {
              size: 20,
              type: "icon-audio",
              key: "icon-audio"
            }))
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", { class: "msg-input-button" }, [
            vue.createVNode($setup["Icon"], {
              onClick: $setup.handleEmojiVisible,
              size: 20,
              type: "icon-biaoqing"
            })
          ]),
          vue.createElementVNode("div", { class: "msg-input-button" }, [
            vue.createElementVNode("div", null, [
              vue.createVNode($setup["Icon"], {
                onClick: $setup.handleSendImageMsg,
                size: 20,
                type: "icon-tupian"
              })
            ])
          ]),
          vue.createElementVNode("div", { class: "msg-input-button" }, [
            vue.createVNode($setup["Icon"], {
              onClick: $setup.handleSendMoreVisible,
              type: "send-more",
              size: 20
            })
          ]),
          vue.createElementVNode("div", { class: "msg-input-button" }, [
            vue.createVNode($setup["Icon"], {
              onClick: $setup.handleSetting,
              type: "icon-shezhi",
              size: 20
            })
          ])
        ]),
        $setup.inputVisible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: "msg-input"
        }, [
          vue.createCommentVNode(" 当从表情面板切换到文字输入时，直接唤起键盘，会导致input框滚动消失，故此处需要用EmojiInput兼容下，保证先隐藏表情面板，再弹出键盘 "),
          vue.withDirectives(vue.createElementVNode(
            "div",
            {
              onClick: $setup.onClickEmojiInput,
              class: "input-emoji"
            },
            [
              $setup.inputText ? (vue.openBlock(), vue.createElementBlock(
                "div",
                {
                  key: 0,
                  class: "input-text"
                },
                vue.toDisplayString($setup.inputText),
                1
                /* TEXT */
              )) : (vue.openBlock(), vue.createElementBlock(
                "div",
                {
                  key: 1,
                  class: "input-placeholder"
                },
                vue.toDisplayString($setup.isTeamMute ? $setup.t("teamMutePlaceholder") : $setup.t("chatInputPlaceHolder")),
                1
                /* TEXT */
              ))
            ],
            512
            /* NEED_PATCH */
          ), [
            [vue.vShow, $setup.showEmojiInput]
          ]),
          vue.withDirectives(vue.createElementVNode("input", {
            focus: $setup.isFocus,
            class: "msg-input-input",
            maxlength: -1,
            placeholder: $setup.isTeamMute ? $setup.t("teamMutePlaceholder") : $setup.t("chatInputPlaceHolder"),
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.inputText = $event),
            type: "text",
            disabled: $setup.isTeamMute,
            "confirm-hold": true,
            "cursor-spacing": "20",
            "adjust-position": "true",
            "confirm-type": "send",
            onConfirm: $setup.handleSendTextMsg,
            onBlur: $setup.handleInputBlur,
            onInput: $setup.handleInput,
            id: "msg-input"
          }, null, 40, ["focus", "placeholder", "disabled"]), [
            [vue.vShow, !$setup.showEmojiInput],
            [vue.vModelText, $setup.inputText]
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 表情面板 "),
        $setup.emojiVisible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 2,
          class: "msg-emoji-panel",
          onClick: vue.withModifiers(() => {
          }, ["stop"])
        }, [
          vue.createVNode($setup["Face"], {
            onEmojiClick: $setup.handleEmoji,
            onEmojiDelete: $setup.handleEmojiDelete,
            onEmojiSend: $setup.handleSendTextMsg
          })
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 发送语音消息面板 "),
        $setup.audioPanelVisible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 3,
          class: "msg-audio-panel",
          onClick: vue.withModifiers(() => {
          }, ["stop"])
        }, [
          vue.createVNode($setup["VoicePanel"], { onHandleSendAudioMsg: $setup.handleSendAudioMsg })
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 发送更多面板 "),
        $setup.sendMoreVisible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 4,
          class: "send-more-panel",
          onClick: vue.withModifiers(() => {
          }, ["stop"])
        }, [
          vue.createElementVNode("div", { class: "send-more-panel-item-wrapper" }, [
            vue.createElementVNode("div", {
              class: "send-more-panel-item",
              onClick: _cache[1] || (_cache[1] = (event) => $setup.handleSendVideoMsg("camera", event))
            }, [
              vue.createVNode($setup["Icon"], {
                type: "icon-paishe",
                size: 30
              })
            ]),
            vue.createElementVNode(
              "div",
              { class: "icon-text" },
              vue.toDisplayString($setup.t("shootText")),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("div", { class: "send-more-panel-item-wrapper" }, [
            vue.createElementVNode("div", {
              class: "send-more-panel-item",
              onClick: _cache[2] || (_cache[2] = (event) => $setup.handleSendVideoMsg("album", event))
            }, [
              vue.createVNode($setup["Icon"], {
                type: "icon-shipin2",
                size: 30
              })
            ]),
            vue.createElementVNode(
              "div",
              { class: "icon-text" },
              vue.toDisplayString($setup.t("albumText")),
              1
              /* TEXT */
            )
          ]),
          vue.createCommentVNode(" 音频呼叫 "),
          $setup.isAndroidOrIosApp && $setup.props.conversationType !== $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: "send-more-panel-item-wrapper"
          }, [
            vue.createElementVNode("div", {
              class: "send-more-panel-item",
              onClick: _cache[3] || (_cache[3] = ($event) => $setup.handleCall(1))
            }, [
              vue.createVNode($setup["Icon"], {
                type: "icon-audio-call",
                size: 30
              })
            ]),
            vue.createElementVNode(
              "div",
              { class: "icon-text" },
              vue.toDisplayString($setup.t("voiceCallText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 视频呼叫 "),
          $setup.isAndroidOrIosApp && $setup.props.conversationType !== $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: "send-more-panel-item-wrapper"
          }, [
            vue.createElementVNode("div", {
              class: "send-more-panel-item",
              onClick: _cache[4] || (_cache[4] = () => $setup.handleCall(2))
            }, [
              vue.createVNode($setup["Icon"], {
                type: "icon-video-call",
                size: 30
              })
            ]),
            vue.createElementVNode(
              "div",
              { class: "icon-text" },
              vue.toDisplayString($setup.t("videoCallText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          $setup.isWeb ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 2,
            class: "send-more-panel-item-wrapper",
            onClick: $setup.handleSendFileMsg
          }, [
            vue.createElementVNode("div", { class: "send-more-panel-item" }, [
              vue.createVNode($setup["Icon"], {
                type: "icon-file",
                size: 30
              })
            ]),
            vue.createElementVNode(
              "div",
              { class: "icon-text" },
              vue.toDisplayString($setup.t("fileText")),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" @消息相关 popup "),
      vue.createVNode(
        $setup["UniPopup"],
        {
          ref: "popupRef",
          "background-color": "#ffffff",
          type: "bottom",
          "mask-background-color": "rgba(0,0,0,0.4)",
          onChange: $setup.onPopupChange
        },
        {
          default: vue.withCtx(() => [
            vue.createVNode($setup["MentionMemberList"], { "team-id": $props.to }, null, 8, ["team-id"])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const MessageInput = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$q], ["__scopeId", "data-v-8bbf21ad"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-input.vue"]]);
  const _sfc_main$q = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      trackInit("ChatUIKit");
      const title = vue.ref("");
      const conversationId = uni.$UIKitStore.uiStore.selectedConversation;
      const conversationType = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationType(
        conversationId
      );
      const to2 = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationTargetId(
        conversationId
      );
      const isH5 = getUniPlatform() === "web";
      const moveThrough = vue.ref(false);
      const backToConversation = () => {
        customSwitchTab({
          url: "/pages/Conversation/index"
        });
      };
      const teamManagerVisible = uni.$UIKitStore.localOptions.teamMsgReceiptVisible;
      const p2pMsgReceiptVisible = uni.$UIKitStore.localOptions.p2pMsgReceiptVisible;
      let isMounted = false;
      const loadingMore = vue.ref(false);
      const noMore = vue.ref(false);
      const msgs = vue.ref([]);
      const replyMsgsMap = vue.ref();
      const onTeamDismissed = (data2) => {
        if (data2.teamId === to2) {
          uni.showModal({
            content: t$2("onDismissTeamText"),
            showCancel: false,
            success(data22) {
              if (data22.confirm) {
                backToConversation();
              }
            }
          });
        }
      };
      const onTeamLeft = (data2) => {
        uni.showToast({
          title: t$2("onRemoveTeamText"),
          icon: "success",
          duration: 1e3
        }).then(() => {
          backToConversation();
        });
      };
      const onReceiveMessages = (msgs2) => {
        var _a2;
        const routes = getCurrentPages();
        const curRoute = routes[routes.length - 1].route;
        if (msgs2.length && !((_a2 = msgs2[0]) == null ? void 0 : _a2.isSelf) && msgs2[0].conversationId == conversationId && (curRoute == null ? void 0 : curRoute.includes("Chat/index"))) {
          handleMsgReceipt(msgs2);
        }
        uni.$emit(events.ON_SCROLL_BOTTOM, msgs2);
      };
      const handleMsgReceipt = (msg) => {
        if (msg[0].conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P && p2pMsgReceiptVisible) {
          uni.$UIKitStore.msgStore.sendMsgReceiptActive(msg[0]);
        } else if (msg[0].conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM && teamManagerVisible) {
          uni.$UIKitStore.msgStore.sendTeamMsgReceiptActive(msg);
        }
      };
      const handleHistoryMsgReceipt = (msgs2) => {
        if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P && p2pMsgReceiptVisible) {
          const myUserAccountId = uni.$UIKitNIM.V2NIMLoginService.getLoginUser();
          const othersMsgs = msgs2.filter(
            (item) => (
              // @ts-ignore
              !["beReCallMsg", "reCallMsg"].includes(item.recallType || "")
            )
          ).filter((item) => item.senderId !== myUserAccountId);
          if (othersMsgs.length > 0) {
            uni.$UIKitStore.msgStore.sendMsgReceiptActive(othersMsgs == null ? void 0 : othersMsgs[0]);
          }
        } else if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM && teamManagerVisible) {
          const myUserAccountId = uni.$UIKitNIM.V2NIMLoginService.getLoginUser();
          const myMsgs = msgs2.filter(
            (item) => (
              // @ts-ignore
              !["beReCallMsg", "reCallMsg"].includes(item.recallType || "")
            )
          ).filter((item) => item.senderId === myUserAccountId);
          uni.$UIKitStore.msgStore.getTeamMsgReadsActive(myMsgs, conversationId);
          const othersMsgs = msgs2.filter(
            (item) => (
              // @ts-ignore
              !["beReCallMsg", "reCallMsg"].includes(item.recallType || "")
            )
          ).filter((item) => item.senderId !== myUserAccountId);
          if (othersMsgs.length > 0 && othersMsgs.length < 50) {
            uni.$UIKitStore.msgStore.sendTeamMsgReceiptActive(othersMsgs);
          }
        }
      };
      const getHistory = async (endTime, lastMsgId) => {
        try {
          if (noMore.value) {
            return [];
          }
          if (loadingMore.value) {
            return [];
          }
          loadingMore.value = true;
          if (conversationId) {
            const historyMsgs = await uni.$UIKitStore.msgStore.getHistoryMsgActive({
              conversationId,
              endTime,
              lastMsgId,
              limit: HISTORY_LIMIT$1
            });
            await uni.$UIKitStore.msgStore.getPinnedMessageListActive(conversationId);
            loadingMore.value = false;
            if (historyMsgs.length < HISTORY_LIMIT$1) {
              noMore.value = true;
            }
            handleHistoryMsgReceipt(historyMsgs);
            return historyMsgs;
          }
        } catch (error) {
          loadingMore.value = false;
          throw error;
        }
      };
      const loadMoreMsgs = (lastMsg) => {
        getHistory(lastMsg.createTime, lastMsg.messageServerId).then(
          (res) => {
            if (res == null ? void 0 : res[0])
              ;
          }
        );
      };
      const conversationTypeWatch = autorun(() => {
        if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) {
          title.value = uni.$UIKitStore.uiStore.getAppellation({ account: to2 });
        } else if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
          const team = uni.$UIKitStore.teamStore.teams.get(to2);
          const subTitle = `(${(team == null ? void 0 : team.memberCount) || 0})`;
          title.value = ((team == null ? void 0 : team.name) || "") + subTitle;
        }
      });
      const connectedWatch = autorun(() => {
        if (uni.$UIKitStore.connectStore.connectStatus === Ma.V2NIMConnectStatus.V2NIM_CONNECT_STATUS_CONNECTED) {
          if (uni.$UIKitStore.connectStore.loginStatus == Ma.V2NIMLoginStatus.V2NIM_LOGIN_STATUS_LOGINED) {
            getHistory(Date.now()).then(() => {
              if (!isMounted) {
                uni.$emit(events.ON_SCROLL_BOTTOM);
                isMounted = true;
              }
            });
          }
        }
      });
      const msgsWatch = autorun(() => {
        const messages = [...uni.$UIKitStore.msgStore.getMsg(conversationId)];
        if (messages.length !== 0) {
          msgs.value = messages;
        }
        if (messages.length !== 0) {
          const _replyMsgsMap = {};
          const reqMsgs = [];
          const messageClientIds = {};
          msgs.value.forEach((msg) => {
            if (msg.serverExtension) {
              try {
                const { yxReplyMsg } = JSON.parse(msg.serverExtension);
                if (yxReplyMsg) {
                  const replyMsg = msgs.value.find(
                    (item) => item.messageClientId === yxReplyMsg.idClient
                  );
                  if (replyMsg) {
                    _replyMsgsMap[msg.messageClientId] = replyMsg;
                  } else {
                    _replyMsgsMap[msg.messageClientId] = { messageClientId: "noFind" };
                    const {
                      scene,
                      from,
                      to: to22,
                      idServer,
                      messageClientId,
                      time,
                      receiverId
                    } = yxReplyMsg;
                    if (scene && from && to22 && idServer && messageClientId && time && receiverId) {
                      reqMsgs.push({
                        scene,
                        from,
                        to: to22,
                        idServer,
                        messageClientId,
                        time,
                        receiverId
                      });
                      messageClientIds[idServer] = msg.messageClientId;
                    }
                  }
                }
              } catch {
              }
            }
          });
          if (reqMsgs.length > 0) {
            uni.$UIKitNIM.V2NIMMessageService.getMessageListByRefers(
              //@ts-ignore
              reqMsgs.map((item) => ({
                senderId: item.from,
                receiverId: item.receiverId,
                messageClientId: item.messageClientId,
                messageServerId: item.idServer,
                createTime: item.time,
                conversationType: item.scene,
                conversationId: item.to
              }))
            ).then((res) => {
              if ((res == null ? void 0 : res.length) > 0) {
                res.forEach((item) => {
                  if (item.messageServerId) {
                    _replyMsgsMap[messageClientIds[item.messageServerId]] = item;
                  }
                });
              }
              replyMsgsMap.value = { ..._replyMsgsMap };
            }).catch(() => {
              replyMsgsMap.value = { ..._replyMsgsMap };
            });
          } else {
            replyMsgsMap.value = { ..._replyMsgsMap };
          }
        }
        if (messages.length < 6) {
          uni.hideKeyboard();
        }
      });
      const setNavTitle = () => {
        if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P) {
          title.value = uni.$UIKitStore.uiStore.getAppellation({ account: to2 });
        } else if (conversationType === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
          const team = uni.$UIKitStore.teamStore.teams.get(to2);
          const subTitle = `(${(team == null ? void 0 : team.memberCount) || 0})`;
          title.value = ((team == null ? void 0 : team.name) || "") + subTitle;
        }
      };
      onShow(function() {
        setNavTitle();
        scrollToBottom();
        if (msgs.value.length) {
          const _msgs = [...msgs.value].reverse();
          handleHistoryMsgReceipt(_msgs);
        }
      });
      const scrollToBottom = () => {
        const timer = setTimeout(() => {
          uni.$emit(events.ON_SCROLL_BOTTOM);
          clearTimeout(timer);
        }, 300);
      };
      onLoad(() => {
        uni.$on(events.HANDLE_MOVE_THROUGH, (flag) => {
          moveThrough.value = flag;
        });
      });
      vue.onMounted(() => {
        setNavTitle();
        scrollToBottom();
        uni.$UIKitNIM.V2NIMMessageService.on(
          "onReceiveMessages",
          //@ts-ignore
          onReceiveMessages
        );
        uni.$UIKitNIM.V2NIMTeamService.on("onTeamDismissed", onTeamDismissed);
        uni.$UIKitNIM.V2NIMTeamService.on("onTeamLeft", onTeamLeft);
        uni.$on(events.GET_HISTORY_MSG, loadMoreMsgs);
      });
      vue.onUnmounted(() => {
        uni.$UIKitNIM.V2NIMTeamService.off("onTeamDismissed", onTeamDismissed);
        uni.$UIKitNIM.V2NIMTeamService.off("onTeamLeft", onTeamLeft);
        uni.$UIKitNIM.V2NIMMessageService.off(
          "onReceiveMessages",
          //@ts-ignore
          onReceiveMessages
        );
        uni.$off(events.GET_HISTORY_MSG, loadMoreMsgs);
        connectedWatch();
        msgsWatch();
        conversationTypeWatch();
      });
      onHide(() => {
        uni.hideKeyboard();
      });
      onUnload(() => {
        uni.$off(events.CONFIRM_FORWARD_MSG);
        uni.$off(events.CANCEL_FORWARD_MSG);
      });
      const __returned__ = { title, conversationId, conversationType, to: to2, isH5, moveThrough, backToConversation, teamManagerVisible, p2pMsgReceiptVisible, get isMounted() {
        return isMounted;
      }, set isMounted(v2) {
        isMounted = v2;
      }, loadingMore, noMore, msgs, replyMsgsMap, onTeamDismissed, onTeamLeft, onReceiveMessages, handleMsgReceipt, handleHistoryMsgReceipt, getHistory, loadMoreMsgs, conversationTypeWatch, connectedWatch, msgsWatch, setNavTitle, scrollToBottom, NetworkAlert, NavBar, Icon, MessageList, MessageInput };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_page_meta = resolveEasycom(vue.resolveDynamicComponent("page-meta"), __easycom_0);
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(" 处理滚动穿透  此为官方推荐做法 https://uniapp.dcloud.net.cn/component/uniui/uni-popup.html#%E4%BB%8B%E7%BB%8D "),
        vue.createVNode(_component_page_meta, {
          "page-style": "overflow:" + ($setup.moveThrough ? "hidden" : "visible")
        }, null, 8, ["page-style"]),
        vue.createElementVNode(
          "div",
          {
            class: vue.normalizeClass($setup.isH5 ? "msg-page-wrapper-h5" : "msg-page-wrapper")
          },
          [
            vue.createVNode($setup["NavBar"], {
              title: $setup.title,
              showLeft: true
            }, {
              left: vue.withCtx(() => [
                vue.createElementVNode("div", { onClick: $setup.backToConversation }, [
                  vue.createVNode($setup["Icon"], {
                    type: "icon-zuojiantou",
                    size: 22
                  })
                ])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["title"]),
            vue.createElementVNode("div", { class: "msg-alert" }, [
              vue.createVNode($setup["NetworkAlert"])
            ]),
            vue.createElementVNode(
              "div",
              {
                class: vue.normalizeClass($setup.isH5 ? "msg-wrapper-h5" : "msg-wrapper")
              },
              [
                vue.createVNode($setup["MessageList"], {
                  conversationType: $setup.conversationType,
                  to: $setup.to,
                  msgs: $setup.msgs,
                  "loading-more": $setup.loadingMore,
                  "no-more": $setup.noMore,
                  "reply-msgs-map": $setup.replyMsgsMap
                }, null, 8, ["conversationType", "to", "msgs", "loading-more", "no-more", "reply-msgs-map"])
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode("div", { style: { "height": "'auto'" } }, [
              vue.createVNode($setup["MessageInput"], {
                "reply-msgs-map": $setup.replyMsgsMap,
                "conversation-type": $setup.conversationType,
                to: $setup.to
              }, null, 8, ["reply-msgs-map", "conversation-type", "to"])
            ])
          ],
          2
          /* CLASS */
        )
      ],
      64
      /* STABLE_FRAGMENT */
    );
  }
  const PagesChatIndex = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$p], ["__scopeId", "data-v-c868fe04"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/index.vue"]]);
  const _sfc_main$p = /* @__PURE__ */ vue.defineComponent({
    __name: "video-play",
    setup(__props, { expose: __expose }) {
      __expose();
      const videoUrl = vue.ref();
      const show = vue.ref(false);
      onLoad((option) => {
        videoUrl.value = decodeURIComponent(option.videoUrl);
        show.value = true;
      });
      onReady(() => {
        show.value = true;
      });
      const __returned__ = { videoUrl, show, NavBar, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "video-wrapper" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("videoPlayText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "video-box" }, [
        $setup.show ? (vue.openBlock(), vue.createElementBlock("video", {
          key: 0,
          class: "video",
          src: $setup.videoUrl,
          id: "videoEle",
          controls: "",
          autoplay: ""
        }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
      ])
    ]);
  }
  const PagesChatVideoPlay = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$o], ["__scopeId", "data-v-327931a6"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/video-play.vue"]]);
  const _sfc_main$o = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const groupMembers = vue.ref([]);
      const team = vue.ref();
      let teamId = "";
      const goAddMember = () => {
        customNavigateTo({
          url: `/pages/Group/group-add/index?teamId=${teamId}`
        });
      };
      const removeTeamMember = (account) => {
        uni.showModal({
          title: t$2("confirmRemoveText"),
          content: t$2("removeMemberExplain"),
          confirmText: t$2("removeText"),
          success: (res) => {
            if (res.cancel)
              return;
            uni.$UIKitStore.teamMemberStore.removeTeamMemberActive({
              teamId,
              accounts: [account]
            }).then(() => {
              uni.showToast({
                title: t$2("removeSuccessText"),
                icon: "success"
              });
            }).catch((error) => {
              switch (error == null ? void 0 : error.code) {
                case 109306:
                  uni.showToast({
                    title: t$2("noPermission"),
                    icon: "error"
                  });
                  break;
                default:
                  uni.showToast({
                    title: t$2("removeFailText"),
                    icon: "error"
                  });
                  break;
              }
            });
          }
        });
      };
      const isGroupOwner = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return (team.value ? team.value.ownerAccountId : "") === (myUser ? myUser.accountId : "");
      });
      const isGroupManager = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return groupMembers.value.filter(
          (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
        ).some((member) => member.accountId === (myUser ? myUser.accountId : ""));
      });
      const isShowAddBtn = vue.computed(() => {
        var _a2;
        if (((_a2 = team.value) == null ? void 0 : _a2.inviteMode) === Ma.V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_ALL) {
          return true;
        }
        return isGroupOwner.value || isGroupManager.value;
      });
      const isShowRemoveBtn = (target) => {
        if (target.accountId === uni.$UIKitStore.userStore.myUserInfo.accountId) {
          return false;
        }
        if (isGroupOwner.value) {
          return true;
        }
        if (isGroupManager.value) {
          return target.memberRole !== Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER && target.memberRole !== Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER;
        }
        return false;
      };
      let uninstallGroupMembersWatch = () => {
      };
      onLoad((props) => {
        teamId = props ? props.teamId : "";
        uninstallGroupMembersWatch = autorun(() => {
          team.value = uni.$UIKitStore.teamStore.teams.get(teamId);
          const sortGroupMembers = (members) => {
            const owner = members.filter(
              (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER
            );
            const manager = members.filter(
              (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
            ).sort((a2, b2) => a2.joinTime - b2.joinTime);
            const other = members.filter(
              (item) => ![
                Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER,
                Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
              ].includes(item.memberRole)
            ).sort((a2, b2) => a2.joinTime - b2.joinTime);
            return [...owner, ...manager, ...other];
          };
          groupMembers.value = sortGroupMembers(
            uni.$UIKitStore.teamMemberStore.getTeamMember(teamId)
          );
        });
      });
      vue.onUnmounted(() => {
        uninstallGroupMembersWatch();
      });
      const __returned__ = { groupMembers, team, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, goAddMember, removeTeamMember, isGroupOwner, isGroupManager, isShowAddBtn, isShowRemoveBtn, get uninstallGroupMembersWatch() {
        return uninstallGroupMembersWatch;
      }, set uninstallGroupMembersWatch(v2) {
        uninstallGroupMembersWatch = v2;
      }, Avatar, NavBar: NavBar$1, get t() {
        return t$2;
      }, Appellation, Icon, Empty, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("teamMemberText")
      }, null, 8, ["title"]),
      $setup.isShowAddBtn ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "add-item",
        onClick: $setup.goAddMember
      }, [
        vue.createElementVNode(
          "span",
          { class: "add-item-label" },
          vue.toDisplayString($setup.t("addMemberText")),
          1
          /* TEXT */
        ),
        vue.createVNode($setup["Icon"], {
          color: "#999",
          type: "icon-jiantou"
        })
      ])) : vue.createCommentVNode("v-if", true),
      $setup.groupMembers.length ? (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.groupMembers, (item) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              class: "group-item",
              key: item.accountId
            }, [
              vue.createElementVNode("div", { class: "group-member" }, [
                vue.createVNode($setup["Avatar"], {
                  "goto-user-card": true,
                  account: item.accountId,
                  "team-id": item.teamId,
                  size: "32"
                }, null, 8, ["account", "team-id"]),
                vue.createVNode($setup["Appellation"], {
                  class: "user-name",
                  account: item.accountId,
                  "team-id": item.teamId,
                  "font-size": 14
                }, null, 8, ["account", "team-id"]),
                item.memberRole === $setup.V2NIMConst.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER ? (vue.openBlock(), vue.createElementBlock(
                  "div",
                  {
                    key: 0,
                    class: "user-tag"
                  },
                  vue.toDisplayString($setup.t("teamOwner")),
                  1
                  /* TEXT */
                )) : item.memberRole === $setup.V2NIMConst.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER ? (vue.openBlock(), vue.createElementBlock(
                  "div",
                  {
                    key: 1,
                    class: "user-tag"
                  },
                  vue.toDisplayString($setup.t("manager")),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true)
              ]),
              $setup.isShowRemoveBtn(item) ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: "btn-remove",
                onClick: () => {
                  $setup.removeTeamMember(item.accountId);
                }
              }, vue.toDisplayString($setup.t("removeText")), 9, ["onClick"])) : vue.createCommentVNode("v-if", true)
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : (vue.openBlock(), vue.createBlock($setup["Empty"], {
        key: 2,
        text: $setup.t("noTeamMember")
      }, null, 8, ["text"]))
    ]);
  }
  const PagesGroupGroupMemberIndex = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$n], ["__scopeId", "data-v-98cede24"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-member/index.vue"]]);
  const _sfc_main$n = /* @__PURE__ */ vue.defineComponent({
    __name: "PersonSelect",
    props: {
      personList: { type: Array, required: true },
      showBtn: { type: Boolean, required: false, default: true },
      btnText: { type: String, required: false, default: "" },
      radio: { type: Boolean, required: false, default: false },
      max: { type: Number, required: false, default: Number.MAX_SAFE_INTEGER }
    },
    emits: ["checkboxChange"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const selectAccount = vue.ref([]);
      vue.onMounted(() => {
        selectAccount.value = props.personList.filter((item) => item.checked).map((item) => item.accountId);
      });
      const $emit = __emit;
      const checkboxChange = (event) => {
        const value = event.detail.value;
        selectAccount.value = value;
        $emit("checkboxChange", value);
      };
      const onBtnClick = () => {
        uni.$emit(events.FRIEND_SELECT);
      };
      const __returned__ = { props, selectAccount, $emit, checkboxChange, onBtnClick, Avatar, Appellation, Empty, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return $props.personList.length > 0 ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 0,
      class: "friend-select-wrapper"
    }, [
      vue.createElementVNode("div", { class: "member-wrapper" }, [
        $props.radio ? (vue.openBlock(), vue.createElementBlock(
          "radio-group",
          {
            key: 0,
            onChange: $setup.checkboxChange
          },
          [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($props.personList, (item) => {
                return vue.openBlock(), vue.createElementBlock("div", {
                  class: "member-item",
                  key: item.accountId
                }, [
                  vue.createElementVNode("radio", {
                    class: "checkbox",
                    value: item.accountId,
                    checked: item.checked,
                    disabled: item.disabled || $setup.selectAccount.length >= $props.max && !$setup.selectAccount.includes(item.accountId)
                  }, null, 8, ["value", "checked", "disabled"]),
                  vue.createVNode($setup["Avatar"], {
                    class: "user-avatar",
                    size: "36",
                    account: item.accountId
                  }, null, 8, ["account"]),
                  vue.createElementVNode("div", { class: "user-name" }, [
                    vue.createVNode($setup["Appellation"], {
                      account: item.accountId,
                      teamId: item.teamId
                    }, null, 8, ["account", "teamId"])
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ],
          32
          /* NEED_HYDRATION */
        )) : (vue.openBlock(), vue.createElementBlock(
          "checkbox-group",
          {
            key: 1,
            onChange: $setup.checkboxChange
          },
          [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($props.personList, (item) => {
                return vue.openBlock(), vue.createElementBlock("div", {
                  class: "member-item",
                  key: item.accountId
                }, [
                  vue.createElementVNode("checkbox", {
                    class: "checkbox",
                    value: item.accountId,
                    checked: item.checked,
                    disabled: item.disabled || $setup.selectAccount.length >= $props.max && !$setup.selectAccount.includes(item.accountId)
                  }, null, 8, ["value", "checked", "disabled"]),
                  vue.createVNode($setup["Avatar"], {
                    class: "user-avatar",
                    size: "36",
                    account: item.accountId
                  }, null, 8, ["account"]),
                  vue.createElementVNode("div", { class: "user-name" }, [
                    vue.createVNode($setup["Appellation"], {
                      account: item.accountId,
                      teamId: item.teamId
                    }, null, 8, ["account", "teamId"])
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ],
          32
          /* NEED_HYDRATION */
        ))
      ]),
      !!$props.showBtn ? (vue.openBlock(), vue.createElementBlock(
        "div",
        {
          key: 0,
          style: { border: "1px solid #ccc" },
          onClick: $setup.onBtnClick,
          class: "ok-btn"
        },
        vue.toDisplayString($props.btnText || $setup.t("okText")),
        1
        /* TEXT */
      )) : vue.createCommentVNode("v-if", true)
    ])) : (vue.openBlock(), vue.createBlock($setup["Empty"], {
      key: 1,
      text: $setup.t("noFriendText")
    }, null, 8, ["text"]));
  }
  const PersonSelect = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$m], ["__scopeId", "data-v-082afac7"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/PersonSelect.vue"]]);
  const _sfc_main$m = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const friendList = vue.ref([]);
      const groupMembers = vue.computed(() => {
        return friendList.value.filter((item) => item.checked).map((item) => item.accountId);
      });
      let p2pConversationId = "";
      onLoad((options) => {
        p2pConversationId = options == null ? void 0 : options.p2pConversationId;
        const list = uni.$UIKitStore.uiStore.friends.filter(
          (item) => !uni.$UIKitStore.relationStore.blacklist.includes(item.accountId)
        );
        friendList.value = list.map((item) => ({ accountId: item.accountId })).filter((item) => {
          return item.accountId !== p2pConversationId;
        });
        uni.$on(events.FRIEND_SELECT, () => {
          createGroup();
        });
      });
      const checkboxChange = (selectList) => {
        friendList.value = friendList.value.map((item) => {
          return {
            accountId: item.accountId,
            checked: selectList.includes(item.accountId)
          };
        });
        if (selectList.length >= 200) {
          uni.showToast({
            title: t$2("maxSelectedText"),
            icon: "none"
          });
          return;
        }
      };
      const createGroupName = (groupMembers2) => {
        const _memberNickArr = [];
        groupMembers2.map((item) => {
          _memberNickArr.push(
            uni.$UIKitStore.uiStore.getAppellation({ account: item })
          );
        });
        const _ownerName = uni.$UIKitStore.userStore.myUserInfo.name || uni.$UIKitStore.userStore.myUserInfo.accountId;
        const _groupName = (_ownerName + "、" + _memberNickArr.join("、")).slice(
          0,
          30
        );
        return _groupName;
      };
      const createTeamAvatar = () => {
        const teamAvatarArr = [
          "https://yx-web-nosdn.netease.im/common/2425b4cc058e5788867d63c322feb7ac/groupAvatar1.png",
          "https://yx-web-nosdn.netease.im/common/62c45692c9771ab388d43fea1c9d2758/groupAvatar2.png",
          "https://yx-web-nosdn.netease.im/common/d1ed3c21d3f87a41568d17197760e663/groupAvatar3.png",
          "https://yx-web-nosdn.netease.im/common/e677d8551deb96723af2b40b821c766a/groupAvatar4.png",
          "https://yx-web-nosdn.netease.im/common/fd6c75bb6abca9c810d1292e66d5d87e/groupAvatar5.png"
        ];
        const _index = Math.floor(Math.random() * 5);
        return teamAvatarArr[_index];
      };
      let flag = false;
      const createGroup = async () => {
        var _a2, _b, _c;
        try {
          if (flag)
            return;
          if (((_a2 = groupMembers == null ? void 0 : groupMembers.value) == null ? void 0 : _a2.length) == 0) {
            uni.showToast({
              title: t$2("friendSelect"),
              icon: "none"
            });
            return;
          }
          if (((_b = groupMembers == null ? void 0 : groupMembers.value) == null ? void 0 : _b.length) > 200) {
            uni.showToast({
              title: t$2("maxSelectedText"),
              icon: "none"
            });
            return;
          }
          flag = true;
          const team = await ((_c = uni.$UIKitStore) == null ? void 0 : _c.teamStore.createTeamActive({
            // 这里需要判断是否是从单聊设置页跳转到创建群聊页面，如果是的话，需要将单聊的账号添加创建群的账号列表中
            accounts: p2pConversationId ? [...groupMembers.value, p2pConversationId] : [...groupMembers.value],
            avatar: createTeamAvatar(),
            name: createGroupName(groupMembers.value)
          }));
          uni.$UIKitStore.uiStore.selectConversation(
            uni.$UIKitNIM.V2NIMConversationIdUtil.teamConversationId(team.teamId)
          );
          customRedirectTo({
            url: "/pages/Chat/index"
          });
          uni.showToast({
            title: t$2("createTeamSuccessText"),
            icon: "success"
          });
        } catch (error) {
          uni.showToast({
            title: t$2("createTeamFailedText"),
            icon: "error"
          });
        } finally {
          flag = false;
        }
      };
      onUnload(() => {
        uni.$off(events.FRIEND_SELECT);
      });
      const __returned__ = { friendList, groupMembers, get p2pConversationId() {
        return p2pConversationId;
      }, set p2pConversationId(v2) {
        p2pConversationId = v2;
      }, checkboxChange, createGroupName, createTeamAvatar, get flag() {
        return flag;
      }, set flag(v2) {
        flag = v2;
      }, createGroup, PersonSelect, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("createTeamText")
      }, null, 8, ["title"]),
      vue.createVNode($setup["PersonSelect"], {
        personList: $setup.friendList,
        onCheckboxChange: $setup.checkboxChange,
        showBtn: true,
        btnText: $setup.t("createButtonText") + "(" + $setup.groupMembers.length + ")"
      }, null, 8, ["personList", "btnText"])
    ]);
  }
  const PagesGroupGroupCreateIndex = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$l], ["__scopeId", "data-v-754a540d"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-create/index.vue"]]);
  const _sfc_main$l = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const friendList = vue.ref([]);
      let teamId = "";
      let newTeamMember = [];
      onLoad((props) => {
        const _friendList = uni.$UIKitStore.uiStore.friends.filter(
          (item) => !uni.$UIKitStore.relationStore.blacklist.includes(item.accountId)
        );
        teamId = props ? props.teamId : "";
        const res = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId);
        const _teamMembers = res.map((item) => {
          return item.accountId;
        });
        friendList.value = _friendList.map((item) => {
          if (_teamMembers.includes(item.accountId)) {
            return { accountId: item.accountId, disabled: true };
          } else {
            return { accountId: item.accountId };
          }
        });
        uni.$on(events.FRIEND_SELECT, () => {
          addTeamMember();
        });
      });
      const checkboxChange = (selectList) => {
        newTeamMember = selectList;
      };
      const addTeamMember = debounce(() => {
        var _a2;
        if (newTeamMember.length > 200) {
          uni.showToast({
            title: t$2("maxSelectedText"),
            icon: "none"
          });
          return;
        }
        if (newTeamMember.length == 0) {
          uni.showToast({
            title: t$2("friendSelect"),
            icon: "none"
          });
          return;
        }
        (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.teamMemberStore.addTeamMemberActive({ teamId, accounts: newTeamMember }).then(async () => {
          uni.navigateBack({
            delta: 1
          });
        }).catch((err) => {
          switch (err ? err.code : "") {
            case 109306:
              uni.showToast({
                title: t$2("noPermission"),
                icon: "error"
              });
              break;
            default:
              uni.showToast({
                title: t$2("addTeamMemberFailText"),
                icon: "none"
              });
              break;
          }
        });
      }, 800);
      onUnload(() => {
        uni.$off(events.FRIEND_SELECT);
      });
      const __returned__ = { friendList, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, get newTeamMember() {
        return newTeamMember;
      }, set newTeamMember(v2) {
        newTeamMember = v2;
      }, checkboxChange, addTeamMember, PersonSelect, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("friendSelectText")
      }, null, 8, ["title"]),
      vue.createVNode($setup["PersonSelect"], {
        personList: $setup.friendList,
        onCheckboxChange: $setup.checkboxChange,
        showBtn: true,
        onBtnClick: $setup.addTeamMember
      }, null, 8, ["personList", "onBtnClick"])
    ]);
  }
  const PagesGroupGroupAddIndex = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$k], ["__scopeId", "data-v-75a27a9d"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-add/index.vue"]]);
  const _sfc_main$k = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const searchResState = vue.ref(
        "beginSearch"
      );
      const userInfo = vue.ref();
      const relation = vue.ref("stranger");
      const uninstallRelationWatch = autorun(() => {
        var _a2, _b;
        formatAppLog("log", "at pages/Friend/add-friend/index.vue:73", "friends: ", uni.$UIKitStore.uiStore.friends);
        if ((_a2 = userInfo.value) == null ? void 0 : _a2.accountId) {
          relation.value = uni.$UIKitStore.uiStore.getRelation(
            (_b = userInfo.value) == null ? void 0 : _b.accountId
          ).relation;
        }
      });
      const handleSearch = async (event) => {
        try {
          const user = await uni.$UIKitStore.userStore.getUserActive(
            event.detail.value
          );
          if (!user) {
            searchResState.value = "searchEmpty";
          } else {
            userInfo.value = user;
            relation.value = uni.$UIKitStore.uiStore.getRelation(
              user.accountId
            ).relation;
            searchResState.value = "searchResult";
          }
        } catch (error) {
          searchResState.value = "searchEmpty";
          uni.showToast({
            title: t$2("searchFailText"),
            icon: "error"
          });
        }
      };
      const applyFriend = async () => {
        var _a2;
        const account = (_a2 = userInfo.value) == null ? void 0 : _a2.accountId;
        if (account) {
          try {
            await uni.$UIKitStore.friendStore.addFriendActive(account, {
              addMode: Ma.V2NIMFriendAddMode.V2NIM_FRIEND_MODE_TYPE_APPLY,
              postscript: ""
            });
            await uni.$UIKitStore.relationStore.removeUserFromBlockListActive(account);
            uni.showToast({
              title: t$2("applyFriendSuccessText"),
              icon: "success"
            });
          } catch (error) {
            uni.showToast({
              title: t$2("applyFriendFailText"),
              icon: "error"
            });
          }
        }
      };
      const gotoChat = async () => {
        var _a2;
        const to2 = (_a2 = userInfo.value) == null ? void 0 : _a2.accountId;
        if (to2) {
          try {
            const conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.p2pConversationId(to2);
            await uni.$UIKitStore.uiStore.selectConversation(conversationId);
            customRedirectTo({
              url: "/pages/Chat/index"
            });
          } catch (error) {
            uni.showToast({
              title: t$2("gotoChatFailText"),
              icon: "error"
            });
          }
        }
      };
      const onInputValueChange = (event) => {
        if (event.detail.value === "") {
          searchResState.value = "beginSearch";
        }
      };
      vue.onUnmounted(() => {
        uninstallRelationWatch();
      });
      const __returned__ = { searchResState, userInfo, relation, uninstallRelationWatch, handleSearch, applyFriend, gotoChat, onInputValueChange, Avatar, NavBar: NavBar$1, Icon, Empty, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("addFriendText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "search-input-wrapper" }, [
        vue.createVNode($setup["Icon"], {
          iconClassName: "search-icon",
          size: 20,
          color: "#A6ADB6",
          type: "icon-sousuo"
        }),
        vue.createElementVNode("input", {
          class: "search-input",
          type: "text",
          onInput: $setup.onInputValueChange,
          onConfirm: $setup.handleSearch,
          "placeholder-class": "placeholder",
          "confirm-type": "search",
          placeholder: $setup.t("enterAccount")
        }, null, 40, ["placeholder"])
      ]),
      $setup.searchResState == "searchEmpty" ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
        key: 0,
        text: $setup.t("noExistUser")
      }, null, 8, ["text"])) : $setup.searchResState === "searchResult" ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: "user-wrapper"
      }, [
        vue.createVNode($setup["Avatar"], {
          class: "user-avatar",
          account: $setup.userInfo && $setup.userInfo.accountId || ""
        }, null, 8, ["account"]),
        vue.createElementVNode("div", { class: "user-info" }, [
          vue.createElementVNode(
            "div",
            { class: "user-nick" },
            vue.toDisplayString($setup.userInfo && $setup.userInfo.name || $setup.userInfo && $setup.userInfo.accountId),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "div",
            { class: "user-id" },
            vue.toDisplayString($setup.userInfo && $setup.userInfo.accountId),
            1
            /* TEXT */
          )
        ]),
        vue.createCommentVNode(" 如果是好友之间去聊天，如果不是好友，添加好友 "),
        $setup.relation !== "stranger" ? (vue.openBlock(), vue.createElementBlock(
          "button",
          {
            key: 0,
            class: "go-chat-button",
            type: "primary",
            onClick: $setup.gotoChat
          },
          vue.toDisplayString($setup.t("chatButtonText")),
          1
          /* TEXT */
        )) : (vue.openBlock(), vue.createElementBlock(
          "button",
          {
            key: 1,
            class: "go-chat-button",
            type: "primary",
            onClick: $setup.applyFriend
          },
          vue.toDisplayString($setup.t("addText")),
          1
          /* TEXT */
        ))
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesFriendAddFriendIndex = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$j], ["__scopeId", "data-v-7268466d"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Friend/add-friend/index.vue"]]);
  const _sfc_main$j = /* @__PURE__ */ vue.defineComponent({
    __name: "friend-info-edit",
    setup(__props, { expose: __expose }) {
      __expose();
      const alias = vue.ref();
      let accountId = "";
      const inputLengthTips = vue.computed(() => {
        var _a2;
        return `${alias.value ? (_a2 = alias.value) == null ? void 0 : _a2.length : 0}/${15}`;
      });
      const handleSave = () => {
        formatAppLog("log", "at pages/Friend/friend-info-edit.vue:36", alias.value);
        if (alias.value === null) {
          alias.value = "";
        }
        if (alias.value && !alias.value.trim()) {
          uni.showToast({
            title: t$2("aliasConfirmText"),
            icon: "error"
          });
          return;
        }
        uni.$UIKitStore.friendStore.setFriendInfoActive(accountId, {
          alias: alias.value
        }).then(() => {
          uni.showToast({
            title: t$2("updateTeamSuccessText"),
            icon: "success"
          });
          uni.navigateBack({});
        }).catch((err) => {
          uni.showToast({
            title: t$2("updateTeamFailedText"),
            icon: "error"
          });
        });
      };
      const handleInput = (value) => {
        alias.value = value;
      };
      onLoad((option) => {
        accountId = option == null ? void 0 : option.id;
        const friend = uni.$UIKitStore.friendStore.friends.get(accountId);
        alias.value = friend ? friend.alias : "";
      });
      const __returned__ = { alias, get accountId() {
        return accountId;
      }, set accountId(v2) {
        accountId = v2;
      }, inputLengthTips, handleSave, handleInput, NavBar: NavBar$1, FormInput, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "group-set-container" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("remarkText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "group-name-input-container" }, [
        vue.createVNode($setup["FormInput"], {
          "model-value": $setup.alias,
          "allow-clear": true,
          maxlength: 15,
          onInput: $setup.handleInput
        }, null, 8, ["model-value"]),
        vue.createElementVNode(
          "div",
          { class: "input-length" },
          vue.toDisplayString($setup.inputLengthTips),
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode(
        "div",
        {
          class: "ok-btn",
          onClick: $setup.handleSave
        },
        vue.toDisplayString($setup.t("saveText")),
        1
        /* TEXT */
      )
    ]);
  }
  const PagesFriendFriendInfoEdit = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__scopeId", "data-v-f9ece2c4"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Friend/friend-info-edit.vue"]]);
  const _sfc_main$i = /* @__PURE__ */ vue.defineComponent({
    __name: "UserCard",
    props: {
      account: { type: String, required: false, default: "" },
      nick: { type: String, required: false, default: "" }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const alias = vue.ref();
      let uninstallFriendsWatch = () => {
      };
      onLoad((props2) => {
        let account = props2 ? props2.account : "";
        uninstallFriendsWatch = autorun(() => {
          const friend = { ...uni.$UIKitStore.friendStore.friends.get(account) };
          alias.value = friend ? friend.alias : "";
        });
      });
      vue.onUnmounted(() => {
        uninstallFriendsWatch();
      });
      const copyAccount = () => {
        uni.setClipboardData({
          data: props.account,
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("copySuccessText"),
              icon: "none"
            });
          },
          fail: () => {
            uni.showToast({
              title: t$2("copyFailText"),
              icon: "none"
            });
          }
        });
      };
      const __returned__ = { props, alias, get uninstallFriendsWatch() {
        return uninstallFriendsWatch;
      }, set uninstallFriendsWatch(v2) {
        uninstallFriendsWatch = v2;
      }, copyAccount, Avatar, Icon, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "user-wrapper" }, [
      vue.createElementVNode("div", { class: "avatar-wrapper" }, [
        $setup.props.account ? (vue.openBlock(), vue.createBlock($setup["Avatar"], {
          key: 0,
          size: "70",
          account: $setup.props.account
        }, null, 8, ["account"])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createElementVNode("div", { class: "account-wrapper" }, [
        $setup.alias ? (vue.openBlock(), vue.createElementBlock("div", { key: 0 }, [
          vue.createElementVNode(
            "div",
            { class: "main" },
            vue.toDisplayString($setup.alias),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "div",
            { class: "deputy" },
            vue.toDisplayString($setup.t("name")) + ":" + vue.toDisplayString($props.nick || $props.account),
            1
            /* TEXT */
          )
        ])) : (vue.openBlock(), vue.createElementBlock(
          "div",
          {
            key: 1,
            class: "main"
          },
          vue.toDisplayString($props.nick || $props.account),
          1
          /* TEXT */
        )),
        vue.createElementVNode("div", { class: "deputy" }, [
          vue.createTextVNode(
            vue.toDisplayString($setup.t("accountText")) + ":" + vue.toDisplayString($setup.props.account) + " ",
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", {
            onClick: vue.withModifiers($setup.copyAccount, ["stop"])
          }, [
            vue.createVNode($setup["Icon"], {
              class: "copy-icon",
              type: "icon-fuzhi1",
              color: "#A6ADB6",
              size: 20
            })
          ])
        ])
      ])
    ]);
  }
  const UserCard = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__scopeId", "data-v-1913f9c0"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/UserCard.vue"]]);
  const _sfc_main$h = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      var _a2, _b;
      __expose();
      const enableV2CloudConversation = (_b = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.sdkOptions) == null ? void 0 : _b.enableV2CloudConversation;
      const userInfo = vue.ref();
      const relation = vue.ref("stranger");
      const isInBlacklist = vue.ref(false);
      let account = "";
      const handleAliasClick = () => {
        customNavigateTo({
          url: `/pages/Friend/friend-info-edit?id=${account}`
        });
      };
      let uninstallFriendWatch = () => {
      };
      let uninstallRelationWatch = () => {
      };
      onLoad((props) => {
        account = props ? props.account : "";
        uni.$UIKitStore.userStore.getUserForceActive(account).then((res) => {
          formatAppLog("log", "at pages/user-card/friend/index.vue:123", "getUserForceActive===============", res);
        });
        uninstallFriendWatch = autorun(() => {
          userInfo.value = uni.$UIKitStore.uiStore.getFriendWithUserNameCard(account);
        });
        uninstallRelationWatch = autorun(() => {
          const { relation: _relation, isInBlacklist: _isInBlacklist } = uni.$UIKitStore.uiStore.getRelation(account);
          relation.value = _relation;
          isInBlacklist.value = _isInBlacklist;
        });
      });
      const handleSwitchChange = async (e2) => {
        const isAdd = e2.detail.value;
        try {
          if (isAdd) {
            await uni.$UIKitStore.relationStore.addUserToBlockListActive(account);
          } else {
            await uni.$UIKitStore.relationStore.removeUserFromBlockListActive(account);
          }
        } catch (error) {
          uni.showToast({
            title: isAdd ? t$2("setBlackFailText") : t$2("removeBlackFailText"),
            icon: "error"
          });
        }
      };
      const deleteFriend = () => {
        uni.showModal({
          title: t$2("deleteFriendText"),
          content: t$2("deleteFriendConfirmText") + "“" + uni.$UIKitStore.uiStore.getAppellation({ account }) + "”?",
          success: (res) => {
            if (res.confirm) {
              uni.$UIKitStore.friendStore.deleteFriendActive(account).then(() => {
                uni.showToast({
                  title: t$2("deleteFriendSuccessText"),
                  icon: "success"
                });
              }).then(() => {
                var _a3, _b2;
                const conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.p2pConversationId(account);
                if (enableV2CloudConversation) {
                  return (_a3 = uni.$UIKitStore.conversationStore) == null ? void 0 : _a3.deleteConversationActive(
                    conversationId
                  );
                } else {
                  return (_b2 = uni.$UIKitStore.localConversationStore) == null ? void 0 : _b2.deleteConversationActive(
                    conversationId
                  );
                }
              }).catch(() => {
                uni.showToast({
                  title: t$2("deleteFriendFailText"),
                  icon: "error"
                });
              });
            } else if (res.cancel) {
              formatAppLog("log", "at pages/user-card/friend/index.vue:191", "用户点击取消");
            }
          }
        });
      };
      const addFriend = async () => {
        try {
          await uni.$UIKitStore.friendStore.addFriendActive(account, {
            addMode: Ma.V2NIMFriendAddMode.V2NIM_FRIEND_MODE_TYPE_APPLY,
            postscript: ""
          });
          await uni.$UIKitStore.relationStore.removeUserFromBlockListActive(account);
          uni.showToast({
            title: t$2("applyFriendSuccessText"),
            icon: "success"
          });
        } catch (error) {
          uni.showToast({
            title: t$2("applyFriendFailText"),
            icon: "error"
          });
        }
      };
      const gotoChat = async () => {
        var _a3;
        const conversationId = uni.$UIKitNIM.V2NIMConversationIdUtil.p2pConversationId(
          ((_a3 = userInfo.value) == null ? void 0 : _a3.accountId) || ""
        );
        await uni.$UIKitStore.uiStore.selectConversation(conversationId);
        customRedirectTo({
          url: "/pages/Chat/index"
        });
      };
      vue.onUnmounted(() => {
        uninstallFriendWatch();
        uninstallRelationWatch();
      });
      const __returned__ = { enableV2CloudConversation, userInfo, relation, isInBlacklist, get account() {
        return account;
      }, set account(v2) {
        account = v2;
      }, handleAliasClick, get uninstallFriendWatch() {
        return uninstallFriendWatch;
      }, set uninstallFriendWatch(v2) {
        uninstallFriendWatch = v2;
      }, get uninstallRelationWatch() {
        return uninstallRelationWatch;
      }, set uninstallRelationWatch(v2) {
        uninstallRelationWatch = v2;
      }, handleSwitchChange, deleteFriend, addFriend, gotoChat, UserCard, get t() {
        return t$2;
      }, NavBar: NavBar$1, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "wrapper" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("FriendPageText")
      }, null, 8, ["title"]),
      vue.createVNode($setup["UserCard"], {
        account: $setup.userInfo && $setup.userInfo.accountId,
        nick: $setup.userInfo && $setup.userInfo.name
      }, null, 8, ["account", "nick"]),
      $setup.relation === "stranger" ? (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 0 },
        [
          vue.createElementVNode("div", { class: "userInfo-item-wrapper" }, [
            vue.createElementVNode("div", { class: "userInfo-item" }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("addBlacklist")),
                1
                /* TEXT */
              ),
              vue.createElementVNode("switch", {
                checked: $setup.isInBlacklist,
                onChange: _cache[0] || (_cache[0] = (checked) => $setup.handleSwitchChange(checked))
              }, null, 40, ["checked"])
            ])
          ]),
          vue.createElementVNode(
            "div",
            {
              class: "button",
              style: { marginTop: "10px" },
              onClick: $setup.addFriend
            },
            vue.toDisplayString($setup.t("addFriendText")),
            1
            /* TEXT */
          )
        ],
        64
        /* STABLE_FRAGMENT */
      )) : (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 1 },
        [
          vue.createElementVNode("div", { class: "userInfo-item-wrapper" }, [
            vue.createElementVNode("div", {
              class: "userInfo-item",
              onClick: $setup.handleAliasClick
            }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("remarkText")),
                1
                /* TEXT */
              ),
              vue.createElementVNode("div", { class: "item-right" }, [
                vue.createVNode($setup["Icon"], {
                  iconClassName: "more-icon",
                  color: "#999",
                  type: "icon-jiantou"
                })
              ])
            ]),
            vue.createElementVNode("div", { class: "userInfo-item" }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("genderText")),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "div",
                { class: "item-right" },
                vue.toDisplayString($setup.userInfo && $setup.userInfo.gender === 0 ? $setup.t("unknow") : $setup.userInfo && $setup.userInfo.gender === 1 ? $setup.t("man") : $setup.t("woman")),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("div", { class: "box-shadow" }),
            vue.createElementVNode("div", { class: "userInfo-item" }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("birthText")),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "div",
                { class: "item-right" },
                vue.toDisplayString($setup.userInfo && $setup.userInfo.birthday || $setup.t("unknow")),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("div", { class: "box-shadow" }),
            vue.createElementVNode("div", { class: "userInfo-item" }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("mobile")),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "div",
                { class: "item-right" },
                vue.toDisplayString($setup.userInfo && $setup.userInfo.mobile || $setup.t("unknow")),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("div", { class: "box-shadow" }),
            vue.createElementVNode("div", { class: "userInfo-item" }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("email")),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "div",
                { class: "item-right" },
                vue.toDisplayString($setup.userInfo && $setup.userInfo.email || $setup.t("unknow")),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("div", { class: "userInfo-item" }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("sign")),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "div",
                { class: "item-right" },
                vue.toDisplayString($setup.userInfo && $setup.userInfo.sign || $setup.t("unknow")),
                1
                /* TEXT */
              )
            ])
          ]),
          vue.createElementVNode("div", { class: "userInfo-item-wrapper" }, [
            vue.createElementVNode("div", { class: "userInfo-item" }, [
              vue.createElementVNode(
                "div",
                { class: "item-left" },
                vue.toDisplayString($setup.t("addBlacklist")),
                1
                /* TEXT */
              ),
              vue.createElementVNode("switch", {
                checked: $setup.isInBlacklist,
                onChange: $setup.handleSwitchChange
              }, null, 40, ["checked"])
            ])
          ]),
          vue.createElementVNode(
            "div",
            {
              class: "button",
              onClick: $setup.gotoChat
            },
            vue.toDisplayString($setup.t("chatWithFriendText")),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "box-shadow" }),
          vue.createElementVNode(
            "div",
            {
              class: "button button-red",
              onClick: $setup.deleteFriend
            },
            vue.toDisplayString($setup.t("deleteFriendText")),
            1
            /* TEXT */
          )
        ],
        64
        /* STABLE_FRAGMENT */
      ))
    ]);
  }
  const PagesUserCardFriendIndex = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__scopeId", "data-v-abdc9cfb"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/friend/index.vue"]]);
  const _sfc_main$g = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const myUserInfo = vue.ref();
      const uninstallMyUserInfoWatch = autorun(() => {
        myUserInfo.value = uni.$UIKitStore.userStore.myUserInfo;
      });
      onLoad(() => {
        myUserInfo.value = uni.$UIKitStore.userStore.myUserInfo;
      });
      onShow(() => {
        setTabUnread();
        setContactTabUnread();
      });
      const gotoSetting = () => {
        customNavigateTo({
          url: "/pages/user-card/my/setting"
        });
      };
      const gotoAbout = () => {
        customNavigateTo({
          url: "/pages/user-card/my/about"
        });
      };
      const gotoCollection = () => {
        customNavigateTo({
          url: "/pages/user-card/my/collection-list"
        });
      };
      const gotoMyDetail = () => {
        var _a2;
        customNavigateTo({
          url: `/pages/user-card/my-detail/index?account=${(_a2 = myUserInfo.value) == null ? void 0 : _a2.accountId}`
        });
      };
      vue.onUnmounted(() => {
        uninstallMyUserInfoWatch();
      });
      const __returned__ = { myUserInfo, uninstallMyUserInfoWatch, gotoSetting, gotoAbout, gotoCollection, gotoMyDetail, UserCard, Icon, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createElementVNode("div", {
        class: "card-wrapper",
        onClick: $setup.gotoMyDetail
      }, [
        vue.createVNode($setup["UserCard"], {
          account: $setup.myUserInfo && $setup.myUserInfo.accountId,
          nick: $setup.myUserInfo && $setup.myUserInfo.name
        }, null, 8, ["account", "nick"]),
        vue.createVNode($setup["Icon"], {
          iconClassName: "arrow",
          type: "icon-jiantou"
        })
      ]),
      vue.createElementVNode("div", { class: "box-shadow" }),
      vue.createElementVNode("div", { class: "userInfo-item-wrapper" }, [
        vue.createElementVNode("div", {
          class: "userInfo-item",
          onClick: $setup.gotoSetting
        }, [
          vue.createElementVNode("div", { class: "item-left" }, [
            vue.createVNode($setup["Icon"], {
              iconClassName: "guanyu",
              type: "icon-shezhi1"
            }),
            vue.createTextVNode(
              " " + vue.toDisplayString($setup.t("setText")),
              1
              /* TEXT */
            )
          ]),
          vue.createVNode($setup["Icon"], {
            iconClassName: "icon-arrow",
            type: "icon-jiantou"
          })
        ]),
        vue.createElementVNode("div", { class: "shadow" }),
        vue.createElementVNode("div", {
          class: "userInfo-item",
          onClick: $setup.gotoCollection
        }, [
          vue.createElementVNode("div", { class: "item-left" }, [
            vue.createVNode($setup["Icon"], {
              iconClassName: "guanyu",
              type: "blue-collection"
            }),
            vue.createTextVNode(
              " " + vue.toDisplayString($setup.t("collectionText")),
              1
              /* TEXT */
            )
          ]),
          vue.createVNode($setup["Icon"], {
            iconClassName: "icon-arrow",
            type: "icon-jiantou"
          })
        ]),
        vue.createElementVNode("div", { class: "shadow" }),
        vue.createElementVNode("div", {
          class: "userInfo-item",
          onClick: $setup.gotoAbout
        }, [
          vue.createElementVNode("div", { class: "item-left" }, [
            vue.createVNode($setup["Icon"], {
              iconClassName: "guanyu",
              type: "icon-guanyu"
            }),
            vue.createTextVNode(
              " " + vue.toDisplayString($setup.t("commsEaseText")),
              1
              /* TEXT */
            )
          ]),
          vue.createVNode($setup["Icon"], {
            iconClassName: "icon-arrow",
            type: "icon-jiantou"
          })
        ])
      ])
    ]);
  }
  const PagesUserCardMyIndex = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/my/index.vue"]]);
  const yunxinWebsite = "https://yunxin.163.com/";
  const _sfc_main$f = /* @__PURE__ */ vue.defineComponent({
    __name: "about",
    setup(__props, { expose: __expose }) {
      __expose();
      const wxDownload = () => {
        uni.setClipboardData({
          data: yunxinWebsite,
          showToast: false
        });
        uni.showModal({
          content: t$2("wxAppFileCopyText"),
          showCancel: false
        });
      };
      const openInBrowser = () => {
        if (isHarmonyOs) {
          uni.setClipboardData({
            data: yunxinWebsite,
            showToast: false
          });
          uni.showModal({
            content: t$2("openUrlText"),
            showCancel: false
          });
        }
      };
      const __returned__ = { yunxinWebsite, wxDownload, openInBrowser, NavBar: NavBar$1, get t() {
        return t$2;
      }, get isWxApp() {
        return isWxApp;
      }, get imPkg() {
        return imPkg;
      }, UniLink, Icon };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "wrapper" }, [
      vue.createVNode($setup["NavBar"], { title: "关于" }),
      vue.createElementVNode("div", { class: "logo-box" }, [
        vue.createElementVNode("image", {
          src: "https://yx-web-nosdn.netease.im/common/fcd2d5e8d2897d4b2d965e06509f47d2/about-logo.png",
          class: "logo-img"
        }),
        vue.createElementVNode(
          "div",
          null,
          vue.toDisplayString($setup.t("appText")),
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode("div", { class: "aboutInfo-item-wrapper" }, [
        vue.createElementVNode("div", { class: "item" }, [
          vue.createElementVNode("div", null, "版本号"),
          vue.createElementVNode("div", null, "10.3.0")
        ]),
        vue.createElementVNode("div", { class: "item" }, [
          vue.createElementVNode("div", null, "IM 版本"),
          vue.createElementVNode(
            "div",
            null,
            vue.toDisplayString($setup.imPkg.version),
            1
            /* TEXT */
          )
        ]),
        !$setup.isWxApp ? (vue.openBlock(), vue.createBlock($setup["UniLink"], {
          key: 0,
          href: $setup.yunxinWebsite,
          showUnderLine: false,
          color: "#000000"
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("div", {
              onClick: $setup.openInBrowser,
              class: "item"
            }, [
              vue.createElementVNode("div", null, "产品介绍"),
              vue.createVNode($setup["Icon"], {
                iconClassName: "icon-arrow",
                type: "icon-jiantou"
              })
            ])
          ]),
          _: 1
          /* STABLE */
        })) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          onClick: $setup.wxDownload
        }, [
          vue.createElementVNode("div", { class: "item" }, [
            vue.createElementVNode("div", null, "产品介绍"),
            vue.createVNode($setup["Icon"], {
              iconClassName: "icon-arrow",
              type: "icon-jiantou"
            })
          ])
        ]))
      ])
    ]);
  }
  const PagesUserCardMyAbout = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__scopeId", "data-v-f75b12e1"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/my/about.vue"]]);
  const _sfc_main$e = /* @__PURE__ */ vue.defineComponent({
    __name: "setting",
    setup(__props, { expose: __expose }) {
      __expose();
      const enableV2CloudConversation = vue.ref(false);
      const switchToEnglishFlag = vue.ref(false);
      vue.onMounted(() => {
        enableV2CloudConversation.value = uni.getStorageSync("enableV2CloudConversation") === "on";
        switchToEnglishFlag.value = uni.getStorageSync("switchToEnglishFlag") === "en";
      });
      const logout = () => {
        uni.showModal({
          title: t$2("logoutText"),
          content: t$2("logoutConfirmText"),
          showCancel: true,
          success: function(res) {
            if (res.confirm) {
              formatAppLog("log", "at pages/user-card/my/setting.vue:53", "用户点击确定");
              const app = getApp();
              app.logout();
            } else if (res.cancel) {
              formatAppLog("log", "at pages/user-card/my/setting.vue:57", "用户点击取消");
            }
          }
        });
      };
      const onChangeEnableV2CloudConversation = (e2) => {
        const checked = e2.detail.value;
        enableV2CloudConversation.value = checked;
        uni.setStorage({
          key: "enableV2CloudConversation",
          data: checked ? "on" : "off"
        });
        uni.showToast({
          title: "切换后杀进程重启应用后生效",
          icon: "none"
        });
      };
      const onChangeSwitchToEnglishFlag = (e2) => {
        const checked = e2.detail.value;
        switchToEnglishFlag.value = checked;
        uni.setStorage({
          key: "switchToEnglishFlag",
          data: checked ? "en" : "zh"
        });
        uni.showToast({
          title: "切换后杀进程重启应用后生效",
          icon: "none"
        });
      };
      const __returned__ = { enableV2CloudConversation, switchToEnglishFlag, logout, onChangeEnableV2CloudConversation, onChangeSwitchToEnglishFlag, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "wrapper" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("setText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "setting-item" }, [
        vue.createElementVNode(
          "div",
          { class: "setting-item-title" },
          vue.toDisplayString($setup.t("enableV2CloudConversationText")),
          1
          /* TEXT */
        ),
        vue.createElementVNode("div", { class: "setting-item-content" }, [
          vue.createElementVNode("switch", {
            checked: $setup.enableV2CloudConversation,
            onChange: $setup.onChangeEnableV2CloudConversation
          }, null, 40, ["checked"])
        ])
      ]),
      vue.createElementVNode("div", { class: "setting-item" }, [
        vue.createElementVNode(
          "div",
          { class: "setting-item-title" },
          vue.toDisplayString($setup.t("SwitchToEnglishText")),
          1
          /* TEXT */
        ),
        vue.createElementVNode("div", { class: "setting-item-content" }, [
          vue.createElementVNode("switch", {
            checked: $setup.switchToEnglishFlag,
            onChange: $setup.onChangeSwitchToEnglishFlag
          }, null, 40, ["checked"])
        ])
      ]),
      vue.createElementVNode(
        "div",
        {
          onClick: $setup.logout,
          class: "logout"
        },
        vue.toDisplayString($setup.t("logoutText")),
        1
        /* TEXT */
      )
    ]);
  }
  const PagesUserCardMySetting = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__scopeId", "data-v-7d21e454"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/my/setting.vue"]]);
  const _sfc_main$d = /* @__PURE__ */ vue.defineComponent({
    __name: "collection-card",
    props: {
      data: { type: Object, required: true },
      handleRemoveCollection: { type: null, required: true }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const collectionData = JSON.parse(props.data.collectionData);
      collectionData.message = uni.$UIKitNIM.V2NIMMessageConverter.messageDeserialization(
        collectionData.message
      );
      const msg = collectionData.message;
      const textArr = parseText((msg == null ? void 0 : msg.text) || "");
      const imageUrl = vue.computed(() => {
        var _a2, _b;
        return ((_a2 = msg == null ? void 0 : msg.attachment) == null ? void 0 : _a2.url) || ((_b = msg.attachment) == null ? void 0 : _b.file);
      });
      const videoFirstFrameDataUrl = vue.computed(() => {
        var _a2;
        const url = (_a2 = msg.attachment) == null ? void 0 : _a2.url;
        return url ? `${url}${url.includes("?") ? "&" : "?"}vframe=1` : "";
      });
      const handleCopy = () => {
        uni.setClipboardData({
          data: msg.text,
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("copySuccessText"),
              icon: "none"
            });
          },
          fail: () => {
            uni.showToast({
              title: t$2("copyFailText"),
              icon: "none"
            });
          }
        });
      };
      const handleCollection = () => {
        let itemList = [t$2("deleteCollectionText")];
        if (msg.messageType === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT) {
          itemList = itemList.concat([
            t$2("copyText"),
            t$2("forwardToTeamText"),
            t$2("forwardToFriendText")
          ]);
        } else if (msg.messageType !== Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO) {
          itemList = itemList.concat([
            t$2("forwardToTeamText"),
            t$2("forwardToFriendText")
          ]);
        }
        uni.showActionSheet({
          itemList,
          success(data2) {
            if (msg.messageType === Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT) {
              if (data2.tapIndex === 0) {
                props.handleRemoveCollection();
              } else if (data2.tapIndex === 1) {
                handleCopy();
              } else if (data2.tapIndex === 2) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM}&msgIdClient=${msg.messageClientId}&origin=collection`
                });
              } else if (data2.tapIndex === 3) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P}&msgIdClient=${msg.messageClientId}&origin=collection`
                });
              }
            } else if (msg.messageType !== Ma.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO) {
              if (data2.tapIndex === 0) {
                props.handleRemoveCollection();
              } else if (data2.tapIndex === 1) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM}&msgIdClient=${msg.messageClientId}&origin=collection`
                });
              } else if (data2.tapIndex === 2) {
                customNavigateTo({
                  url: `/pages/Chat/forward?forwardConversationType=${Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P}&msgIdClient=${msg.messageClientId}&origin=collection`
                });
              }
            } else {
              if (data2.tapIndex === 0) {
                props.handleRemoveCollection();
              }
            }
          },
          complete() {
          }
        });
      };
      const handleImageTouch = (url) => {
        if (url) {
          uni.previewImage({
            urls: [url]
          });
        }
      };
      const handleVideoPlay = (msg2) => {
        var _a2;
        stopAllAudio();
        const url = (_a2 = msg2.attachment) == null ? void 0 : _a2.url;
        if (url) {
          customNavigateTo({
            url: `/pages/Chat/video-play?videoUrl=${encodeURIComponent(url)}`
          });
        }
      };
      const isCurrentDay = (time) => {
        const createTime = new Date(time);
        const now = /* @__PURE__ */ new Date();
        return createTime.getFullYear() === now.getFullYear() && createTime.getMonth() === now.getMonth() && createTime.getDate() === now.getDate();
      };
      const isCurrentYear = (time) => {
        const createTime = new Date(time);
        const now = /* @__PURE__ */ new Date();
        return createTime.getFullYear() === now.getFullYear();
      };
      const formatTime = () => {
        const updateTime = props.data.updateTime;
        if (isCurrentDay(updateTime)) {
          return dayjs(updateTime).format("HH:mm");
        } else if (isCurrentYear(updateTime)) {
          return dayjs(updateTime).format("MM月DD日 HH:mm");
        } else {
          return dayjs(updateTime).format("YYYY年MM月DD日 HH:mm");
        }
      };
      const __returned__ = { props, collectionData, msg, textArr, imageUrl, videoFirstFrameDataUrl, handleCopy, handleCollection, handleImageTouch, handleVideoPlay, isCurrentDay, isCurrentYear, formatTime, get V2NIMConst() {
        return Ma;
      }, MessageFile, MessageAudio, Icon, get t() {
        return t$2;
      }, get EMOJI_ICON_MAP_CONFIG() {
        return EMOJI_ICON_MAP_CONFIG$1;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "collection-card-wrapper" }, [
      vue.createElementVNode("div", { class: "info-wrapper" }, [
        vue.createElementVNode("div", { class: "info" }, [
          vue.createElementVNode("div", { class: "info-left" }, [
            $setup.collectionData.avatar ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 0,
              "lazy-load": true,
              class: "avatar-img",
              src: $setup.collectionData.avatar,
              mode: "aspectFill"
            }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode("div", { class: "info-right" }, [
            vue.createElementVNode(
              "div",
              { class: "name" },
              vue.toDisplayString($setup.collectionData.senderName),
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "div",
              { class: "conversation" },
              vue.toDisplayString($setup.t("collectionFromText")) + " " + vue.toDisplayString($setup.collectionData.conversationName),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createElementVNode("div", { class: "info-icon" }, [
          vue.createVNode($setup["Icon"], {
            type: "icon-More",
            onClick: $setup.handleCollection
          })
        ])
      ]),
      vue.createElementVNode("div", { class: "content-wrapper" }, [
        $setup.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_IMAGE ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "file-wrapper"
        }, [
          vue.createElementVNode("div", {
            onClick: _cache[0] || (_cache[0] = () => {
              $setup.handleImageTouch($setup.msg.attachment.url);
            })
          }, [
            vue.createElementVNode("image", {
              class: "msg-image",
              "lazy-load": true,
              mode: "aspectFill",
              src: $setup.imageUrl
            }, null, 8, ["src"])
          ])
        ])) : $setup.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_VIDEO ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: "file-wrapper"
        }, [
          vue.createElementVNode("div", {
            class: "video-msg-wrapper",
            onClick: _cache[1] || (_cache[1] = () => $setup.handleVideoPlay($setup.msg))
          }, [
            vue.createElementVNode("div", { class: "video-play-button" }, [
              vue.createElementVNode("div", { class: "video-play-icon" })
            ]),
            vue.createElementVNode("image", {
              class: "msg-image",
              "lazy-load": true,
              mode: "aspectFill",
              src: $setup.videoFirstFrameDataUrl
            }, null, 8, ["src"])
          ])
        ])) : $setup.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_FILE ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 2,
          class: "file-wrapper extra"
        }, [
          vue.createVNode($setup["MessageFile"], { msg: $setup.msg }, null, 8, ["msg"])
        ])) : $setup.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_AUDIO ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 3,
          class: "file-wrapper"
        }, [
          vue.createElementVNode("div", { class: "audio-wrapper" }, [
            vue.createVNode($setup["MessageAudio"], {
              msg: $setup.msg,
              mode: "audio-in"
            }, null, 8, ["msg"])
          ])
        ])) : $setup.msg.messageType === $setup.V2NIMConst.V2NIMMessageType.V2NIM_MESSAGE_TYPE_TEXT ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 4,
          class: "text-wrapper"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.textArr, (item) => {
              return vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                [
                  item.type === "text" ? (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 0 },
                    [
                      vue.createTextVNode(
                        vue.toDisplayString(item.value),
                        1
                        /* TEXT */
                      )
                    ],
                    64
                    /* STABLE_FRAGMENT */
                  )) : item.type === "emoji" ? (vue.openBlock(), vue.createBlock($setup["Icon"], {
                    key: 1,
                    type: $setup.EMOJI_ICON_MAP_CONFIG[item.value],
                    size: _ctx.fontSize || 22,
                    style: { margin: "0 2px 2px 2px", verticalAlign: "bottom" }
                  }, null, 8, ["type", "size"])) : vue.createCommentVNode("v-if", true)
                ],
                64
                /* STABLE_FRAGMENT */
              );
            }),
            256
            /* UNKEYED_FRAGMENT */
          ))
        ])) : (vue.openBlock(), vue.createElementBlock(
          "div",
          { key: 5 },
          "[" + vue.toDisplayString($setup.t("unknowMsgText")) + "]",
          1
          /* TEXT */
        ))
      ]),
      vue.createElementVNode(
        "div",
        { class: "updatetime" },
        vue.toDisplayString($setup.formatTime()),
        1
        /* TEXT */
      )
    ]);
  }
  const PagesUserCardMyCollectionCard = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__scopeId", "data-v-947ab331"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/my/collection-card.vue"]]);
  const _sfc_main$c = /* @__PURE__ */ vue.defineComponent({
    __name: "collection-list",
    setup(__props, { expose: __expose }) {
      __expose();
      let collectionList = vue.ref([]);
      let noMore = vue.ref(false);
      onLoad(() => {
        uni.$UIKitStore.msgStore.getCollectionListByOptionActive({}).then((data2) => {
          collectionList.value = data2;
        });
      });
      const removeCollection = (collection) => {
        return () => {
          return uni.$UIKitStore.msgStore.removeCollectionsActive([collection]).then(() => {
            const list = collectionList.value;
            const index = list.findIndex((item) => item === collection);
            list.splice(index, 1);
          }).catch((err) => {
            if ((err == null ? void 0 : err.code) && typeof t$2(`${err.code}`) !== "undefined") {
              uni.showToast({
                title: t$2(`${err.code}`),
                icon: "error",
                duration: 1e3
              });
            } else {
              uni.showToast({
                title: t$2("deleteCollectionFailedText"),
                icon: "error",
                duration: 1e3
              });
            }
          });
        };
      };
      const loadMoreContent = () => {
        let length = collectionList.value.length;
        const anchorCollection = collectionList.value[length - 1];
        uni.$UIKitStore.msgStore.getCollectionListByOptionActive({
          anchorCollection,
          // 锚点
          direction: 0
          // 从大到小
        }).then((data2) => {
          if (!data2.length) {
            noMore.value = true;
            return;
          }
          collectionList.value = collectionList.value.concat(data2);
        });
      };
      const __returned__ = { get collectionList() {
        return collectionList;
      }, set collectionList(v2) {
        collectionList = v2;
      }, get noMore() {
        return noMore;
      }, set noMore(v2) {
        noMore = v2;
      }, removeCollection, loadMoreContent, get t() {
        return t$2;
      }, Empty, NavBar: NavBar$1, CollectionCard: PagesUserCardMyCollectionCard };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "div",
      {
        class: vue.normalizeClass(`wrapper ${$setup.collectionList.length === 0 ? "bg-white" : ""}`)
      },
      [
        vue.createVNode($setup["NavBar"], {
          title: $setup.t("collectionText")
        }, {
          left: vue.withCtx(() => [
            vue.createElementVNode(
              "div",
              {
                class: "nav-bar-text",
                onClick: _cache[0] || (_cache[0] = (...args) => _ctx.back && _ctx.back(...args))
              },
              vue.toDisplayString($setup.t("collectionText")),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["title"]),
        vue.createElementVNode("div", { class: "collection-card-item-wrapper" }, [
          $setup.collectionList.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
            key: 0,
            text: $setup.t("noCollectionsText")
          }, null, 8, ["text"])) : (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            vue.renderList($setup.collectionList, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                key: item.collectionId
              }, [
                (vue.openBlock(), vue.createBlock($setup["CollectionCard"], {
                  data: item,
                  index,
                  key: item.collectionId,
                  handleRemoveCollection: $setup.removeCollection(item)
                }, null, 8, ["data", "index", "handleRemoveCollection"]))
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.withDirectives(vue.createElementVNode(
            "div",
            {
              onClick: $setup.loadMoreContent,
              class: "view-more-text"
            },
            vue.toDisplayString($setup.t("viewMoreText")),
            513
            /* TEXT, NEED_PATCH */
          ), [
            [vue.vShow, $setup.collectionList.length !== 0 && !$setup.noMore]
          ]),
          vue.withDirectives(vue.createElementVNode(
            "view",
            { class: "msg-tip" },
            vue.toDisplayString($setup.t("noMoreText")),
            513
            /* TEXT, NEED_PATCH */
          ), [
            [vue.vShow, $setup.collectionList.length !== 0 && $setup.noMore]
          ])
        ])
      ],
      2
      /* CLASS */
    );
  }
  const PagesUserCardMyCollectionList = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__scopeId", "data-v-54e5bbba"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/my/collection-list.vue"]]);
  const _sfc_main$b = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const myUserInfo = vue.ref();
      const uninstallMyUserInfoWatch = autorun(() => {
        myUserInfo.value = uni.$UIKitStore.userStore.myUserInfo;
      });
      const navigatorToUserItem = (key, value) => {
        customNavigateTo({
          url: `/pages/user-card/detail-item/index?key=${key}&value=${value}`
        });
      };
      const onChangeBirthday = (e2) => {
        const birthday = e2.detail.value;
        uni.$UIKitStore.userStore.updateSelfUserProfileActive({ ...myUserInfo.value, birthday }).catch(() => {
          uni.showToast({
            title: t$2("updateText") + t$2("birthText") + t$2("failText"),
            icon: "error"
          });
        });
      };
      const onChangeGender = (e2) => {
        const gender = e2.detail.value == 0 ? 1 : 2;
        myUserInfo.value.gender = gender;
        uni.$UIKitStore.userStore.updateSelfUserProfileActive({ ...myUserInfo.value, gender }).catch(() => {
          uni.showToast({
            title: t$2("updateText") + t$2("genderText") + t$2("failText"),
            icon: "error"
          });
        });
      };
      const onChangeAvatar = () => {
        try {
          uni.chooseImage({
            count: 1,
            sizeType: ["original"],
            success: function(res) {
              uni.showLoading({
                title: ""
              });
              uni.$UIKitStore.userStore.updateSelfUserProfileActive(
                {
                  ...myUserInfo.value
                },
                res.tempFilePaths[0]
              ).catch(() => {
                uni.showToast({
                  title: t$2("FailAvatarText"),
                  icon: "error"
                });
              }).finally(() => {
                uni.hideLoading();
              });
            },
            fail: function(error) {
            },
            //没有开启权限时，提示开启权限
            complete: handleNoPermission
          });
        } catch (error) {
          uni.showToast({
            title: t$2("FailAvatarText"),
            icon: "error"
          });
        }
      };
      const copyAccount = () => {
        var _a2;
        uni.setClipboardData({
          data: ((_a2 = myUserInfo.value) == null ? void 0 : _a2.accountId) || "",
          showToast: false,
          success: () => {
            uni.showToast({
              title: t$2("copySuccessText"),
              icon: "none"
            });
          },
          fail: () => {
            uni.showToast({
              title: t$2("copyFailText"),
              icon: "none"
            });
          }
        });
      };
      vue.onUnmounted(() => {
        uninstallMyUserInfoWatch();
      });
      const __returned__ = { myUserInfo, uninstallMyUserInfoWatch, navigatorToUserItem, onChangeBirthday, onChangeGender, onChangeAvatar, copyAccount, Avatar, Icon, NavBar: NavBar$1, get formatDateRange() {
        return formatDateRange;
      }, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "wrapper" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("PersonalPageText")
      }, null, 8, ["title"]),
      vue.createElementVNode("div", { class: "userInfo-item-wrapper" }, [
        vue.createElementVNode("div", {
          class: "userInfo-item",
          onClick: $setup.onChangeAvatar
        }, [
          vue.createElementVNode(
            "div",
            { class: "item-left" },
            vue.toDisplayString($setup.t("avatarText")),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "item-right" }, [
            vue.createVNode($setup["Avatar"], {
              avatar: $setup.myUserInfo && $setup.myUserInfo.avatar,
              account: $setup.myUserInfo && $setup.myUserInfo.accountId
            }, null, 8, ["avatar", "account"]),
            vue.createVNode($setup["Icon"], {
              size: 15,
              color: "#A6ADB6",
              iconClassName: "arrow",
              type: "icon-jiantou"
            })
          ])
        ]),
        vue.createElementVNode("div", { class: "box-shadow" }),
        vue.createElementVNode("div", {
          class: "userInfo-item",
          onClick: _cache[0] || (_cache[0] = () => $setup.navigatorToUserItem(
            "name",
            $setup.myUserInfo && $setup.myUserInfo.name || $setup.myUserInfo && $setup.myUserInfo.accountId
          ))
        }, [
          vue.createElementVNode(
            "div",
            { class: "item-left" },
            vue.toDisplayString($setup.t("name")),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "item-right" }, [
            vue.createElementVNode(
              "div",
              { class: "nick" },
              vue.toDisplayString($setup.myUserInfo && $setup.myUserInfo.name || $setup.myUserInfo && $setup.myUserInfo.accountId),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              size: 15,
              color: "#A6ADB6",
              iconClassName: "arrow",
              type: "icon-jiantou"
            })
          ])
        ]),
        vue.createElementVNode("div", { class: "box-shadow" }),
        vue.createElementVNode("div", { class: "userInfo-item" }, [
          vue.createElementVNode(
            "div",
            { class: "item-left" },
            vue.toDisplayString($setup.t("accountText")),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "item-right" }, [
            vue.createTextVNode(
              vue.toDisplayString($setup.myUserInfo && $setup.myUserInfo.accountId) + " ",
              1
              /* TEXT */
            ),
            vue.createElementVNode("div", {
              onClick: vue.withModifiers($setup.copyAccount, ["stop"]),
              class: "arrow"
            }, [
              vue.createVNode($setup["Icon"], {
                size: 15,
                color: "#A6ADB6",
                type: "icon-fuzhi1"
              })
            ])
          ])
        ]),
        vue.createElementVNode("div", { class: "box-shadow" }),
        vue.createElementVNode("picker", {
          onChange: $setup.onChangeGender,
          value: $setup.myUserInfo && $setup.myUserInfo.gender === 1 ? 0 : 1,
          range: [$setup.t("man"), $setup.t("woman")]
        }, [
          vue.createElementVNode("div", { class: "userInfo-item" }, [
            vue.createElementVNode(
              "div",
              { class: "item-left" },
              vue.toDisplayString($setup.t("genderText")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("div", { class: "item-right" }, [
              vue.createElementVNode(
                "view",
                { class: "uni-input" },
                vue.toDisplayString($setup.myUserInfo && $setup.myUserInfo.gender === 0 ? $setup.t("unknow") : $setup.myUserInfo && $setup.myUserInfo.gender === 1 ? $setup.t("man") : $setup.t("woman")),
                1
                /* TEXT */
              ),
              vue.createVNode($setup["Icon"], {
                size: 15,
                color: "#A6ADB6",
                iconClassName: "arrow",
                type: "icon-jiantou"
              })
            ])
          ])
        ], 40, ["value", "range"]),
        vue.createElementVNode("div", { class: "box-shadow" }),
        vue.createElementVNode("picker", {
          mode: "date",
          value: $setup.myUserInfo && $setup.myUserInfo.birthday,
          onChange: $setup.onChangeBirthday,
          start: $setup.formatDateRange("start"),
          end: $setup.formatDateRange("end")
        }, [
          vue.createElementVNode("div", { class: "userInfo-item" }, [
            vue.createElementVNode(
              "div",
              { class: "item-left" },
              vue.toDisplayString($setup.t("birthText")),
              1
              /* TEXT */
            ),
            vue.createElementVNode("div", { class: "item-right" }, [
              vue.createElementVNode(
                "view",
                { class: "uni-input" },
                vue.toDisplayString($setup.myUserInfo && $setup.myUserInfo.birthday || $setup.t("unknow")),
                1
                /* TEXT */
              ),
              vue.createVNode($setup["Icon"], {
                size: 15,
                color: "#A6ADB6",
                iconClassName: "arrow",
                type: "icon-jiantou"
              })
            ])
          ])
        ], 40, ["value", "start", "end"]),
        vue.createElementVNode("div", { class: "box-shadow" }),
        vue.createElementVNode("div", {
          class: "userInfo-item",
          onClick: _cache[1] || (_cache[1] = () => $setup.navigatorToUserItem(
            "mobile",
            $setup.myUserInfo && $setup.myUserInfo.mobile || ""
          ))
        }, [
          vue.createElementVNode(
            "div",
            { class: "item-left" },
            vue.toDisplayString($setup.t("mobile")),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "item-right" }, [
            vue.createTextVNode(
              vue.toDisplayString($setup.myUserInfo && $setup.myUserInfo.mobile || $setup.t("unknow")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              size: 15,
              color: "#A6ADB6",
              iconClassName: "arrow",
              type: "icon-jiantou"
            })
          ])
        ]),
        vue.createElementVNode("div", { class: "box-shadow" }),
        vue.createElementVNode("div", {
          class: "userInfo-item",
          onClick: _cache[2] || (_cache[2] = () => $setup.navigatorToUserItem("email", $setup.myUserInfo && $setup.myUserInfo.email || ""))
        }, [
          vue.createElementVNode(
            "div",
            { class: "item-left" },
            vue.toDisplayString($setup.t("email")),
            1
            /* TEXT */
          ),
          vue.createElementVNode("div", { class: "item-right" }, [
            vue.createElementVNode(
              "div",
              { class: "email" },
              vue.toDisplayString($setup.myUserInfo && $setup.myUserInfo.email || $setup.t("unknow")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["Icon"], {
              size: 15,
              color: "#A6ADB6",
              iconClassName: "arrow",
              type: "icon-jiantou"
            })
          ])
        ])
      ]),
      vue.createElementVNode("div", {
        class: "signature",
        onClick: _cache[3] || (_cache[3] = () => $setup.navigatorToUserItem("sign", $setup.myUserInfo && $setup.myUserInfo.sign || ""))
      }, [
        vue.createElementVNode(
          "div",
          { class: "signature-key" },
          vue.toDisplayString($setup.t("sign")),
          1
          /* TEXT */
        ),
        vue.createElementVNode(
          "div",
          { class: "signature-text" },
          vue.toDisplayString($setup.myUserInfo && $setup.myUserInfo.sign || $setup.t("unknow")),
          1
          /* TEXT */
        ),
        vue.createVNode($setup["Icon"], {
          size: 15,
          color: "#A6ADB6",
          iconClassName: "arrow",
          type: "icon-jiantou"
        })
      ])
    ]);
  }
  const PagesUserCardMyDetailIndex = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__scopeId", "data-v-b6768ff1"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/my-detail/index.vue"]]);
  const _sfc_main$a = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      __expose();
      const key = vue.ref();
      const inputValue = vue.ref("");
      const showClearIcon = vue.ref(false);
      const myUserInfo = vue.ref();
      const maxlengthMap = {
        name: 15,
        mobile: 11,
        sign: 50,
        email: 30
      };
      let uninstallMyUserInfoWatch = () => {
      };
      onLoad((props) => {
        key.value = props == null ? void 0 : props.key;
        uninstallMyUserInfoWatch = autorun(() => {
          var _a2;
          myUserInfo.value = uni.$UIKitStore.userStore.myUserInfo;
          if (key.value) {
            const _value = myUserInfo.value[key.value];
            inputValue.value = _value;
            if (key.value === "name" && !_value) {
              inputValue.value = (_a2 = myUserInfo.value) == null ? void 0 : _a2.accountId;
            }
          }
        });
      });
      const onInputChange = (e2) => {
        inputValue.value = e2.detail.value;
      };
      const onInputFocus = () => {
        showClearIcon.value = true;
      };
      const clearInputValue = () => {
        inputValue.value = "";
      };
      const onUserInfoConfirm = () => {
        const _value = inputValue.value;
        if (key.value == "mobile" && !/^\d+(\.\d+)?$/.test(_value) && _value.trim() !== "") {
          uni.showToast({
            title: t$2("telErrorText"),
            icon: "error"
          });
          return;
        }
        if (key.value == "email" && !/[a-zA-Z0-9]+([-_.][A-Za-zd]+)*@([a-zA-Z0-9]+[-.])+[A-Za-zd]{2,5}$/.test(
          _value
        ) && _value.trim() !== "") {
          uni.showToast({
            title: t$2("emailErrorText"),
            icon: "error"
          });
          return;
        }
        inputValue.value = _value;
        if (key.value) {
          uni.$UIKitStore.userStore.updateSelfUserProfileActive({ ...myUserInfo.value, [key.value]: _value }).then(() => {
            uni.navigateBack({});
          }).catch(() => {
            uni.showToast({
              title: t$2("saveText") + t$2(key.value || "") + t$2("failText"),
              icon: "error"
            });
          });
        }
      };
      const back = () => {
        uni.navigateBack({
          delta: 1
        });
      };
      vue.onUnmounted(() => {
        uninstallMyUserInfoWatch();
      });
      const __returned__ = { key, inputValue, showClearIcon, myUserInfo, maxlengthMap, get uninstallMyUserInfoWatch() {
        return uninstallMyUserInfoWatch;
      }, set uninstallMyUserInfoWatch(v2) {
        uninstallMyUserInfoWatch = v2;
      }, onInputChange, onInputFocus, clearInputValue, onUserInfoConfirm, back, Icon, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "wrapper" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t($setup.key)
      }, {
        left: vue.withCtx(() => [
          vue.createElementVNode(
            "div",
            {
              class: "nav-bar-text",
              onClick: $setup.back
            },
            vue.toDisplayString($setup.t("cancelText")),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }, 8, ["title"]),
      vue.createElementVNode("div", { class: "userInfo-item-wrapper" }, [
        vue.createElementVNode("input", {
          class: "input",
          "confirm-type": $setup.t("okText"),
          onFocus: $setup.onInputFocus,
          maxlength: $setup.maxlengthMap[$setup.key],
          onInput: $setup.onInputChange,
          value: $setup.inputValue
        }, null, 40, ["confirm-type", "maxlength", "value"]),
        vue.createElementVNode("div", { onClick: $setup.clearInputValue }, [
          vue.withDirectives(vue.createVNode(
            $setup["Icon"],
            {
              iconClassName: "clear-icon",
              type: "icon-shandiao"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vShow, $setup.showClearIcon]
          ])
        ])
      ]),
      vue.createElementVNode(
        "div",
        {
          class: "ok-btn",
          onClick: $setup.onUserInfoConfirm
        },
        vue.toDisplayString($setup.t("okText")),
        1
        /* TEXT */
      )
    ]);
  }
  const PagesUserCardDetailItemIndex = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__scopeId", "data-v-c5cce9c4"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/user-card/detail-item/index.vue"]]);
  const _sfc_main$9 = /* @__PURE__ */ vue.defineComponent({
    __name: "nick-in-team",
    setup(__props, { expose: __expose }) {
      __expose();
      const inputValue = vue.ref("");
      const showClearIcon = vue.ref(false);
      const myMemberInfo = vue.ref();
      let teamId = "";
      let uninstallTeamMemberWatch = () => {
      };
      onLoad((option) => {
        teamId = option ? option.id : "";
        uninstallTeamMemberWatch = autorun(() => {
          var _a2;
          myMemberInfo.value = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId, [
            uni.$UIKitStore.userStore.myUserInfo.accountId
          ])[0];
          inputValue.value = ((_a2 = myMemberInfo.value) == null ? void 0 : _a2.teamNick) || "";
        });
      });
      const onInputChange = (e2) => {
        inputValue.value = e2.detail.value;
      };
      const onInputFocus = () => {
        showClearIcon.value = true;
      };
      const clearInputValue = () => {
        inputValue.value = "";
      };
      const onOk = () => {
        uni.$UIKitStore.teamMemberStore.updateMyMemberInfoActive({
          teamId,
          memberInfo: {
            teamNick: inputValue.value.trim()
          }
        }).then(() => {
          back();
        }).catch((err) => {
          uni.showToast({
            title: t$2("saveFailedText"),
            icon: "error"
          });
        });
      };
      const back = () => {
        uni.navigateBack({
          delta: 1
        });
      };
      vue.onUnmounted(() => {
        uninstallTeamMemberWatch();
      });
      const __returned__ = { inputValue, showClearIcon, myMemberInfo, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, get uninstallTeamMemberWatch() {
        return uninstallTeamMemberWatch;
      }, set uninstallTeamMemberWatch(v2) {
        uninstallTeamMemberWatch = v2;
      }, onInputChange, onInputFocus, clearInputValue, onOk, back, Icon, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "wrapper" }, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("nickInTeam")
      }, {
        left: vue.withCtx(() => [
          vue.createElementVNode(
            "div",
            {
              class: "nav-bar-text",
              onClick: $setup.back
            },
            vue.toDisplayString($setup.t("cancelText")),
            1
            /* TEXT */
          )
        ]),
        _: 1
        /* STABLE */
      }, 8, ["title"]),
      vue.createElementVNode("div", { class: "userInfo-item-wrapper" }, [
        vue.createElementVNode("input", {
          class: "input",
          "confirm-type": $setup.t("okText"),
          onFocus: $setup.onInputFocus,
          maxlength: 15,
          onInput: $setup.onInputChange,
          value: $setup.inputValue,
          placeholder: $setup.t("nickInTeam")
        }, null, 40, ["confirm-type", "value", "placeholder"]),
        vue.createElementVNode("div", { onClick: $setup.clearInputValue }, [
          vue.withDirectives(vue.createVNode(
            $setup["Icon"],
            {
              iconClassName: "clear-icon",
              type: "icon-shandiao"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vShow, $setup.showClearIcon]
          ])
        ])
      ]),
      vue.createElementVNode(
        "div",
        {
          class: "ok-btn",
          onClick: $setup.onOk
        },
        vue.toDisplayString($setup.t("okText")),
        1
        /* TEXT */
      )
    ]);
  }
  const PagesGroupGroupSetNickInTeam = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__scopeId", "data-v-8d8b6227"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/nick-in-team.vue"]]);
  const _sfc_main$8 = /* @__PURE__ */ vue.defineComponent({
    __name: "group-manage",
    setup(__props, { expose: __expose }) {
      __expose();
      const rangeArr = [t$2("teamAll"), t$2("teamOwnerAndManagerText")];
      let teamId = "";
      const team = vue.ref();
      const teamMembers = vue.ref([]);
      const isGroupOwner = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return (team.value ? team.value.ownerAccountId : "") === (myUser ? myUser.accountId : "");
      });
      const isGroupManager = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return teamMembers.value.filter(
          (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
        ).some((member) => member.accountId === (myUser ? myUser.accountId : ""));
      });
      const teamManagerNum = vue.computed(() => {
        return teamMembers.value.filter(
          (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
        ).length;
      });
      const updateTeamMode = vue.computed(() => {
        var _a2, _b;
        return {
          value: ((_a2 = team.value) == null ? void 0 : _a2.updateInfoMode) === Ma.V2NIMTeamUpdateInfoMode.V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER ? 1 : 0,
          text: ((_b = team.value) == null ? void 0 : _b.updateInfoMode) === Ma.V2NIMTeamUpdateInfoMode.V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER ? t$2("teamOwnerAndManagerText") : t$2("teamAll")
        };
      });
      const inviteMode = vue.computed(() => {
        var _a2, _b;
        return {
          value: ((_a2 = team.value) == null ? void 0 : _a2.inviteMode) === Ma.V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_MANAGER ? 1 : 0,
          text: ((_b = team.value) == null ? void 0 : _b.inviteMode) === Ma.V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_MANAGER ? t$2("teamOwnerAndManagerText") : t$2("teamAll")
        };
      });
      const teamAtMode = vue.computed(() => {
        var _a2;
        let ext = {};
        try {
          ext = JSON.parse(((_a2 = team.value) == null ? void 0 : _a2.serverExtension) || "{}");
        } catch (error) {
        }
        return {
          value: ext[ALLOW_AT] === "manager" ? 1 : 0,
          text: ext[ALLOW_AT] === "manager" ? t$2("teamOwnerAndManagerText") : t$2("teamAll")
        };
      });
      const onUpdateTeamMode = (e2) => {
        onUpdateTeamInfo("updateInfoMode", e2.detail.value == 0 ? "all" : "manager");
      };
      const onUpdateInviteMode = (e2) => {
        onUpdateTeamInfo("inviteMode", e2.detail.value == 0 ? "all" : "manager");
      };
      const onUpdateExt = (e2) => {
        onUpdateTeamInfo("serverExtension", e2.detail.value == 0 ? "all" : "manager");
      };
      const onUpdateTeamInfo = async (key, value) => {
        var _a2;
        const params = {
          teamId
        };
        switch (key) {
          case "updateInfoMode":
            params.updateInfoMode = value === "all" ? Ma.V2NIMTeamUpdateInfoMode.V2NIM_TEAM_UPDATE_INFO_MODE_ALL : Ma.V2NIMTeamUpdateInfoMode.V2NIM_TEAM_UPDATE_INFO_MODE_MANAGER;
            break;
          case "inviteMode":
            params.inviteMode = value === "all" ? Ma.V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_ALL : Ma.V2NIMTeamInviteMode.V2NIM_TEAM_INVITE_MODE_MANAGER;
            break;
          case "serverExtension": {
            let ext = {};
            try {
              ext = JSON.parse(((_a2 = team.value) == null ? void 0 : _a2.serverExtension) || "{}");
            } catch (error) {
            }
            ext[ALLOW_AT] = value;
            params.serverExtension = JSON.stringify(ext);
            break;
          }
        }
        try {
          await uni.$UIKitStore.teamStore.updateTeamActive({ teamId, info: params });
        } catch (error) {
          switch (error == null ? void 0 : error.code) {
            case 109432:
              uni.showToast({
                title: t$2("noPermission"),
                icon: "error"
              });
              break;
            default:
              uni.showToast({
                title: t$2("updateTeamFailedText"),
                icon: "error"
              });
              break;
          }
        }
      };
      const goTransformTeam = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/transform-team?id=${teamId}`
        });
      };
      const goTeamManagerList = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/group-manager-list?id=${teamId}`
        });
      };
      let uninstallTeamWatch = () => {
      };
      onLoad((option) => {
        teamId = option ? option.id : "";
        autorun(() => {
          if (teamId) {
            team.value = uni.$UIKitStore.teamStore.teams.get(teamId);
            teamMembers.value = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId);
          }
        });
      });
      vue.onUnmounted(() => {
        uninstallTeamWatch();
      });
      const __returned__ = { rangeArr, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, team, teamMembers, isGroupOwner, isGroupManager, teamManagerNum, updateTeamMode, inviteMode, teamAtMode, onUpdateTeamMode, onUpdateInviteMode, onUpdateExt, onUpdateTeamInfo, goTransformTeam, goTeamManagerList, get uninstallTeamWatch() {
        return uninstallTeamWatch;
      }, set uninstallTeamWatch(v2) {
        uninstallTeamWatch = v2;
      }, NavBar: NavBar$1, Icon, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("teamManagerText")
      }, null, 8, ["title"]),
      $setup.team ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "group-set-container"
      }, [
        vue.createElementVNode("div", { class: "group-set-card" }, [
          vue.createElementVNode("div", { class: "group-set-item" }, [
            vue.createElementVNode("div", {
              class: "group-members-info-item",
              onClick: $setup.goTeamManagerList
            }, [
              vue.createElementVNode("div", { class: "group-members-info" }, [
                vue.createElementVNode(
                  "div",
                  { class: "group-info-title" },
                  vue.toDisplayString($setup.t("teamManagerSettingText")),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "div",
                  { class: "group-info-subtitle" },
                  vue.toDisplayString($setup.teamManagerNum),
                  1
                  /* TEXT */
                )
              ]),
              vue.createVNode($setup["Icon"], {
                iconClassName: "more-icon",
                color: "#999",
                type: "icon-jiantou"
              })
            ])
          ])
        ]),
        vue.createElementVNode("div", { class: "group-set-card" }, [
          vue.createElementVNode("picker", {
            onChange: $setup.onUpdateTeamMode,
            value: $setup.updateTeamMode.value,
            range: $setup.rangeArr
          }, [
            vue.createElementVNode("div", { class: "group-set-item group-set-item-flex" }, [
              vue.createElementVNode("div", null, [
                vue.createElementVNode(
                  "div",
                  null,
                  vue.toDisplayString($setup.t("updateTeamInfoText")),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "div",
                  { class: "group-item-value-text" },
                  vue.toDisplayString($setup.updateTeamMode.text),
                  1
                  /* TEXT */
                )
              ]),
              vue.createVNode($setup["Icon"], {
                iconClassName: "more-icon",
                color: "#999",
                type: "icon-jiantou"
              })
            ])
          ], 40, ["value"]),
          vue.createElementVNode("picker", {
            onChange: $setup.onUpdateInviteMode,
            value: $setup.inviteMode.value,
            range: $setup.rangeArr
          }, [
            vue.createElementVNode("div", { class: "group-set-item group-set-item-flex" }, [
              vue.createElementVNode("div", null, [
                vue.createElementVNode(
                  "div",
                  null,
                  vue.toDisplayString($setup.t("updateTeamInviteText")),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "div",
                  { class: "group-item-value-text" },
                  vue.toDisplayString($setup.inviteMode.text),
                  1
                  /* TEXT */
                )
              ]),
              vue.createVNode($setup["Icon"], {
                iconClassName: "more-icon",
                color: "#999",
                type: "icon-jiantou"
              })
            ])
          ], 40, ["value"]),
          vue.createElementVNode("picker", {
            onChange: $setup.onUpdateExt,
            value: $setup.teamAtMode.value,
            range: $setup.rangeArr
          }, [
            vue.createElementVNode("div", { class: "group-set-item group-set-item-flex" }, [
              vue.createElementVNode("div", null, [
                vue.createElementVNode(
                  "div",
                  null,
                  vue.toDisplayString($setup.t("updateTeamAtText")),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "div",
                  { class: "group-item-value-text" },
                  vue.toDisplayString($setup.teamAtMode.text),
                  1
                  /* TEXT */
                )
              ]),
              vue.createVNode($setup["Icon"], {
                iconClassName: "more-icon",
                color: "#999",
                type: "icon-jiantou"
              })
            ])
          ], 40, ["value"])
        ]),
        $setup.isGroupOwner ? (vue.openBlock(), vue.createElementBlock(
          "div",
          {
            key: 0,
            class: "group-set-button",
            onClick: $setup.goTransformTeam
          },
          vue.toDisplayString($setup.t("transformTeam")),
          1
          /* TEXT */
        )) : vue.createCommentVNode("v-if", true)
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesGroupGroupSetGroupManage = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__scopeId", "data-v-5b3e3a0a"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/group-manage.vue"]]);
  const _sfc_main$7 = /* @__PURE__ */ vue.defineComponent({
    __name: "transform-team",
    setup(__props, { expose: __expose }) {
      __expose();
      const teamMemberList = vue.ref([]);
      let teamId = "";
      const onTapItem = (item) => {
        const nick = uni.$UIKitStore.uiStore.getAppellation({
          account: item.accountId,
          teamId: item.teamId
        });
        uni.showModal({
          title: t$2("transformTeam"),
          content: `${t$2("transformTeamContent")} ${nick} ${t$2("doubt")}`,
          success: (res) => {
            if (res.confirm) {
              uni.$UIKitStore.teamStore.transferTeamActive({
                teamId,
                account: item.accountId,
                leave: false
              }).then(() => {
                uni.showToast({
                  title: t$2("transformTeamSuccessText"),
                  icon: "success"
                });
                customRedirectTo({
                  url: `/pages/Group/group-set/index?id=${teamId}`
                });
              }).catch((error) => {
                switch (error == null ? void 0 : error.code) {
                  case 109427:
                    uni.showToast({
                      title: t$2("noPermission"),
                      icon: "error"
                    });
                    break;
                  default:
                    uni.showToast({
                      title: t$2("transformTeamFailedText"),
                      icon: "error"
                    });
                    break;
                }
              });
            }
          }
        });
      };
      let uninstallTeamMemberWatch = () => {
      };
      onLoad((props) => {
        teamId = props ? props.id : "";
        uninstallTeamMemberWatch = autorun(() => {
          const members = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId).filter((item) => {
            return item.accountId !== uni.$UIKitStore.userStore.myUserInfo.accountId;
          });
          const manager = members.filter(
            (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
          ).sort((a2, b2) => a2.joinTime - b2.joinTime);
          const other = members.filter(
            (item) => ![
              Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER,
              Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
            ].includes(item.memberRole)
          ).sort((a2, b2) => a2.joinTime - b2.joinTime);
          teamMemberList.value = [...manager, ...other];
        });
      });
      vue.onUnmounted(() => {
        uninstallTeamMemberWatch();
      });
      const __returned__ = { teamMemberList, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, onTapItem, get uninstallTeamMemberWatch() {
        return uninstallTeamMemberWatch;
      }, set uninstallTeamMemberWatch(v2) {
        uninstallTeamMemberWatch = v2;
      }, Avatar, Appellation, NavBar: NavBar$1, get t() {
        return t$2;
      }, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("transformTeam")
      }, null, 8, ["title"]),
      vue.createElementVNode(
        "div",
        { class: "subtitle" },
        vue.toDisplayString($setup.t("transformTeamText")),
        1
        /* TEXT */
      ),
      (vue.openBlock(true), vue.createElementBlock(
        vue.Fragment,
        null,
        vue.renderList($setup.teamMemberList, (item) => {
          return vue.openBlock(), vue.createElementBlock("div", {
            class: "member-item",
            key: item.accountId,
            onClick: ($event) => $setup.onTapItem(item)
          }, [
            vue.createVNode($setup["Avatar"], {
              account: item.accountId,
              teamId: item.teamId,
              size: "32"
            }, null, 8, ["account", "teamId"]),
            vue.createVNode($setup["Appellation"], {
              class: "user-name",
              account: item.accountId,
              teamId: item.teamId,
              fontSize: 14
            }, null, 8, ["account", "teamId"]),
            item.memberRole === $setup.V2NIMConst.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_OWNER ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 0,
                class: "user-tag"
              },
              vue.toDisplayString($setup.t("teamOwner")),
              1
              /* TEXT */
            )) : item.memberRole === $setup.V2NIMConst.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER ? (vue.openBlock(), vue.createElementBlock(
              "div",
              {
                key: 1,
                class: "user-tag"
              },
              vue.toDisplayString($setup.t("manager")),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ], 8, ["onClick"]);
        }),
        128
        /* KEYED_FRAGMENT */
      ))
    ]);
  }
  const PagesGroupGroupSetTransformTeam = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__scopeId", "data-v-fdfb943b"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/transform-team.vue"]]);
  const _sfc_main$6 = /* @__PURE__ */ vue.defineComponent({
    __name: "group-manager-list",
    setup(__props, { expose: __expose }) {
      __expose();
      const teamMembers = vue.ref([]);
      const team = vue.ref();
      let teamId = "";
      const goAddManager = () => {
        customNavigateTo({
          url: `/pages/Group/group-set/add-group-manager?id=${teamId}`
        });
      };
      const removeTeamManager = (account) => {
        uni.showModal({
          title: t$2("confirmRemoveText"),
          content: t$2("removeManagerExplain"),
          confirmText: t$2("removeText"),
          success: (res) => {
            if (res.cancel)
              return;
            uni.$UIKitStore.teamStore.updateTeamMemberRoleActive({
              teamId,
              accounts: [account],
              role: Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_NORMAL
            }).then(() => {
              uni.showToast({
                title: t$2("removeSuccessText"),
                icon: "success"
              });
            }).catch((error) => {
              switch (error == null ? void 0 : error.code) {
                case 191004:
                  uni.showToast({
                    title: t$2("userNotInTeam"),
                    icon: "error"
                  });
                  break;
                case 109432:
                  uni.showToast({
                    title: t$2("noPermission"),
                    icon: "error"
                  });
                  break;
                default:
                  uni.showToast({
                    title: t$2("removeFailText"),
                    icon: "error"
                  });
                  break;
              }
            });
          }
        });
      };
      const isGroupOwner = vue.computed(() => {
        const myUser = uni.$UIKitStore.userStore.myUserInfo;
        return (team.value ? team.value.ownerAccountId : "") === (myUser ? myUser.accountId : "");
      });
      let uninstallTeamMembersWatch = () => {
      };
      onLoad((props) => {
        teamId = props ? props.id : "";
        uninstallTeamMembersWatch = autorun(() => {
          team.value = uni.$UIKitStore.teamStore.teams.get(teamId);
          teamMembers.value = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId).filter(
            (item) => item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
          ).sort((a2, b2) => a2.joinTime - b2.joinTime);
        });
      });
      vue.onUnmounted(() => {
        uninstallTeamMembersWatch();
      });
      const __returned__ = { teamMembers, team, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, goAddManager, removeTeamManager, isGroupOwner, get uninstallTeamMembersWatch() {
        return uninstallTeamMembersWatch;
      }, set uninstallTeamMembersWatch(v2) {
        uninstallTeamMembersWatch = v2;
      }, Avatar, NavBar: NavBar$1, get t() {
        return t$2;
      }, Appellation, Icon, Empty };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("teamManager")
      }, null, 8, ["title"]),
      $setup.isGroupOwner ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: "add-item",
        onClick: $setup.goAddManager
      }, [
        vue.createElementVNode(
          "span",
          { class: "add-item-label" },
          vue.toDisplayString($setup.t("addMemberText")),
          1
          /* TEXT */
        ),
        vue.createVNode($setup["Icon"], {
          color: "#999",
          type: "icon-jiantou"
        })
      ])) : vue.createCommentVNode("v-if", true),
      $setup.teamMembers.length ? (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.teamMembers, (item) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              class: "group-item",
              key: item.accountId
            }, [
              vue.createElementVNode("div", { class: "group-member" }, [
                vue.createVNode($setup["Avatar"], {
                  "goto-user-card": true,
                  account: item.accountId,
                  "team-id": item.teamId,
                  size: "32"
                }, null, 8, ["account", "team-id"]),
                vue.createVNode($setup["Appellation"], {
                  class: "user-name",
                  account: item.accountId,
                  "team-id": item.teamId,
                  "font-size": 14
                }, null, 8, ["account", "team-id"])
              ]),
              $setup.isGroupOwner ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: "btn-remove",
                onClick: () => {
                  $setup.removeTeamManager(item.accountId);
                }
              }, vue.toDisplayString($setup.t("removeText")), 9, ["onClick"])) : vue.createCommentVNode("v-if", true)
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : (vue.openBlock(), vue.createBlock($setup["Empty"], {
        key: 2,
        text: $setup.t("noTeamManager")
      }, null, 8, ["text"]))
    ]);
  }
  const PagesGroupGroupSetGroupManagerList = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__scopeId", "data-v-100535a2"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/group-manager-list.vue"]]);
  const _sfc_main$5 = /* @__PURE__ */ vue.defineComponent({
    __name: "add-group-manager",
    setup(__props, { expose: __expose }) {
      __expose();
      const teamMemberList = vue.ref([]);
      let selectManager = [];
      let teamId = "";
      const checkboxChange = (select) => {
        selectManager = select;
      };
      const onOk = debounce(() => {
        if (!selectManager.length) {
          uni.showToast({
            title: t$2("pleaseSelectMember"),
            icon: "error"
          });
          return;
        }
        uni.$UIKitStore.teamStore.updateTeamMemberRoleActive({
          teamId,
          accounts: selectManager,
          role: Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
        }).then(() => {
          uni.showToast({
            title: t$2("addTeamManagerSuccessText"),
            icon: "success"
          });
          uni.navigateBack({
            delta: 1
          });
        }).catch((error) => {
          switch (error == null ? void 0 : error.code) {
            case 191004:
              uni.showToast({
                title: t$2("userNotInTeam"),
                icon: "error"
              });
              break;
            case 109432:
              uni.showToast({
                title: t$2("noPermission"),
                icon: "error"
              });
              break;
            default:
              uni.showToast({
                title: t$2("addTeamManagerFailText"),
                icon: "error"
              });
              break;
          }
        });
      }, 800);
      let uninstallTeamMemberListWatch = () => {
      };
      onLoad((props) => {
        teamId = props ? props.id : "";
        uninstallTeamMemberListWatch = autorun(() => {
          teamMemberList.value = uni.$UIKitStore.teamMemberStore.getTeamMember(teamId).filter((item) => {
            return item.accountId !== uni.$UIKitStore.userStore.myUserInfo.accountId;
          }).sort((a2, b2) => a2.joinTime - b2.joinTime).map((item) => {
            if (item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER) {
              selectManager.push(item.accountId);
            }
            return {
              accountId: item.accountId,
              teamId: item.teamId,
              checked: item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER,
              disabled: item.memberRole === Ma.V2NIMTeamMemberRole.V2NIM_TEAM_MEMBER_ROLE_MANAGER
            };
          });
        });
        uni.$on(events.FRIEND_SELECT, () => {
          onOk();
        });
      });
      vue.onUnmounted(() => {
        uninstallTeamMemberListWatch();
      });
      onUnload(() => {
        uni.$off(events.FRIEND_SELECT);
      });
      const __returned__ = { teamMemberList, get selectManager() {
        return selectManager;
      }, set selectManager(v2) {
        selectManager = v2;
      }, get teamId() {
        return teamId;
      }, set teamId(v2) {
        teamId = v2;
      }, checkboxChange, onOk, get uninstallTeamMemberListWatch() {
        return uninstallTeamMemberListWatch;
      }, set uninstallTeamMemberListWatch(v2) {
        uninstallTeamMemberListWatch = v2;
      }, PersonSelect, NavBar: NavBar$1, get t() {
        return t$2;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", null, [
      vue.createVNode($setup["NavBar"], {
        title: $setup.t("chooseText")
      }, null, 8, ["title"]),
      vue.createVNode($setup["PersonSelect"], {
        max: 10,
        personList: $setup.teamMemberList,
        onCheckboxChange: $setup.checkboxChange,
        showBtn: true,
        onBtnClick: $setup.onOk
      }, null, 8, ["personList", "onBtnClick"])
    ]);
  }
  const PagesGroupGroupSetAddGroupManager = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__scopeId", "data-v-374961e7"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Group/group-set/add-group-manager.vue"]]);
  const _sfc_main$4 = /* @__PURE__ */ vue.defineComponent({
    __name: "Modal",
    props: {
      title: { type: String, required: true },
      confirmText: { type: String, required: true },
      cancelText: { type: String, required: true },
      visible: { type: Boolean, required: true }
    },
    emits: ["confirm", "cancel"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const emit = __emit;
      const handleMaskClick = () => {
        emit("cancel");
      };
      const handleConfirmClick = () => {
        emit("confirm");
      };
      const handleCancelClick = () => {
        emit("cancel");
      };
      const __returned__ = { emit, handleMaskClick, handleConfirmClick, handleCancelClick };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    return $props.visible ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 0,
      class: "modal"
    }, [
      vue.createElementVNode("div", {
        class: "mask",
        onClick: $setup.handleMaskClick
      }),
      vue.createElementVNode("div", { class: "content" }, [
        vue.createElementVNode(
          "div",
          { class: "title" },
          vue.toDisplayString($props.title),
          1
          /* TEXT */
        ),
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
        vue.createElementVNode("div", { class: "buttons" }, [
          vue.createElementVNode(
            "div",
            {
              class: "button cancel",
              onClick: $setup.handleCancelClick
            },
            vue.toDisplayString($props.cancelText),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "div",
            {
              class: "button confirm",
              onClick: $setup.handleConfirmClick
            },
            vue.toDisplayString($props.confirmText),
            1
            /* TEXT */
          )
        ])
      ])
    ])) : vue.createCommentVNode("v-if", true);
  }
  const Modal = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__scopeId", "data-v-0b5a066a"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/components/Modal.vue"]]);
  const _sfc_main$3 = /* @__PURE__ */ vue.defineComponent({
    __name: "message-forward-modal",
    props: {
      forwardModalVisible: { type: Boolean, required: true },
      forwardTo: { type: String, required: true },
      forwardMsg: { type: Object, required: true },
      forwardConversationType: { type: null, required: true },
      forwardToTeamInfo: { type: Object, required: false }
    },
    emits: ["confirm", "cancel"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const forwardComment = vue.ref("");
      const handleForwardInputChange = (event) => {
        forwardComment.value = event.detail.value;
      };
      const handleCancel = () => {
        emit("cancel");
      };
      const handleConfirm = () => {
        emit("confirm", forwardComment.value);
      };
      const forwardToNick = vue.computed(() => {
        return uni.$UIKitStore.uiStore.getAppellation({
          account: props.forwardTo
        });
      });
      const forwardFromNick = vue.computed(() => {
        var _a2;
        return uni.$UIKitStore.uiStore.getAppellation({
          account: (_a2 = props.forwardMsg) == null ? void 0 : _a2.senderId
        });
      });
      const __returned__ = { props, emit, forwardComment, handleForwardInputChange, handleCancel, handleConfirm, forwardToNick, forwardFromNick, get t() {
        return t$2;
      }, Modal, Avatar, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock($setup["Modal"], {
      title: $setup.t("sendToText"),
      visible: $props.forwardModalVisible,
      confirmText: $setup.t("sendText"),
      cancelText: $setup.t("cancelText"),
      onCancel: $setup.handleCancel,
      onConfirm: $setup.handleConfirm
    }, {
      default: vue.withCtx(() => [
        $setup.props.forwardConversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: "avatar-wrapper"
        }, [
          vue.createVNode($setup["Avatar"], {
            account: $setup.props.forwardToTeamInfo && $setup.props.forwardToTeamInfo.teamId || "",
            avatar: $setup.props.forwardToTeamInfo && $setup.props.forwardToTeamInfo.avatar,
            size: "36"
          }, null, 8, ["account", "avatar"]),
          vue.createElementVNode(
            "div",
            { class: "name" },
            vue.toDisplayString($setup.props.forwardToTeamInfo && $setup.props.forwardToTeamInfo.name || ""),
            1
            /* TEXT */
          )
        ])) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: "avatar-wrapper"
        }, [
          vue.createVNode($setup["Avatar"], {
            account: $props.forwardTo,
            size: "36"
          }, null, 8, ["account"]),
          vue.createElementVNode("div", { class: "name" }, [
            vue.createElementVNode(
              "span",
              null,
              vue.toDisplayString($setup.forwardToNick),
              1
              /* TEXT */
            )
          ])
        ])),
        vue.createElementVNode(
          "div",
          { class: "description" },
          vue.toDisplayString("[" + $setup.t("forwardText") + "]") + " " + vue.toDisplayString($setup.forwardFromNick) + " " + vue.toDisplayString($setup.t("sessionRecordText")),
          1
          /* TEXT */
        ),
        vue.createElementVNode("input", {
          class: "forward-input",
          onInput: $setup.handleForwardInputChange,
          placeholder: $setup.t("forwardComment")
        }, null, 40, ["placeholder"])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["title", "visible", "confirmText", "cancelText"]);
  }
  const ForwardModal = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__scopeId", "data-v-6495a871"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message/message-forward-modal.vue"]]);
  const _sfc_main$2 = /* @__PURE__ */ vue.defineComponent({
    __name: "forward",
    setup(__props, { expose: __expose }) {
      var _a2;
      __expose();
      const friendGroupList = vue.ref([]);
      const forwardConversationType = vue.ref(
        Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P
      );
      const teamList = vue.ref([]);
      const conversationId = (_a2 = uni.$UIKitStore) == null ? void 0 : _a2.uiStore.selectedConversation;
      let msgIdClient = "";
      let origin = "";
      const forwardModalVisible = vue.ref(false);
      const forwardTo = vue.ref("");
      const forwardMsg = vue.ref();
      const forwardToTeamInfo = vue.ref();
      const moveThrough = vue.computed(() => {
        return forwardModalVisible.value;
      });
      const handleForwardConfirm = (forwardComment) => {
        forwardModalVisible.value = false;
        if (!forwardMsg.value) {
          uni.showToast({
            title: t$2("getForwardMessageFailed"),
            icon: "error"
          });
          setTimeout(() => {
            backToChat();
          }, 1e3);
          return;
        }
        const forwardConversationId = uni.$UIKitNIM.V2NIMConversationIdUtil[forwardConversationType.value === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_P2P ? "p2pConversationId" : "teamConversationId"](forwardTo.value);
        uni.$UIKitStore.msgStore.forwardMsgActive(forwardMsg.value, forwardConversationId, forwardComment).then(() => {
          uni.showToast({
            title: t$2("forwardSuccessText"),
            icon: "success",
            duration: 1e3
          });
          setTimeout(() => {
            backToChat();
          }, 1e3);
        }).catch(() => {
          uni.showToast({
            title: t$2("forwardFailedText"),
            icon: "error",
            duration: 1e3
          });
        });
      };
      const handleForwardCancel = () => {
        forwardModalVisible.value = false;
      };
      onLoad((props) => {
        forwardConversationType.value = Number(props == null ? void 0 : props.forwardConversationType);
        msgIdClient = props == null ? void 0 : props.msgIdClient;
        origin = props == null ? void 0 : props.origin;
      });
      const teamListWatch = autorun(() => {
        teamList.value = uni.$UIKitStore.uiStore.teamList;
      });
      const friendsWatch = autorun(() => {
        const friendsWithoutBlacklist = uni.$UIKitStore.uiStore.friends.filter(
          (item) => !uni.$UIKitStore.relationStore.blacklist.includes(item.accountId)
        ).map((item) => ({
          account: item.accountId,
          appellation: uni.$UIKitStore.uiStore.getAppellation({
            account: item.accountId,
            teamId: forwardTo.value
          })
        }));
        friendGroupList.value = friendGroupByPy(
          friendsWithoutBlacklist,
          {
            firstKey: "appellation"
          },
          false
        );
      });
      const backToChat = () => {
        uni.navigateBack({
          delta: 1
        });
      };
      const handleItemClick = (_forwardTo) => {
        var _a3;
        if (_forwardTo && msgIdClient) {
          forwardTo.value = _forwardTo;
          forwardMsg.value = (_a3 = uni.$UIKitStore.msgStore.getMsg(conversationId, [
            msgIdClient
          ])) == null ? void 0 : _a3[0];
          if (origin === "pin") {
            const curPinMsgsMap = uni.$UIKitStore.msgStore.pinMsgs.get(conversationId);
            const pinInfo = [...curPinMsgsMap.values()].find((pinInfo2) => {
              if (pinInfo2.message) {
                return pinInfo2.message.messageClientId === msgIdClient;
              } else {
                return false;
              }
            });
            if (pinInfo) {
              forwardMsg.value = pinInfo.message;
            }
          } else if (origin === "collection") {
            const msg = uni.$UIKitStore.msgStore.collectionMsgs.get(msgIdClient);
            if (msg) {
              forwardMsg.value = msg;
            }
          }
          forwardModalVisible.value = true;
          if (forwardConversationType.value === Ma.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM) {
            forwardToTeamInfo.value = uni.$UIKitStore.teamStore.teams.get(_forwardTo);
          }
        }
      };
      vue.onUnmounted(() => {
        teamListWatch();
        friendsWatch();
      });
      const __returned__ = { friendGroupList, forwardConversationType, teamList, conversationId, get msgIdClient() {
        return msgIdClient;
      }, set msgIdClient(v2) {
        msgIdClient = v2;
      }, get origin() {
        return origin;
      }, set origin(v2) {
        origin = v2;
      }, forwardModalVisible, forwardTo, forwardMsg, forwardToTeamInfo, moveThrough, handleForwardConfirm, handleForwardCancel, teamListWatch, friendsWatch, backToChat, handleItemClick, NavBar: NavBar$1, get t() {
        return t$2;
      }, Avatar, Empty, Icon, ForwardModal, get V2NIMConst() {
        return Ma;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_page_meta = resolveEasycom(vue.resolveDynamicComponent("page-meta"), __easycom_0);
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(" 处理滚动穿透  此为官方推荐做法 https://uniapp.dcloud.net.cn/component/uniui/uni-popup.html#%E4%BB%8B%E7%BB%8D "),
        vue.createVNode(_component_page_meta, {
          "page-style": "overflow:" + ($setup.moveThrough ? "hidden" : "visible")
        }, null, 8, ["page-style"]),
        vue.createElementVNode("div", null, [
          vue.createVNode($setup["NavBar"], {
            title: $setup.forwardConversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? $setup.t("teamChooseText") : $setup.t("chooseText"),
            showLeft: true
          }, {
            left: vue.withCtx(() => [
              vue.createElementVNode("div", { onClick: $setup.backToChat }, [
                vue.createVNode($setup["Icon"], {
                  type: "icon-zuojiantou",
                  size: 22
                })
              ])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["title"]),
          $setup.forwardConversationType === $setup.V2NIMConst.V2NIMConversationType.V2NIM_CONVERSATION_TYPE_TEAM ? (vue.openBlock(), vue.createElementBlock("div", { key: 0 }, [
            vue.createElementVNode("div", { class: "group-list-content" }, [
              $setup.teamList.length === 0 ? (vue.openBlock(), vue.createBlock($setup["Empty"], {
                key: 0,
                text: $setup.t("TeamEmptyText")
              }, null, 8, ["text"])) : (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($setup.teamList, (team) => {
                    return vue.openBlock(), vue.createElementBlock("div", {
                      class: "group-item",
                      key: team.teamId,
                      onClick: () => $setup.handleItemClick(team.teamId)
                    }, [
                      vue.createVNode($setup["Avatar"], {
                        account: team.teamId,
                        avatar: team.avatar
                      }, null, 8, ["account", "avatar"]),
                      vue.createElementVNode(
                        "span",
                        { class: "group-name" },
                        vue.toDisplayString(team.name),
                        1
                        /* TEXT */
                      )
                    ], 8, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]))
            ])
          ])) : (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
            $setup.friendGroupList.length > 0 ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: "friend-list-container"
            }, [
              vue.createElementVNode("div", { class: "friend-group-list" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($setup.friendGroupList, (friendGroup) => {
                    return vue.openBlock(), vue.createElementBlock("div", {
                      class: "friend-group-item",
                      key: friendGroup.key
                    }, [
                      vue.createElementVNode(
                        "div",
                        { class: "friend-group-title" },
                        vue.toDisplayString(friendGroup.key),
                        1
                        /* TEXT */
                      ),
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(friendGroup.data, (friend) => {
                          return vue.openBlock(), vue.createElementBlock("div", {
                            class: "friend-item",
                            key: friend.account,
                            onClick: () => $setup.handleItemClick(friend.account)
                          }, [
                            vue.createVNode($setup["Avatar"], {
                              account: friend.account,
                              size: "36"
                            }, null, 8, ["account"]),
                            vue.createElementVNode(
                              "div",
                              { class: "friend-name" },
                              vue.toDisplayString(friend.appellation),
                              1
                              /* TEXT */
                            )
                          ], 8, ["onClick"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])
            ])) : (vue.openBlock(), vue.createBlock($setup["Empty"], {
              key: 1,
              text: $setup.t("noFriendText")
            }, null, 8, ["text"]))
          ])),
          vue.createCommentVNode(" 转发弹窗 "),
          vue.createVNode($setup["ForwardModal"], {
            "forward-modal-visible": $setup.forwardModalVisible,
            "forward-to": $setup.forwardTo,
            "forward-msg": $setup.forwardMsg,
            "forward-conversation-type": $setup.forwardConversationType,
            "forward-to-team-info": $setup.forwardToTeamInfo,
            onConfirm: $setup.handleForwardConfirm,
            onCancel: $setup.handleForwardCancel
          }, null, 8, ["forward-modal-visible", "forward-to", "forward-msg", "forward-conversation-type", "forward-to-team-info"])
        ])
      ],
      64
      /* STABLE_FRAGMENT */
    );
  }
  const PagesChatForward = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__scopeId", "data-v-ac8ab99f"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/forward.vue"]]);
  const _sfc_main$1 = /* @__PURE__ */ vue.defineComponent({
    __name: "message-read-info",
    setup(__props, { expose: __expose }) {
      __expose();
      const readCount = vue.ref(0);
      const unReadCount = vue.ref(0);
      const readList = vue.ref([]);
      const unReadList = vue.ref([]);
      const selectedType = vue.ref("read");
      const teamId = vue.ref("");
      const backToConversation = () => {
        uni.navigateBack({
          delta: 1
        });
      };
      onLoad((props) => {
        const messageClientId = props == null ? void 0 : props.messageClientId;
        const conversationId = props == null ? void 0 : props.conversationId;
        if (messageClientId && conversationId) {
          teamId.value = uni.$UIKitNIM.V2NIMConversationIdUtil.parseConversationTargetId(
            conversationId
          );
          const msg = uni.$UIKitStore.msgStore.getMsg(conversationId, [
            messageClientId
          ]);
          if (msg.length) {
            uni.$UIKitStore.msgStore.getTeamMessageReceiptDetailsActive(msg[0]).then((res) => {
              readCount.value = res == null ? void 0 : res.readReceipt.readCount;
              unReadCount.value = res == null ? void 0 : res.readReceipt.unreadCount;
              readList.value = res == null ? void 0 : res.readAccountList;
              setTimeout(() => {
                unReadList.value = res == null ? void 0 : res.unreadAccountList;
              });
            });
          }
        }
      });
      const __returned__ = { readCount, unReadCount, readList, unReadList, selectedType, teamId, backToConversation, NetworkAlert, NavBar, Icon, get t() {
        return t$2;
      }, Avatar, Appellation, Empty };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", { class: "msg-page-wrapper" }, [
      vue.createElementVNode("div", { class: "msg-nav" }, [
        vue.createVNode($setup["NavBar"], {
          title: $setup.t("msgReadPageTitleText"),
          showLeft: true
        }, {
          left: vue.withCtx(() => [
            vue.createElementVNode("div", { onClick: $setup.backToConversation }, [
              vue.createVNode($setup["Icon"], {
                type: "icon-zuojiantou",
                size: 22
              })
            ])
          ]),
          _: 1
          /* STABLE */
        }, 8, ["title"])
      ]),
      vue.createElementVNode("div", { class: "msg-alert" }, [
        vue.createVNode($setup["NetworkAlert"])
      ]),
      vue.createElementVNode("div", { class: "msg-read-header" }, [
        vue.createElementVNode(
          "div",
          {
            class: vue.normalizeClass(["msg-read-header-item", $setup.selectedType === "read" ? "active" : ""]),
            onClick: _cache[0] || (_cache[0] = ($event) => $setup.selectedType = "read")
          },
          vue.toDisplayString(`${$setup.t("readText")}(${$setup.readCount})`),
          3
          /* TEXT, CLASS */
        ),
        vue.createElementVNode(
          "div",
          {
            class: vue.normalizeClass(["msg-read-header-item", $setup.selectedType === "unread" ? "active" : ""]),
            onClick: _cache[1] || (_cache[1] = ($event) => $setup.selectedType = "unread")
          },
          vue.toDisplayString(`${$setup.t("unreadText")}(${$setup.unReadCount})`),
          3
          /* TEXT, CLASS */
        )
      ]),
      vue.withDirectives(vue.createElementVNode(
        "div",
        { class: "list-wrapper" },
        [
          $setup.readList.length ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 0 },
            vue.renderList($setup.readList, (item) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                class: "list-item",
                key: item
              }, [
                vue.createElementVNode("div", { class: "avatar-wrapper" }, [
                  vue.createVNode($setup["Avatar"], {
                    size: "40",
                    account: item,
                    "goto-user-card": true,
                    teamId: $setup.teamId,
                    "goto-team-card": false
                  }, null, 8, ["account", "teamId"])
                ]),
                vue.createVNode($setup["Appellation"], {
                  account: item,
                  teamId: $setup.teamId
                }, null, 8, ["account", "teamId"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
            vue.createVNode($setup["Empty"], {
              text: $setup.t("allUnReadText")
            }, null, 8, ["text"])
          ]))
        ],
        512
        /* NEED_PATCH */
      ), [
        [vue.vShow, $setup.selectedType === "read"]
      ]),
      vue.withDirectives(vue.createElementVNode(
        "div",
        { class: "list-wrapper" },
        [
          $setup.unReadList.length ? (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            { key: 0 },
            vue.renderList($setup.unReadList, (item) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                class: "list-item",
                key: item
              }, [
                vue.createElementVNode("div", { class: "avatar-wrapper" }, [
                  vue.createVNode($setup["Avatar"], {
                    size: "40",
                    account: item,
                    "goto-user-card": true,
                    teamId: $setup.teamId,
                    "goto-team-card": false
                  }, null, 8, ["account", "teamId"])
                ]),
                vue.createVNode($setup["Appellation"], {
                  account: item,
                  teamId: $setup.teamId
                }, null, 8, ["account", "teamId"])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )) : (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
            vue.createVNode($setup["Empty"], {
              text: $setup.t("allReadText")
            }, null, 8, ["text"])
          ]))
        ],
        512
        /* NEED_PATCH */
      ), [
        [vue.vShow, $setup.selectedType === "unread"]
      ])
    ]);
  }
  const PagesChatMessageReadInfo = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__scopeId", "data-v-3042b764"], ["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/pages/Chat/message-read-info.vue"]]);
  __definePage("pages/Conversation/index", PagesConversationIndex);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/Conversation/conversation-search/index", PagesConversationConversationSearchIndex);
  __definePage("pages/Login/index", PagesLoginIndex);
  __definePage("pages/Chat/message/p2p-set", PagesChatMessageP2pSet);
  __definePage("pages/Chat/message/pin-list", PagesChatMessagePinList);
  __definePage("pages/Group/group-set/index", PagesGroupGroupSetIndex);
  __definePage("pages/Group/group-set/group-info-edit", PagesGroupGroupSetGroupInfoEdit);
  __definePage("pages/Group/group-set/group-name-edit", PagesGroupGroupSetGroupNameEdit);
  __definePage("pages/Group/group-set/group-intro-edit", PagesGroupGroupSetGroupIntroEdit);
  __definePage("pages/Group/group-set/group-avatar-edit", PagesGroupGroupSetGroupAvatarEdit);
  __definePage("pages/Contact/index", PagesContactIndex);
  __definePage("pages/Contact/contact-list/group-list", PagesContactContactListGroupList);
  __definePage("pages/Contact/contact-list/valid-list", PagesContactContactListValidList);
  __definePage("pages/Contact/contact-list/black-list", PagesContactContactListBlackList);
  __definePage("pages/Chat/index", PagesChatIndex);
  __definePage("pages/Chat/video-play", PagesChatVideoPlay);
  __definePage("pages/Group/group-member/index", PagesGroupGroupMemberIndex);
  __definePage("pages/Group/group-create/index", PagesGroupGroupCreateIndex);
  __definePage("pages/Group/group-add/index", PagesGroupGroupAddIndex);
  __definePage("pages/Friend/add-friend/index", PagesFriendAddFriendIndex);
  __definePage("pages/Friend/friend-info-edit", PagesFriendFriendInfoEdit);
  __definePage("pages/user-card/friend/index", PagesUserCardFriendIndex);
  __definePage("pages/user-card/my/index", PagesUserCardMyIndex);
  __definePage("pages/user-card/my/about", PagesUserCardMyAbout);
  __definePage("pages/user-card/my/setting", PagesUserCardMySetting);
  __definePage("pages/user-card/my/collection-card", PagesUserCardMyCollectionCard);
  __definePage("pages/user-card/my/collection-list", PagesUserCardMyCollectionList);
  __definePage("pages/user-card/my-detail/index", PagesUserCardMyDetailIndex);
  __definePage("pages/user-card/detail-item/index", PagesUserCardDetailItemIndex);
  __definePage("pages/Group/group-set/nick-in-team", PagesGroupGroupSetNickInTeam);
  __definePage("pages/Group/group-set/group-manage", PagesGroupGroupSetGroupManage);
  __definePage("pages/Group/group-set/transform-team", PagesGroupGroupSetTransformTeam);
  __definePage("pages/Group/group-set/group-manager-list", PagesGroupGroupSetGroupManagerList);
  __definePage("pages/Group/group-set/add-group-manager", PagesGroupGroupSetAddGroupManager);
  __definePage("pages/Chat/forward", PagesChatForward);
  __definePage("pages/Chat/message-read-info", PagesChatMessageReadInfo);
  var __assign = function() {
    __assign = Object.assign || function __assign2(t2) {
      for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s2, e2) {
    var t2 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
        t2[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
        if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
          t2[p2[i2]] = s2[p2[i2]];
      }
    return t2;
  }
  function __awaiter(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _2 = {
      label: 0,
      sent: function() {
        if (t2[0] & 1)
          throw t2[1];
        return t2[1];
      },
      trys: [],
      ops: []
    }, f2, y2, t2, g2;
    return g2 = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n2) {
      return function(v2) {
        return step([n2, v2]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (g2 && (g2 = 0, op[0] && (_2 = 0)), _2)
        try {
          if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
            return t2;
          if (y2 = 0, t2)
            op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _2.label++;
              return { value: op[1], done: false };
            case 5:
              _2.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t2[1]) {
                _2.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _2.label < t2[2]) {
                _2.label = t2[2];
                _2.ops.push(op);
                break;
              }
              if (t2[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e2) {
          op = [6, e2];
          y2 = 0;
        } finally {
          f2 = t2 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values(o2) {
    var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
    if (m2)
      return m2.call(o2);
    if (o2 && typeof o2.length === "number")
      return {
        next: function() {
          if (o2 && i2 >= o2.length)
            o2 = void 0;
          return { value: o2 && o2[i2++], done: !o2 };
        }
      };
    throw new TypeError(
      s2 ? "Object is not iterable." : "Symbol.iterator is not defined."
    );
  }
  function __read(o2, n2) {
    var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
    if (!m2)
      return o2;
    var i2 = m2.call(o2), r2, ar2 = [], e2;
    try {
      while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
        ar2.push(r2.value);
    } catch (error) {
      e2 = { error };
    } finally {
      try {
        if (r2 && !r2.done && (m2 = i2["return"]))
          m2.call(i2);
      } finally {
        if (e2)
          throw e2.error;
      }
    }
    return ar2;
  }
  function __spreadArray(to2, from, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l2 = from.length, ar2; i2 < l2; i2++) {
        if (ar2 || !(i2 in from)) {
          if (!ar2)
            ar2 = Array.prototype.slice.call(from, 0, i2);
          ar2[i2] = from[i2];
        }
      }
    return to2.concat(ar2 || Array.prototype.slice.call(from));
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e2 = new Error(message);
    return e2.name = "SuppressedError", e2.error = error, e2.suppressed = suppressed, e2;
  };
  var ConnectStore = (
    /** @class */
    function() {
      function ConnectStore2(rootStore, nim, localOptions) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.localOptions = localOptions;
        this.connectStatus = 3;
        this.loginStatus = 0;
        this.logger = null;
        makeAutoObservable(this);
        this._onLoginStatus = this._onLoginStatus.bind(this);
        this._onLoginFailed = this._onLoginFailed.bind(this);
        this._onKickedOffline = this._onKickedOffline.bind(this);
        this._onLoginClientChanged = this._onLoginClientChanged.bind(this);
        this._onConnectStatus = this._onConnectStatus.bind(this);
        this._onDisconnected = this._onDisconnected.bind(this);
        this._onConnectFailed = this._onConnectFailed.bind(this);
        this._onDataSync = this._onDataSync.bind(this);
        this.logger = rootStore.logger;
        nim.V2NIMLoginService.on("onLoginStatus", this._onLoginStatus);
        nim.V2NIMLoginService.on("onLoginFailed", this._onLoginFailed);
        nim.V2NIMLoginService.on("onKickedOffline", this._onKickedOffline);
        nim.V2NIMLoginService.on("onLoginClientChanged", this._onLoginClientChanged);
        nim.V2NIMLoginService.on("onConnectStatus", this._onConnectStatus);
        nim.V2NIMLoginService.on("onDisconnected", this._onDisconnected);
        nim.V2NIMLoginService.on("onConnectFailed", this._onConnectFailed);
        nim.V2NIMLoginService.on("onDataSync", this._onDataSync);
      }
      ConnectStore2.prototype.destroy = function() {
        this.nim.V2NIMLoginService.off("onLoginStatus", this._onLoginStatus);
        this.nim.V2NIMLoginService.off("onLoginFailed", this._onLoginFailed);
        this.nim.V2NIMLoginService.off("onKickedOffline", this._onKickedOffline);
        this.nim.V2NIMLoginService.off(
          "onLoginClientChanged",
          this._onLoginClientChanged
        );
        this.nim.V2NIMLoginService.off("onConnectStatus", this._onConnectStatus);
        this.nim.V2NIMLoginService.off("onDisconnected", this._onDisconnected);
        this.nim.V2NIMLoginService.off("onConnectFailed", this._onConnectFailed);
        this.nim.V2NIMLoginService.off("onDataSync", this._onDataSync);
      };
      ConnectStore2.prototype._onLoginStatus = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onLoginStatus", e2);
        this.loginStatus = e2;
      };
      ConnectStore2.prototype._onLoginFailed = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onLoginFailed", e2);
      };
      ConnectStore2.prototype._onKickedOffline = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onKickedOffline", e2);
      };
      ConnectStore2.prototype._onLoginClientChanged = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onLoginClientChanged", e2);
      };
      ConnectStore2.prototype._onConnectStatus = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onConnectStatus", e2);
        this.connectStatus = e2;
      };
      ConnectStore2.prototype._onDisconnected = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onDisconnected", e2);
      };
      ConnectStore2.prototype._onConnectFailed = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onConnectFailed", e2);
      };
      ConnectStore2.prototype._onDataSync = function(e2) {
        var _a2, _b, _c, _d;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onDataSync", e2);
        this.rootStore.userStore.getMyUserInfoActive();
        this.rootStore.relationStore.getBlockListActive();
        this.rootStore.relationStore.getP2PMuteListActive();
        if ((_b = this.rootStore.sdkOptions) === null || _b === void 0 ? void 0 : _b.enableV2CloudConversation) {
          (_c = this.rootStore.conversationStore) === null || _c === void 0 ? void 0 : _c.getConversationListActive(
            0,
            this.localOptions.conversationLimit || 100
          );
        } else {
          (_d = this.rootStore.localConversationStore) === null || _d === void 0 ? void 0 : _d.getConversationListActive(
            0,
            this.localOptions.conversationLimit || 100
          );
        }
        this.rootStore.teamStore.getJoinedTeamListActive();
        this.rootStore.friendStore.getFriendListActive();
        this.rootStore.friendStore.getAddApplicationListActive({
          status: [],
          offset: 0,
          limit: 100
        });
        this.rootStore.teamStore.getTeamJoinActionInfoListActive({
          offset: 0,
          limit: 100
        });
        this.rootStore.aiUserStore.getAIUserListActive();
      };
      return ConnectStore2;
    }()
  );
  var FriendStore = (
    /** @class */
    function() {
      function FriendStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.friends = /* @__PURE__ */ new Map();
        this.logger = null;
        makeAutoObservable(this);
        this._onFriendAdded = this._onFriendAdded.bind(this);
        this._onFriendDeleted = this._onFriendDeleted.bind(this);
        this._onFriendAddApplication = this._onFriendAddApplication.bind(this);
        this._onFriendAddRejected = this._onFriendAddRejected.bind(this);
        this._onFriendInfoChanged = this._onFriendInfoChanged.bind(this);
        this.logger = rootStore.logger;
        nim.V2NIMFriendService.on("onFriendAdded", this._onFriendAdded);
        nim.V2NIMFriendService.on("onFriendDeleted", this._onFriendDeleted);
        nim.V2NIMFriendService.on(
          "onFriendAddApplication",
          this._onFriendAddApplication
        );
        nim.V2NIMFriendService.on("onFriendAddRejected", this._onFriendAddRejected);
        nim.V2NIMFriendService.on("onFriendInfoChanged", this._onFriendInfoChanged);
      }
      FriendStore2.prototype.resetState = function() {
        this.friends.clear();
      };
      FriendStore2.prototype.destroy = function() {
        this.resetState();
        this.nim.V2NIMFriendService.off("onFriendAdded", this._onFriendAdded);
        this.nim.V2NIMFriendService.off("onFriendDeleted", this._onFriendDeleted);
        this.nim.V2NIMFriendService.off(
          "onFriendAddApplication",
          this._onFriendAddApplication
        );
        this.nim.V2NIMFriendService.off(
          "onFriendAddRejected",
          this._onFriendAddRejected
        );
        this.nim.V2NIMFriendService.off(
          "onFriendInfoChanged",
          this._onFriendInfoChanged
        );
      };
      FriendStore2.prototype.getFriendListActive = function() {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var friends, error_1;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getFriendListActive");
                return [4, this.nim.V2NIMFriendService.getFriendList()];
              case 1:
                friends = _d.sent();
                this.addFriend(friends);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getFriendListActive success", friends);
                return [2, friends];
              case 2:
                error_1 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("getFriendListActive failed: ", error_1);
                throw error_1;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FriendStore2.prototype.getAddApplicationListActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_2;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getAddApplicationListActive");
                return [
                  4,
                  this.nim.V2NIMFriendService.getAddApplicationList(options)
                ];
              case 1:
                res = _d.sent();
                this.rootStore.sysMsgStore.addFriendApplyMsg(res.infos);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getAddApplicationListActive success", res);
                return [2, res];
              case 2:
                error_2 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("getAddApplicationListActive failed: ", error_2);
                throw error_2;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FriendStore2.prototype.addFriendActive = function(accountId, params) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_3;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("addFriendActive", accountId);
                return [
                  4,
                  this.nim.V2NIMFriendService.addFriend(accountId, params)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("addFriendActive success", accountId, params);
                return [3, 3];
              case 2:
                error_3 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("addFriendActive failed: ", accountId, params, error_3);
                throw error_3;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FriendStore2.prototype.acceptAddApplicationActive = function(application) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_4;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("acceptAddApplicationActive", application);
                return [
                  4,
                  this.nim.V2NIMFriendService.acceptAddApplication(application)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("acceptAddApplicationActive success", application);
                return [3, 3];
              case 2:
                error_4 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "acceptAddApplicationActive failed: ",
                  application,
                  error_4
                );
                throw error_4;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FriendStore2.prototype.rejectAddApplicationActive = function(application, postscript) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_5;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("rejectAddApplicationActive", application, postscript);
                return [
                  4,
                  this.nim.V2NIMFriendService.rejectAddApplication(
                    application,
                    postscript
                  )
                  // this.rootStore.sysMsgStore.updateFriendApplyMsg([
                  //   {
                  //     ...application,
                  //     status:
                  //       V2NIMConst.V2NIMFriendAddApplicationStatus
                  //         .V2NIM_FRIEND_ADD_APPLICATION_STATUS_REJECTED,
                  //     isRead: true,
                  //   },
                  // ])
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "rejectFriendApplyActive success",
                  application,
                  postscript
                );
                return [3, 3];
              case 2:
                error_5 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "rejectFriendApplyActive failed: ",
                  application,
                  postscript,
                  error_5
                );
                throw error_5;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FriendStore2.prototype.deleteFriendActive = function(accountId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_6;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("deleteFriendActive", accountId);
                return [
                  4,
                  this.nim.V2NIMFriendService.deleteFriend(accountId, {
                    deleteAlias: true
                  })
                ];
              case 1:
                _d.sent();
                this.removeFriend([accountId]);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("deleteFriendActive success", accountId);
                return [3, 3];
              case 2:
                error_6 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("deleteFriendActive failed: ", accountId, error_6);
                throw error_6;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FriendStore2.prototype.setFriendInfoActive = function(accountId, params) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_7;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("setFriendInfoActive", accountId, params);
                return [
                  4,
                  this.nim.V2NIMFriendService.setFriendInfo(accountId, params)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("setFriendInfoActive success", accountId, params);
                return [3, 3];
              case 2:
                error_7 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "setFriendInfoActive failed: ",
                  accountId,
                  params,
                  error_7
                );
                throw error_7;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      FriendStore2.prototype.addFriend = function(data2) {
        var _this = this;
        data2.filter(function(item) {
          return !!item.accountId;
        }).forEach(function(item) {
          var oldFriend = _this.friends.get(item.accountId);
          if (!oldFriend) {
            _this.friends.set(
              item.accountId,
              __assign(__assign({}, item), item.userProfile)
            );
          } else {
            _this.friends.set(
              item.accountId,
              __assign(__assign(__assign({}, oldFriend), item), item.userProfile)
            );
          }
        });
        this.rootStore.userStore.addUsers(
          data2.map(function(item) {
            return __assign(__assign({}, item), item.userProfile);
          })
        );
      };
      FriendStore2.prototype.removeFriend = function(accounts) {
        var _this = this;
        accounts.forEach(function(item) {
          _this.friends.delete(item);
        });
      };
      FriendStore2.prototype._onFriendAdded = function(friend) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onFriendAdded", friend);
        this.addFriend([friend]);
        this.rootStore.sysMsgStore.updateFriendApplyMsg([
          {
            operatorAccountId: this.rootStore.userStore.myUserInfo.accountId,
            applicantAccountId: friend.accountId,
            recipientAccountId: this.rootStore.userStore.myUserInfo.accountId,
            timestamp: Date.now(),
            status: 1,
            isRead: true,
            read: true
          }
        ]);
      };
      FriendStore2.prototype._onFriendDeleted = function(accountId) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onFriendDeleted", accountId);
        if (accountId) {
          this.removeFriend([accountId]);
        }
      };
      FriendStore2.prototype._onFriendAddApplication = function(application) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onFriendAddApplication", application);
        if (application.applicantAccountId !== this.rootStore.userStore.myUserInfo.accountId) {
          this.rootStore.sysMsgStore.addFriendApplyMsg([application]);
        }
      };
      FriendStore2.prototype._onFriendAddRejected = function(rejection) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onFriendAddRejected", rejection);
        this.rootStore.sysMsgStore.addFriendApplyMsg([
          __assign(__assign({}, rejection), { isRead: true })
        ]);
      };
      FriendStore2.prototype._onFriendInfoChanged = function(friend) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onFriendInfoChanged", friend);
        this.addFriend([friend]);
      };
      return FriendStore2;
    }()
  );
  var AT_ALL_ACCOUNT = "ait_all";
  var HISTORY_LIMIT = 20;
  var PIN_CONVERSATION_LIMIT = 20;
  var RECALL_TIME = 2 * 60 * 1e3;
  var AI_MESSAGE_LIMIT = 30;
  var name$1 = "@xkit-yx/im-store-v2";
  var version$1 = "0.7.1";
  var description$1 = "云信即时通讯 store V2 版本";
  var license$1 = "MIT";
  var main$1 = "dist/index.cjs.js";
  var module = "dist/index.esm.js";
  var typings = "dist/types/index.d.ts";
  var publishConfig = {
    access: "public"
  };
  var scripts$1 = {
    dev: "rollup -c --environment DEV",
    build: "rollup -c --environment PROD"
  };
  var files$1 = ["dist"];
  var author$1 = "";
  var devDependencies$1 = {
    "@rollup/plugin-commonjs": "^17.1.0",
    "@rollup/plugin-json": "^4.1.0",
    "@rollup/plugin-node-resolve": "^11.2.0",
    del: "^6.0.0",
    gulp: "^4.0.2",
    "gulp-less": "^5.0.0",
    "gulp-rename": "^2.0.0",
    "gulp-typescript": "^6.0.0-alpha.1",
    less: "^4.1.1",
    "less-plugin-npm-import": "^2.1.0",
    "nim-web-sdk-ng": "10.8.10",
    postcss: "^8.3.5",
    "postcss-nested": "^5.0.5",
    rollup: "^2.39.0",
    "rollup-plugin-postcss": "^4.0.0",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-typescript2": "^0.31.0",
    tslib: "^2.5.0",
    typescript: "^4.6.4"
  };
  var peerDependencies = {
    "nim-web-sdk-ng": "^10.x"
  };
  var dependencies = {
    "@xkit-yx/utils": "^0.7.1",
    mobx: "^6.6.1"
  };
  var packageJson = {
    name: name$1,
    version: version$1,
    description: description$1,
    license: license$1,
    main: main$1,
    module,
    typings,
    publishConfig,
    scripts: scripts$1,
    files: files$1,
    author: author$1,
    devDependencies: devDependencies$1,
    peerDependencies,
    dependencies
  };
  var logger = logDebug$1({
    level: "debug",
    version: packageJson.version,
    appName: packageJson.name,
    needStringify: false
  });
  var frequencyControl = function(fn2, delay, limit) {
    var promiseQueue = [];
    var requesting = false;
    var timer;
    return function(args) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        var p2 = promiseQueue.find(function(item) {
          return item.args === args;
        });
        if (p2) {
          p2.queue.push({ resolve, reject });
        } else {
          promiseQueue.push({
            args,
            queue: [{ resolve, reject }]
          });
        }
        if (requesting) {
          return;
        }
        var handler = function(pq) {
          if (!pq.length) {
            return;
          }
          requesting = true;
          fn2.call(
            // @ts-ignore
            _this,
            pq.map(function(item) {
              return item.args;
            })
          ).then(function(res) {
            var _loop_1 = function() {
              var p_1 = pq.shift();
              if (p_1) {
                var _1 = res.find(function(j2) {
                  return j2.accountId === p_1.args;
                });
                p_1.queue.forEach(function(j2) {
                  return j2.resolve(_1);
                });
              }
            };
            while (pq.length) {
              _loop_1();
            }
          }).catch(function(err) {
            while (pq.length) {
              var p_2 = pq.shift();
              if (p_2) {
                p_2.queue.forEach(function(item) {
                  return item.reject(err);
                });
              }
            }
          }).finally(function() {
            requesting = false;
            if (promiseQueue.length) {
              handler(promiseQueue.splice(0, limit));
            }
          });
        };
        if (promiseQueue.length >= limit) {
          clearTimeout(timer);
          handler(promiseQueue.splice(0, limit));
        } else {
          clearTimeout(timer);
          timer = setTimeout(function() {
            handler(promiseQueue.splice(0, limit));
          }, delay);
        }
      });
    };
  };
  var batchRequest = function(fn2, max2) {
    return function(params) {
      var args = [];
      for (var _i2 = 1; _i2 < arguments.length; _i2++) {
        args[_i2 - 1] = arguments[_i2];
      }
      return __awaiter(this, void 0, void 0, function() {
        var batches, i2, batches_1, batches_1_1, batch, e_1_1;
        var e_1, _a2;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!!params.length)
                return [3, 2];
              return [4, fn2.apply(this, [params].concat(args))];
            case 1:
              _b.sent();
              _b.label = 2;
            case 2:
              batches = [];
              for (i2 = 0; i2 < params.length; i2 += max2) {
                batches.push(params.slice(i2, i2 + max2));
              }
              _b.label = 3;
            case 3:
              _b.trys.push([3, 8, 9, 10]);
              batches_1 = __values(batches), batches_1_1 = batches_1.next();
              _b.label = 4;
            case 4:
              if (!!batches_1_1.done)
                return [3, 7];
              batch = batches_1_1.value;
              return [4, fn2.apply(this, [batch].concat(args))];
            case 5:
              _b.sent();
              _b.label = 6;
            case 6:
              batches_1_1 = batches_1.next();
              return [3, 4];
            case 7:
              return [3, 10];
            case 8:
              e_1_1 = _b.sent();
              e_1 = { error: e_1_1 };
              return [3, 10];
            case 9:
              try {
                if (batches_1_1 && !batches_1_1.done && (_a2 = batches_1.return))
                  _a2.call(batches_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 10:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
  };
  var Queue = (
    /** @class */
    function() {
      function Queue2(itemLength, flow2) {
        if (itemLength === void 0) {
          itemLength = 20;
        }
        if (flow2 === void 0) {
          flow2 = "rightToLeft";
        }
        this.itemLength = itemLength;
        this.flow = flow2;
        this.queue = [];
        makeAutoObservable(this);
      }
      Queue2.prototype.push = function(item, noLimit) {
        this.queue.push(item);
        this._handle(noLimit);
      };
      Queue2.prototype.unshift = function(item, noLimit) {
        this.queue.unshift(item);
        this._handle(noLimit);
      };
      Queue2.prototype.pop = function() {
        return this.queue.pop();
      };
      Queue2.prototype.shift = function() {
        return this.queue.shift();
      };
      Queue2.prototype.resetLimitState = function() {
        this._handle();
      };
      Queue2.prototype.clear = function() {
        this.queue.length = 0;
      };
      Queue2.prototype.get = function() {
        return this.queue;
      };
      Queue2.prototype.set = function(value, noLimit) {
        this.queue = value;
        this._handle(noLimit);
      };
      Object.defineProperty(Queue2.prototype, "length", {
        get: function() {
          return this.queue.length;
        },
        enumerable: false,
        configurable: true
      });
      Queue2.prototype._handle = function(noLimit) {
        if (noLimit === void 0) {
          noLimit = false;
        }
        if (this.queue.length > this.itemLength && !noLimit) {
          if (this.flow === "leftToRight") {
            this.queue.splice(this.itemLength, this.queue.length - this.itemLength);
          } else {
            this.queue.splice(0, this.queue.length - this.itemLength);
          }
        }
      };
      return Queue2;
    }()
  );
  var QueueMap = (
    /** @class */
    function() {
      function QueueMap2(itemLength, flow2) {
        if (itemLength === void 0) {
          itemLength = 20;
        }
        if (flow2 === void 0) {
          flow2 = "rightToLeft";
        }
        this.itemLength = itemLength;
        this.flow = flow2;
        this.map = /* @__PURE__ */ new Map();
        makeAutoObservable(this);
      }
      QueueMap2.prototype.get = function(key) {
        var _a2;
        return (_a2 = this.map.get(key)) === null || _a2 === void 0 ? void 0 : _a2.get();
      };
      QueueMap2.prototype.set = function(key, value, noLimit) {
        var queue = new Queue(this.itemLength, this.flow);
        queue.set(value, noLimit);
        this.map.set(key, queue);
      };
      QueueMap2.prototype.delete = function(key) {
        var _a2;
        (_a2 = this.map.get(key)) === null || _a2 === void 0 ? void 0 : _a2.clear();
        return this.map.delete(key);
      };
      QueueMap2.prototype.resetLimitState = function() {
        this.map.forEach(function(item) {
          return item.resetLimitState();
        });
      };
      QueueMap2.prototype.clear = function() {
        this.map.forEach(function(item) {
          return item.clear();
        });
        this.map.clear();
      };
      QueueMap2.prototype.values = function() {
        return __spreadArray([], __read(this.map.values()), false).map(function(item) {
          return item.get();
        }).flat();
      };
      return QueueMap2;
    }()
  );
  var PinMsgsMap = (
    /** @class */
    function() {
      function PinMsgsMap2(limit) {
        if (limit === void 0) {
          limit = PIN_CONVERSATION_LIMIT;
        }
        this.map = /* @__PURE__ */ new Map();
        this.pinConversationLimit = PIN_CONVERSATION_LIMIT;
        this.pinConversationLimit = limit;
        makeAutoObservable(this);
      }
      PinMsgsMap2.prototype.set = function(conversationId, pinInfos) {
        var map = this.map.get(conversationId) || /* @__PURE__ */ new Map();
        if (this.map.has(conversationId)) {
          this.map.delete(conversationId);
        }
        pinInfos.forEach(function(pinInfo) {
          if (pinInfo.pinState !== 0) {
            map.set(pinInfo.messageRefer.messageClientId, pinInfo);
          } else {
            map.delete(pinInfo.messageRefer.messageClientId);
          }
        });
        this.map.set(conversationId, map);
        if (this.map.size > this.pinConversationLimit) {
          var val = this.map.keys().next().value;
          if (val)
            this.map.delete(val);
        }
      };
      PinMsgsMap2.prototype.get = function(conversationId) {
        var map = this.map.get(conversationId);
        if (map) {
          this.map.delete(conversationId);
          this.map.set(conversationId, map);
          return map;
        } else {
          return null;
        }
      };
      PinMsgsMap2.prototype.delete = function(conversationId, messageClientIds) {
        var curMap = this.map.get(conversationId);
        if (curMap) {
          this.map.delete(conversationId);
          messageClientIds.forEach(function(messageClientId) {
            curMap.delete(messageClientId);
          });
          this.map.set(conversationId, curMap);
        }
      };
      PinMsgsMap2.prototype.clear = function() {
        if (this.map) {
          this.map.forEach(function(map) {
            map.clear();
          });
          this.map.clear();
        }
      };
      return PinMsgsMap2;
    }()
  );
  var PinMsgsMap$1 = PinMsgsMap;
  var MsgStore = (
    /** @class */
    function() {
      function MsgStore2(rootStore, nim, localOptions) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.localOptions = localOptions;
        this.msgs = new QueueMap(HISTORY_LIMIT, "rightToLeft");
        this.replyMsgs = /* @__PURE__ */ new Map();
        this.logger = null;
        this.pinMsgs = new PinMsgsMap$1();
        this.collectionMsgs = /* @__PURE__ */ new Map();
        makeAutoObservable(this);
        this.logger = rootStore.logger;
        this._onReceiveMessages = this._onReceiveMessages.bind(this);
        this._onClearHistoryNotifications = this._onClearHistoryNotifications.bind(this);
        this._onMessageDeletedNotifications = this._onMessageDeletedNotifications.bind(this);
        this._onMessagePinNotification = this._onMessagePinNotification.bind(this);
        this._onMessageQuickCommentNotification = this._onMessageQuickCommentNotification.bind(this);
        this._onMessageRevokeNotifications = this._onMessageRevokeNotifications.bind(this);
        this._onReceiveP2PMessageReadReceipts = this._onReceiveP2PMessageReadReceipts.bind(this);
        this._onReceiveTeamMessageReadReceipts = this._onReceiveTeamMessageReadReceipts.bind(this);
        this.getTeamMsgReadsActive = batchRequest(this.getTeamMsgReadsActive, 50);
        nim.V2NIMMessageService.on("onReceiveMessages", this._onReceiveMessages);
        nim.V2NIMMessageService.on(
          "onClearHistoryNotifications",
          this._onClearHistoryNotifications
        );
        nim.V2NIMMessageService.on(
          "onMessageDeletedNotifications",
          this._onMessageDeletedNotifications
        );
        nim.V2NIMMessageService.on(
          "onMessagePinNotification",
          this._onMessagePinNotification
        );
        nim.V2NIMMessageService.on(
          "onMessageQuickCommentNotification",
          this._onMessageQuickCommentNotification
        );
        nim.V2NIMMessageService.on(
          "onMessageRevokeNotifications",
          this._onMessageRevokeNotifications
        );
        nim.V2NIMMessageService.on(
          "onReceiveP2PMessageReadReceipts",
          this._onReceiveP2PMessageReadReceipts
        );
        nim.V2NIMMessageService.on(
          "onReceiveTeamMessageReadReceipts",
          this._onReceiveTeamMessageReadReceipts
        );
      }
      MsgStore2.prototype.resetState = function() {
        this.msgs.clear();
        this.replyMsgs.clear();
        this.pinMsgs.clear();
      };
      MsgStore2.prototype.destroy = function() {
        var _this = this;
        this.resetState();
        this.nim.V2NIMMessageService.off(
          "onReceiveMessages",
          this._onReceiveMessages
        );
        this.nim.V2NIMMessageService.off(
          "onClearHistoryNotifications",
          this._onClearHistoryNotifications
        );
        this.nim.V2NIMMessageService.off(
          "onMessageDeletedNotifications",
          this._onMessageDeletedNotifications
        );
        this.nim.V2NIMMessageService.off(
          "onMessagePinNotification",
          this._onMessagePinNotification
        );
        this.nim.V2NIMMessageService.off(
          "onMessageQuickCommentNotification",
          this._onMessageQuickCommentNotification
        );
        this.nim.V2NIMMessageService.off(
          "onMessageRevokeNotifications",
          this._onMessageRevokeNotifications
        );
        this.nim.V2NIMMessageService.off(
          "onReceiveP2PMessageReadReceipts",
          this._onReceiveP2PMessageReadReceipts
        );
        this.nim.V2NIMMessageService.off(
          "onReceiveTeamMessageReadReceipts",
          this._onReceiveTeamMessageReadReceipts
        );
        this.getMsg().forEach(function(msg) {
          _this._handleClearMsgTimer(msg);
        });
      };
      MsgStore2.prototype.replyMsgActive = function(msg) {
        this.replyMsgs.set(msg.conversationId, msg);
      };
      MsgStore2.prototype.removeReplyMsgActive = function(conversationId) {
        this.replyMsgs.delete(conversationId);
      };
      MsgStore2.prototype.getReplyMsgActive = function(conversationId) {
        var msg = this.replyMsgs.get(conversationId);
        if (msg) {
          return this.handleMsgForSDK(msg);
        }
      };
      MsgStore2.prototype.reCallMsgActive = function(msg) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var recallMsg, error_1;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("reCallMsgActive", msg);
                return [
                  4,
                  this.nim.V2NIMMessageService.revokeMessage(
                    this.handleMsgForSDK(msg)
                  )
                ];
              case 1:
                _d.sent();
                this.removeMsg(msg.conversationId, [msg.messageClientId]);
                recallMsg = this._createReCallMsg(msg);
                this.addMsg(recallMsg.conversationId, [recallMsg]);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("reCallMsgActive success", msg);
                return [3, 3];
              case 2:
                error_1 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("reCallMsgActive failed: ", msg, error_1);
                throw error_1;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.deleteMsgActive = function(msgs) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var conversationId, messageClientIds, error_2;
          var _this = this;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("deleteMsgActive", msgs);
                return [
                  4,
                  this.nim.V2NIMMessageService.deleteMessages(
                    msgs.map(function(item) {
                      return _this.handleMsgForSDK(item);
                    })
                  )
                ];
              case 1:
                _d.sent();
                conversationId = msgs[0].conversationId;
                if (conversationId) {
                  messageClientIds = msgs.map(function(item) {
                    return item.messageClientId;
                  });
                  this.removeMsg(conversationId, messageClientIds);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("deleteMsgActive success", msgs);
                return [3, 3];
              case 2:
                error_2 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.warn(
                  "deleteMsgActive failed, but delete msgs from memory: ",
                  msgs,
                  error_2
                );
                throw error_2;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.sendMessageActive = function(params) {
        var _a2, _b, _c, _d, _e2, _f, _g;
        return __awaiter(this, void 0, void 0, function() {
          var msg, conversationId, progress, sendBefore, serverExtension, previewImg, onAISend, newMsg, finalServerExtension, sendMsgParams, aiConfig, finalAIConfig, finalParams, message, error_3;
          var _this = this;
          return __generator(this, function(_h) {
            switch (_h.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("sendMessageActive", params);
                msg = params.msg, conversationId = params.conversationId, progress = params.progress, sendBefore = params.sendBefore, serverExtension = params.serverExtension, previewImg = params.previewImg, onAISend = params.onAISend;
                newMsg = __assign({}, msg);
                finalServerExtension = this._formatExtField(
                  conversationId,
                  serverExtension || JSON.parse(newMsg.serverExtension || "{}")
                );
                newMsg.serverExtension = Object.keys(finalServerExtension).length ? JSON.stringify(finalServerExtension) : void 0;
                newMsg.senderId = this.rootStore.userStore.myUserInfo.accountId;
                newMsg.receiverId = this.nim.V2NIMConversationIdUtil.parseConversationTargetId(
                  conversationId
                );
                newMsg.conversationId = conversationId;
                newMsg.sendingState = 3;
                if (previewImg) {
                  newMsg.previewImg = previewImg;
                }
                if (progress) {
                  newMsg.uploadProgress = 0;
                }
                _h.label = 1;
              case 1:
                _h.trys.push([1, 4, , 5]);
                return [
                  4,
                  (_c = (_b = this.localOptions).sendMsgBefore) === null || _c === void 0 ? void 0 : _c.call(_b, params)
                ];
              case 2:
                sendMsgParams = _h.sent();
                if (sendMsgParams === false) {
                  (_d = this.logger) === null || _d === void 0 ? void 0 : _d.log("sendMessageActive cancel", params, sendMsgParams);
                  return [
                    2
                    /*return*/
                  ];
                }
                aiConfig = this._getAIConfig(newMsg);
                this.addMsg(newMsg.conversationId, [newMsg]);
                if (newMsg.messageType === 0) {
                  this.removeReplyMsgActive(conversationId);
                }
                sendBefore === null || sendBefore === void 0 ? void 0 : sendBefore(newMsg);
                finalAIConfig = aiConfig || (sendMsgParams === null || sendMsgParams === void 0 ? void 0 : sendMsgParams.aiConfig) ? __assign(
                  __assign({}, aiConfig),
                  sendMsgParams === null || sendMsgParams === void 0 ? void 0 : sendMsgParams.aiConfig
                ) : void 0;
                finalParams = __assign(__assign({}, sendMsgParams), {
                  pushConfig: (sendMsgParams === null || sendMsgParams === void 0 ? void 0 : sendMsgParams.pushConfig) || ((finalServerExtension === null || finalServerExtension === void 0 ? void 0 : finalServerExtension.yxAitMsg) ? this._formatExtAitToPushInfo(
                    finalServerExtension.yxAitMsg,
                    newMsg.text || ""
                  ) : void 0),
                  messageConfig: __assign(
                    {
                      // 需要开启已读回执
                      readReceiptEnabled: true
                    },
                    sendMsgParams === null || sendMsgParams === void 0 ? void 0 : sendMsgParams.messageConfig
                  ),
                  aiConfig: finalAIConfig
                });
                (_e2 = this.logger) === null || _e2 === void 0 ? void 0 : _e2.log(
                  "sendMessageActive finalParams: ",
                  newMsg,
                  conversationId,
                  finalParams
                );
                return [
                  4,
                  this.nim.V2NIMMessageService.sendMessage(
                    newMsg,
                    conversationId,
                    finalParams,
                    function(percentage) {
                      var shouldContinue = progress === null || progress === void 0 ? void 0 : progress(percentage);
                      if (shouldContinue) {
                        var _msg = _this.getMsg(conversationId, [
                          newMsg.messageClientId
                        ])[0];
                        if (_msg) {
                          _this.addMsg(conversationId, [
                            __assign(__assign({}, _msg), {
                              uploadProgress: percentage
                            })
                          ]);
                        }
                      }
                    }
                  )
                ];
              case 3:
                message = _h.sent().message;
                if (finalAIConfig) {
                  onAISend === null || onAISend === void 0 ? void 0 : onAISend(message, finalAIConfig);
                }
                if (msg.messageType === 6 || msg.messageType === 1 || msg.messageType === 3) {
                  message.uploadProgress = 100;
                }
                this._handleSendMsgSuccess(message);
                (_f = this.logger) === null || _f === void 0 ? void 0 : _f.log("sendMessageActive success", message);
                return [2, message];
              case 4:
                error_3 = _h.sent();
                (_g = this.logger) === null || _g === void 0 ? void 0 : _g.error(
                  "sendMessageActive failed: ",
                  error_3.toString(),
                  newMsg
                );
                if (error_3.code === 191002) {
                  this.removeMsg(conversationId, [newMsg.messageClientId]);
                } else {
                  this._handleSendMsgFail(newMsg, error_3.code);
                }
                throw error_3;
              case 5:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.cancelMessageAttachmentUploadActive = function(msg) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_4;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("cancelMessageAttachmentUploadActive", msg);
                return [
                  4,
                  this.nim.V2NIMMessageService.cancelMessageAttachmentUpload(
                    this.handleMsgForSDK(msg)
                  )
                ];
              case 1:
                _d.sent();
                this.removeMsg(msg.conversationId, [msg.messageClientId]);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("cancelMessageAttachmentUploadActive success", msg);
                return [3, 3];
              case 2:
                error_4 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "cancelMessageAttachmentUploadActive failed: ",
                  msg,
                  error_4
                );
                throw error_4;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.sendMsgReceiptActive = function(msg) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_5;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("sendMsgReceiptActive", msg);
                return [
                  4,
                  this.nim.V2NIMMessageService.sendP2PMessageReceipt(
                    this.handleMsgForSDK(msg)
                  )
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("sendMsgReceiptActive success", msg);
                return [3, 3];
              case 2:
                error_5 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "sendMsgReceiptActive failed: ",
                  msg,
                  error_5.toString()
                );
                throw error_5;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.addCollectionActive = function(params) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_6;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("addCollectionActive", params);
                return [
                  4,
                  this.nim.V2NIMMessageService.addCollection(params)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("addCollectionActive success", params);
                return [3, 3];
              case 2:
                error_6 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "addCollectionActive failed: ",
                  params,
                  error_6.toString()
                );
                throw error_6;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.removeCollectionsActive = function(collections) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_7;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("removeCollectionsActive", collections);
                return [
                  4,
                  this.nim.V2NIMMessageService.removeCollections(collections)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("removeCollectionsActive success", collections);
                return [3, 3];
              case 2:
                error_7 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "removeCollectionsActive failed: ",
                  collections,
                  error_7.toString()
                );
                throw error_7;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.getCollectionListByOptionActive = function(option) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_8;
          var _this = this;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                res = [];
                _d.label = 1;
              case 1:
                _d.trys.push([1, 3, , 4]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getCollectionListByOptionActive", option);
                return [
                  4,
                  this.nim.V2NIMMessageService.getCollectionListByOption(option)
                ];
              case 2:
                res = _d.sent();
                res.forEach(function(item) {
                  var collectionData = JSON.parse(item.collectionData);
                  var msg = _this.nim.V2NIMMessageConverter.messageDeserialization(
                    collectionData.message
                  );
                  if (msg) {
                    _this.collectionMsgs.set(msg.messageClientId, msg);
                  }
                });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getCollectionListByOptionActive success", option);
                return [3, 4];
              case 3:
                error_8 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "getCollectionListByOptionActive failed: ",
                  option,
                  error_8.toString()
                );
                throw error_8;
              case 4:
                return [2, res];
            }
          });
        });
      };
      MsgStore2.prototype.sendTeamMsgReceiptActive = function(msgs) {
        var _a2, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function() {
          var finalMsgs, error_9;
          var _this = this;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 3, , 4]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("sendTeamMsgReceiptActive", msgs);
                if (!msgs.length)
                  return [3, 2];
                finalMsgs = msgs.map(function(item) {
                  return _this.handleMsgForSDK(item);
                });
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("sendTeamMsgReceiptActive finalParams: ", finalMsgs);
                return [
                  4,
                  this.nim.V2NIMMessageService.sendTeamMessageReceipts(finalMsgs)
                ];
              case 1:
                _e2.sent();
                _e2.label = 2;
              case 2:
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("sendTeamMsgReceiptActive success", msgs);
                return [3, 4];
              case 3:
                error_9 = _e2.sent();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(
                  "sendTeamMsgReceiptActive failed: ",
                  msgs,
                  error_9.toString()
                );
                throw error_9;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.getTeamMessageReceiptDetailsActive = function(message, memberAccountIds) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_10;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "getTeamMessageReceiptDetailsActive",
                  message,
                  memberAccountIds
                );
                return [
                  4,
                  this.nim.V2NIMMessageService.getTeamMessageReceiptDetail(
                    message,
                    memberAccountIds
                  )
                ];
              case 1:
                res = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "getTeamMessageReceiptDetailsActive success:",
                  message,
                  memberAccountIds,
                  res
                );
                return [2, res];
              case 2:
                error_10 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "sendTeamMsgReceiptActive failed: ",
                  message,
                  memberAccountIds,
                  error_10.toString()
                );
                throw error_10;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.getHistoryMsgActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var conversationId, endTime, lastMsgId, _d, limit, conversationType, finalParams, anchorMessage, msgs, myMsgs, error_11;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 4, , 5]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getHistoryMsgActive", options);
                conversationId = options.conversationId, endTime = options.endTime, lastMsgId = options.lastMsgId, _d = options.limit, limit = _d === void 0 ? 100 : _d;
                conversationType = this.nim.V2NIMConversationIdUtil.parseConversationType(
                  conversationId
                );
                finalParams = {
                  conversationId,
                  endTime,
                  limit
                };
                if (lastMsgId) {
                  anchorMessage = this.getMsg(conversationId, [lastMsgId])[0];
                  if (anchorMessage) {
                    finalParams.anchorMessage = anchorMessage;
                  }
                }
                return [
                  4,
                  this.nim.V2NIMMessageService.getMessageList(finalParams)
                ];
              case 1:
                msgs = _e2.sent();
                this.addMsg(conversationId, msgs);
                if (!(conversationType === 2 && this.rootStore.localOptions.teamMsgReceiptVisible))
                  return [3, 3];
                myMsgs = msgs.filter(function(item) {
                  return item.isSelf;
                }).filter(function(item) {
                  return ![
                    5,
                    10
                  ].includes(item.messageType);
                });
                return [
                  4,
                  this.getTeamMsgReadsActive(myMsgs, conversationId)
                ];
              case 2:
                _e2.sent();
                _e2.label = 3;
              case 3:
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "getHistoryMsgActive success",
                  options,
                  finalParams,
                  msgs
                );
                return [2, msgs];
              case 4:
                error_11 = _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "getHistoryMsgActive failed: ",
                  options,
                  error_11.toString()
                );
                throw error_11;
              case 5:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.forwardMsgActive = function(msg, conversationId, comment) {
        var _a2, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function() {
          var serverExtension, deleteKeys, finalMsg, forwardMsg, textMsg, error_12;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 5, , 6]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("forwardMsgActive", msg, conversationId, comment);
                serverExtension = msg === null || msg === void 0 ? void 0 : msg.serverExtension;
                if (serverExtension) {
                  try {
                    serverExtension = JSON.parse(serverExtension);
                    delete serverExtension.yxReplyMsg;
                    delete serverExtension.yxAitMsg;
                    serverExtension = JSON.stringify(serverExtension);
                  } catch (error) {
                  }
                }
                deleteKeys = ["canRecall", "reCallTimer", "yxUnread", "yxRead"];
                deleteKeys.forEach(function(key) {
                  delete msg[key];
                });
                if (((_b = msg.pushConfig) === null || _b === void 0 ? void 0 : _b.pushContent) === "") {
                  delete msg.pushConfig.pushContent;
                }
                finalMsg = this.handleMsgForSDK(
                  __assign(__assign({}, msg), { serverExtension })
                );
                forwardMsg = this.nim.V2NIMMessageCreator.createForwardMessage(finalMsg);
                if (!forwardMsg)
                  return [3, 2];
                return [
                  4,
                  this.sendMessageActive({
                    msg: forwardMsg,
                    conversationId
                  })
                ];
              case 1:
                _e2.sent();
                _e2.label = 2;
              case 2:
                if (!comment)
                  return [3, 4];
                textMsg = this.nim.V2NIMMessageCreator.createTextMessage(comment);
                return [
                  4,
                  this.sendMessageActive({
                    msg: textMsg,
                    conversationId
                  })
                ];
              case 3:
                _e2.sent();
                _e2.label = 4;
              case 4:
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("forwardMsgActive success", msg, conversationId, comment);
                return [3, 6];
              case 5:
                error_12 = _e2.sent();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error("forwardMsgActive failed: ", error_12);
                throw error_12;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.getTeamMsgReadsActive = function(msgs, conversationId) {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_13, newMsgs;
          var _this = this;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getTeamMsgReadsActive", msgs, conversationId);
                res = [];
                if (!msgs.length)
                  return [3, 4];
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.nim.V2NIMMessageService.getTeamMessageReceipts(
                    msgs.map(function(item) {
                      return _this.handleMsgForSDK(item);
                    })
                  )
                ];
              case 2:
                res = _c.sent();
                return [3, 4];
              case 3:
                error_13 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(
                  "getTeamMsgReadsActive failed but continue: ",
                  error_13.toString()
                );
                return [3, 4];
              case 4:
                newMsgs = msgs.filter(function(msg) {
                  return res.some(function(status) {
                    return msg.messageClientId === status.messageClientId;
                  });
                }).map(function(item) {
                  var teamMsgReceipt = res.find(function(j2) {
                    return j2.messageClientId === item.messageClientId;
                  });
                  if (teamMsgReceipt) {
                    return _this._updateReceiptMsg(item, {
                      unread: teamMsgReceipt.unreadCount,
                      read: teamMsgReceipt.readCount
                    });
                  }
                  return item;
                });
                this.addMsg(conversationId, newMsgs);
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.pinMessageActive = function(message, serverExtension) {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var error_14;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("pinMessageActive", message, serverExtension);
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.nim.V2NIMMessageService.pinMessage(message, serverExtension)
                ];
              case 2:
                _c.sent();
                return [3, 4];
              case 3:
                error_14 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(
                  "pinMessageActive failed but continue: ",
                  error_14.toString()
                );
                throw error_14;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.unpinMessageActive = function(messageRefer, serverExtension) {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var error_15;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("uppinMessageActive", messageRefer, serverExtension);
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.nim.V2NIMMessageService.unpinMessage(
                    messageRefer,
                    serverExtension
                  )
                ];
              case 2:
                _c.sent();
                return [3, 4];
              case 3:
                error_15 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(
                  "uppinMessageActive failed but continue: ",
                  error_15.toString()
                );
                throw error_15;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.updatePinMessageActive = function(message, serverExtension) {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var error_16;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("updatePinMessageActive", message, serverExtension);
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.nim.V2NIMMessageService.updatePinMessage(
                    message,
                    serverExtension
                  )
                ];
              case 2:
                _c.sent();
                return [3, 4];
              case 3:
                error_16 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(
                  "updatePinMessageActive failed but continue: ",
                  error_16.toString()
                );
                throw error_16;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.getPinnedMessageListActive = function(conversationId) {
        return __awaiter(this, void 0, void 0, function() {
          var curPinMsgsMap, pinInfos;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                curPinMsgsMap = this.pinMsgs.get(conversationId);
                pinInfos = [];
                if (!curPinMsgsMap)
                  return [3, 1];
                pinInfos = __spreadArray([], __read(curPinMsgsMap.values()), false);
                return [3, 3];
              case 1:
                return [
                  4,
                  this._getPinnedMessageListByServer(conversationId)
                ];
              case 2:
                pinInfos = _a2.sent();
                _a2.label = 3;
              case 3:
                return [
                  4,
                  this.completePinnedMessageList(conversationId, pinInfos)
                  // 这里
                ];
              case 4:
                pinInfos = _a2.sent();
                pinInfos = pinInfos.filter(function(pinInfo) {
                  return pinInfo.pinState > 0 && pinInfo.message;
                }).sort(function(a2, b2) {
                  return b2.message.createTime - a2.message.createTime;
                });
                return [2, pinInfos];
            }
          });
        });
      };
      MsgStore2.prototype.voiceToTextActive = function(message) {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var text, error_17;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                if (message.textOfVoice)
                  return [
                    2
                    /*return*/
                  ];
                if (!message.attachment)
                  return [
                    2
                    /*return*/
                  ];
                if (!("url" in message.attachment))
                  return [
                    2
                    /*return*/
                  ];
                if (!message.attachment.url)
                  return [
                    2
                    /*return*/
                  ];
                if (!("duration" in message.attachment))
                  return [
                    2
                    /*return*/
                  ];
                if (!message.attachment.duration)
                  return [
                    2
                    /*return*/
                  ];
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("voiceToTextActive", message);
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.nim.V2NIMMessageService.voiceToText({
                    voiceUrl: message.attachment.url,
                    duration: message.attachment.duration,
                    sceneName: message.attachment.sceneName,
                    // 在群里与产品孙有军交流, 得知可以写死 aac 和 16000
                    mimeType: "aac",
                    sampleRate: "16000"
                  })
                ];
              case 2:
                text = _c.sent();
                if (!text)
                  throw new Error("voiceToText empty");
                this.updateMsg(message.conversationId, message.messageClientId, {
                  textOfVoice: text
                });
                return [3, 4];
              case 3:
                error_17 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn("voiceToTextActive failed: ", error_17.toString());
                throw error_17;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      MsgStore2.prototype.addMsg = function(conversationId, msgs) {
        var _this = this;
        var sortFunc = function(a2, b2) {
          return a2.createTime - b2.createTime;
        };
        var _msgs = this.msgs.get(conversationId) || [];
        var curPinMsgsMap = this.pinMsgs.get(conversationId);
        msgs.filter(function(item) {
          return !!item.messageClientId;
        }).map(function(item) {
          item = _this.handleReceiveAIMsg(item);
          if (curPinMsgsMap)
            item = _this.handleMsgPinState(item, curPinMsgsMap);
          return item;
        }).forEach(function(item) {
          var newMsg = __assign({}, item);
          var _msg = _msgs.find(function(msg) {
            return msg.messageClientId === newMsg.messageClientId;
          });
          if (_msg) {
            if (_msg.createTime <= newMsg.createTime || _msg.sendingState === 3) {
              if (_msg.canRecall !== void 0 && _msg.reCallTimer !== void 0) {
                newMsg.canRecall = _msg.canRecall;
                newMsg.reCallTimer = _msg.reCallTimer;
              }
              if (_msg.textOfVoice) {
                newMsg.textOfVoice = _msg.textOfVoice;
              }
              _msgs.splice(_msgs.indexOf(_msg), 1, newMsg);
            }
          } else {
            _msgs.push(item);
          }
        });
        this.msgs.set(
          conversationId,
          __spreadArray([], __read(_msgs), false).sort(sortFunc),
          this.rootStore.uiStore.selectedConversation === conversationId
        );
      };
      MsgStore2.prototype.removeMsg = function(conversationId, idClients) {
        var _this = this;
        if (!conversationId) {
          this.getMsg().forEach(function(item) {
            _this._handleClearMsgTimer(item);
          });
          this.msgs.clear();
          return;
        }
        var msgs = this.msgs.get(conversationId);
        if (!msgs) {
          return;
        }
        if (!idClients || !idClients.length) {
          msgs.forEach(function(item) {
            _this._handleClearMsgTimer(item);
          });
          this.msgs.delete(conversationId);
          return;
        }
        this.msgs.set(
          conversationId,
          msgs.filter(function(msg) {
            var isDelete = idClients.includes(msg.messageClientId) && // 无法删除撤回消息
            !(msg.messageType === 100 && msg.recallType === "beReCallMsg");
            if (isDelete) {
              _this._handleClearMsgTimer(msg);
            }
            return !isDelete;
          }),
          this.rootStore.uiStore.selectedConversation === conversationId
        );
      };
      MsgStore2.prototype.deletePinInfoByMessageClientId = function(conversationId, messageClientIds) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
          "deletePinInfoByMessageClientId",
          conversationId,
          messageClientIds
        );
        this.pinMsgs.delete(conversationId, messageClientIds);
      };
      MsgStore2.prototype.getMsg = function(conversationId, idClients) {
        if (!conversationId) {
          return this.msgs.values();
        }
        var msgs = this.msgs.get(conversationId) || [];
        if (!idClients || !idClients.length) {
          return msgs;
        }
        return msgs.filter(function(item) {
          return idClients.includes(item.messageClientId);
        });
      };
      MsgStore2.prototype.updateMsg = function(conversationId, idClient, updateParam) {
        var msgs = this.msgs.get(conversationId);
        if (!msgs)
          return;
        var msg = msgs.findIndex(function(item) {
          return item.messageClientId === idClient;
        });
        if (!msg)
          return;
        this.msgs.set(
          conversationId,
          msgs.map(function(msg2) {
            if (msg2.messageClientId === idClient) {
              msg2 = __assign(__assign({}, msg2), updateParam);
            }
            return msg2;
          }),
          this.rootStore.uiStore.selectedConversation === conversationId
        );
      };
      MsgStore2.prototype.handleReceiveAIMsg = function(msg) {
        var myAccountId = this.rootStore.userStore.myUserInfo.accountId;
        var aiConfig = msg.aiConfig;
        var senderId = aiConfig ? aiConfig.aiStatus === 2 ? aiConfig.accountId : msg.senderId : msg.senderId;
        var isSelf = senderId === myAccountId;
        return __assign(__assign({}, msg), {
          __kit__isSelf: msg.isSelf,
          __kit__senderId: msg.senderId,
          senderId,
          isSelf
        });
      };
      MsgStore2.prototype.handleMsgPinState = function(msg, curPinMsgsMap) {
        var pinInfo = curPinMsgsMap.get(msg.messageClientId);
        if (pinInfo) {
          msg.pinState = pinInfo.pinState;
          msg.operatorId = pinInfo.operatorId;
        }
        return msg;
      };
      MsgStore2.prototype.handleMsgForSDK = function(msg) {
        var __kit__isSelf = msg.__kit__isSelf, __kit__senderId = msg.__kit__senderId, rest = __rest(msg, ["__kit__isSelf", "__kit__senderId"]);
        var senderId = msg.senderId, isSelf = msg.isSelf;
        if (__kit__isSelf) {
          isSelf = __kit__isSelf;
        }
        if (__kit__senderId) {
          senderId = __kit__senderId;
        }
        return __assign(__assign({}, rest), { senderId, isSelf });
      };
      MsgStore2.prototype._getMessageListByRefer = function(messageRefers) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_18;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                res = [];
                _b.label = 1;
              case 1:
                _b.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.nim.V2NIMMessageService.getMessageListByRefers(
                    messageRefers
                  )
                ];
              case 2:
                res = _b.sent();
                return [3, 4];
              case 3:
                error_18 = _b.sent();
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.warn(
                  "_getMessageListByRefer failed but continue: ",
                  error_18.toString()
                );
                return [3, 4];
              case 4:
                return [2, res];
            }
          });
        });
      };
      MsgStore2.prototype._getPinnedMessageListByServer = function(conversationId) {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var res, pinInfos, error_19;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_getPinnedMessageListByServer", conversationId);
                res = [];
                pinInfos = [];
                _c.label = 1;
              case 1:
                _c.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.nim.V2NIMMessageService.getPinnedMessageList(conversationId)
                ];
              case 2:
                res = _c.sent();
                return [3, 4];
              case 3:
                error_19 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(
                  "_getPinnedMessageListByServer failed but continue: ",
                  error_19.toString()
                );
                return [3, 4];
              case 4:
                res.forEach(function(pin) {
                  pinInfos.push(__assign({ pinState: 1 }, pin));
                });
                this.pinMsgs.set(conversationId, pinInfos);
                if (pinInfos.length) {
                  this._updateMsgsPinState(conversationId, pinInfos);
                }
                return [2, pinInfos];
            }
          });
        });
      };
      MsgStore2.prototype.completePinnedMessageList = function(conversationId, pinInfos) {
        return __awaiter(this, void 0, void 0, function() {
          var res, messageRefers;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                res = [];
                if (!pinInfos.length)
                  return [2, pinInfos];
                messageRefers = [];
                pinInfos.forEach(function(pinInfo) {
                  if (!pinInfo.message) {
                    messageRefers.push(pinInfo.messageRefer);
                  }
                });
                if (!messageRefers.length)
                  return [
                    2,
                    pinInfos
                    // 这里不做 try catch，因为 _getMessageListByRefer 已经处理了
                    // 这里全都从服务器获取补全的消息，不从内存中获取已有的补全消息
                  ];
                return [4, this._getMessageListByRefer(messageRefers)];
              case 1:
                res = _a2.sent();
                if (res.length) {
                  pinInfos = pinInfos.map(function(pinInfo) {
                    var msg = res.find(function(item) {
                      return item.messageClientId === pinInfo.messageRefer.messageClientId;
                    });
                    if (msg) {
                      pinInfo = __assign(__assign({}, pinInfo), { message: msg });
                    }
                    return pinInfo;
                  });
                  this.pinMsgs.set(conversationId, pinInfos);
                }
                return [2, pinInfos];
            }
          });
        });
      };
      MsgStore2.prototype._handleSendMsgSuccess = function(msg) {
        if (msg && msg.conversationId) {
          this.addMsg(msg.conversationId, [msg]);
        }
      };
      MsgStore2.prototype._handleSendMsgFail = function(msg, errorCode) {
        if (msg && msg.conversationId) {
          var oldMsg = this.getMsg(msg.conversationId, [msg.messageClientId])[0];
          this._handleClearMsgTimer(oldMsg);
          this.addMsg(msg.conversationId, [
            __assign(__assign(__assign({}, oldMsg), msg), {
              messageStatus: {
                errorCode
              },
              uploadProgress: void 0,
              sendingState: 2,
              errorCode
            })
          ]);
        }
      };
      MsgStore2.prototype._handleClearMsgTimer = function(msg) {
        if (msg) {
          clearTimeout(msg.canEditTimer);
          clearTimeout(msg.reCallTimer);
        }
      };
      MsgStore2.prototype._onReceiveMessages = function(data2) {
        var _this = this;
        var _a2, _b, _c, _d;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onReceiveMessages: ", data2);
        data2.forEach(function(item) {
          _this.addMsg(item.conversationId, [item]);
        });
        if ((_b = this.rootStore.sdkOptions) === null || _b === void 0 ? void 0 : _b.enableV2CloudConversation) {
          (_c = this.rootStore.conversationStore) === null || _c === void 0 ? void 0 : _c.handleConversationWithAit(data2);
        } else {
          (_d = this.rootStore.localConversationStore) === null || _d === void 0 ? void 0 : _d.handleConversationWithAit(data2);
        }
      };
      MsgStore2.prototype._onClearHistoryNotifications = function(data2) {
        var _this = this;
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onClearHistory: ", data2);
        data2.forEach(function(item) {
          _this.removeMsg(item.conversationId);
        });
      };
      MsgStore2.prototype._onMessageDeletedNotifications = function(data2) {
        var _this = this;
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onMessageDeletedNotifications: ", data2);
        var res = {};
        data2.forEach(function(item) {
          var conversationId = item.messageRefer.conversationId;
          if (res[conversationId]) {
            res[conversationId].push(item);
          } else {
            res[conversationId] = [item];
          }
        });
        Object.keys(res).forEach(function(conversationId) {
          var messageClientIds = res[conversationId].map(function(item) {
            return item.messageRefer.messageClientId;
          });
          _this.removeMsg(conversationId, messageClientIds);
          _this.deletePinInfoByMessageClientId(conversationId, messageClientIds);
        });
      };
      MsgStore2.prototype._onMessagePinNotification = function(data2) {
        var _this = this;
        var _a2 = data2.pin, operatorId = _a2.operatorId, messageRefer = _a2.messageRefer, serverExtension = _a2.serverExtension, createTime = _a2.createTime, updateTime = _a2.updateTime;
        var curPinMsgsMap = this.pinMsgs.get(messageRefer.conversationId);
        if (!curPinMsgsMap)
          return;
        var pinState = data2.pinState;
        var pinInfo = curPinMsgsMap === null || curPinMsgsMap === void 0 ? void 0 : curPinMsgsMap.get(messageRefer.messageClientId);
        var newPinInfo = [
          {
            pinState,
            messageRefer,
            operatorId,
            serverExtension,
            // @ts-ignore
            createTime: (pinInfo === null || pinInfo === void 0 ? void 0 : pinInfo.createTime) || createTime,
            updateTime
          }
        ];
        this.completePinnedMessageList(
          messageRefer.conversationId,
          newPinInfo
        ).then(function(pinInfo2) {
          _this._updateMsgsPinState(messageRefer.conversationId, pinInfo2);
        });
      };
      MsgStore2.prototype._updateMsgsPinState = function(conversationId, pinInfos) {
        var _msgs = this.getMsg(conversationId) || [];
        var hasChange = false;
        pinInfos.forEach(function(pinInfo) {
          var msg = _msgs.find(function(msg2) {
            return msg2.messageClientId === pinInfo.messageRefer.messageClientId;
          });
          if (msg && msg.pinState !== pinInfo.pinState) {
            var newMsg = __assign({}, msg);
            newMsg.pinState = pinInfo.pinState;
            newMsg.operatorId = pinInfo.operatorId;
            _msgs.splice(_msgs.indexOf(msg), 1, newMsg);
            hasChange = true;
          }
        });
        if (hasChange) {
          this.msgs.set(
            conversationId,
            _msgs,
            this.rootStore.uiStore.selectedConversation === conversationId
          );
        }
      };
      MsgStore2.prototype._onMessageQuickCommentNotification = function() {
      };
      MsgStore2.prototype._onMessageRevokeNotifications = function(data2) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          var _this = this;
          return __generator(this, function(_b) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onMessageRevokeNotifications: ", data2);
            data2.forEach(function(item) {
              return __awaiter(_this, void 0, void 0, function() {
                var oldMsg, conversationId, messageClientIds, msg, conversation, aitMsgs, messageClientId_1;
                var _a3, _b2, _c, _d, _e2, _f;
                return __generator(this, function(_g) {
                  oldMsg = this.getMsg(item.messageRefer.conversationId, [
                    item.messageRefer.messageClientId
                  ])[0];
                  if (oldMsg && oldMsg.recallType) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  conversationId = item.messageRefer.conversationId;
                  messageClientIds = [item.messageRefer.messageClientId];
                  this.removeMsg(conversationId, messageClientIds);
                  this.deletePinInfoByMessageClientId(
                    conversationId,
                    messageClientIds
                  );
                  msg = this._createBeReCallMsg(item);
                  this.addMsg(msg.conversationId, [msg]);
                  if (item.messageRefer.conversationType === 2) {
                    conversation = ((_a3 = this.rootStore.sdkOptions) === null || _a3 === void 0 ? void 0 : _a3.enableV2CloudConversation) ? (_b2 = this.rootStore.conversationStore) === null || _b2 === void 0 ? void 0 : _b2.conversations.get(conversationId) : (_c = this.rootStore.localConversationStore) === null || _c === void 0 ? void 0 : _c.conversations.get(conversationId);
                    if (conversation) {
                      aitMsgs = conversation.aitMsgs || [];
                      messageClientId_1 = item.messageRefer.messageClientId;
                      if (aitMsgs.includes(messageClientId_1)) {
                        aitMsgs = aitMsgs.filter(function(item2) {
                          return item2 !== messageClientId_1;
                        });
                        if ((_d = this.rootStore.sdkOptions) === null || _d === void 0 ? void 0 : _d.enableV2CloudConversation) {
                          (_e2 = this.rootStore.conversationStore) === null || _e2 === void 0 ? void 0 : _e2.updateConversation([
                            __assign(__assign({}, conversation), {
                              aitMsgs
                            })
                          ]);
                        } else {
                          (_f = this.rootStore.localConversationStore) === null || _f === void 0 ? void 0 : _f.updateConversation([
                            __assign(__assign({}, conversation), {
                              aitMsgs
                            })
                          ]);
                        }
                      }
                    }
                  }
                  return [
                    2
                    /*return*/
                  ];
                });
              });
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      MsgStore2.prototype._onReceiveP2PMessageReadReceipts = function(data2) {
        var _this = this;
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onReceiveP2PMessageReadReceipts: ", data2);
        data2.forEach(function(item) {
          var _a3, _b, _c, _d, _e2, _f;
          var oldConversation = ((_a3 = _this.rootStore.sdkOptions) === null || _a3 === void 0 ? void 0 : _a3.enableV2CloudConversation) ? (_b = _this.rootStore.conversationStore) === null || _b === void 0 ? void 0 : _b.conversations.get(item.conversationId) : (_c = _this.rootStore.localConversationStore) === null || _c === void 0 ? void 0 : _c.conversations.get(item.conversationId);
          if (oldConversation && item.timestamp > (oldConversation.msgReceiptTime || 0)) {
            if ((_d = _this.rootStore.sdkOptions) === null || _d === void 0 ? void 0 : _d.enableV2CloudConversation) {
              (_e2 = _this.rootStore.conversationStore) === null || _e2 === void 0 ? void 0 : _e2.updateConversation([
                __assign(__assign({}, oldConversation), {
                  msgReceiptTime: item.timestamp
                })
              ]);
            } else {
              (_f = _this.rootStore.localConversationStore) === null || _f === void 0 ? void 0 : _f.updateConversation([
                __assign(__assign({}, oldConversation), {
                  msgReceiptTime: item.timestamp
                })
              ]);
            }
          }
        });
      };
      MsgStore2.prototype._onReceiveTeamMessageReadReceipts = function(data2) {
        var _this = this;
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onReceiveTeamMessageReadReceipts: ", data2);
        data2.sort(function(a2, b2) {
          return a2.readCount - b2.readCount;
        });
        data2.forEach(function(msgReadReceipt) {
          var conversationId = msgReadReceipt.conversationId;
          var msg = _this.getMsg(conversationId, [
            msgReadReceipt.messageClientId
          ])[0];
          if (msg) {
            var newMsg = _this._updateReceiptMsg(msg, {
              unread: msgReadReceipt.unreadCount,
              read: msgReadReceipt.readCount
            });
            _this.addMsg(conversationId, [newMsg]);
          }
        });
      };
      MsgStore2.prototype._formatExtField = function(conversationId, serverExtension) {
        var extObj = serverExtension || {};
        var replyMsg = this.getReplyMsgActive(conversationId);
        if (replyMsg) {
          extObj.yxReplyMsg = {
            idClient: replyMsg.messageClientId,
            scene: replyMsg.conversationType,
            from: replyMsg.senderId,
            receiverId: replyMsg.receiverId,
            to: replyMsg.conversationId,
            idServer: replyMsg.messageServerId,
            time: replyMsg.createTime
          };
        }
        return extObj;
      };
      MsgStore2.prototype._updateReceiptMsg = function(originMsg, data2) {
        return __assign(__assign({}, originMsg), {
          yxUnread: Number(data2.unread),
          yxRead: Number(data2.read)
        });
      };
      MsgStore2.prototype._formatExtAitToPushInfo = function(yxAitMsg, content) {
        function getForcePushIDsList(obj) {
          return Object.keys(obj).includes(AT_ALL_ACCOUNT) ? void 0 : Object.keys(obj);
        }
        var pushInfo = {
          forcePushAccountIds: getForcePushIDsList(yxAitMsg),
          forcePush: true,
          forcePushContent: content
        };
        return pushInfo;
      };
      MsgStore2.prototype._createReCallMsg = function(msg) {
        var _this = this;
        var recallMsg = __assign(__assign({}, msg), {
          isSelf: true,
          sendingState: 1,
          messageType: 100,
          recallType: "reCallMsg",
          messageClientId: "recall-".concat(msg.messageClientId)
        });
        if ([
          100,
          0
        ].includes(msg.messageType)) {
          recallMsg.oldText = msg.text;
          recallMsg.canEdit = true;
          recallMsg.canEditTimer = setTimeout(function() {
            var newMsg = _this.getMsg(recallMsg.conversationId, [
              recallMsg.messageClientId
            ])[0];
            if (newMsg) {
              _this.addMsg(newMsg.conversationId, [
                __assign(__assign({}, newMsg), { canEdit: false })
              ]);
            }
          }, RECALL_TIME);
        }
        return recallMsg;
      };
      MsgStore2.prototype._createBeReCallMsg = function(data2) {
        return __assign(__assign({}, data2.messageRefer), {
          isSelf: data2.messageRefer.senderId === this.rootStore.userStore.myUserInfo.accountId,
          sendingState: 1,
          messageType: 100,
          recallType: "beReCallMsg",
          messageClientId: "recall-".concat(data2.messageRefer.messageClientId)
        });
      };
      MsgStore2.prototype._getAIConfig = function(msg) {
        var _this = this;
        var serverExtension = msg.serverExtension, conversationId = msg.conversationId, receiverId = msg.receiverId, messageType = msg.messageType, _a2 = msg.text, text = _a2 === void 0 ? "" : _a2;
        var serverExt;
        try {
          serverExt = JSON.parse(serverExtension || "{}");
        } catch (error) {
          serverExt = {};
        }
        var yxAitMsg = serverExt.yxAitMsg || {};
        var replyMsg = this.getReplyMsgActive(conversationId);
        var relation = this.rootStore.uiStore.getRelation(receiverId).relation;
        var myAccountId = this.rootStore.userStore.myUserInfo.accountId;
        var aiConfig = void 0;
        if (relation === "ai") {
          if (messageType === 0) {
            var _msgs = (this.msgs.get(conversationId) || []).slice(-AI_MESSAGE_LIMIT).filter(function(item) {
              return item.messageType === 0;
            });
            var myIndex = _msgs.findIndex(function(item) {
              return item.senderId === myAccountId;
            });
            _msgs = myIndex === -1 ? [] : _msgs.slice(myIndex);
            aiConfig = {
              accountId: receiverId,
              content: { msg: text, type: 0 },
              // 取最后30条消息作为上下文
              messages: _msgs.map(function(item) {
                var role = item.senderId === myAccountId ? "user" : "assistant";
                return {
                  role,
                  msg: item.text || "",
                  type: 0
                };
              })
            };
          } else {
            aiConfig = {
              accountId: receiverId
            };
          }
        }
        var newYxAitMsg = {};
        Object.keys(yxAitMsg).forEach(function(account) {
          if (_this.rootStore.aiUserStore.aiUsers.has(account)) {
            newYxAitMsg[account] = yxAitMsg[account];
          }
        });
        var aiAtAccount = this._findMinStart(newYxAitMsg);
        var aiAtMember = this.rootStore.aiUserStore.aiUsers.get(aiAtAccount || "");
        if (aiAtMember) {
          aiConfig = {
            accountId: aiAtMember.accountId,
            content: { msg: text, type: 0 }
          };
        }
        if (replyMsg && aiConfig) {
          if (replyMsg.messageType === 0) {
            aiConfig.messages = [
              {
                role: "user",
                msg: replyMsg.text || "",
                type: 0
              }
            ];
          } else {
            aiConfig.messages = void 0;
          }
        }
        return aiConfig;
      };
      MsgStore2.prototype._findMinStart = function(data2) {
        var e_1, _a2;
        var minStart = Number.MAX_VALUE;
        var minStartKey = void 0;
        for (var key in data2) {
          var segments = data2[key].segments;
          try {
            for (var segments_1 = (e_1 = void 0, __values(segments)), segments_1_1 = segments_1.next(); !segments_1_1.done; segments_1_1 = segments_1.next()) {
              var segment = segments_1_1.value;
              if (segment.start < minStart) {
                minStart = segment.start;
                minStartKey = key;
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (segments_1_1 && !segments_1_1.done && (_a2 = segments_1.return))
                _a2.call(segments_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
        return minStartKey;
      };
      return MsgStore2;
    }()
  );
  var RelationStore = (
    /** @class */
    function() {
      function RelationStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.blacklist = [];
        this.mutes = [];
        this.logger = null;
        makeAutoObservable(this);
        this.logger = rootStore.logger;
        this._onBlockListAdded = this._onBlockListAdded.bind(this);
        this._onBlockListRemoved = this._onBlockListRemoved.bind(this);
        this._onP2PMessageMuteModeChanged = this._onP2PMessageMuteModeChanged.bind(this);
        nim.V2NIMUserService.on("onBlockListAdded", this._onBlockListAdded);
        nim.V2NIMUserService.on("onBlockListRemoved", this._onBlockListRemoved);
        nim.V2NIMSettingService.on(
          "onP2PMessageMuteModeChanged",
          this._onP2PMessageMuteModeChanged
        );
      }
      RelationStore2.prototype.resetState = function() {
        this.blacklist = [];
        this.mutes = [];
      };
      RelationStore2.prototype.destroy = function() {
        this.resetState();
        this.nim.V2NIMUserService.off("onBlockListAdded", this._onBlockListAdded);
        this.nim.V2NIMUserService.off(
          "onBlockListRemoved",
          this._onBlockListRemoved
        );
        this.nim.V2NIMSettingService.off(
          "onP2PMessageMuteModeChanged",
          this._onP2PMessageMuteModeChanged
        );
      };
      RelationStore2.prototype.addBlacklist = function(accounts) {
        this.blacklist = __spreadArray(
          [],
          __read(new Set(this.blacklist.concat(accounts))),
          false
        );
      };
      RelationStore2.prototype.removeBlacklist = function(accounts) {
        this.blacklist = this.blacklist.filter(function(i2) {
          return accounts.every(function(j2) {
            return i2 !== j2;
          });
        });
      };
      RelationStore2.prototype.isInBlacklist = function(account) {
        return this.blacklist.includes(account);
      };
      RelationStore2.prototype.addMutes = function(accounts) {
        this.mutes = __spreadArray(
          [],
          __read(new Set(this.mutes.concat(accounts))),
          false
        );
      };
      RelationStore2.prototype.removeMutes = function(accounts) {
        this.mutes = this.mutes.filter(function(i2) {
          return accounts.every(function(j2) {
            return i2 !== j2;
          });
        });
      };
      RelationStore2.prototype.getBlockListActive = function() {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_1;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                _c.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getBlockListActive");
                return [4, this.nim.V2NIMUserService.getBlockList()];
              case 1:
                res = _c.sent();
                this.addBlacklist(res);
                return [2, res];
              case 2:
                error_1 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error("getBlockListActive failed: ", error_1);
                throw error_1;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      RelationStore2.prototype.getP2PMuteListActive = function() {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_2;
          return __generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                _c.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getP2PMuteListActive");
                return [
                  4,
                  this.nim.V2NIMSettingService.getP2PMessageMuteList()
                ];
              case 1:
                res = _c.sent();
                this.addMutes(res);
                return [2, res];
              case 2:
                error_2 = _c.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error("getP2PMuteListActive failed: ", error_2);
                throw error_2;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      RelationStore2.prototype.addUserToBlockListActive = function(accountId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_3;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("addUserToBlockListActive", accountId);
                return [
                  4,
                  this.nim.V2NIMUserService.addUserToBlockList(accountId)
                ];
              case 1:
                _d.sent();
                this.addBlacklist([accountId]);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("addUserToBlockListActive success", accountId);
                return [3, 3];
              case 2:
                error_3 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "addUserToBlockListActive failed: ",
                  accountId,
                  error_3
                );
                throw error_3;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      RelationStore2.prototype.removeUserFromBlockListActive = function(accountId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_4;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("removeUserFromBlockListActive", accountId);
                return [
                  4,
                  this.nim.V2NIMUserService.removeUserFromBlockList(accountId)
                ];
              case 1:
                _d.sent();
                this.removeBlacklist([accountId]);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("removeUserFromBlockListActive success", accountId);
                return [3, 3];
              case 2:
                error_4 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "removeUserFromBlockListActive failed: ",
                  accountId,
                  error_4
                );
                throw error_4;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      RelationStore2.prototype.setP2PMessageMuteModeActive = function(accountId, muteMode) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_5;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("setP2PMessageMuteModeActive", accountId, muteMode);
                return [
                  4,
                  this.nim.V2NIMSettingService.setP2PMessageMuteMode(
                    accountId,
                    muteMode
                  )
                ];
              case 1:
                _d.sent();
                if (muteMode === 1) {
                  this.addMutes([accountId]);
                } else if (muteMode === 0) {
                  this.removeMutes([accountId]);
                }
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("setP2PMessageMuteModeActive success", {
                  accountId,
                  muteMode
                });
                return [3, 3];
              case 2:
                error_5 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "setP2PMessageMuteModeActive failed: ",
                  { accountId, muteMode },
                  error_5
                );
                throw error_5;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      RelationStore2.prototype._onBlockListAdded = function(user) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onBlockListAdded", user);
        this.addBlacklist([user.accountId]);
      };
      RelationStore2.prototype._onBlockListRemoved = function(accountId) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onBlockListRemoved", accountId);
        this.removeBlacklist([accountId]);
      };
      RelationStore2.prototype._onP2PMessageMuteModeChanged = function(accountId, muteMode) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onP2PMessageMuteModeChanged", accountId, muteMode);
        if (muteMode === 1) {
          this.addMutes([accountId]);
        } else if (muteMode === 0) {
          this.removeMutes([accountId]);
        }
      };
      return RelationStore2;
    }()
  );
  var ConversationStore = (
    /** @class */
    function() {
      function ConversationStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.conversations = /* @__PURE__ */ new Map();
        this.totalUnreadCount = 0;
        this.logger = null;
        makeAutoObservable(this);
        this._onSyncStarted = this._onSyncStarted.bind(this);
        this._onSyncFinished = this._onSyncFinished.bind(this);
        this._onSyncFailed = this._onSyncFailed.bind(this);
        this._onConversationCreated = this._onConversationCreated.bind(this);
        this._onConversationDeleted = this._onConversationDeleted.bind(this);
        this._onConversationChanged = this._onConversationChanged.bind(this);
        this._onTotalUnreadCountChanged = this._onTotalUnreadCountChanged.bind(this);
        this.logger = rootStore.logger;
        nim.V2NIMConversationService.on("onSyncStarted", this._onSyncStarted);
        nim.V2NIMConversationService.on("onSyncFinished", this._onSyncFinished);
        nim.V2NIMConversationService.on("onSyncFailed", this._onSyncFailed);
        nim.V2NIMConversationService.on(
          "onConversationCreated",
          this._onConversationCreated
        );
        nim.V2NIMConversationService.on(
          "onConversationDeleted",
          this._onConversationDeleted
        );
        nim.V2NIMConversationService.on(
          "onConversationChanged",
          this._onConversationChanged
        );
        nim.V2NIMConversationService.on(
          "onTotalUnreadCountChanged",
          this._onTotalUnreadCountChanged
        );
      }
      ConversationStore2.prototype.resetState = function() {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("Conversation resetState");
        this.conversations.clear();
        this.totalUnreadCount = 0;
      };
      ConversationStore2.prototype.destroy = function() {
        this.resetState();
        this.nim.V2NIMConversationService.off("onSyncStarted", this._onSyncStarted);
        this.nim.V2NIMConversationService.off(
          "onSyncFinished",
          this._onSyncFinished
        );
        this.nim.V2NIMConversationService.off("onSyncFailed", this._onSyncFailed);
        this.nim.V2NIMConversationService.off(
          "onConversationCreated",
          this._onConversationCreated
        );
        this.nim.V2NIMConversationService.off(
          "onConversationDeleted",
          this._onConversationDeleted
        );
        this.nim.V2NIMConversationService.off(
          "onConversationChanged",
          this._onConversationChanged
        );
        this.nim.V2NIMConversationService.off(
          "onTotalUnreadCountChanged",
          this._onTotalUnreadCountChanged
        );
      };
      ConversationStore2.prototype.addConversation = function(conversations) {
        var _this = this;
        conversations.filter(function(item) {
          return !!item.conversationId;
        }).filter(function(item) {
          return [
            1,
            2
          ].includes(item.type);
        }).forEach(function(item) {
          return __awaiter(_this, void 0, void 0, function() {
            var oldConversation;
            return __generator(this, function(_a2) {
              oldConversation = this.conversations.get(item.conversationId);
              this.conversations.set(
                item.conversationId,
                __assign(__assign({}, oldConversation), item)
              );
              return [
                2
                /*return*/
              ];
            });
          });
        });
      };
      ConversationStore2.prototype.updateConversation = function(conversations) {
        var _this = this;
        conversations.filter(function(item) {
          return !!item.conversationId;
        }).filter(function(item) {
          return [
            1,
            2
          ].includes(item.type);
        }).forEach(function(item) {
          var oldConversation = _this.conversations.get(item.conversationId);
          _this.conversations.set(
            item.conversationId,
            __assign(__assign({}, oldConversation), item)
          );
        });
      };
      ConversationStore2.prototype.removeConversation = function(conversationIds) {
        var _this = this;
        conversationIds.forEach(function(item) {
          _this.conversations.delete(item);
          if (_this.rootStore.uiStore.selectedConversation === item) {
            _this.rootStore.uiStore.unselectConversation();
          }
        });
      };
      ConversationStore2.prototype.resetConversation = function(conversationId) {
        var _a2, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function() {
          var conversation, error_1;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("resetConversation", conversationId);
                conversation = this.conversations.get(conversationId);
                if (!conversation) {
                  (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(
                    "resetConversation: conversation is not found.",
                    conversationId
                  );
                  return [
                    2
                    /*return*/
                  ];
                }
                _e2.label = 1;
              case 1:
                _e2.trys.push([1, 4, , 5]);
                if (!conversation.unreadCount)
                  return [3, 3];
                this._resetMemoryConversationUnreadCount(conversation);
                return [
                  4,
                  this.nim.V2NIMConversationService.clearUnreadCountByIds([
                    conversation.conversationId
                  ])
                ];
              case 2:
                _e2.sent();
                this._resetMemoryConversationUnreadCount(conversation);
                _e2.label = 3;
              case 3:
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("resetConversation success");
                return [3, 5];
              case 4:
                error_1 = _e2.sent();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error("resetConversation failed: ", error_1);
                throw error_1;
              case 5:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype.insertConversationActive = function(conversationType, receiverId, isSelected) {
        var _a2, _b, _c;
        if (isSelected === void 0) {
          isSelected = true;
        }
        return __awaiter(this, void 0, void 0, function() {
          var conversationId, conversation, error_2;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 5, , 6]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("insertConversationActive", {
                  conversationType,
                  receiverId,
                  isSelected
                });
                conversationId = "";
                if (conversationType === 1) {
                  conversationId = this.nim.V2NIMConversationIdUtil.p2pConversationId(receiverId);
                } else if (conversationType === 2) {
                  conversationId = this.nim.V2NIMConversationIdUtil.teamConversationId(receiverId);
                } else {
                  throw new Error("Unsupported conversation type");
                }
                if (!!this.conversations.has(conversationId))
                  return [3, 2];
                return [
                  4,
                  this.nim.V2NIMConversationService.createConversation(
                    conversationId
                  )
                ];
              case 1:
                conversation = _d.sent();
                this.addConversation([conversation]);
                _d.label = 2;
              case 2:
                if (!isSelected)
                  return [3, 4];
                return [
                  4,
                  this.rootStore.uiStore.selectConversation(conversationId)
                ];
              case 3:
                _d.sent();
                _d.label = 4;
              case 4:
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("insertConversationActive success", {
                  conversationType,
                  receiverId,
                  isSelected
                });
                return [3, 6];
              case 5:
                error_2 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "insertConversationActive failed: ",
                  {
                    conversationType,
                    receiverId,
                    isSelected
                  },
                  error_2
                );
                throw error_2;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype.deleteConversationActive = function(conversationId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_4;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 6, , 7]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("deleteConversationActive", conversationId);
                _d.label = 1;
              case 1:
                _d.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.stickTopConversationActive(conversationId, false)
                ];
              case 2:
                _d.sent();
                return [3, 4];
              case 3:
                _d.sent();
                return [3, 4];
              case 4:
                this.removeConversation([conversationId]);
                return [
                  4,
                  this.nim.V2NIMConversationService.deleteConversation(
                    conversationId,
                    false
                  )
                ];
              case 5:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("deleteConversationActive success");
                return [3, 7];
              case 6:
                error_4 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.warn(
                  "deleteConversationActive failed but continue: ",
                  error_4
                );
                return [3, 7];
              case 7:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype.stickTopConversationActive = function(conversationId, stickTop) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_5;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("stickTopConversationActive", conversationId, stickTop);
                return [
                  4,
                  this.nim.V2NIMConversationService.stickTopConversation(
                    conversationId,
                    stickTop
                  )
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("stickTopConversationActive success");
                return [3, 3];
              case 2:
                error_5 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("stickTopConversationActive failed: ", error_5);
                throw error_5;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype.getConversationListActive = function(offset, limit) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_6;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 3, , 4]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getConversationListActive", offset, limit);
                return [
                  4,
                  this.nim.V2NIMConversationService.getConversationList(
                    offset,
                    limit
                  )
                ];
              case 1:
                res = _d.sent();
                this.addConversation(res.conversationList);
                return [
                  4,
                  this.getP2PMessageReceipt(
                    res.conversationList.filter(function(item) {
                      return item.type === 1;
                    }).map(function(item) {
                      return item.conversationId;
                    })
                  )
                ];
              case 2:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getConversationListActive success", offset, limit, res);
                return [2, res];
              case 3:
                error_6 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "getConversationListActive failed: ",
                  error_6,
                  offset,
                  limit
                );
                throw error_6;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype.getP2PMessageReceipt = function(conversationIds) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, conversations, error_7;
          var _this = this;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getP2PMessageReceipt", conversationIds);
                return [
                  4,
                  Promise.all(
                    conversationIds.map(function(item) {
                      return _this.nim.V2NIMMessageService.getP2PMessageReceipt(
                        item
                      );
                    })
                  )
                ];
              case 1:
                res = _d.sent();
                conversations = res.map(function(item) {
                  var conversation = _this.conversations.get(item.conversationId);
                  if (conversation) {
                    return __assign(__assign({}, conversation), {
                      msgReceiptTime: item.timestamp
                    });
                  }
                }).filter(function(item) {
                  return !!item;
                });
                this.updateConversation(conversations);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getP2PMessageReceipt success", conversationIds, res);
                return [2, res];
              case 2:
                error_7 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "getP2PMessageReceipt failed: ",
                  error_7,
                  conversationIds
                );
                throw error_7;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype._resetMemoryConversationUnreadCount = function(conversation) {
        var newConversation = this.conversations.get(conversation.conversationId);
        if (newConversation) {
          this.updateConversation([
            __assign(__assign({}, newConversation), { unreadCount: 0 })
          ]);
        }
      };
      ConversationStore2.prototype.getConversationReadTimeActive = function(conversationId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_8;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getConversationReadTimeActive", conversationId);
                return [
                  4,
                  this.nim.V2NIMConversationService.getConversationReadTime(
                    conversationId
                  )
                ];
              case 1:
                res = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "getConversationReadTimeActive success",
                  conversationId,
                  res
                );
                return [2, res];
              case 2:
                error_8 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "getConversationReadTimeActive failed: ",
                  error_8,
                  conversationId
                );
                throw error_8;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype.markConversationReadActive = function(conversationId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_9;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("markConversationReadActive", conversationId);
                return [
                  4,
                  this.nim.V2NIMConversationService.markConversationRead(
                    conversationId
                  )
                ];
              case 1:
                res = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "markConversationReadActive success",
                  conversationId,
                  res
                );
                return [2, res];
              case 2:
                error_9 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "markConversationReadActive failed: ",
                  error_9,
                  conversationId
                );
                throw error_9;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      ConversationStore2.prototype.handleConversationWithAit = function(msgs) {
        var _this = this;
        msgs.map(function(item) {
          return __awaiter(_this, void 0, void 0, function() {
            var hasAitMsg, conversationReadTime, isCurConversation, isSendFromMe, conversation, aitMsgs;
            var _a2;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!(item.conversationType === 2 || item.conversationType === 3))
                    return [3, 2];
                  if (!(item === null || item === void 0 ? void 0 : item.serverExtension))
                    return [3, 2];
                  hasAitMsg = this.hasAitMsg([item.serverExtension]);
                  return [
                    4,
                    this.getConversationReadTimeActive(item.conversationId)
                  ];
                case 1:
                  conversationReadTime = _b.sent();
                  isCurConversation = item.conversationId == this.rootStore.uiStore.selectedConversation;
                  isSendFromMe = item.senderId === ((_a2 = this.rootStore.userStore.myUserInfo) === null || _a2 === void 0 ? void 0 : _a2.accountId);
                  if (item.createTime > conversationReadTime && hasAitMsg && !isCurConversation && !isSendFromMe) {
                    conversation = this.conversations.get(item.conversationId);
                    if (conversation) {
                      aitMsgs = conversation.aitMsgs || [];
                      if (aitMsgs.length === 0) {
                        this.updateConversation([
                          __assign(__assign({}, conversation), {
                            aitMsgs: [item.messageClientId]
                          })
                        ]);
                      } else {
                        this.updateConversation([
                          __assign(__assign({}, conversation), {
                            aitMsgs: __spreadArray(
                              __spreadArray([], __read(aitMsgs), false),
                              [item.messageClientId],
                              false
                            )
                          })
                        ]);
                      }
                    }
                  }
                  _b.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        });
      };
      ConversationStore2.prototype.resetConversationAit = function(conversationId) {
        var conversation = this.conversations.get(conversationId);
        if ((conversation === null || conversation === void 0 ? void 0 : conversation.type) === 2 || (conversation === null || conversation === void 0 ? void 0 : conversation.type) === 3) {
          this.updateConversation([
            __assign(__assign({}, conversation), { aitMsgs: [] })
          ]);
        }
      };
      ConversationStore2.prototype.hasAitMsg = function(serverExtensions) {
        var _this = this;
        var flag = false;
        if (serverExtensions === null || serverExtensions === void 0 ? void 0 : serverExtensions.length) {
          serverExtensions === null || serverExtensions === void 0 ? void 0 : serverExtensions.forEach(function(item) {
            var _a2, _b;
            try {
              var extObj = JSON.parse(item || "{}");
              var yxAitMsg = extObj.yxAitMsg;
              var account_1 = _this.rootStore.userStore.myUserInfo.accountId;
              if (yxAitMsg) {
                ;
                (_a2 = Object.keys(yxAitMsg)) === null || _a2 === void 0 ? void 0 : _a2.forEach(function(key) {
                  if (key === account_1 || key === AT_ALL_ACCOUNT) {
                    flag = true;
                  }
                });
              }
            } catch (_c) {
              (_b = _this.logger) === null || _b === void 0 ? void 0 : _b.error("parse serverExtension failed: ", item);
            }
          });
        }
        return flag;
      };
      ConversationStore2.prototype._onSyncStarted = function() {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onSyncStarted");
      };
      ConversationStore2.prototype._onSyncFinished = function() {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_c) {
            (_a2 = this.rootStore.conversationStore) === null || _a2 === void 0 ? void 0 : _a2.getConversationListActive(
              0,
              this.rootStore.localOptions.conversationLimit || 100
            );
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("_onSyncFinished");
            return [
              2
              /*return*/
            ];
          });
        });
      };
      ConversationStore2.prototype._onSyncFailed = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onSyncFailed", e2);
      };
      ConversationStore2.prototype._onConversationCreated = function(data2) {
        var _this = this;
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onConversationCreated", data2);
        if (data2.type === 2) {
          this.nim.V2NIMConversationService.getConversation(
            data2.conversationId
          ).then(function(conversation) {
            _this.addConversation([conversation]);
            if (conversation.lastMessage) {
              _this.handleConversationWithAit([
                __assign(
                  __assign({}, conversation.lastMessage),
                  conversation.lastMessage.messageRefer
                )
              ]);
            }
          });
        } else {
          this.addConversation([data2]);
        }
      };
      ConversationStore2.prototype._onConversationDeleted = function(conversationIds) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onConversationDeleted", conversationIds);
        this.removeConversation(conversationIds);
      };
      ConversationStore2.prototype._onConversationChanged = function(data2) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          var _this = this;
          return __generator(this, function(_b) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onConversationChanged", data2);
            this.addConversation(data2);
            data2.forEach(function(item) {
              return __awaiter(_this, void 0, void 0, function() {
                var attachment, type;
                var _a3, _b2, _c, _d;
                return __generator(this, function(_e2) {
                  switch (_e2.label) {
                    case 0:
                      attachment = (_a3 = item.lastMessage) === null || _a3 === void 0 ? void 0 : _a3.attachment;
                      type = attachment === null || attachment === void 0 ? void 0 : attachment.type;
                      if (!(((_b2 = item.lastMessage) === null || _b2 === void 0 ? void 0 : _b2.messageType) === 5 && (type === 1 && ((_c = attachment === null || attachment === void 0 ? void 0 : attachment.targetIds) === null || _c === void 0 ? void 0 : _c.includes(
                        this.rootStore.userStore.myUserInfo.accountId
                      )) || type === 2 && ((_d = item.lastMessage) === null || _d === void 0 ? void 0 : _d.messageRefer.senderId) === this.rootStore.userStore.myUserInfo.accountId || type === 4)))
                        return [3, 2];
                      return [
                        4,
                        this.deleteConversationActive(item.conversationId)
                      ];
                    case 1:
                      _e2.sent();
                      return [3, 4];
                    case 2:
                      if (!(this.rootStore.uiStore.selectedConversation === item.conversationId))
                        return [3, 4];
                      return [
                        4,
                        this.resetConversation(item.conversationId)
                      ];
                    case 3:
                      _e2.sent();
                      _e2.label = 4;
                    case 4:
                      if (item.type === 2 && item.unreadCount == 0) {
                        this.resetConversationAit(item.conversationId);
                      }
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      ConversationStore2.prototype._onTotalUnreadCountChanged = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onTotalUnreadCountChanged", data2);
        this.totalUnreadCount = data2;
      };
      return ConversationStore2;
    }()
  );
  var TeamStore = (
    /** @class */
    function() {
      function TeamStore2(rootStore, nim, localOptions) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.localOptions = localOptions;
        this.teams = /* @__PURE__ */ new Map();
        this.logger = null;
        makeAutoObservable(this);
        this.logger = rootStore.logger;
        this._onReceiveTeamJoinActionInfo = this._onReceiveTeamJoinActionInfo.bind(this);
        this._onSyncFailed = this._onSyncFailed.bind(this);
        this._onSyncFinished = this._onSyncFinished.bind(this);
        this._onSyncStarted = this._onSyncStarted.bind(this);
        this._onTeamCreated = this._onTeamCreated.bind(this);
        this._onTeamDismissed = this._onTeamDismissed.bind(this);
        this._onTeamInfoUpdated = this._onTeamInfoUpdated.bind(this);
        this._onTeamJoined = this._onTeamJoined.bind(this);
        this._onTeamLeft = this._onTeamLeft.bind(this);
        this._onTeamMemberInfoUpdated = this._onTeamMemberInfoUpdated.bind(this);
        this._onTeamMemberJoined = this._onTeamMemberJoined.bind(this);
        this._onTeamMemberKicked = this._onTeamMemberKicked.bind(this);
        this._onTeamMemberLeft = this._onTeamMemberLeft.bind(this);
        nim.V2NIMTeamService.on(
          "onReceiveTeamJoinActionInfo",
          this._onReceiveTeamJoinActionInfo
        );
        nim.V2NIMTeamService.on("onSyncFailed", this._onSyncFailed);
        nim.V2NIMTeamService.on("onSyncFinished", this._onSyncFinished);
        nim.V2NIMTeamService.on("onSyncStarted", this._onSyncStarted);
        nim.V2NIMTeamService.on("onTeamCreated", this._onTeamCreated);
        nim.V2NIMTeamService.on("onTeamDismissed", this._onTeamDismissed);
        nim.V2NIMTeamService.on("onTeamInfoUpdated", this._onTeamInfoUpdated);
        nim.V2NIMTeamService.on("onTeamJoined", this._onTeamJoined);
        nim.V2NIMTeamService.on("onTeamLeft", this._onTeamLeft);
        nim.V2NIMTeamService.on(
          "onTeamMemberInfoUpdated",
          this._onTeamMemberInfoUpdated
        );
        nim.V2NIMTeamService.on("onTeamMemberJoined", this._onTeamMemberJoined);
        nim.V2NIMTeamService.on("onTeamMemberKicked", this._onTeamMemberKicked);
        nim.V2NIMTeamService.on("onTeamMemberLeft", this._onTeamMemberLeft);
        nim.V2NIMSettingService.on(
          "onTeamMessageMuteModeChanged",
          this._onTeamMessageMuteModeChanged
        );
      }
      TeamStore2.prototype.resetState = function() {
        this.teams.clear();
      };
      TeamStore2.prototype.destroy = function() {
        this.resetState();
        this.nim.V2NIMTeamService.off(
          "onReceiveTeamJoinActionInfo",
          this._onReceiveTeamJoinActionInfo
        );
        this.nim.V2NIMTeamService.off("onSyncFailed", this._onSyncFailed);
        this.nim.V2NIMTeamService.off("onSyncFinished", this._onSyncFinished);
        this.nim.V2NIMTeamService.off("onSyncStarted", this._onSyncStarted);
        this.nim.V2NIMTeamService.off("onTeamCreated", this._onTeamCreated);
        this.nim.V2NIMTeamService.off("onTeamDismissed", this._onTeamDismissed);
        this.nim.V2NIMTeamService.off("onTeamInfoUpdated", this._onTeamInfoUpdated);
        this.nim.V2NIMTeamService.off("onTeamJoined", this._onTeamJoined);
        this.nim.V2NIMTeamService.off("onTeamLeft", this._onTeamLeft);
        this.nim.V2NIMTeamService.off(
          "onTeamMemberInfoUpdated",
          this._onTeamMemberInfoUpdated
        );
        this.nim.V2NIMTeamService.off(
          "onTeamMemberJoined",
          this._onTeamMemberJoined
        );
        this.nim.V2NIMTeamService.off(
          "onTeamMemberKicked",
          this._onTeamMemberKicked
        );
        this.nim.V2NIMTeamService.off("onTeamMemberLeft", this._onTeamMemberLeft);
        this.nim.V2NIMSettingService.off(
          "onTeamMessageMuteModeChanged",
          this._onTeamMessageMuteModeChanged
        );
      };
      TeamStore2.prototype.addTeam = function(teams) {
        var _this = this;
        teams.filter(function(item) {
          return !!item.isValidTeam;
        }).filter(function(item) {
          return !!item.teamId;
        }).forEach(function(item) {
          _this.teams.set(item.teamId, item);
        });
      };
      TeamStore2.prototype.removeTeam = function(teamIds) {
        var _this = this;
        teamIds.forEach(function(item) {
          _this.teams.delete(item);
        });
      };
      TeamStore2.prototype.updateTeam = function(data2) {
        var _this = this;
        data2.filter(function(item) {
          return !!item.teamId;
        }).forEach(function(item) {
          var oldTeam = _this.teams.get(item.teamId);
          if (oldTeam) {
            var newTeam = __assign(__assign({}, oldTeam), item);
            _this.teams.set(item.teamId, newTeam);
          }
        });
      };
      TeamStore2.prototype.createTeamActive = function(_a2) {
        var _b, _c, _d;
        var accounts = _a2.accounts, _e2 = _a2.type, type = _e2 === void 0 ? 1 : _e2, avatar = _a2.avatar, name2 = _a2.name, intro = _a2.intro, serverExtension = _a2.serverExtension;
        return __awaiter(this, void 0, void 0, function() {
          var team, error_1;
          return __generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                _f.trys.push([0, 2, , 3]);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("createTeamActive", {
                  accounts,
                  avatar,
                  name: name2
                });
                return [
                  4,
                  this.nim.V2NIMTeamService.createTeam(
                    {
                      avatar,
                      teamType: type,
                      joinMode: this.localOptions.teamJoinMode,
                      agreeMode: this.localOptions.teamAgreeMode,
                      inviteMode: this.localOptions.teamInviteMode,
                      updateInfoMode: this.localOptions.teamUpdateTeamMode,
                      updateExtensionMode: this.localOptions.teamUpdateExtMode,
                      name: name2,
                      intro,
                      serverExtension
                    },
                    accounts,
                    ""
                  )
                ];
              case 1:
                team = _f.sent().team;
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("createTeamActive success", team);
                return [2, team];
              case 2:
                error_1 = _f.sent();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(
                  "createTeamActive failed: ",
                  { accounts, avatar, name: name2 },
                  error_1,
                  error_1.code,
                  error_1.detail
                );
                throw error_1;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.applyTeamActive = function(teamId, type) {
        var _a2, _b, _c;
        if (type === void 0) {
          type = 1;
        }
        return __awaiter(this, void 0, void 0, function() {
          var error_2;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("applyTeamActive", teamId);
                return [
                  4,
                  this.nim.V2NIMTeamService.applyJoinTeam(teamId, type)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("applyTeamActive success", teamId);
                return [3, 3];
              case 2:
                error_2 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("applyTeamActive failed: ", teamId, error_2);
                throw error_2;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.leaveTeamActive = function(teamId, type) {
        var _a2, _b, _c;
        if (type === void 0) {
          type = 1;
        }
        return __awaiter(this, void 0, void 0, function() {
          var error_3;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("leaveTeamActive", teamId);
                return [
                  4,
                  this.nim.V2NIMTeamService.leaveTeam(teamId, type)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("leaveTeamActive success", teamId);
                return [3, 3];
              case 2:
                error_3 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("leaveTeamActive failed: ", teamId, error_3);
                throw error_3;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.dismissTeamActive = function(teamId, type) {
        var _a2, _b, _c;
        if (type === void 0) {
          type = 1;
        }
        return __awaiter(this, void 0, void 0, function() {
          var error_4;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("dismissTeamActive", teamId);
                return [
                  4,
                  this.nim.V2NIMTeamService.dismissTeam(teamId, type)
                  // 会收到一条 onDissmiss 事件
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("dismissTeamActive success", teamId);
                return [3, 3];
              case 2:
                error_4 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("dismissTeamActive failed: ", teamId, error_4);
                throw error_4;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.transferTeamActive = function(_a2) {
        var _b, _c, _d;
        var teamId = _a2.teamId, _e2 = _a2.type, type = _e2 === void 0 ? 1 : _e2, account = _a2.account, leave = _a2.leave;
        return __awaiter(this, void 0, void 0, function() {
          var error_5;
          return __generator(this, function(_f) {
            switch (_f.label) {
              case 0:
                _f.trys.push([0, 2, , 3]);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("transferTeamActive", {
                  teamId,
                  type,
                  account,
                  leave
                });
                return [
                  4,
                  this.nim.V2NIMTeamService.transferTeamOwner(
                    teamId,
                    type,
                    account,
                    leave !== null && leave !== void 0 ? leave : this.localOptions.leaveOnTransfer
                  )
                ];
              case 1:
                _f.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("transferTeamActive success", {
                  teamId,
                  type,
                  account,
                  leave
                });
                return [3, 3];
              case 2:
                error_5 = _f.sent();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(
                  "transferTeamActive failed: ",
                  {
                    teamId,
                    type,
                    account,
                    leave
                  },
                  error_5
                );
                throw error_5;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.setTeamChatBannedActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_6;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("muteTeamActive", options);
                return [
                  4,
                  this.nim.V2NIMTeamService.setTeamChatBannedMode(
                    options.teamId,
                    options.type || 1,
                    options.chatBannedMode
                  )
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("muteTeamActive success", options);
                return [3, 3];
              case 2:
                error_6 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("muteTeamActive failed: ", options, error_6);
                throw error_6;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.updateTeamActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var teamId, _d, type, info, error_7;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("updateTeamActive", options);
                teamId = options.teamId, _d = options.type, type = _d === void 0 ? 1 : _d, info = options.info;
                return [
                  4,
                  this.nim.V2NIMTeamService.updateTeamInfo(teamId, type, info)
                  // 后续在事件中处理
                ];
              case 1:
                _e2.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("updateTeamActive success", options);
                return [3, 3];
              case 2:
                error_7 = _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("updateTeamActive failed: ", options, error_7);
                throw error_7;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.getTeamActive = function(teamId, type) {
        var _a2;
        if (type === void 0) {
          type = 1;
        }
        return __awaiter(this, void 0, void 0, function() {
          var team;
          return __generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getTeamActive: ", teamId);
                team = this.teams.get(teamId);
                if (team) {
                  return [2, team];
                }
                return [4, this.getTeamForceActive(teamId, type)];
              case 1:
                team = _b.sent();
                this.addTeam([team]);
                return [2, team];
            }
          });
        });
      };
      TeamStore2.prototype.getTeamForceActive = function(teamId, type) {
        var _a2, _b, _c;
        if (type === void 0) {
          type = 1;
        }
        return __awaiter(this, void 0, void 0, function() {
          var res, error_8;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getTeamForceActive: ", teamId);
                return [
                  4,
                  this.nim.V2NIMTeamService.getTeamInfo(teamId, type)
                ];
              case 1:
                res = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getTeamForceActive success", res);
                return [2, res];
              case 2:
                error_8 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("getTeamForceActive failed: ", teamId, error_8);
                throw error_8;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.setTeamMessageMuteModeActive = function(teamId, teamType, muteMode) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_9;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("setTeamMessageMuteModeActive", {
                  teamId,
                  teamType,
                  muteMode
                });
                return [
                  4,
                  this.nim.V2NIMSettingService.setTeamMessageMuteMode(
                    teamId,
                    teamType,
                    muteMode
                  )
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("setTeamMessageMuteModeActive success", {
                  teamId,
                  teamType,
                  muteMode
                });
                return [3, 3];
              case 2:
                error_9 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "setTeamMessageMuteModeActive failed: ",
                  { teamId, teamType, muteMode },
                  error_9
                );
                throw error_9;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.acceptTeamInviteActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_10;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("acceptTeamInviteActive: ", options);
                return [
                  4,
                  this.nim.V2NIMTeamService.acceptInvitation(options)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("acceptTeamInviteActive success", options);
                return [3, 3];
              case 2:
                error_10 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("acceptTeamInviteActive failed: ", options, error_10);
                throw error_10;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.rejectTeamInviteActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_11;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("rejectTeamInviteActive: ", options);
                return [
                  4,
                  this.nim.V2NIMTeamService.rejectInvitation(options)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("rejectTeamInviteActive success", options);
                return [3, 3];
              case 2:
                error_11 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("rejectTeamInviteActive failed: ", options, error_11);
                throw error_11;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.passTeamApplyActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_12;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("passTeamApplyActive: ", options);
                return [
                  4,
                  this.nim.V2NIMTeamService.acceptJoinApplication(options)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("passTeamApplyActive success", options);
                return [3, 3];
              case 2:
                error_12 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("passTeamApplyActive failed: ", options, error_12);
                throw error_12;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.rejectTeamApplyActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_13;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("rejectTeamApplyActive: ", options);
                return [
                  4,
                  this.nim.V2NIMTeamService.rejectJoinApplication(options)
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("rejectTeamApplyActive success", options);
                return [3, 3];
              case 2:
                error_13 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("rejectTeamApplyActive failed: ", options, error_13);
                throw error_13;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.updateTeamMemberRoleActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var teamId, _d, type, accounts, role, error_14;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("addTeamManagersActive: ", options);
                teamId = options.teamId, _d = options.type, type = _d === void 0 ? 1 : _d, accounts = options.accounts, role = options.role;
                return [
                  4,
                  this.nim.V2NIMTeamService.updateTeamMemberRole(
                    teamId,
                    type,
                    accounts,
                    role
                  )
                ];
              case 1:
                _e2.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("addTeamManagersActive success", options);
                return [3, 3];
              case 2:
                error_14 = _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("addTeamManagersActive failed: ", options, error_14);
                throw error_14;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.getTeamJoinActionInfoListActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_15;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getTeamJoinActionInfoListActive: ", options);
                return [
                  4,
                  this.nim.V2NIMTeamService.getTeamJoinActionInfoList(options)
                ];
              case 1:
                res = _d.sent();
                this.rootStore.sysMsgStore.addTeamJoinActionMsg(res.infos);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getTeamJoinActionInfoListActive success", res);
                return [2, res];
              case 2:
                error_15 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "getTeamJoinActionInfoListActive failed: ",
                  options,
                  error_15
                );
                throw error_15;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.getJoinedTeamListActive = function() {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var teams, error_16;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getJoinedTeamListActive");
                return [
                  4,
                  this.nim.V2NIMTeamService.getJoinedTeamList([1])
                ];
              case 1:
                teams = _d.sent();
                this.addTeam(teams);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getJoinedTeamListActive success", teams);
                return [2, teams];
              case 2:
                error_16 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("getJoinedTeamListActive failed: ", error_16);
                throw error_16;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype.getTeamMessageMuteModeActive = function(teamId, teamType) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var muteMode, error_17;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getTeamMessageMuteModeActive", teamId, teamType);
                return [
                  4,
                  this.nim.V2NIMSettingService.getTeamMessageMuteMode(
                    teamId,
                    teamType
                  )
                ];
              case 1:
                muteMode = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getTeamMessageMuteModeActive success", teamId, teamType);
                return [2, muteMode];
              case 2:
                error_17 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "getTeamMessageMuteModeActive failed: ",
                  teamId,
                  teamType,
                  error_17
                );
                throw error_17;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamStore2.prototype._onReceiveTeamJoinActionInfo = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onReceiveTeamJoinActionInfo: ", data2);
        this.rootStore.sysMsgStore.addTeamJoinActionMsg([data2]);
      };
      TeamStore2.prototype._onSyncFailed = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onSyncFailed: ", data2);
      };
      TeamStore2.prototype._onSyncFinished = function() {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_c) {
            (_a2 = this.rootStore.conversationStore) === null || _a2 === void 0 ? void 0 : _a2.getConversationListActive(
              0,
              this.rootStore.localOptions.conversationLimit || 100
            );
            (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("V2NIMTeamService _onSyncFinished");
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TeamStore2.prototype._onSyncStarted = function() {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onSyncStarted");
      };
      TeamStore2.prototype._onTeamCreated = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamCreated: ", data2);
        this.addTeam([data2]);
      };
      TeamStore2.prototype._onTeamDismissed = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamDismissed: ", data2);
        this._handleRemoveTeam(data2.teamId);
      };
      TeamStore2.prototype._onTeamInfoUpdated = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamInfoUpdated: ", data2);
        this.updateTeam([data2]);
      };
      TeamStore2.prototype._onTeamJoined = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamJoined: ", data2);
        this.addTeam([data2]);
      };
      TeamStore2.prototype._onTeamLeft = function(data2) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_b) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamLeft: ", data2);
            this._handleRemoveTeam(data2.teamId);
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TeamStore2.prototype._onTeamMemberInfoUpdated = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamMemberInfoUpdated: ", data2);
        var teamId = data2[0].teamId;
        this.rootStore.teamMemberStore.updateTeamMember(teamId, data2);
      };
      TeamStore2.prototype._onTeamMemberJoined = function(data2) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          var teamId;
          return __generator(this, function(_b) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamMemberJoined: ", data2);
            teamId = data2[0].teamId;
            this.rootStore.teamMemberStore.addTeamMember(teamId, data2);
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TeamStore2.prototype._onTeamMemberKicked = function(opeartorId, data2) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          var teamId;
          return __generator(this, function(_b) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamMemberKicked: ", opeartorId, data2);
            teamId = data2[0].teamId;
            this.rootStore.teamMemberStore.removeTeamMember(
              teamId,
              data2.map(function(item) {
                return item.accountId;
              })
            );
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TeamStore2.prototype._onTeamMemberLeft = function(data2) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          var teamId;
          return __generator(this, function(_b) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("V2NIMTeamService _onTeamMemberLeft: ", data2);
            teamId = data2[0].teamId;
            this.rootStore.teamMemberStore.removeTeamMember(
              teamId,
              data2.map(function(item) {
                return item.accountId;
              })
            );
            return [
              2
              /*return*/
            ];
          });
        });
      };
      TeamStore2.prototype._handleRemoveTeam = function(teamId) {
        this.removeTeam([teamId]);
        this.rootStore.teamMemberStore.removeTeamMember(teamId);
      };
      TeamStore2.prototype._onTeamMessageMuteModeChanged = function(teamId, teamType, muteMode) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
          "V2NIMTeamService _onTeamMessageMuteModeChanged: ",
          teamId,
          teamType,
          muteMode
        );
      };
      return TeamStore2;
    }()
  );
  var TeamMemberStore = (
    /** @class */
    function() {
      function TeamMemberStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.teamMembers = /* @__PURE__ */ new Map();
        this.logger = null;
        makeAutoObservable(this);
        this.logger = rootStore.logger;
      }
      TeamMemberStore2.prototype.resetState = function() {
        this.teamMembers.clear();
      };
      TeamMemberStore2.prototype.destroy = function() {
        this.resetState();
      };
      TeamMemberStore2.prototype.addTeamMemberActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var teamId, _d, type, accounts, ps2, error_1;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("addTeamMemberActive", options);
                teamId = options.teamId, _d = options.type, type = _d === void 0 ? 1 : _d, accounts = options.accounts, ps2 = options.ps;
                return [
                  4,
                  this.nim.V2NIMTeamService.inviteMember(
                    teamId,
                    type,
                    accounts,
                    ps2
                  )
                  // 事件中处理
                ];
              case 1:
                _e2.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("addTeamMemberActive success", options);
                return [3, 3];
              case 2:
                error_1 = _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("addTeamMemberActive failed: ", options, error_1);
                throw error_1;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamMemberStore2.prototype.removeTeamMemberActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var teamId, _d, type, accounts, error_2;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("removeTeamMemberActive", options);
                teamId = options.teamId, _d = options.type, type = _d === void 0 ? 1 : _d, accounts = options.accounts;
                return [
                  4,
                  this.nim.V2NIMTeamService.kickMember(teamId, type, accounts)
                  // 事件中处理
                ];
              case 1:
                _e2.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("removeTeamMemberActive success", options);
                return [3, 3];
              case 2:
                error_2 = _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("removeTeamMemberActive failed: ", options, error_2);
                throw error_2;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamMemberStore2.prototype.getTeamMemberActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var teamId, queryOption, _d, type, res, error_3;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getTeamMemberActive", options);
                teamId = options.teamId, queryOption = options.queryOption, _d = options.type, type = _d === void 0 ? 1 : _d;
                return [
                  4,
                  this.nim.V2NIMTeamService.getTeamMemberList(
                    teamId,
                    type,
                    queryOption
                  )
                ];
              case 1:
                res = _e2.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "getTeamMemberActive success: ",
                  teamId,
                  type,
                  queryOption,
                  res
                );
                this.setTeamMembers(teamId, res.memberList);
                return [2, res];
              case 2:
                error_3 = _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("getTeamMemberActive failed: ", options, error_3);
                throw error_3;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamMemberStore2.prototype.updateMyMemberInfoActive = function(options) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var teamId, _d, type, memberInfo, error_4;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("updateMyMemberInfo", options);
                teamId = options.teamId, _d = options.type, type = _d === void 0 ? 1 : _d, memberInfo = options.memberInfo;
                return [
                  4,
                  this.nim.V2NIMTeamService.updateSelfTeamMemberInfo(
                    teamId,
                    type,
                    memberInfo
                  )
                ];
              case 1:
                _e2.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("updateMyMemberInfo success: ", options);
                return [3, 3];
              case 2:
                error_4 = _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("updateMyMemberInfo failed: ", options, error_4);
                throw error_4;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      TeamMemberStore2.prototype.setTeamMembers = function(teamId, members) {
        var teamMembers = /* @__PURE__ */ new Map();
        members.forEach(function(item) {
          teamMembers.set(item.accountId, item);
        });
        this.teamMembers.set(teamId, teamMembers);
      };
      TeamMemberStore2.prototype.addTeamMember = function(teamId, members) {
        var teamMembers = this.teamMembers.get(teamId);
        if (!teamMembers) {
          teamMembers = /* @__PURE__ */ new Map();
        }
        members.filter(function(item) {
          return !!item.inTeam;
        }).filter(function(item) {
          return !!item.accountId;
        }).forEach(function(item) {
          teamMembers.set(item.accountId, item);
        });
        this.teamMembers.set(teamId, teamMembers);
      };
      TeamMemberStore2.prototype.removeTeamMember = function(teamId, accounts) {
        if (!accounts || !accounts.length) {
          this.teamMembers.delete(teamId);
          return;
        }
        var teamMembers = this.teamMembers.get(teamId);
        if (!teamMembers) {
          return;
        }
        accounts.forEach(function(item) {
          teamMembers.delete(item);
        });
        this.teamMembers.set(teamId, teamMembers);
      };
      TeamMemberStore2.prototype.updateTeamMember = function(teamId, members) {
        var teamMembers = this.teamMembers.get(teamId);
        if (!teamMembers) {
          return;
        }
        members.forEach(function(item) {
          var m2 = teamMembers.get(item.accountId);
          if (m2) {
            m2 = __assign(__assign({}, m2), item);
            teamMembers.set(item.accountId, m2);
          }
        });
        this.teamMembers.set(teamId, teamMembers);
      };
      TeamMemberStore2.prototype.getTeamMember = function(teamId, accounts) {
        var _a2;
        var teamMembers = __spreadArray(
          [],
          __read(
            ((_a2 = this.teamMembers.get(teamId)) === null || _a2 === void 0 ? void 0 : _a2.values()) || []
          ),
          false
        );
        if (!accounts || !accounts.length) {
          return teamMembers;
        }
        return teamMembers.filter(function(item) {
          return accounts.some(function(j2) {
            return j2 === item.accountId;
          });
        });
      };
      return TeamMemberStore2;
    }()
  );
  var SysMsgStore = (
    /** @class */
    function() {
      function SysMsgStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.friendApplyMsg = /* @__PURE__ */ new Map();
        this.teamJoinActionMsg = /* @__PURE__ */ new Map();
        this.logger = null;
        makeAutoObservable(this);
        this.logger = rootStore.logger;
      }
      SysMsgStore2.prototype.resetState = function() {
        this.friendApplyMsg.clear();
        this.teamJoinActionMsg.clear();
      };
      SysMsgStore2.prototype.destroy = function() {
        this.resetState();
      };
      Object.defineProperty(SysMsgStore2.prototype, "friendApplyMsgs", {
        get: function() {
          return Array.from(this.friendApplyMsg.values()).sort(function(a2, b2) {
            return b2.timestamp - a2.timestamp;
          });
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(SysMsgStore2.prototype, "teamJoinActionMsgs", {
        get: function() {
          return Array.from(this.teamJoinActionMsg.values()).sort(function(a2, b2) {
            return b2.timestamp - a2.timestamp;
          });
        },
        enumerable: false,
        configurable: true
      });
      SysMsgStore2.prototype.addFriendApplyMsg = function(msgs) {
        var _this = this;
        msgs.forEach(function(msg) {
          var key = _this.createFriendApplyMsgKey(msg);
          _this.friendApplyMsg.set(key, msg);
        });
      };
      SysMsgStore2.prototype.deleteFriendApplyMsg = function(msgs) {
        var _this = this;
        msgs.forEach(function(msg) {
          var key = _this.createFriendApplyMsgKey(msg);
          _this.friendApplyMsg.delete(key);
        });
      };
      SysMsgStore2.prototype.updateFriendApplyMsg = function(msgs) {
        var _this = this;
        msgs.forEach(function(msg) {
          var key = _this.createFriendApplyMsgKey(msg);
          var oldMsg = _this.friendApplyMsg.get(key);
          if (oldMsg) {
            _this.friendApplyMsg.set(key, __assign(__assign({}, oldMsg), msg));
          }
        });
      };
      SysMsgStore2.prototype.addTeamJoinActionMsg = function(msgs) {
        var _this = this;
        msgs.forEach(function(msg) {
          var key = _this.createTeamJoinActionMsgKey(msg);
          _this.teamJoinActionMsg.set(key, msg);
        });
      };
      SysMsgStore2.prototype.deleteTeamJoinActionMsg = function(msgs) {
        var _this = this;
        msgs.forEach(function(msg) {
          var key = _this.createTeamJoinActionMsgKey(msg);
          _this.teamJoinActionMsg.delete(key);
        });
      };
      SysMsgStore2.prototype.updateTeamJoinActionMsg = function(msgs) {
        var _this = this;
        msgs.forEach(function(msg) {
          var key = _this.createTeamJoinActionMsgKey(msg);
          var oldMsg = _this.teamJoinActionMsg.get(key);
          var newMsg = __assign(__assign({}, oldMsg), msg);
          _this.teamJoinActionMsg.set(key, newMsg);
        });
      };
      SysMsgStore2.prototype.getUnreadFriendApplyMsgsCount = function() {
        return this.friendApplyMsgs.filter(function(msg) {
          return !msg.isRead;
        }).length;
      };
      SysMsgStore2.prototype.getUnreadTeamJoinActionMsgsCount = function() {
        return this.teamJoinActionMsgs.filter(function(msg) {
          return !msg.isRead;
        }).length;
      };
      SysMsgStore2.prototype.getTotalUnreadMsgsCount = function() {
        return this.getUnreadFriendApplyMsgsCount() + this.getUnreadTeamJoinActionMsgsCount();
      };
      SysMsgStore2.prototype.setAllApplyMsgRead = function() {
        this.updateFriendApplyMsg(
          this.friendApplyMsgs.map(function(msg) {
            return __assign(__assign({}, msg), { isRead: true });
          })
        );
        this.updateTeamJoinActionMsg(
          this.teamJoinActionMsgs.map(function(msg) {
            return __assign(__assign({}, msg), { isRead: true });
          })
        );
      };
      SysMsgStore2.prototype.createTeamJoinActionMsgKey = function(msg) {
        return "".concat(msg.teamId, "_").concat(msg.operatorAccountId);
      };
      SysMsgStore2.prototype.createFriendApplyMsgKey = function(msg) {
        return "".concat(msg.applicantAccountId, "_").concat(msg.recipientAccountId);
      };
      return SysMsgStore2;
    }()
  );
  var UserStore = (
    /** @class */
    function() {
      function UserStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.users = /* @__PURE__ */ new Map();
        this.myUserInfo = {
          accountId: this.nim.V2NIMLoginService.getLoginUser(),
          name: "",
          createTime: Date.now(),
          updateTime: Date.now()
        };
        this.logger = null;
        this._getUserInfo = frequencyControl(this._getUserInfos, 1e3, 100);
        makeAutoObservable(this);
        this._onUserProfileChanged = this._onUserProfileChanged.bind(this);
        this.logger = rootStore.logger;
        nim.V2NIMUserService.on("onUserProfileChanged", this._onUserProfileChanged);
      }
      UserStore2.prototype.resetState = function() {
        this.users.clear();
        this.myUserInfo = {
          accountId: this.nim.V2NIMLoginService.getLoginUser(),
          name: "",
          createTime: Date.now(),
          updateTime: Date.now()
        };
      };
      UserStore2.prototype.destroy = function() {
        this.resetState();
        this.nim.V2NIMUserService.off(
          "onUserProfileChanged",
          this._onUserProfileChanged
        );
      };
      UserStore2.prototype.addUsers = function(users) {
        var _this = this;
        users.filter(function(item) {
          return !!item.accountId;
        }).forEach(function(item) {
          _this.users.set(item.accountId, item);
        });
      };
      UserStore2.prototype.removeUsers = function(accounts) {
        var _this = this;
        accounts.forEach(function(item) {
          _this.users.delete(item);
        });
      };
      UserStore2.prototype.getMyUserServerExt = function() {
        var _a2;
        var serverExt = {};
        try {
          serverExt = JSON.parse(
            ((_a2 = this.myUserInfo) === null || _a2 === void 0 ? void 0 : _a2.serverExtension) || "{}"
          );
        } catch (error) {
        }
        return serverExt;
      };
      UserStore2.prototype.updateSelfUserProfileActive = function(updateParams, fileObj) {
        var _a2, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function() {
          var task, avatarUrl, error_1, error_2;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                _e2.trys.push([0, 6, , 7]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("updateSelfUserProfileActive", updateParams, fileObj);
                if (!fileObj)
                  return [3, 4];
                _e2.label = 1;
              case 1:
                _e2.trys.push([1, 3, , 4]);
                task = this.nim.V2NIMStorageService.createUploadFileTask({
                  fileObj
                });
                return [
                  4,
                  this.nim.V2NIMStorageService.uploadFile(task, function() {
                  })
                ];
              case 2:
                avatarUrl = _e2.sent();
                updateParams.avatar = avatarUrl;
                return [3, 4];
              case 3:
                error_1 = _e2.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn("upload avatar error and save continue.", error_1);
                return [3, 4];
              case 4:
                return [
                  4,
                  this.nim.V2NIMUserService.updateSelfUserProfile(updateParams)
                ];
              case 5:
                _e2.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log(
                  "updateSelfUserProfileActive success",
                  updateParams,
                  fileObj
                );
                return [3, 7];
              case 6:
                error_2 = _e2.sent();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(
                  "updateSelfUserProfileActive failed:",
                  updateParams,
                  error_2,
                  fileObj
                );
                throw error_2;
              case 7:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      UserStore2.prototype.getUserActive = function(accountId) {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          var user;
          return __generator(this, function(_c) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getUserListActive", accountId);
            user = this.users.get(accountId);
            if (user) {
              (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getUserListActive success", user, accountId);
              return [2, user];
            }
            return [2, this.getUserForceActive(accountId)];
          });
        });
      };
      UserStore2.prototype.getUserForceActive = function(accountId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var user, error_3;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getUserListForceActive", accountId);
                return [4, this._getUserInfo(accountId)];
              case 1:
                user = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getUserListForceActive success", user, accountId);
                return [2, user];
              case 2:
                error_3 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("getUserListForceActive failed: ", accountId, error_3);
                throw error_3;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      UserStore2.prototype.getMyUserInfoActive = function() {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var myUserInfo, error_4;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getMyUserInfoActive");
                return [
                  4,
                  this.nim.V2NIMUserService.getUserList([
                    this.nim.V2NIMLoginService.getLoginUser()
                  ])
                ];
              case 1:
                myUserInfo = _d.sent();
                this.myUserInfo = myUserInfo[0];
                this.addUsers(myUserInfo);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getMyUserInfoActive success", myUserInfo);
                return [2, myUserInfo[0]];
              case 2:
                error_4 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("getMyUserInfoActive failed: ", error_4);
                throw error_4;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      UserStore2.prototype._getUserInfos = function(accountIds) {
        return __awaiter(this, void 0, void 0, function() {
          var users;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [
                  4,
                  this.nim.V2NIMUserService.getUserList(accountIds)
                ];
              case 1:
                users = _a2.sent();
                this.addUsers(users);
                return [2, users];
            }
          });
        });
      };
      UserStore2.prototype._onUserProfileChanged = function(data2) {
        var _this = this;
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onUserProfileChanged: ", data2);
        data2.forEach(function(item) {
          if (item.accountId === _this.myUserInfo.accountId) {
            _this.myUserInfo = item;
          }
        });
        this.addUsers(data2);
      };
      return UserStore2;
    }()
  );
  var AIUserStore = (
    /** @class */
    function() {
      function AIUserStore2(rootStore, nim, localOptions) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.localOptions = localOptions;
        this.aiUsers = /* @__PURE__ */ new Map();
        this.aiReqMsgs = [];
        this.aiResMsgs = [];
        this.logger = null;
        this.onSendAIProxyErrorHandler = function() {
        };
        this.requestId = "";
        this.proxyAccountId = "";
        makeAutoObservable(this);
        this.logger = rootStore.logger;
        this._onProxyAIModelCall = this._onProxyAIModelCall.bind(this);
        this.nim.V2NIMAIService.on("onProxyAIModelCall", this._onProxyAIModelCall);
      }
      Object.defineProperty(AIUserStore2.prototype, "aiProxying", {
        get: function() {
          return this.aiReqMsgs.length > this.aiResMsgs.length;
        },
        enumerable: false,
        configurable: true
      });
      AIUserStore2.prototype.resetState = function() {
        this.aiUsers.clear();
        this.aiReqMsgs = [];
        this.aiResMsgs = [];
      };
      AIUserStore2.prototype.destroy = function() {
        this.resetState();
        this.nim.V2NIMAIService.off("onProxyAIModelCall", this._onProxyAIModelCall);
      };
      AIUserStore2.prototype.addAIUsers = function(aiUsers) {
        var _this = this;
        aiUsers.filter(function(item) {
          return !!item.accountId;
        }).forEach(function(item) {
          _this.aiUsers.set(item.accountId, item);
        });
      };
      AIUserStore2.prototype.removeAIUsers = function(accounts) {
        var _this = this;
        accounts.forEach(function(item) {
          _this.aiUsers.delete(item);
        });
      };
      AIUserStore2.prototype.getAIUserList = function(accountIds) {
        var aiUsers = __spreadArray([], __read(this.aiUsers.values()), false);
        var sortHandler = function(a2, b2) {
          return b2.createTime - a2.createTime;
        };
        if (accountIds && accountIds.length) {
          return aiUsers.filter(function(item) {
            return accountIds.includes(item.accountId);
          }).sort(sortHandler);
        }
        return aiUsers.sort(sortHandler);
      };
      AIUserStore2.prototype.getAISearchUser = function() {
        var _a2, _b;
        var aiUsers = this.getAIUserList();
        return (_b = (_a2 = this.localOptions.aiUserAgentProvider) === null || _a2 === void 0 ? void 0 : _a2.getAISearchUser) === null || _b === void 0 ? void 0 : _b.call(_a2, aiUsers);
      };
      AIUserStore2.prototype.getAITranslateUser = function() {
        var _a2, _b;
        var aiUsers = this.getAIUserList();
        return (_b = (_a2 = this.localOptions.aiUserAgentProvider) === null || _a2 === void 0 ? void 0 : _a2.getAITranslateUser) === null || _b === void 0 ? void 0 : _b.call(_a2, aiUsers);
      };
      AIUserStore2.prototype.getAITranslateLangs = function() {
        var _a2, _b;
        var aiUsers = this.getAIUserList();
        return ((_b = (_a2 = this.localOptions.aiUserAgentProvider) === null || _a2 === void 0 ? void 0 : _a2.getAITranslateLangs) === null || _b === void 0 ? void 0 : _b.call(_a2, aiUsers)) || [];
      };
      AIUserStore2.prototype.getAIUserServerExt = function(accountId) {
        var aiUser = this.aiUsers.get(accountId);
        if (!aiUser) {
          return {};
        }
        try {
          return JSON.parse(aiUser.serverExtension || "{}");
        } catch (error) {
          return {};
        }
      };
      AIUserStore2.prototype.getAIChatUser = function() {
        var _this = this;
        var aiUsers = this.getAIUserList();
        return aiUsers.filter(function(item) {
          var serverExt = _this.getAIUserServerExt(item.accountId);
          return serverExt.aiChat === 1;
        });
      };
      AIUserStore2.prototype.getAIPinDefaultUser = function() {
        var _this = this;
        var aiUsers = this.getAIUserList();
        return aiUsers.filter(function(item) {
          var serverExt = _this.getAIUserServerExt(item.accountId);
          return serverExt.pinDefault === 1;
        });
      };
      AIUserStore2.prototype.getAIPinUser = function() {
        var myUserServerExt = this.rootStore.userStore.getMyUserServerExt();
        return this.getAIPinDefaultUser().filter(function(item) {
          var _a2;
          return !((_a2 = myUserServerExt.unpinAIUsers) === null || _a2 === void 0 ? void 0 : _a2.includes(item.accountId));
        });
      };
      AIUserStore2.prototype.isAIPinUser = function(accountId) {
        return this.getAIPinUser().some(function(item) {
          return item.accountId === accountId;
        });
      };
      AIUserStore2.prototype.isAISearching = function() {
        var _a2;
        return this.proxyAccountId === ((_a2 = this.getAISearchUser()) === null || _a2 === void 0 ? void 0 : _a2.accountId);
      };
      AIUserStore2.prototype.isAITranslating = function() {
        var _a2;
        return this.proxyAccountId === ((_a2 = this.getAITranslateUser()) === null || _a2 === void 0 ? void 0 : _a2.accountId);
      };
      AIUserStore2.prototype.resetAIProxy = function() {
        this.requestId = "";
        this.aiReqMsgs = [];
        this.aiResMsgs = [];
        this.proxyAccountId = "";
        this.onSendAIProxyErrorHandler = function() {
        };
      };
      AIUserStore2.prototype.getAIUserListActive = function() {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var aiUsers, error_1;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("getAIUserListActive");
                return [4, this.nim.V2NIMAIService.getAIUserList()];
              case 1:
                aiUsers = _d.sent();
                this.addAIUsers(aiUsers);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("getAIUserListActive success:", aiUsers);
                return [3, 3];
              case 2:
                error_1 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("getAIUserListActive failed:", error_1);
                return [3, 3];
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      AIUserStore2.prototype.sendAIProxyActive = function(params) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var finalParams, error_2;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("sendAIProxyActive", params);
                finalParams = __assign({}, params);
                if (params.requestId) {
                  this.resetAIProxy();
                  this.requestId = params.requestId;
                  this.proxyAccountId = params.accountId;
                } else {
                  finalParams.requestId = this.requestId;
                }
                if (params.onSendAIProxyErrorHandler) {
                  this.onSendAIProxyErrorHandler = params.onSendAIProxyErrorHandler;
                }
                return [
                  4,
                  this.nim.V2NIMAIService.proxyAIModelCall(finalParams)
                ];
              case 1:
                _d.sent();
                this.aiReqMsgs.push(params.content);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log("sendAIProxyActive success:", params);
                return [3, 3];
              case 2:
                error_2 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error("sendAIProxyActive failed:", error_2.toString());
                this.onSendAIProxyErrorHandler(error_2.code);
                throw error_2;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      AIUserStore2.prototype._onProxyAIModelCall = function(res) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("_onProxyAIModelCall", res);
        if (this.requestId === res.requestId) {
          if (res.code === 200) {
            this.aiResMsgs.push(res.content.msg);
          } else {
            this.aiReqMsgs.pop();
            this.onSendAIProxyErrorHandler(res.code);
          }
        }
      };
      return AIUserStore2;
    }()
  );
  var UiStore = (
    /** @class */
    function() {
      function UiStore2(rootStore) {
        this.rootStore = rootStore;
        this.selectedContactType = "";
        this.selectedConversation = "";
        this.logger = null;
        makeAutoObservable(this);
        this.logger = rootStore.logger;
      }
      UiStore2.prototype.resetState = function() {
        this.selectedContactType = "";
        this.selectedConversation = "";
      };
      UiStore2.prototype.destroy = function() {
        this.resetState();
      };
      UiStore2.prototype.selectContactType = function(contactType) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("selectContactType: ", contactType);
        this.selectedContactType = contactType;
      };
      UiStore2.prototype.unselectContactType = function() {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("unselectContactType");
        this.selectedContactType = "";
      };
      UiStore2.prototype.selectConversation = function(conversationId) {
        var _a2, _b, _c, _d, _e2, _f;
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_g) {
            switch (_g.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("selectConversation: ", conversationId);
                if (conversationId === this.selectedConversation) {
                  return [
                    2
                    /*return*/
                  ];
                }
                this.rootStore.msgStore.msgs.resetLimitState();
                this.selectedConversation = conversationId;
                if (!conversationId)
                  return [3, 4];
                if (!((_b = this.rootStore.sdkOptions) === null || _b === void 0 ? void 0 : _b.enableV2CloudConversation))
                  return [3, 2];
                (_c = this.rootStore.conversationStore) === null || _c === void 0 ? void 0 : _c.resetConversationAit(conversationId);
                return [
                  4,
                  (_d = this.rootStore.conversationStore) === null || _d === void 0 ? void 0 : _d.resetConversation(conversationId)
                ];
              case 1:
                _g.sent();
                return [3, 4];
              case 2:
                (_e2 = this.rootStore.localConversationStore) === null || _e2 === void 0 ? void 0 : _e2.resetConversationAit(conversationId);
                return [
                  4,
                  (_f = this.rootStore.localConversationStore) === null || _f === void 0 ? void 0 : _f.resetConversation(conversationId)
                ];
              case 3:
                _g.sent();
                _g.label = 4;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      UiStore2.prototype.unselectConversation = function() {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("unselectConversation");
        this.selectedConversation = "";
        this.rootStore.msgStore.msgs.resetLimitState();
      };
      UiStore2.prototype.getRelation = function(account) {
        var res = "stranger";
        if (this.rootStore.userStore.myUserInfo.accountId === account) {
          res = "myself";
        } else if (this.rootStore.aiUserStore.aiUsers.has(account)) {
          res = "ai";
        } else if (this.rootStore.friendStore.friends.has(account)) {
          res = "friend";
        } else {
          res = "stranger";
        }
        return {
          relation: res,
          isInBlacklist: this.rootStore.relationStore.isInBlacklist(account)
        };
      };
      UiStore2.prototype.getFriendWithUserNameCard = function(account) {
        var friend = this.rootStore.friendStore.friends.get(account) || {
          accountId: "",
          serverExtension: "",
          customerExtension: ""
        };
        var userCard = this.rootStore.userStore.users.get(account) || {
          accountId: "",
          name: "",
          createTime: Date.now()
        };
        return __assign(__assign({}, friend), userCard);
      };
      UiStore2.prototype.getAppellation = function(_a2) {
        var _b;
        var account = _a2.account, _c = _a2.teamId, teamId = _c === void 0 ? "" : _c, _d = _a2.ignoreAlias, ignoreAlias = _d === void 0 ? false : _d, _e2 = _a2.nickFromMsg, nickFromMsg = _e2 === void 0 ? "" : _e2;
        var aiUser = this.rootStore.aiUserStore.aiUsers.get(account);
        if (aiUser) {
          return aiUser.name || account;
        }
        var friend = this.rootStore.friendStore.friends.get(account);
        var user = this.rootStore.userStore.users.get(account);
        var teamMember = (_b = this.rootStore.teamMemberStore.teamMembers.get(teamId)) === null || _b === void 0 ? void 0 : _b.get(account);
        return !ignoreAlias && (friend === null || friend === void 0 ? void 0 : friend.alias) || (teamMember === null || teamMember === void 0 ? void 0 : teamMember.teamNick) || (user === null || user === void 0 ? void 0 : user.name) || nickFromMsg || account;
      };
      Object.defineProperty(UiStore2.prototype, "friends", {
        get: function() {
          return __spreadArray(
            [],
            __read(this.rootStore.friendStore.friends.values()),
            false
          );
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UiStore2.prototype, "conversations", {
        get: function() {
          var _a2;
          return ((_a2 = this.rootStore.conversationStore) === null || _a2 === void 0 ? void 0 : _a2.conversations.values()) ? __spreadArray(
            [],
            __read(this.rootStore.conversationStore.conversations.values()),
            false
          ) : [];
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UiStore2.prototype, "localConversations", {
        get: function() {
          var _a2;
          return ((_a2 = this.rootStore.localConversationStore) === null || _a2 === void 0 ? void 0 : _a2.conversations.values()) ? __spreadArray(
            [],
            __read(
              this.rootStore.localConversationStore.conversations.values()
            ),
            false
          ) : [];
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UiStore2.prototype, "users", {
        get: function() {
          return __spreadArray(
            [],
            __read(this.rootStore.userStore.users.values()),
            false
          );
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UiStore2.prototype, "teamList", {
        get: function() {
          var teams = __spreadArray(
            [],
            __read(this.rootStore.teamStore.teams.values()),
            false
          );
          return teams.filter(function(item) {
            return item.isValidTeam;
          }).sort(function(a2, b2) {
            return b2.createTime - a2.createTime;
          });
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(UiStore2.prototype, "applyMsgs", {
        get: function() {
          return __spreadArray(
            [],
            __read(this.rootStore.sysMsgStore.friendApplyMsg.values()),
            false
          );
        },
        enumerable: false,
        configurable: true
      });
      return UiStore2;
    }()
  );
  var StorageStore = (
    /** @class */
    function() {
      function StorageStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        makeAutoObservable(this);
      }
      StorageStore2.prototype.uploadFileActive = function(fileObj) {
        return __awaiter(this, void 0, void 0, function() {
          var errorContent, avatarUrl, task, error_1;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                logger.log("uploadFileActive", fileObj);
                if (!fileObj) {
                  errorContent = "upload avatar error, no file or filepath";
                  logger.warn(errorContent);
                  throw new Error(errorContent);
                }
                avatarUrl = "";
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 4]);
                task = this.nim.V2NIMStorageService.createUploadFileTask({
                  fileObj
                });
                return [
                  4,
                  this.nim.V2NIMStorageService.uploadFile(task, function() {
                  })
                ];
              case 2:
                avatarUrl = _a2.sent();
                return [3, 4];
              case 3:
                error_1 = _a2.sent();
                logger.warn("upload avatar error ", error_1);
                throw error_1;
              case 4:
                return [2, avatarUrl];
            }
          });
        });
      };
      return StorageStore2;
    }()
  );
  var name = "nim-web-sdk-ng";
  var version = "10.8.10";
  var sdk = {
    version: 100810,
    versionFormat: "10.8.10"
  };
  var description = "Yunxin IM SDK next generation";
  var main = "./dist/v2/NIM_BROWSER_SDK.js";
  var types = "./dist/v2/NIM_BROWSER_SDK/index.d.ts";
  var scripts = {
    test: "jest --maxWorkers 1 --silent",
    lint: "npx eslint ./src",
    dev: "cd pages/ && npm run dev",
    clean: "rm -rf ./dist",
    emitTypes: "tsc --emitDeclarationOnly --declaration --declarationDir temp/types",
    "build:esm": "npm run emitTypes && rollup --config ./build/esm.config.js",
    build: "npm run clean && npm run emitTypes && node script/copyPlugin.js && rollup --config ./build/v1.config.js && rollup --config ./build/v2.config.js && rollup --config ./build/esm.config.js",
    analyze: 'npm run clean && npx rollup --config ./build/analyze.config.js && ls -lhR dist | grep ".js"',
    "pages:build": "cd pages/ && npm install && npm run build && cp -rf dist/ ../dist/",
    api: "npm run translate && node script/buildApi.js",
    translate: "rm -rf ./apidocs && multilingual-tool convert --indir=src/typings --outdir=apidocs --includes=ts",
    "api-diff": "multilingual-tool diff --dir=src/typings --receiver=3070898 --exclude=DS_Store",
    updateVerInNdp: "node ./script/updateVerInNdp.js"
  };
  var repository = {
    type: "git",
    url: "ssh://git@g.hz.netease.com:22222/yunxin/im/sdk.git"
  };
  var keywords = ["im", "sdk"];
  var author = "yunxin";
  var license = "ISC";
  var eslintIgnore = ["dist/"];
  var files = [
    "README.md",
    "CHANGELOG.md",
    "dist/v1/CHATROOM*",
    "dist/v1/QCHAT*",
    "dist/v2/NIM*",
    "dist/v2/CHATROOM*",
    "dist/esm/*"
  ];
  var devDependencies = {
    "@babel/core": "^7.13.15",
    "@babel/plugin-proposal-class-properties": "^7.13.0",
    "@babel/plugin-transform-block-scoping": "^7.23.4",
    "@babel/plugin-transform-runtime": "^7.13.15",
    "@babel/preset-env": "^7.13.15",
    "@babel/preset-typescript": "^7.13.0",
    "@babel/runtime": "^7.13.10",
    "@babel/runtime-corejs3": "^7.13.10",
    "@microsoft/api-extractor": "^7.19.4",
    "@rollup/plugin-babel": "^5.3.0",
    "@rollup/plugin-commonjs": "^18.0.0",
    "@rollup/plugin-json": "^4.1.0",
    "@rollup/plugin-node-resolve": "^11.2.1",
    "@rollup/plugin-replace": "^3.0.0",
    "@rollup/plugin-typescript": "^8.3.0",
    "@types/backo2": "^1.0.1",
    "@types/jest": "^27.4.1",
    "@types/lodash": "^4.14.177",
    "@types/platform": "^1.3.3",
    "@typescript-eslint/eslint-plugin": "^5.12.0",
    "@typescript-eslint/parser": "^5.12.0",
    "@yxfe/multilingual-tool": "^1.0.30",
    "@yxfe/nim-log-reporter": "^1.0.3",
    "@yxfe/nos-uploader": "^1.0.28",
    "@yxfe/request": "^0.2.12",
    backo2: "^1.0.2",
    "browser-md5-file": "^1.1.1",
    "core-js": "^3.10.1",
    "cross-env": "^7.0.3",
    eslint: "^8.9.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^4.0.0",
    eventemitter3: "^4.0.7",
    husky: "^7.0.4",
    jest: "^27.5.1",
    "lodash-es": "^4.17.21",
    "neroom-web-sdk": "1.7.0",
    platform: "^1.3.6",
    "pre-commit": "^1.2.2",
    prettier: "^2.6.1",
    "react-native": "^0.75.2",
    rollup: "^2.45.2",
    "rollup-plugin-banner": "^0.2.1",
    "rollup-plugin-banner2": "^1.2.2",
    "rollup-plugin-copy": "^3.4.0",
    "rollup-plugin-insert": "^1.3.2",
    "rollup-plugin-terser": "^7.0.2",
    "rollup-plugin-visualizer": "^5.12.0",
    "ts-jest": "^27.1.4",
    tslib: "^2.3.1",
    typedoc: "^0.22.11",
    typescript: "^4.5.4"
  };
  var sdkPkg = {
    name,
    version,
    sdk,
    description,
    main,
    types,
    scripts,
    repository,
    keywords,
    author,
    license,
    eslintIgnore,
    files,
    devDependencies
  };
  var LocalConversationStore = (
    /** @class */
    function() {
      function LocalConversationStore2(rootStore, nim) {
        this.rootStore = rootStore;
        this.nim = nim;
        this.conversations = /* @__PURE__ */ new Map();
        this.totalUnreadCount = 0;
        this.logger = null;
        makeAutoObservable(this);
        this._onSyncStarted = this._onSyncStarted.bind(this);
        this._onSyncFinished = this._onSyncFinished.bind(this);
        this._onSyncFailed = this._onSyncFailed.bind(this);
        this._onConversationCreated = this._onConversationCreated.bind(this);
        this._onConversationDeleted = this._onConversationDeleted.bind(this);
        this._onConversationChanged = this._onConversationChanged.bind(this);
        this._onTotalUnreadCountChanged = this._onTotalUnreadCountChanged.bind(this);
        this.logger = rootStore.logger;
        nim.V2NIMLocalConversationService.on("onSyncStarted", this._onSyncStarted);
        nim.V2NIMLocalConversationService.on("onSyncFinished", this._onSyncFinished);
        nim.V2NIMLocalConversationService.on("onSyncFailed", this._onSyncFailed);
        nim.V2NIMLocalConversationService.on(
          "onConversationCreated",
          this._onConversationCreated
        );
        nim.V2NIMLocalConversationService.on(
          "onConversationDeleted",
          this._onConversationDeleted
        );
        nim.V2NIMLocalConversationService.on(
          "onConversationChanged",
          this._onConversationChanged
        );
        nim.V2NIMLocalConversationService.on(
          "onTotalUnreadCountChanged",
          this._onTotalUnreadCountChanged
        );
      }
      LocalConversationStore2.prototype.resetState = function() {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore Conversation resetState");
        this.conversations.clear();
        this.totalUnreadCount = 0;
      };
      LocalConversationStore2.prototype.destroy = function() {
        this.resetState();
        this.nim.V2NIMLocalConversationService.off(
          "onSyncStarted",
          this._onSyncStarted
        );
        this.nim.V2NIMLocalConversationService.off(
          "onSyncFinished",
          this._onSyncFinished
        );
        this.nim.V2NIMLocalConversationService.off(
          "onSyncFailed",
          this._onSyncFailed
        );
        this.nim.V2NIMLocalConversationService.off(
          "onConversationCreated",
          this._onConversationCreated
        );
        this.nim.V2NIMLocalConversationService.off(
          "onConversationDeleted",
          this._onConversationDeleted
        );
        this.nim.V2NIMLocalConversationService.off(
          "onConversationChanged",
          this._onConversationChanged
        );
        this.nim.V2NIMLocalConversationService.off(
          "onTotalUnreadCountChanged",
          this._onTotalUnreadCountChanged
        );
      };
      LocalConversationStore2.prototype.addConversation = function(conversations) {
        var _this = this;
        conversations.filter(function(item) {
          return !!item.conversationId;
        }).filter(function(item) {
          return [
            1,
            2
          ].includes(item.type);
        }).forEach(function(item) {
          return __awaiter(_this, void 0, void 0, function() {
            var oldConversation;
            return __generator(this, function(_a2) {
              oldConversation = this.conversations.get(item.conversationId);
              this.conversations.set(
                item.conversationId,
                __assign(__assign({}, oldConversation), item)
              );
              return [
                2
                /*return*/
              ];
            });
          });
        });
      };
      LocalConversationStore2.prototype.updateConversation = function(conversations) {
        var _this = this;
        conversations.filter(function(item) {
          return !!item.conversationId;
        }).filter(function(item) {
          return [
            1,
            2
          ].includes(item.type);
        }).forEach(function(item) {
          var oldConversation = _this.conversations.get(item.conversationId);
          _this.conversations.set(
            item.conversationId,
            __assign(__assign({}, oldConversation), item)
          );
        });
      };
      LocalConversationStore2.prototype.removeConversation = function(conversationIds) {
        var _this = this;
        conversationIds.forEach(function(item) {
          _this.conversations.delete(item);
          if (_this.rootStore.uiStore.selectedConversation === item) {
            _this.rootStore.uiStore.unselectConversation();
          }
        });
      };
      LocalConversationStore2.prototype.resetConversation = function(conversationId) {
        var _a2, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function() {
          var conversation, error_1;
          return __generator(this, function(_e2) {
            switch (_e2.label) {
              case 0:
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "LocalConversationStore resetConversation",
                  conversationId
                );
                conversation = this.conversations.get(conversationId);
                if (!conversation) {
                  (_b = this.logger) === null || _b === void 0 ? void 0 : _b.warn(
                    "LocalConversationStore resetConversation: conversation is not found.",
                    conversationId
                  );
                  return [
                    2
                    /*return*/
                  ];
                }
                _e2.label = 1;
              case 1:
                _e2.trys.push([1, 4, , 5]);
                if (!conversation.unreadCount)
                  return [3, 3];
                this._resetMemoryConversationUnreadCount(conversation);
                return [
                  4,
                  this.nim.V2NIMLocalConversationService.clearUnreadCountByIds([
                    conversation.conversationId
                  ])
                ];
              case 2:
                _e2.sent();
                this._resetMemoryConversationUnreadCount(conversation);
                _e2.label = 3;
              case 3:
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("LocalConversationStore resetConversation success");
                return [3, 5];
              case 4:
                error_1 = _e2.sent();
                (_d = this.logger) === null || _d === void 0 ? void 0 : _d.error(
                  "LocalConversationStore resetConversation failed: ",
                  error_1
                );
                throw error_1;
              case 5:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype.insertConversationActive = function(conversationType, receiverId, isSelected) {
        var _a2, _b, _c;
        if (isSelected === void 0) {
          isSelected = true;
        }
        return __awaiter(this, void 0, void 0, function() {
          var conversationId, conversation, error_2;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 5, , 6]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore insertConversationActive", {
                  conversationType,
                  receiverId,
                  isSelected
                });
                conversationId = "";
                if (conversationType === 1) {
                  conversationId = this.nim.V2NIMConversationIdUtil.p2pConversationId(receiverId);
                } else if (conversationType === 2) {
                  conversationId = this.nim.V2NIMConversationIdUtil.teamConversationId(receiverId);
                } else {
                  throw new Error("Unsupported conversation type");
                }
                if (!!this.conversations.has(conversationId))
                  return [3, 2];
                return [
                  4,
                  this.nim.V2NIMLocalConversationService.createConversation(
                    conversationId
                  )
                ];
              case 1:
                conversation = _d.sent();
                this.addConversation([conversation]);
                _d.label = 2;
              case 2:
                if (!isSelected)
                  return [3, 4];
                return [
                  4,
                  this.rootStore.uiStore.selectConversation(conversationId)
                ];
              case 3:
                _d.sent();
                _d.label = 4;
              case 4:
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "LocalConversationStore insertConversationActive success",
                  {
                    conversationType,
                    receiverId,
                    isSelected
                  }
                );
                return [3, 6];
              case 5:
                error_2 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "LocalConversationStore insertConversationActive failed: ",
                  {
                    conversationType,
                    receiverId,
                    isSelected
                  },
                  error_2
                );
                throw error_2;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype.deleteConversationActive = function(conversationId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_4;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 6, , 7]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "LocalConversationStore deleteConversationActive",
                  conversationId
                );
                _d.label = 1;
              case 1:
                _d.trys.push([1, 3, , 4]);
                return [
                  4,
                  this.stickTopConversationActive(conversationId, false)
                ];
              case 2:
                _d.sent();
                return [3, 4];
              case 3:
                _d.sent();
                return [3, 4];
              case 4:
                this.removeConversation([conversationId]);
                return [
                  4,
                  this.nim.V2NIMLocalConversationService.deleteConversation(
                    conversationId,
                    false
                  )
                ];
              case 5:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "LocalConversationStore deleteConversationActive success"
                );
                return [3, 7];
              case 6:
                error_4 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.warn(
                  "LocalConversationStore deleteConversationActive failed but continue: ",
                  error_4
                );
                return [3, 7];
              case 7:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype.stickTopConversationActive = function(conversationId, stickTop) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var error_5;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "LocalConversationStore stickTopConversationActive",
                  conversationId,
                  stickTop
                );
                return [
                  4,
                  this.nim.V2NIMLocalConversationService.stickTopConversation(
                    conversationId,
                    stickTop
                  )
                ];
              case 1:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "LocalConversationStore stickTopConversationActive success"
                );
                return [3, 3];
              case 2:
                error_5 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "LocalConversationStore stickTopConversationActive failed: ",
                  error_5
                );
                throw error_5;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype.getConversationListActive = function(offset, limit) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_6;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 3, , 4]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "LocalConversationStore getConversationListActive",
                  offset,
                  limit
                );
                return [
                  4,
                  this.nim.V2NIMLocalConversationService.getConversationList(
                    offset,
                    limit
                  )
                ];
              case 1:
                res = _d.sent();
                this.addConversation(res.conversationList);
                return [
                  4,
                  this.getP2PMessageReceipt(
                    res.conversationList.filter(function(item) {
                      return item.type === 1;
                    }).map(function(item) {
                      return item.conversationId;
                    })
                  )
                ];
              case 2:
                _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "LocalConversationStore getConversationListActive success",
                  offset,
                  limit,
                  res
                );
                return [2, res];
              case 3:
                error_6 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "LocalConversationStore getConversationListActive failed: ",
                  error_6,
                  offset,
                  limit
                );
                throw error_6;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype.getP2PMessageReceipt = function(conversationIds) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, conversations, error_7;
          var _this = this;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "LocalConversationStore getP2PMessageReceipt",
                  conversationIds
                );
                return [
                  4,
                  Promise.all(
                    conversationIds.map(function(item) {
                      return _this.nim.V2NIMMessageService.getP2PMessageReceipt(
                        item
                      );
                    })
                  )
                ];
              case 1:
                res = _d.sent();
                conversations = res.map(function(item) {
                  var conversation = _this.conversations.get(item.conversationId);
                  if (conversation) {
                    return __assign(__assign({}, conversation), {
                      msgReceiptTime: item.timestamp
                    });
                  }
                }).filter(function(item) {
                  return !!item;
                });
                this.updateConversation(conversations);
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "LocalConversationStore getP2PMessageReceipt success",
                  conversationIds,
                  res
                );
                return [2, res];
              case 2:
                error_7 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "LocalConversationStore getP2PMessageReceipt failed: ",
                  error_7,
                  conversationIds
                );
                throw error_7;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype._resetMemoryConversationUnreadCount = function(conversation) {
        var newConversation = this.conversations.get(conversation.conversationId);
        if (newConversation) {
          this.updateConversation([
            __assign(__assign({}, newConversation), { unreadCount: 0 })
          ]);
        }
      };
      LocalConversationStore2.prototype.getConversationReadTimeActive = function(conversationId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_8;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "LocalConversationStore getConversationReadTimeActive",
                  conversationId
                );
                return [
                  4,
                  this.nim.V2NIMLocalConversationService.getConversationReadTime(
                    conversationId
                  )
                ];
              case 1:
                res = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "LocalConversationStore getConversationReadTimeActive success",
                  conversationId,
                  res
                );
                return [2, res];
              case 2:
                error_8 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "LocalConversationStore getConversationReadTimeActive failed: ",
                  error_8,
                  conversationId
                );
                throw error_8;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype.markConversationReadActive = function(conversationId) {
        var _a2, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
          var res, error_9;
          return __generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                _d.trys.push([0, 2, , 3]);
                (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log(
                  "LocalConversationStore markConversationReadActive",
                  conversationId
                );
                return [
                  4,
                  this.nim.V2NIMLocalConversationService.markConversationRead(
                    conversationId
                  )
                ];
              case 1:
                res = _d.sent();
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.log(
                  "LocalConversationStore markConversationReadActive success",
                  conversationId,
                  res
                );
                return [2, res];
              case 2:
                error_9 = _d.sent();
                (_c = this.logger) === null || _c === void 0 ? void 0 : _c.error(
                  "LocalConversationStore markConversationReadActive failed: ",
                  error_9,
                  conversationId
                );
                throw error_9;
              case 3:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      LocalConversationStore2.prototype.handleConversationWithAit = function(msgs) {
        var _this = this;
        msgs.map(function(item) {
          return __awaiter(_this, void 0, void 0, function() {
            var hasAitMsg, conversationReadTime, isCurConversation, isSendFromMe, conversation, aitMsgs;
            var _a2;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!(item.conversationType === 2 || item.conversationType === 3))
                    return [3, 2];
                  if (!(item === null || item === void 0 ? void 0 : item.serverExtension))
                    return [3, 2];
                  hasAitMsg = this.hasAitMsg([item.serverExtension]);
                  return [
                    4,
                    this.getConversationReadTimeActive(item.conversationId)
                  ];
                case 1:
                  conversationReadTime = _b.sent();
                  isCurConversation = item.conversationId == this.rootStore.uiStore.selectedConversation;
                  isSendFromMe = item.senderId === ((_a2 = this.rootStore.userStore.myUserInfo) === null || _a2 === void 0 ? void 0 : _a2.accountId);
                  if (item.createTime > conversationReadTime && hasAitMsg && !isCurConversation && !isSendFromMe) {
                    conversation = this.conversations.get(item.conversationId);
                    if (conversation) {
                      aitMsgs = conversation.aitMsgs || [];
                      if (aitMsgs.length === 0) {
                        this.updateConversation([
                          __assign(__assign({}, conversation), {
                            aitMsgs: [item.messageClientId]
                          })
                        ]);
                      } else {
                        this.updateConversation([
                          __assign(__assign({}, conversation), {
                            aitMsgs: __spreadArray(
                              __spreadArray([], __read(aitMsgs), false),
                              [item.messageClientId],
                              false
                            )
                          })
                        ]);
                      }
                    } else {
                      this.addConversation([
                        //@ts-ignore
                        {
                          conversationId: item.conversationId,
                          type: item.conversationType,
                          aitMsgs: [item.messageClientId]
                        }
                      ]);
                    }
                  }
                  _b.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        });
      };
      LocalConversationStore2.prototype.resetConversationAit = function(conversationId) {
        var conversation = this.conversations.get(conversationId);
        if ((conversation === null || conversation === void 0 ? void 0 : conversation.type) === 2 || (conversation === null || conversation === void 0 ? void 0 : conversation.type) === 3) {
          this.updateConversation([
            __assign(__assign({}, conversation), { aitMsgs: [] })
          ]);
        }
      };
      LocalConversationStore2.prototype.hasAitMsg = function(serverExtensions) {
        var _this = this;
        var flag = false;
        if (serverExtensions === null || serverExtensions === void 0 ? void 0 : serverExtensions.length) {
          serverExtensions === null || serverExtensions === void 0 ? void 0 : serverExtensions.forEach(function(item) {
            var _a2, _b;
            try {
              var extObj = JSON.parse(item || "{}");
              var yxAitMsg = extObj.yxAitMsg;
              var account_1 = _this.rootStore.userStore.myUserInfo.accountId;
              if (yxAitMsg) {
                ;
                (_a2 = Object.keys(yxAitMsg)) === null || _a2 === void 0 ? void 0 : _a2.forEach(function(key) {
                  if (key === account_1 || key === AT_ALL_ACCOUNT) {
                    flag = true;
                  }
                });
              }
            } catch (_c) {
              (_b = _this.logger) === null || _b === void 0 ? void 0 : _b.error(
                "LocalConversationStore parse serverExtension failed: ",
                item
              );
            }
          });
        }
        return flag;
      };
      LocalConversationStore2.prototype._onSyncStarted = function() {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore _onSyncStarted");
      };
      LocalConversationStore2.prototype._onSyncFinished = function() {
        var _a2, _b;
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(_c) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore _onSyncFinished");
            (_b = this.rootStore.localConversationStore) === null || _b === void 0 ? void 0 : _b.getConversationListActive(
              0,
              this.rootStore.localOptions.conversationLimit || 100
            );
            return [
              2
              /*return*/
            ];
          });
        });
      };
      LocalConversationStore2.prototype._onSyncFailed = function(e2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore _onSyncFailed", e2);
      };
      LocalConversationStore2.prototype._onConversationCreated = function(data2) {
        var _this = this;
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore _onConversationCreated", data2);
        if (data2.type === 2) {
          this.nim.V2NIMLocalConversationService.getConversation(
            data2.conversationId
          ).then(function(conversation) {
            _this.addConversation([conversation]);
            if (conversation.lastMessage) {
              _this.handleConversationWithAit([
                __assign(
                  __assign({}, conversation.lastMessage),
                  conversation.lastMessage.messageRefer
                )
              ]);
            }
          });
        } else {
          this.addConversation([data2]);
        }
      };
      LocalConversationStore2.prototype._onConversationDeleted = function(conversationIds) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore _onConversationDeleted", conversationIds);
        this.removeConversation(conversationIds);
      };
      LocalConversationStore2.prototype._onConversationChanged = function(data2) {
        var _a2;
        return __awaiter(this, void 0, void 0, function() {
          var _this = this;
          return __generator(this, function(_b) {
            (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore _onConversationChanged", data2);
            this.addConversation(data2);
            data2.forEach(function(item) {
              return __awaiter(_this, void 0, void 0, function() {
                var attachment, type;
                var _a3, _b2, _c, _d;
                return __generator(this, function(_e2) {
                  switch (_e2.label) {
                    case 0:
                      attachment = (_a3 = item.lastMessage) === null || _a3 === void 0 ? void 0 : _a3.attachment;
                      type = attachment === null || attachment === void 0 ? void 0 : attachment.type;
                      if (!(((_b2 = item.lastMessage) === null || _b2 === void 0 ? void 0 : _b2.messageType) === 5 && (type === 1 && ((_c = attachment === null || attachment === void 0 ? void 0 : attachment.targetIds) === null || _c === void 0 ? void 0 : _c.includes(
                        this.rootStore.userStore.myUserInfo.accountId
                      )) || type === 2 && ((_d = item.lastMessage) === null || _d === void 0 ? void 0 : _d.messageRefer.senderId) === this.rootStore.userStore.myUserInfo.accountId || type === 4)))
                        return [3, 2];
                      return [
                        4,
                        this.deleteConversationActive(item.conversationId)
                      ];
                    case 1:
                      _e2.sent();
                      return [3, 4];
                    case 2:
                      if (!(this.rootStore.uiStore.selectedConversation === item.conversationId))
                        return [3, 4];
                      return [
                        4,
                        this.resetConversation(item.conversationId)
                      ];
                    case 3:
                      _e2.sent();
                      _e2.label = 4;
                    case 4:
                      if (item.type === 2 && item.unreadCount == 0) {
                        this.resetConversationAit(item.conversationId);
                      }
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            });
            return [
              2
              /*return*/
            ];
          });
        });
      };
      LocalConversationStore2.prototype._onTotalUnreadCountChanged = function(data2) {
        var _a2;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("LocalConversationStore _onTotalUnreadCountChanged", data2);
        this.totalUnreadCount = data2;
      };
      return LocalConversationStore2;
    }()
  );
  var RootStore = (
    /** @class */
    function() {
      function RootStore2(nim, localOptions, platform) {
        if (platform === void 0) {
          platform = "Web";
        }
        var _this = this;
        var _a2, _b, _c, _d;
        this.localOptions = {
          addFriendNeedVerify: true,
          teamAgreeMode: 1,
          teamJoinMode: 0,
          teamInviteMode: 0,
          teamUpdateTeamMode: 0,
          teamUpdateExtMode: 1,
          leaveOnTransfer: false,
          needMention: true,
          p2pMsgReceiptVisible: false,
          teamMsgReceiptVisible: false,
          loginStateVisible: false,
          allowTransferTeamOwner: false,
          teamManagerVisible: false,
          aiVisible: true,
          teamManagerLimit: 10,
          sendMsgBefore: function(options) {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a3) {
                return [2, options];
              });
            });
          },
          aiUserAgentProvider: {},
          conversationLimit: 100,
          debug: "debug",
          iconfontUrl: []
        };
        this.sdkOptions = {};
        this.conversationStore = null;
        this.localConversationStore = null;
        this.logger = null;
        makeAutoObservable(this);
        this.nim = nim;
        this.localOptions = __assign(__assign({}, this.localOptions), localOptions);
        this.logger = ((_a2 = this.localOptions) === null || _a2 === void 0 ? void 0 : _a2.debug) == "off" ? null : logDebug$1({
          level: (_b = this.localOptions) === null || _b === void 0 ? void 0 : _b.debug,
          version: packageJson.version,
          appName: packageJson.name,
          needStringify: false
        });
        (_c = this.logger) === null || _c === void 0 ? void 0 : _c.log("store init", {
          localOptions: this.localOptions
        });
        this.sdkOptions = __assign({}, this.nim.getOptions());
        this.connectStore = new ConnectStore(this, nim, this.localOptions);
        this.friendStore = new FriendStore(this, nim);
        this.msgStore = new MsgStore(this, nim, this.localOptions);
        this.relationStore = new RelationStore(this, nim);
        if ((_d = this.sdkOptions) === null || _d === void 0 ? void 0 : _d.enableV2CloudConversation) {
          this.conversationStore = new ConversationStore(this, nim);
        } else {
          this.localConversationStore = new LocalConversationStore(this, nim);
        }
        this.teamStore = new TeamStore(this, nim, this.localOptions);
        this.teamMemberStore = new TeamMemberStore(this, nim);
        this.sysMsgStore = new SysMsgStore(this, nim);
        this.userStore = new UserStore(this, nim);
        this.aiUserStore = new AIUserStore(this, nim, this.localOptions);
        this.uiStore = new UiStore(this);
        this.storageStore = new StorageStore(this, nim);
        var reportComponents = [
          "ContactKit",
          "ConversationKit",
          "ChatKit",
          "SearchKit"
        ];
        reportComponents.forEach(function(item) {
          var eventTracking = new EventTracking$1({
            appKey: _this.nim.options.appkey,
            version: "10.0.0",
            component: item,
            imVersion: sdkPkg.version,
            platform
          });
          eventTracking.track("init", "");
        });
      }
      RootStore2.prototype.resetState = function() {
        var _a2, _b, _c, _d;
        (_a2 = this.logger) === null || _a2 === void 0 ? void 0 : _a2.log("store resetState");
        this.friendStore.resetState();
        this.msgStore.resetState();
        this.relationStore.resetState();
        if ((_b = this.sdkOptions) === null || _b === void 0 ? void 0 : _b.enableV2CloudConversation) {
          (_c = this.conversationStore) === null || _c === void 0 ? void 0 : _c.resetState();
        } else {
          (_d = this.localConversationStore) === null || _d === void 0 ? void 0 : _d.resetState();
        }
        this.teamStore.resetState();
        this.teamMemberStore.resetState();
        this.sysMsgStore.resetState();
        this.userStore.resetState();
        this.aiUserStore.resetState();
        this.uiStore.resetState();
      };
      RootStore2.prototype.destroy = function() {
        var _a2, _b, _c;
        logger.log("store destroyed");
        this.connectStore.destroy();
        this.friendStore.destroy();
        this.msgStore.destroy();
        this.relationStore.destroy();
        if ((_a2 = this.sdkOptions) === null || _a2 === void 0 ? void 0 : _a2.enableV2CloudConversation) {
          (_b = this.conversationStore) === null || _b === void 0 ? void 0 : _b.destroy();
        } else {
          (_c = this.localConversationStore) === null || _c === void 0 ? void 0 : _c.destroy();
        }
        this.teamStore.destroy();
        this.teamMemberStore.destroy();
        this.sysMsgStore.destroy();
        this.userStore.destroy();
        this.aiUserStore.destroy();
        this.uiStore.destroy();
      };
      RootStore2.getInstance = function(nim, localOptions, platform) {
        if (platform === void 0) {
          platform = "Web";
        }
        if (!this.ins) {
          this.ins = new RootStore2(nim, localOptions, platform);
        }
        return this.ins;
      };
      return RootStore2;
    }()
  );
  const _sfc_main = {
    onLaunch() {
      var _a2, _b;
      setLanguage(uni.getStorageSync("switchToEnglishFlag") == "en" ? "en" : "zh");
      if (((_b = (_a2 = uni == null ? void 0 : uni.$UIKitStore) == null ? void 0 : _a2.connectStore) == null ? void 0 : _b.connectStatus) === Ma.V2NIMConnectStatus.V2NIM_CONNECT_STATUS_CONNECTED) {
        return;
      }
      const imOptions = uni.getStorageSync(STORAGE_KEY);
      if (imOptions) {
        this.initNim(imOptions);
      } else {
        customRedirectTo({
          url: isWxApp ? "/pages/index/index" : "/pages/Login/index"
        });
      }
    },
    onShow() {
    },
    onHide() {
    },
    methods: {
      initNim(opts) {
        uni.setStorage({
          key: STORAGE_KEY,
          data: opts
        });
        const enableV2CloudConversation = uni.getStorageSync("enableV2CloudConversation") === "on";
        const nim = uni.$UIKitNIM = _a.getInstance(
          {
            appkey: "3e215d27b6a6a9e27dad7ef36dd5b65c",
            needReconnect: true,
            debugLevel: "debug",
            apiVersion: "v2",
            enableV2CloudConversation
          },
          {
            V2NIMLoginServiceConfig: {
              /**
               * 微信小程序需要使用单独的lbsUrls和linkUrl
               */
              lbsUrls: isWxApp ? ["https://lbs.netease.im/lbs/wxwebconf.jsp"] : ["https://lbs.netease.im/lbs/webconf.jsp"],
              linkUrl: isWxApp ? "wlnimsc0.netease.im" : "weblink.netease.im",
              /**
               * 使用固定设备ID，
               */
              isFixedDeviceId: true
            }
          }
        );
        const store = uni.$UIKitStore = new RootStore(
          // @ts-ignore
          nim,
          {
            // 添加好友是否需要验证
            addFriendNeedVerify: false,
            // 是否需要显示 p2p 消息、p2p会话列表消息已读未读，默认 false
            p2pMsgReceiptVisible: true,
            // 是否需要显示群组消息已读未读，默认 false
            teamMsgReceiptVisible: true,
            // 群组被邀请模式，默认需要验证
            teamAgreeMode: Ma.V2NIMTeamAgreeMode.V2NIM_TEAM_AGREE_MODE_NO_AUTH,
            // 发送消息前回调, 可对消息体进行修改，添加自定义参数
            sendMsgBefore: async (options) => {
              const pushContent = getMsgContentTipByType({
                text: options.msg.text,
                messageType: options.msg.messageType
              });
              const yxAitMsg = options.serverExtension ? options.serverExtension.yxAitMsg : { forcePushIDsList: "[]", needForcePush: false };
              const { forcePushIDsList, needForcePush } = yxAitMsg ? (
                // @ts-ignore
                store.msgStore._formatExtAitToPushInfo(
                  yxAitMsg,
                  options.msg.text
                )
              ) : { forcePushIDsList: "[]", needForcePush: false };
              formatAppLog("log", "at App.vue:140", "forcePushIDsList: ", forcePushIDsList);
              const { conversationId } = options;
              const conversationType = nim.V2NIMConversationIdUtil.parseConversationType(conversationId);
              const targetId = nim.V2NIMConversationIdUtil.parseConversationTargetId(
                conversationId
              );
              JSON.stringify({
                // oppo
                oppoField: {
                  click_action_type: 4,
                  // 参考 oppo 官网
                  click_action_activity: "",
                  // 各端不一样 TODO
                  action_parameters: {
                    sessionId: targetId,
                    sessionType: conversationType
                  }
                  // 自定义
                },
                // vivo
                vivoField: {
                  pushMode: 0
                  //推送模式 0：正式推送；1：测试推送，不填默认为0
                },
                // huawei
                hwField: {
                  click_action: {
                    type: 1,
                    action: ""
                    // 各端不一样 TODO
                  },
                  androidConfig: {
                    category: "IM",
                    data: JSON.stringify({
                      sessionId: targetId,
                      sessionType: conversationType
                    })
                  }
                },
                // 通用
                sessionId: targetId,
                sessionType: conversationType
              });
              const pushConfig = {
                pushEnabled: true,
                pushNickEnabled: true,
                forcePush: needForcePush,
                forcePushContent: pushContent,
                forcePushAccountIds: forcePushIDsList,
                pushPayload: "{}",
                pushContent
              };
              return { ...options, pushConfig };
            }
          },
          "UniApp"
        );
        nim.V2NIMLoginService.login(opts.account, opts.token).then(() => {
          customSwitchTab({
            url: "/pages/Conversation/index"
          });
        });
      },
      logout() {
        uni.removeStorageSync(STORAGE_KEY);
        try {
          nimCallKit.logout({}, (ret) => {
            if (ret.code != 200) {
              formatAppLog("log", "at App.vue:286", "音视频通话插件退出失败");
            } else {
              formatAppLog("log", "at App.vue:288", "音视频通话插件退出成功");
            }
          });
        } catch (error) {
          formatAppLog("log", "at App.vue:292", "音视频通话插件退出失败", error);
        }
        uni.$UIKitNIM.V2NIMLoginService.logout().then(() => {
          uni.$UIKitStore.destroy();
          customReLaunch({
            url: "/pages/Login/index"
          });
        });
      }
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "/Users/yaoshun/Desktop/Uniapp-UIKit/xkit-uniapp/packages/im-uniapp-ui/App.vue"]]);
  function createApp() {
    const app = vue.createVueApp(App);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue);
